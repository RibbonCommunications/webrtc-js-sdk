/**
 * COPYRIGHT Â© 2024 RIBBON COMMUNICATIONS OPERATING COMPANY, INC. ALL RIGHTS RESERVED.
 * This publication and the information contained herein is the property of Ribbon
 * and may not be copied, reproduced or distributed in any form or by any means without
 * the prior written permission of Ribbon.
 *
 * THIS PUBLICATION IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE PUBLICATION OR ITS USE.
 *
 * WebRTC.js
 * webrtc.js
 * Version: 6.12.0-beta.1391
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["WebRTC"] = factory();
	else
		root["WebRTC"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 33316:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $: () => (/* binding */ apply),
  A: () => (/* binding */ ALL),
  B: () => (/* binding */ logError),
  C: () => (/* binding */ CALL),
  D: () => (/* binding */ wrapSagaDispatch),
  E: () => (/* binding */ identity),
  F: () => (/* binding */ FORK),
  G: () => (/* binding */ GET_CONTEXT),
  H: () => (/* binding */ buffers),
  I: () => (/* binding */ detach),
  J: () => (/* binding */ JOIN),
  K: () => (/* binding */ take),
  L: () => (/* binding */ fork),
  M: () => (/* binding */ cancel),
  N: () => (/* binding */ call),
  O: () => (/* binding */ delay),
  P: () => (/* binding */ PUT),
  Q: () => (/* binding */ actionChannel),
  R: () => (/* binding */ RACE),
  S: () => (/* binding */ SELECT),
  T: () => (/* binding */ TAKE),
  U: () => (/* binding */ sliding),
  V: () => (/* binding */ race),
  W: () => (/* binding */ effectTypes),
  X: () => (/* binding */ takeMaybe),
  Y: () => (/* binding */ put),
  Z: () => (/* binding */ putResolve),
  _: () => (/* binding */ io_c3792963_all),
  a: () => (/* binding */ CPS),
  a0: () => (/* binding */ cps),
  a1: () => (/* binding */ spawn),
  a2: () => (/* binding */ join),
  a3: () => (/* binding */ io_c3792963_select),
  a4: () => (/* binding */ cancelled),
  a5: () => (/* binding */ flush),
  a6: () => (/* binding */ getContext),
  a7: () => (/* binding */ setContext),
  b: () => (/* binding */ CANCEL),
  d: () => (/* binding */ ACTION_CHANNEL),
  e: () => (/* binding */ expanding),
  f: () => (/* binding */ CANCELLED),
  g: () => (/* binding */ FLUSH),
  h: () => (/* binding */ SET_CONTEXT),
  i: () => (/* binding */ internalErr),
  j: () => (/* binding */ getMetaInfo),
  k: () => (/* binding */ kTrue),
  l: () => (/* binding */ createAllStyleChildCallbacks),
  m: () => (/* binding */ createEmptyArray),
  n: () => (/* binding */ none),
  o: () => (/* binding */ once),
  p: () => (/* binding */ assignWithSymbols),
  q: () => (/* binding */ makeIterator),
  r: () => (/* binding */ remove),
  s: () => (/* binding */ shouldComplete),
  t: () => (/* binding */ noop),
  u: () => (/* binding */ flatMap),
  v: () => (/* binding */ getLocation),
  y: () => (/* binding */ shouldCancel),
  z: () => (/* binding */ shouldTerminate)
});

// UNUSED EXPORTS: c, w, x

// EXTERNAL MODULE: ../../node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js
var redux_saga_symbols_esm = __webpack_require__(23143);
// EXTERNAL MODULE: ../../node_modules/@redux-saga/core/node_modules/@babel/runtime/helpers/esm/extends.js
var esm_extends = __webpack_require__(84458);
// EXTERNAL MODULE: ../../node_modules/@redux-saga/is/dist/redux-saga-is.esm.js
var redux_saga_is_esm = __webpack_require__(83594);
;// CONCATENATED MODULE: ../../node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js


var MAX_SIGNED_INT = 2147483647;
function delayP(ms, val) {
  if (val === void 0) {
    val = true;
  }

  // https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value
  if (false) {}

  var timeoutId;
  var promise = new Promise(function (resolve) {
    timeoutId = setTimeout(resolve, Math.min(MAX_SIGNED_INT, ms), val);
  });

  promise[redux_saga_symbols_esm/* CANCEL */.n1] = function () {
    clearTimeout(timeoutId);
  };

  return promise;
}

/* harmony default export */ const redux_saga_delay_p_esm = (delayP);

;// CONCATENATED MODULE: ../../node_modules/@redux-saga/core/dist/io-c3792963.js





var konst = function konst(v) {
  return function () {
    return v;
  };
};
var kTrue =
/*#__PURE__*/
konst(true);

var noop = function noop() {};

if (false) {}
var identity = function identity(v) {
  return v;
};
var hasSymbol = typeof Symbol === 'function';
var asyncIteratorSymbol = hasSymbol && Symbol.asyncIterator ? Symbol.asyncIterator : '@@asyncIterator';
function check(value, predicate, error) {
  if (!predicate(value)) {
    throw new Error(error);
  }
}
var assignWithSymbols = function assignWithSymbols(target, source) {
  (0,esm_extends/* default */.Z)(target, source);

  if (Object.getOwnPropertySymbols) {
    Object.getOwnPropertySymbols(source).forEach(function (s) {
      target[s] = source[s];
    });
  }
};
var flatMap = function flatMap(mapper, arr) {
  var _ref;

  return (_ref = []).concat.apply(_ref, arr.map(mapper));
};
function remove(array, item) {
  var index = array.indexOf(item);

  if (index >= 0) {
    array.splice(index, 1);
  }
}
function once(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }

    called = true;
    fn();
  };
}

var kThrow = function kThrow(err) {
  throw err;
};

var kReturn = function kReturn(value) {
  return {
    value: value,
    done: true
  };
};

function makeIterator(next, thro, name) {
  if (thro === void 0) {
    thro = kThrow;
  }

  if (name === void 0) {
    name = 'iterator';
  }

  var iterator = {
    meta: {
      name: name
    },
    next: next,
    throw: thro,
    return: kReturn,
    isSagaIterator: true
  };

  if (typeof Symbol !== 'undefined') {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }

  return iterator;
}
function logError(error, _ref2) {
  var sagaStack = _ref2.sagaStack;

  /*eslint-disable no-console*/
  console.error(error);
  console.error(sagaStack);
}
var internalErr = function internalErr(err) {
  return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: " + err + "\n");
};
var createSetContextWarning = function createSetContextWarning(ctx, props) {
  return (ctx ? ctx + '.' : '') + "setContext(props): argument " + props + " is not a plain object";
};
var FROZEN_ACTION_ERROR = "You can't put (a.k.a. dispatch from saga) frozen actions.\nWe have to define a special non-enumerable property on those actions for scheduling purposes.\nOtherwise you wouldn't be able to communicate properly between sagas & other subscribers (action ordering would become far less predictable).\nIf you are using redux and you care about this behaviour (frozen actions),\nthen you might want to switch to freezing actions in a middleware rather than in action creator.\nExample implementation:\n\nconst freezeActions = store => next => action => next(Object.freeze(action))\n"; // creates empty, but not-holey array

var createEmptyArray = function createEmptyArray(n) {
  return Array.apply(null, new Array(n));
};
var wrapSagaDispatch = function wrapSagaDispatch(dispatch) {
  return function (action) {
    if (false) {}

    return dispatch(Object.defineProperty(action, redux_saga_symbols_esm/* SAGA_ACTION */.Nm, {
      value: true
    }));
  };
};
var shouldTerminate = function shouldTerminate(res) {
  return res === redux_saga_symbols_esm/* TERMINATE */.EO;
};
var shouldCancel = function shouldCancel(res) {
  return res === redux_saga_symbols_esm/* TASK_CANCEL */.Wd;
};
var shouldComplete = function shouldComplete(res) {
  return shouldTerminate(res) || shouldCancel(res);
};
function createAllStyleChildCallbacks(shape, parentCallback) {
  var keys = Object.keys(shape);
  var totalCount = keys.length;

  if (false) {}

  var completedCount = 0;
  var completed;
  var results = (0,redux_saga_is_esm/* array */.IX)(shape) ? createEmptyArray(totalCount) : {};
  var childCallbacks = {};

  function checkEnd() {
    if (completedCount === totalCount) {
      completed = true;
      parentCallback(results);
    }
  }

  keys.forEach(function (key) {
    var chCbAtKey = function chCbAtKey(res, isErr) {
      if (completed) {
        return;
      }

      if (isErr || shouldComplete(res)) {
        parentCallback.cancel();
        parentCallback(res, isErr);
      } else {
        results[key] = res;
        completedCount++;
        checkEnd();
      }
    };

    chCbAtKey.cancel = noop;
    childCallbacks[key] = chCbAtKey;
  });

  parentCallback.cancel = function () {
    if (!completed) {
      completed = true;
      keys.forEach(function (key) {
        return childCallbacks[key].cancel();
      });
    }
  };

  return childCallbacks;
}
function getMetaInfo(fn) {
  return {
    name: fn.name || 'anonymous',
    location: getLocation(fn)
  };
}
function getLocation(instrumented) {
  return instrumented[redux_saga_symbols_esm/* SAGA_LOCATION */.b_];
}

var BUFFER_OVERFLOW = "Channel's Buffer overflow!";
var ON_OVERFLOW_THROW = 1;
var ON_OVERFLOW_DROP = 2;
var ON_OVERFLOW_SLIDE = 3;
var ON_OVERFLOW_EXPAND = 4;
var zeroBuffer = {
  isEmpty: kTrue,
  put: noop,
  take: noop
};

function ringBuffer(limit, overflowAction) {
  if (limit === void 0) {
    limit = 10;
  }

  var arr = new Array(limit);
  var length = 0;
  var pushIndex = 0;
  var popIndex = 0;

  var push = function push(it) {
    arr[pushIndex] = it;
    pushIndex = (pushIndex + 1) % limit;
    length++;
  };

  var take = function take() {
    if (length != 0) {
      var it = arr[popIndex];
      arr[popIndex] = null;
      length--;
      popIndex = (popIndex + 1) % limit;
      return it;
    }
  };

  var flush = function flush() {
    var items = [];

    while (length) {
      items.push(take());
    }

    return items;
  };

  return {
    isEmpty: function isEmpty() {
      return length == 0;
    },
    put: function put(it) {
      if (length < limit) {
        push(it);
      } else {
        var doubledLimit;

        switch (overflowAction) {
          case ON_OVERFLOW_THROW:
            throw new Error(BUFFER_OVERFLOW);

          case ON_OVERFLOW_SLIDE:
            arr[pushIndex] = it;
            pushIndex = (pushIndex + 1) % limit;
            popIndex = pushIndex;
            break;

          case ON_OVERFLOW_EXPAND:
            doubledLimit = 2 * limit;
            arr = flush();
            length = arr.length;
            pushIndex = arr.length;
            popIndex = 0;
            arr.length = doubledLimit;
            limit = doubledLimit;
            push(it);
            break;

          default: // DROP

        }
      }
    },
    take: take,
    flush: flush
  };
}

var none = function none() {
  return zeroBuffer;
};
var fixed = function fixed(limit) {
  return ringBuffer(limit, ON_OVERFLOW_THROW);
};
var dropping = function dropping(limit) {
  return ringBuffer(limit, ON_OVERFLOW_DROP);
};
var sliding = function sliding(limit) {
  return ringBuffer(limit, ON_OVERFLOW_SLIDE);
};
var expanding = function expanding(initialSize) {
  return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
};

var buffers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  none: none,
  fixed: fixed,
  dropping: dropping,
  sliding: sliding,
  expanding: expanding
});

var TAKE = 'TAKE';
var PUT = 'PUT';
var ALL = 'ALL';
var RACE = 'RACE';
var CALL = 'CALL';
var CPS = 'CPS';
var FORK = 'FORK';
var JOIN = 'JOIN';
var CANCEL = 'CANCEL';
var SELECT = 'SELECT';
var ACTION_CHANNEL = 'ACTION_CHANNEL';
var CANCELLED = 'CANCELLED';
var FLUSH = 'FLUSH';
var GET_CONTEXT = 'GET_CONTEXT';
var SET_CONTEXT = 'SET_CONTEXT';

var effectTypes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  TAKE: TAKE,
  PUT: PUT,
  ALL: ALL,
  RACE: RACE,
  CALL: CALL,
  CPS: CPS,
  FORK: FORK,
  JOIN: JOIN,
  CANCEL: CANCEL,
  SELECT: SELECT,
  ACTION_CHANNEL: ACTION_CHANNEL,
  CANCELLED: CANCELLED,
  FLUSH: FLUSH,
  GET_CONTEXT: GET_CONTEXT,
  SET_CONTEXT: SET_CONTEXT
});

var TEST_HINT = '\n(HINT: if you are getting these errors in tests, consider using createMockTask from @redux-saga/testing-utils)';

var makeEffect = function makeEffect(type, payload) {
  var _ref;

  return _ref = {}, _ref[redux_saga_symbols_esm.IO] = true, _ref.combinator = false, _ref.type = type, _ref.payload = payload, _ref;
};

var isForkEffect = function isForkEffect(eff) {
  return effect(eff) && eff.type === FORK;
};

var detach = function detach(eff) {
  if (false) {}

  return makeEffect(FORK, (0,esm_extends/* default */.Z)({}, eff.payload, {
    detached: true
  }));
};
function take(patternOrChannel, multicastPattern) {
  if (patternOrChannel === void 0) {
    patternOrChannel = '*';
  }

  if (false) {}

  if ((0,redux_saga_is_esm/* pattern */.uj)(patternOrChannel)) {
    if ((0,redux_saga_is_esm/* notUndef */.d5)(multicastPattern)) {
      /* eslint-disable no-console */
      console.warn("take(pattern) takes one argument but two were provided. Consider passing an array for listening to several action types");
    }

    return makeEffect(TAKE, {
      pattern: patternOrChannel
    });
  }

  if ((0,redux_saga_is_esm/* multicast */.Om)(patternOrChannel) && (0,redux_saga_is_esm/* notUndef */.d5)(multicastPattern) && (0,redux_saga_is_esm/* pattern */.uj)(multicastPattern)) {
    return makeEffect(TAKE, {
      channel: patternOrChannel,
      pattern: multicastPattern
    });
  }

  if ((0,redux_saga_is_esm/* channel */.CE)(patternOrChannel)) {
    if ((0,redux_saga_is_esm/* notUndef */.d5)(multicastPattern)) {
      /* eslint-disable no-console */
      console.warn("take(channel) takes one argument but two were provided. Second argument is ignored.");
    }

    return makeEffect(TAKE, {
      channel: patternOrChannel
    });
  }

  if (false) {}
}
var takeMaybe = function takeMaybe() {
  var eff = take.apply(void 0, arguments);
  eff.payload.maybe = true;
  return eff;
};
function put(channel$1, action) {
  if (false) {}

  if ((0,redux_saga_is_esm/* undef */.sR)(action)) {
    action = channel$1; // `undefined` instead of `null` to make default parameter work

    channel$1 = undefined;
  }

  return makeEffect(PUT, {
    channel: channel$1,
    action: action
  });
}
var putResolve = function putResolve() {
  var eff = put.apply(void 0, arguments);
  eff.payload.resolve = true;
  return eff;
};
function io_c3792963_all(effects) {
  var eff = makeEffect(ALL, effects);
  eff.combinator = true;
  return eff;
}
function race(effects) {
  var eff = makeEffect(RACE, effects);
  eff.combinator = true;
  return eff;
} // this match getFnCallDescriptor logic

var validateFnDescriptor = function validateFnDescriptor(effectName, fnDescriptor) {
  check(fnDescriptor, notUndef, effectName + ": argument fn is undefined or null");

  if (func(fnDescriptor)) {
    return;
  }

  var context = null;
  var fn;

  if (array(fnDescriptor)) {
    context = fnDescriptor[0];
    fn = fnDescriptor[1];
    check(fn, notUndef, effectName + ": argument of type [context, fn] has undefined or null `fn`");
  } else if (object(fnDescriptor)) {
    context = fnDescriptor.context;
    fn = fnDescriptor.fn;
    check(fn, notUndef, effectName + ": argument of type {context, fn} has undefined or null `fn`");
  } else {
    check(fnDescriptor, func, effectName + ": argument fn is not function");
    return;
  }

  if (context && string(fn)) {
    check(context[fn], func, effectName + ": context arguments has no such method - \"" + fn + "\"");
    return;
  }

  check(fn, func, effectName + ": unpacked fn argument (from [context, fn] or {context, fn}) is not a function");
};

function getFnCallDescriptor(fnDescriptor, args) {
  var context = null;
  var fn;

  if ((0,redux_saga_is_esm/* func */.Yl)(fnDescriptor)) {
    fn = fnDescriptor;
  } else {
    if ((0,redux_saga_is_esm/* array */.IX)(fnDescriptor)) {
      context = fnDescriptor[0];
      fn = fnDescriptor[1];
    } else {
      context = fnDescriptor.context;
      fn = fnDescriptor.fn;
    }

    if (context && (0,redux_saga_is_esm/* string */.Z_)(fn) && (0,redux_saga_is_esm/* func */.Yl)(context[fn])) {
      fn = context[fn];
    }
  }

  return {
    context: context,
    fn: fn,
    args: args
  };
}

var isNotDelayEffect = function isNotDelayEffect(fn) {
  return fn !== delay;
};

function call(fnDescriptor) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (false) { var arg0; }

  return makeEffect(CALL, getFnCallDescriptor(fnDescriptor, args));
}
function apply(context, fn, args) {
  if (args === void 0) {
    args = [];
  }

  var fnDescriptor = [context, fn];

  if (false) {}

  return makeEffect(CALL, getFnCallDescriptor([context, fn], args));
}
function cps(fnDescriptor) {
  if (false) {}

  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return makeEffect(CPS, getFnCallDescriptor(fnDescriptor, args));
}
function fork(fnDescriptor) {
  if (false) {}

  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return makeEffect(FORK, getFnCallDescriptor(fnDescriptor, args));
}
function spawn(fnDescriptor) {
  if (false) {}

  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  return detach(fork.apply(void 0, [fnDescriptor].concat(args)));
}
function join(taskOrTasks) {
  if (false) {}

  return makeEffect(JOIN, taskOrTasks);
}
function cancel(taskOrTasks) {
  if (taskOrTasks === void 0) {
    taskOrTasks = redux_saga_symbols_esm/* SELF_CANCELLATION */.sC;
  }

  if (false) {}

  return makeEffect(CANCEL, taskOrTasks);
}
function io_c3792963_select(selector) {
  if (selector === void 0) {
    selector = identity;
  }

  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  if (false) {}

  return makeEffect(SELECT, {
    selector: selector,
    args: args
  });
}
/**
  channel(pattern, [buffer])    => creates a proxy channel for store actions
**/

function actionChannel(pattern$1, buffer$1) {
  if (false) {}

  return makeEffect(ACTION_CHANNEL, {
    pattern: pattern$1,
    buffer: buffer$1
  });
}
function cancelled() {
  return makeEffect(CANCELLED, {});
}
function flush(channel$1) {
  if (false) {}

  return makeEffect(FLUSH, channel$1);
}
function getContext(prop) {
  if (false) {}

  return makeEffect(GET_CONTEXT, prop);
}
function setContext(props) {
  if (false) {}

  return makeEffect(SET_CONTEXT, props);
}
var delay =
/*#__PURE__*/
call.bind(null, redux_saga_delay_p_esm);




/***/ }),

/***/ 83594:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CE: () => (/* binding */ channel),
/* harmony export */   IX: () => (/* binding */ array),
/* harmony export */   MC: () => (/* binding */ promise),
/* harmony export */   NA: () => (/* binding */ symbol),
/* harmony export */   Om: () => (/* binding */ multicast),
/* harmony export */   Yl: () => (/* binding */ func),
/* harmony export */   Z_: () => (/* binding */ string),
/* harmony export */   d5: () => (/* binding */ notUndef),
/* harmony export */   eR: () => (/* binding */ stringableFunc),
/* harmony export */   hZ: () => (/* binding */ iterator),
/* harmony export */   sR: () => (/* binding */ undef),
/* harmony export */   uj: () => (/* binding */ pattern)
/* harmony export */ });
/* unused harmony exports buffer, effect, iterable, number, object, observable, sagaAction, task */
/* harmony import */ var _redux_saga_symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23143);


var undef = function undef(v) {
  return v === null || v === undefined;
};
var notUndef = function notUndef(v) {
  return v !== null && v !== undefined;
};
var func = function func(f) {
  return typeof f === 'function';
};
var number = function number(n) {
  return typeof n === 'number';
};
var string = function string(s) {
  return typeof s === 'string';
};
var array = Array.isArray;
var object = function object(obj) {
  return obj && !array(obj) && typeof obj === 'object';
};
var promise = function promise(p) {
  return p && func(p.then);
};
var iterator = function iterator(it) {
  return it && func(it.next) && func(it.throw);
};
var iterable = function iterable(it) {
  return it && func(Symbol) ? func(it[Symbol.iterator]) : array(it);
};
var task = function task(t) {
  return t && t[TASK];
};
var sagaAction = function sagaAction(a) {
  return Boolean(a && a[SAGA_ACTION]);
};
var observable = function observable(ob) {
  return ob && func(ob.subscribe);
};
var buffer = function buffer(buf) {
  return buf && func(buf.isEmpty) && func(buf.take) && func(buf.put);
};
var pattern = function pattern(pat) {
  return pat && (string(pat) || symbol(pat) || func(pat) || array(pat) && pat.every(pattern));
};
var channel = function channel(ch) {
  return ch && func(ch.take) && func(ch.close);
};
var stringableFunc = function stringableFunc(f) {
  return func(f) && f.hasOwnProperty('toString');
};
var symbol = function symbol(sym) {
  return Boolean(sym) && typeof Symbol === 'function' && sym.constructor === Symbol && sym !== Symbol.prototype;
};
var multicast = function multicast(ch) {
  return channel(ch) && ch[_redux_saga_symbols__WEBPACK_IMPORTED_MODULE_0__/* .MULTICAST */ .AS];
};
var effect = function effect(eff) {
  return eff && eff[IO];
};




/***/ }),

/***/ 23143:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AS: () => (/* binding */ MULTICAST),
/* harmony export */   Cs: () => (/* binding */ TASK),
/* harmony export */   EO: () => (/* binding */ TERMINATE),
/* harmony export */   IO: () => (/* binding */ IO),
/* harmony export */   Nm: () => (/* binding */ SAGA_ACTION),
/* harmony export */   Wd: () => (/* binding */ TASK_CANCEL),
/* harmony export */   b_: () => (/* binding */ SAGA_LOCATION),
/* harmony export */   n1: () => (/* binding */ CANCEL),
/* harmony export */   sC: () => (/* binding */ SELF_CANCELLATION),
/* harmony export */   sZ: () => (/* binding */ CHANNEL_END_TYPE),
/* harmony export */   uq: () => (/* binding */ MATCH)
/* harmony export */ });
var createSymbol = function createSymbol(name) {
  return "@@redux-saga/" + name;
};

var CANCEL =
/*#__PURE__*/
createSymbol('CANCEL_PROMISE');
var CHANNEL_END_TYPE =
/*#__PURE__*/
createSymbol('CHANNEL_END');
var IO =
/*#__PURE__*/
createSymbol('IO');
var MATCH =
/*#__PURE__*/
createSymbol('MATCH');
var MULTICAST =
/*#__PURE__*/
createSymbol('MULTICAST');
var SAGA_ACTION =
/*#__PURE__*/
createSymbol('SAGA_ACTION');
var SELF_CANCELLATION =
/*#__PURE__*/
createSymbol('SELF_CANCELLATION');
var TASK =
/*#__PURE__*/
createSymbol('TASK');
var TASK_CANCEL =
/*#__PURE__*/
createSymbol('TASK_CANCEL');
var TERMINATE =
/*#__PURE__*/
createSymbol('TERMINATE');
var SAGA_LOCATION =
/*#__PURE__*/
createSymbol('LOCATION');




/***/ }),

/***/ 49640:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


const wrapAnsi16 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${code + offset}m`;
};

const wrapAnsi256 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${38 + offset};5;${code}m`;
};

const wrapAnsi16m = (fn, offset) => (...args) => {
	const rgb = fn(...args);
	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
};

const ansi2ansi = n => n;
const rgb2rgb = (r, g, b) => [r, g, b];

const setLazyProperty = (object, property, get) => {
	Object.defineProperty(object, property, {
		get: () => {
			const value = get();

			Object.defineProperty(object, property, {
				value,
				enumerable: true,
				configurable: true
			});

			return value;
		},
		enumerable: true,
		configurable: true
	});
};

/** @type {typeof import('color-convert')} */
let colorConvert;
const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
	if (colorConvert === undefined) {
		colorConvert = __webpack_require__(70009);
	}

	const offset = isBackground ? 10 : 0;
	const styles = {};

	for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
		const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
		if (sourceSpace === targetSpace) {
			styles[name] = wrap(identity, offset);
		} else if (typeof suite === 'object') {
			styles[name] = wrap(suite[targetSpace], offset);
		}
	}

	return styles;
};

function assembleStyles() {
	const codes = new Map();
	const styles = {
		modifier: {
			reset: [0, 0],
			// 21 isn't widely supported and 22 does the same thing
			bold: [1, 22],
			dim: [2, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
			hidden: [8, 28],
			strikethrough: [9, 29]
		},
		color: {
			black: [30, 39],
			red: [31, 39],
			green: [32, 39],
			yellow: [33, 39],
			blue: [34, 39],
			magenta: [35, 39],
			cyan: [36, 39],
			white: [37, 39],

			// Bright color
			blackBright: [90, 39],
			redBright: [91, 39],
			greenBright: [92, 39],
			yellowBright: [93, 39],
			blueBright: [94, 39],
			magentaBright: [95, 39],
			cyanBright: [96, 39],
			whiteBright: [97, 39]
		},
		bgColor: {
			bgBlack: [40, 49],
			bgRed: [41, 49],
			bgGreen: [42, 49],
			bgYellow: [43, 49],
			bgBlue: [44, 49],
			bgMagenta: [45, 49],
			bgCyan: [46, 49],
			bgWhite: [47, 49],

			// Bright color
			bgBlackBright: [100, 49],
			bgRedBright: [101, 49],
			bgGreenBright: [102, 49],
			bgYellowBright: [103, 49],
			bgBlueBright: [104, 49],
			bgMagentaBright: [105, 49],
			bgCyanBright: [106, 49],
			bgWhiteBright: [107, 49]
		}
	};

	// Alias bright black as gray (and grey)
	styles.color.gray = styles.color.blackBright;
	styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
	styles.color.grey = styles.color.blackBright;
	styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
	setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

	return styles;
}

// Make the export immutable
Object.defineProperty(module, 'exports', {
	enumerable: true,
	get: assembleStyles
});


/***/ }),

/***/ 75635:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = __webpack_require__(11103);

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ 70009:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(75635);
const route = __webpack_require__(40482);

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ 40482:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(75635);

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ 55981:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _plugin = _interopRequireDefault(__webpack_require__(47995));
var _config = _interopRequireDefault(__webpack_require__(26218));
var _events = _interopRequireDefault(__webpack_require__(94731));
/**
 * This is a list of base plugins that most solutions will need. These plugins provide service-like capabilities
 * to the SDK.
 */
var _default = exports["default"] = [{
  name: 'logs',
  fn: _plugin.default
}, {
  name: 'config',
  fn: _config.default
}, {
  name: 'events',
  fn: _events.default
}];

/***/ }),

/***/ 12284:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = commonIndex;
var _factory = __webpack_require__(25);
// Disabling eslint for the next comment as we want to be able to use a disallowed word
// eslint-disable-next-line no-warning-comments
/**
 * The SDK creation factory. Create an instance of the SDK by calling this factory with the desired configurations.
 * The SDK instance will be referred as 'api' throughout the rest of the documentation content.
 * @public
 * @method create
 * @param {config} config The configuration object.
 * @return {api} The SDK instance.
 * @example
 * // Instantiate the SDK.
 * import { create } from '@rbbn/webrtc-js-sdk'
 * const client = create({
 *     authentication: { ... },
 *     logs: { ... },
 *     ...
 * });
 * // Use the SDK's API.
 * client.on( ... );
 */

/**
 * The 'api' is the type returned by the create function.
 * It contains various top-level functions that pertain to SDK global instance
 * as well as several nested namespaces that pertain to various features (e.g. call, contacts, presence, etc).
 *
 * @public
 * @module api
 */

/**
 * The configuration object. This object defines what different configuration
 * values you can use when instantiating the SDK using the {@link create} function.
 * @public
 * @module config
 */

// Disabling eslint for the next comment as we want to be able to use a disallowed word
// eslint-disable-next-line no-warning-comments
/**
 * A set of {@link call.SdpHandlerFunction SdpHandlerFunction}s for manipulating SDP information.
 * These handlers are used to customize low-level call behaviour for very specific
 * environments and/or scenarios.
 *
 * Note that SDP handlers are exposed on the entry point of the SDK. They can be added during
 * initialization of the SDK using the {@link #configconfigcall config.call.sdpHandlers} configuration
 * parameter. They can also be set after the SDK's creation by using the
 * {@link call.setSdpHandlers} function.
 *
 * @public
 * @namespace sdpHandlers
 * @example
 * import { create, sdpHandlers } from '@rbbn/webrtc-js-sdk';
 * const codecRemover = sdpHandlers.createCodecRemover(['VP8', 'VP9'])
 * const client = create({
 *   call: {
 *     sdpHandlers: [ codecRemover, <Your-SDP-Handler-Function>, ...]
 *   }
 * })
 * @example
 * // Through the Call API post-instantiation
 * client.call.setSdpHandlers([ codecRemover, <Your-SDP-Handler-Function>, ...])
 */

/**
 * An object that represents a selector to match codecs of an RTP map in SDP.
 *
 * @public
 * @static
 * @typedef {Object} CodecSelector
 * @memberof sdpHandlers
 * @property {string} name The name of the codec.
 * @property {Array<string>} fmtpParams An array of strings to match against the "a=fmtp" format parameters for the corresponding codec.
 *                                      All of the elements in the array must be contained in the "a=fmtp" attribute in order to be a match.
 */

/**
 * This function creates an SDP handler that will remove codecs matching the selectors specified for SDP offers and answers.
 *
 * In some scenarios it's necessary to remove certain codecs being offered by the SDK to remote parties. For example, some legacy call services limit the SDP
 * length (usually to 4KB) and will reject calls that have SDP size above this amount.
 *
 * While creating an SDP handler would allow a user to perform this type of manipulation, it is a non-trivial task that requires in-depth knowledge of WebRTC SDP.
 *
 * To facilitate this common task, the createCodecRemover function creates a codec removal handler that can be used for this purpose. Applications can use this codec
 * removal handler in combination with the {@link call.getAvailableCodecs call.getAvailableCodecs} function in order to build logic to determine the best codecs to use
 * for their application.
 *
 * @public
 * @memberof sdpHandlers
 * @method createCodecRemover
 * @param {Array<CodecSelector> | Array<string>} codecs A list of codec selectors to remove from the SDP. If passing a list of strings, they will be converted into
 *                                                      codec selectors that correspond to those names without any extra FMTP parameters.
 * @returns {call.SdpHandlerFunction} The resulting SDP handler that will remove the codec.
 * @example
 * import { create, sdpHandlers } from '@rbbn/webrtc-js-sdk';
 *
 * const codecRemover = sdpHandlers.createCodecRemover([
 *   // Remove all VP8 and VP9 codecs.
 *   'VP8',
 *   'VP9',
 *
 *   // Remove all H264 codecs with the specified FMTP parameters.
 *   {
 *     name: 'H264',
 *     fmtpParams: ['packetization-mode=0']
 *   }
 * ])
 *
 * const client = create({
 *   call: {
 *     sdpHandlers: [codecRemover]
 *   }
 * })
 *
 */

/*
 * Index template file that is used to create pre-defined version of the SDK.
 */

function commonIndex() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let plugins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return (0, _factory.factory)(plugins, options);
}

/***/ }),

/***/ 74117:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
var _core = _interopRequireDefault(__webpack_require__(12284));
var _basePlugins = _interopRequireDefault(__webpack_require__(55981));
var _webrtc = _interopRequireDefault(__webpack_require__(49169));
var _webrtcProxy = _interopRequireDefault(__webpack_require__(49658));
var _link = _interopRequireDefault(__webpack_require__(27114));
var _link2 = _interopRequireDefault(__webpack_require__(86025));
var _link3 = _interopRequireDefault(__webpack_require__(56498));
var _link4 = _interopRequireDefault(__webpack_require__(62735));
var _link5 = _interopRequireDefault(__webpack_require__(85952));
var _link6 = _interopRequireDefault(__webpack_require__(76712));
var _link7 = _interopRequireDefault(__webpack_require__(77307));
var _link8 = _interopRequireDefault(__webpack_require__(84544));
var _link9 = _interopRequireDefault(__webpack_require__(83668));
var _link10 = _interopRequireDefault(__webpack_require__(33037));
var _sipEvents = _interopRequireDefault(__webpack_require__(26991));
var _index = _interopRequireDefault(__webpack_require__(29175));
var _request = __webpack_require__(38048);
__webpack_require__(71308);
var _codecRemover = __webpack_require__(87056);
const defaultPlugins = [..._basePlugins.default, {
  name: 'authentication',
  fn: _link2.default
}, {
  name: 'subscription',
  fn: _link.default
}, {
  name: 'webrtc',
  fn: _webrtc.default
},
// TODO: Don't _always_ include the Proxy Plugin.
{
  name: 'proxy',
  fn: _webrtcProxy.default
}, {
  name: 'call',
  fn: _link3.default
}, {
  name: 'callHistory',
  fn: _link4.default
}, {
  name: 'clickToCall',
  fn: _link5.default
}, {
  name: 'connectivity',
  fn: _link6.default
}, {
  name: 'messaging',
  fn: _link7.default
}, {
  name: 'mwi',
  fn: _link8.default
}, {
  name: 'notifications',
  fn: _link9.default
}, {
  name: 'presence',
  fn: _link10.default
}, {
  name: 'sipEvents',
  fn: _sipEvents.default
}, {
  name: 'users',
  fn: _index.default
}, {
  name: 'request',
  fn: _request.linkRequest
}];
function root() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let plugins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return (0, _core.default)(options, [...defaultPlugins, ...plugins]);
}

// Alias 'create' to be equal to the root function
root.create = root;
root.sdpHandlers = {
  createCodecRemover: _codecRemover.createCodecRemover
};

// Export this way as a work-around, so it can be used as `<export>();`.
// See: https://github.com/webpack/webpack/issues/706
module.exports = root;

/***/ }),

/***/ 10825:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getVersion = getVersion;
/**
 * Returns the version of the currently running SDK.
 *
 * It must be used by any plugins (including the factory) as the unique source of truth when it comes to determine the current SDK version.
 * The actual version value is provided by the build process scripts (aka webpack.config.***.js) which simply do a string substitution
 * for the @@ tag below with actual version value.
 */
function getVersion() {
  return '6.12.0-beta.1391';
}

/***/ }),

/***/ 4025:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseSpidrServices = parseSpidrServices;
var _constants = __webpack_require__(72916);
/**
 * Uses the requested and received SPiDR [subscription] services to determine
 *      the SDK subscription status for each service.
 * @method parseSpidrServices
 * @param  {Array}  requested The list of requested SPiDR services.
 * @param  {Array}  received The list of received SPiDR services.
 * @return {Object} Information about the SDK's subscriptions.
 */
function parseSpidrServices(requested, received) {
  // UC platform is not case-sensitive (Link is), so filter without caring about case.
  const upperReceived = received.map(service => service.toUpperCase());

  // Find the missing services.
  const missing = requested.filter(function (reqService) {
    // If the requested service was received (not caring about case),
    //      it is not missing.
    return upperReceived.indexOf(reqService.toUpperCase()) === -1;
  });
  const subscriptions = {
    requested,
    received,
    missing,
    status: 'UNKNOWN',
    services: {}
  };

  // Determine the overall subscription status.
  if (received.length === 0) {
    subscriptions.status = _constants.SUBSCRIPTION_STATE.NONE;
  } else if (received.length > 0 && missing.length > 0) {
    subscriptions.status = _constants.SUBSCRIPTION_STATE.PARTIAL;
  } else if (received.length > 0 && requested.length === received.length) {
    subscriptions.status = _constants.SUBSCRIPTION_STATE.FULL;
  } else {
    // Should never reach this case.
  }

  // List the individual service statuses.
  received.forEach(function (service) {
    subscriptions.services[service] = true;
  });
  missing.forEach(function (service) {
    subscriptions.services[service] = false;
  });
  return subscriptions;
}

/***/ }),

/***/ 72916:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SUBSCRIPTION_STATE = exports.DISCONNECT_REASONS = void 0;
/**
 * Possible subscription states.
 * @name SUBSCRIPTION_STATE
 * @type {Object}
 */
const SUBSCRIPTION_STATE = exports.SUBSCRIPTION_STATE = {
  FULL: 'FULL',
  PARTIAL: 'PARTIAL',
  NONE: 'NONE'
};

/**
 * Possible disconnect reasons.
 * @name DISCONNECT_REASONS
 * @type {Object}
 */
const DISCONNECT_REASONS = exports.DISCONNECT_REASONS = {
  GONE: 'GONE',
  LOST_CONNECTION: 'LOST_CONNECTION'
};

/***/ }),

/***/ 10530:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.USER_DETAILS_RECEIVED = exports.UPDATE_HMAC_TOKEN = exports.SET_TOKEN = exports.SET_CREDENTIALS_FINISH = exports.SET_CREDENTIALS = exports.SET_CONNECTION_INFO = exports.RESUBSCRIPTION_FINISHED = exports.REFRESH_TOKENS_FINISHED = exports.REFRESH_TOKENS = exports.GET_USER_DETAILS = exports.DISCONNECT_FINISHED = exports.DISCONNECT = exports.CONNECT_FINISHED = exports.CONNECTION_OCCURRED = exports.CONNECT = exports.AUTHORIZATION_ERROR = void 0;
const prefix = '@@KANDY/';
const CONNECT = exports.CONNECT = prefix + 'CONNECT';
const SET_CONNECTION_INFO = exports.SET_CONNECTION_INFO = prefix + 'SET_CONNECTION_INFO';
const CONNECTION_OCCURRED = exports.CONNECTION_OCCURRED = prefix + 'CONNECTION_OCCURRED';
const CONNECT_FINISHED = exports.CONNECT_FINISHED = prefix + 'CONNECT_FINISHED';
const GET_USER_DETAILS = exports.GET_USER_DETAILS = prefix + 'GET_USER_DETAILS';
const USER_DETAILS_RECEIVED = exports.USER_DETAILS_RECEIVED = prefix + 'USER_DETAILS_RECEIVED';
const DISCONNECT = exports.DISCONNECT = prefix + 'DISCONNECT';
const DISCONNECT_FINISHED = exports.DISCONNECT_FINISHED = prefix + 'DISCONNECT_FINISHED';
const RESUBSCRIPTION_FINISHED = exports.RESUBSCRIPTION_FINISHED = prefix + 'RESUBSCRIPTION_FINISHED';
const REFRESH_TOKENS = exports.REFRESH_TOKENS = prefix + 'REFRESH_TOKENS';
const REFRESH_TOKENS_FINISHED = exports.REFRESH_TOKENS_FINISHED = prefix + 'REFRESH_TOKENS_FINISHED';
const SET_TOKEN = exports.SET_TOKEN = prefix + 'SET_TOKEN';
const SET_CREDENTIALS = exports.SET_CREDENTIALS = prefix + 'SET_CREDENTIALS';
const SET_CREDENTIALS_FINISH = exports.SET_CREDENTIALS_FINISH = prefix + 'SET_CREDENTIALS_FINISH';
const AUTHORIZATION_ERROR = exports.AUTHORIZATION_ERROR = prefix + 'AUTHORIZATION_ERROR';
const UPDATE_HMAC_TOKEN = exports.UPDATE_HMAC_TOKEN = prefix + 'UPDATE_HMAC_TOKEN';

/***/ }),

/***/ 35770:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.connect = connect;
exports.connectFinished = connectFinished;
exports.connectionOccurred = connectionOccurred;
exports.disconnect = disconnect;
exports.disconnectFinished = disconnectFinished;
exports.getUserDetails = getUserDetails;
exports.refreshTokens = refreshTokens;
exports.refreshTokensFinished = refreshTokensFinished;
exports.resubscribeFinished = resubscribeFinished;
exports.setConnectionInfo = setConnectionInfo;
exports.setCredentials = setCredentials;
exports.setCredentialsFinished = setCredentialsFinished;
exports.setTokens = setTokens;
exports.updateHmacToken = updateHmacToken;
exports.userDetailsReceived = userDetailsReceived;
var actionTypes = _interopRequireWildcard(__webpack_require__(10530));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Creates a connect action that takes a credentials object.
 *
 * @method connect
 * @param {Object} credentials The credentials to pass to the connect action.
 * @param {Object} [options] Any parameters that aren't credentials.
 * @return {Object} A flux standard action.
 */
function connect(credentials, options) {
  return {
    type: actionTypes.CONNECT,
    payload: {
      credentials,
      options
    },
    meta: {
      isSensitive: true
    }
  };
}

/**
 * Create a set connection info action that takes a connection and user info object
 *
 * @method setConnectionInfo
 * @param {Object} $0
 * @param {Object} $0.userInfo An object representing the user information.
 * @param {Object} $0.connection A connection object. Information about how to connect to the backend services.
 * @return {Object} A flux standard action.
 */
function setConnectionInfo(_ref, platform) {
  let {
    userInfo,
    connection
  } = _ref;
  return {
    type: actionTypes.SET_CONNECTION_INFO,
    payload: {
      userInfo,
      connection
    },
    meta: {
      platform,
      isSensitive: true
    }
  };
}

/**
 * Connection occurred action.
 * Signifies that a connection has been made to a service, but that the connection
 *      workflow has not finished yet. Intended for use in scenarios where the
 *      workflow connects to multiple services, to represent the "intermediate"
 *      connections.
 *
 * @method connectionOccurred
 * @param  {Object} $0
 * @param  {Object} $0.subscription
 * @param  {Object} $0.connection
 * @param  {Object} [$0.error] An error message. Only present if an error occurred.
 * @param  {string} platform The backend platform used for the connection.
 * @return {Object} A flux standard action.
 */
function connectionOccurred(_ref2, platform) {
  let {
    subscription,
    connection,
    error
  } = _ref2;
  // TODO: Is this action used anywhere?
  var action = {
    type: actionTypes.CONNECTION_OCCURRED,
    meta: {
      platform
    }
  };
  if (error) {
    action.error = true;
    action.payload = error;
  } else {
    action.payload = {
      subscription,
      connection
    };
  }
  return action;
}

/**
 * Create a connect finished action that takes a userInfo object on success and possibly
 * an error object.
 *
 * @method connectFinished
 * @param {Object} $0
 * @param {Object} $0.subscription A subscription object. Contains what services to subscribe to.
 * @param {Object} $0.userInfo An object representing the user information.
 * @param {Object} $0.connection A connection object. Information about how to connect to the backend services.
 * @param {string} [$0.error] An error message. Only present if an error occurred.
 * @param {string} platform The backend platform we are currently on.
 * @param {boolean} isSSO Boolean for whether the current connection scenario is SSO or not.
 * @return {Object} A flux standard action.
 */
function connectFinished(_ref3, platform) {
  let {
    subscription,
    userInfo,
    connection,
    error
  } = _ref3;
  let isSSO = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var action = {
    type: actionTypes.CONNECT_FINISHED,
    meta: {
      platform,
      isSSO,
      isSensitive: true
    }
  };
  if (error) {
    action.error = true;
    action.payload = error;
  } else {
    action.payload = {
      subscription,
      userInfo,
      connection
    };
  }
  return action;
}

/**
 * Creates a getUserDetails action
 *
 * @method getUserDetails
 * @return {Object} A flux standard action.
 */
function getUserDetails() {
  return {
    type: actionTypes.GET_USER_DETAILS
  };
}

/**
 * Create a user details received action
 *
 * @method userDetailsReceived
 * @param  {Object} userDetailsResponse An object representing the REST response of a user details request.
 * @return {Object} A flux standard action.
 */
function userDetailsReceived(userDetailsResponse) {
  var action = {
    type: actionTypes.USER_DETAILS_RECEIVED,
    payload: {
      firstName: userDetailsResponse.firstName || userDetailsResponse.user_first_name,
      user_first_name: userDetailsResponse.user_first_name || userDetailsResponse.firstName,
      lastName: userDetailsResponse.lastName || userDetailsResponse.user_last_name,
      user_last_name: userDetailsResponse.user_last_name || userDetailsResponse.lastName,
      photoURL: userDetailsResponse.photoURL,
      emailAddress: userDetailsResponse.emailAddress || userDetailsResponse.user_email,
      user_email: userDetailsResponse.user_email || userDetailsResponse.emailAddress,
      username: userDetailsResponse.username
    }
  };
  return action;
}

/**
 * Creates a disconnect action.
 *
 * @method disconnect
 * @return {Object} A flux standard action.
 */
function disconnect() {
  return {
    type: actionTypes.DISCONNECT
  };
}

/**
 * Create a disconnectFinished action that possibly takes an error object on failure.
 *
 * @method disconnectFinished
 * @param {Object} params
 * @param {string} [params.error] An error message. Only present if an error occurred.
 * @param {string} [params.reason] Why the disconnectFinished action is being dispatched.
 * @param {number} [params.retryAfter] The time (in seconds) when SDK should retry the operation.
 * @return {Object} A flux standard action.
 */
function disconnectFinished() {
  let {
    error,
    reason,
    retryAfter
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const action = {
    type: actionTypes.DISCONNECT_FINISHED,
    payload: {}
  };
  if (error) {
    action.error = true;
    action.payload = error;
  }
  if (reason) {
    action.payload.reason = reason;
  }
  if (retryAfter) {
    action.payload.retryAfter = retryAfter;
  }
  return action;
}

/**
 * Action creator representing the finish of a resubscription request.
 * Payload mirrors a connect finished action.
 *
 * @method resubscribeFinished
 * @param {Object} $0
 * @param {string} [$0.error] An error message. Only present if an error occurred.
 * @param {string} [$0.attemptNum] The attempt number of this resubscription.
 * @param {string} platform The backend platform we are currently on.
 * @return {Object} A flux standard action.
 */
function resubscribeFinished(_ref4, platform) {
  let {
    error,
    attemptNum
  } = _ref4;
  var action = {
    type: actionTypes.RESUBSCRIPTION_FINISHED,
    meta: {
      platform
    }
  };
  if (error) {
    action.error = true;
    action.payload = error;
    action.payload.attemptNum = attemptNum;
  } else {
    action.payload = {
      attemptNum
    };
  }
  return action;
}

/**
 * Creates a refreshTokens action with the given credentials as a payload.
 *
 * @method refreshTokens
 * @param {Object} credentials A credentials object containing tokens.
 * @return {Object} A flux standard action.
 */
function refreshTokens(credentials) {
  var action = {
    type: actionTypes.REFRESH_TOKENS,
    payload: {
      credentials
    }
  };
  return action;
}

/**
 * Creates a refreshTokensFinished action with connection and platform information.
 * Optionally includes an error.
 *
 * @method refreshTokensFinished
 * @param {Object} $0
 * @param {Object} [$0.error] An optional error object.
 * @param {Object} $0.connection Connection information.
 * @param {string} platform The backend platform we are currently on.
 * @return {Object} A flux standard action.
 */
function refreshTokensFinished(_ref5, platform) {
  let {
    error,
    connection
  } = _ref5;
  var action = {
    type: actionTypes.REFRESH_TOKENS_FINISHED,
    payload: {
      connection
    },
    meta: {
      platform
    }
  };
  if (error) {
    action.error = true;
    action.payload = error;
  }
  return action;
}

/**
 * Sets the token information in the state.
 * @method setTokens
 * @param {Object} params Dictionary object of parameters.
 * @param {string} accessToken An access token retrieved using the authentication APIs of the platform.
 * @param {string} idToken An identity token retrieved using the authentication APIs of the platform.
 * @return {Object} A flux standard action.
 */
function setTokens(_ref6) {
  let {
    accessToken,
    idToken
  } = _ref6;
  return {
    type: actionTypes.SET_TOKEN,
    payload: {
      accessToken,
      idToken
    }
  };
}

/**
 * Creates a setCredentials action that takes a credentials object.
 *
 * @method setCredentials
 * @param {Object} $0
 * @param {string} $0.username The username.
 * @param {string} $0.password The user's password.
 * @param {string} $0.authname The user's authorization name.
 * @param {string} $0.hmacToken An HMAC token for the user with the provided user ID.
 * @param {string} $0.bearerAccessToken An access token retrieved using the authentication APIs of the platform.
 * @param {string} $0.idToken An identity token retrieved using the authentication APIs of the platform.
 * @param {string} $0.accessToken An access token retrieved using the authentication APIs of the platform. Used for CIM authentication.
 * @return {Object} A flux standard action.
 */
function setCredentials(_ref7) {
  let {
    username,
    password,
    authname,
    hmacToken,
    bearerAccessToken,
    idToken,
    accessToken
  } = _ref7;
  return {
    type: actionTypes.SET_CREDENTIALS,
    payload: {
      username,
      password,
      authname,
      hmacToken,
      bearerAccessToken,
      idToken,
      accessToken
    },
    meta: {
      isSensitive: true
    }
  };
}

/**
 * Create a setCredentials finished action that takes a userInfo object on success and possibly
 * an error object.
 *
 * @method setCredentialsFinished
 * @param {Object} $0
 * @param {Object} $0.userInfo An object representing the user information.
 * @param {Object} $0.connection A connection object. Information about how to connect to the backend services.
 * @param {string} [$0.error] An error message. Only present if an error occurred.
 * @param {string} platform The backend platform we are currently on.
 * @return {Object} A flux standard action.
 */
function setCredentialsFinished(_ref8, platform) {
  let {
    userInfo,
    connection,
    error
  } = _ref8;
  var action = {
    type: actionTypes.SET_CREDENTIALS_FINISH,
    meta: {
      platform,
      isSensitive: true
    }
  };
  if (error) {
    action.error = true;
    action.payload = error;
  } else {
    action.payload = {
      userInfo,
      connection
    };
  }
  return action;
}

/**
 * Creates an updateToken action with connection and platform information.
 *
 * @method updateToken
 * @param {string} token A session id retrieved after a successful subscription on the platform.
 * @param {string} platform The backend platform we are currently on.
 * @return {Object} A flux standard action.
 */
function updateHmacToken(token, platform) {
  var action = {
    type: actionTypes.UPDATE_HMAC_TOKEN,
    payload: token,
    meta: {
      platform,
      isSensitive: true
    }
  };
  return action;
}

/***/ }),

/***/ 36008:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var actions = _interopRequireWildcard(__webpack_require__(35770));
var _selectors = __webpack_require__(46942);
var _constants = __webpack_require__(72916);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Authentication APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context - The factory context.
 * @return {Object} Authentication API.
 */
function createAPI(container) {
  const {
    logManager,
    context,
    AuthenticationOperations: operations,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('AUTH');
  const authenticationApi = {
    /**
     * If you're authenticating with tokens that expire and have not provided a refresh token to the `connect` function, you can update your access token with `updateToken` before it expires to stay connected.
     *
     * @public
     * @memberof api
     * @requires accessTokenAuth
     * @requires accessTokenAuthCIM
     * @method updateToken
     * @param {Object} credentials The credentials object.
     * @param {string} credentials.username The username without the application's domain.
     * @param {string} credentials.accessToken An access token for the user with the provided user Id.
     */
    /**
     * If you're authenticating with tokens that expire and have not provided a refresh token to the `connect` function, you can update your access token with `updateToken` before it expires to stay connected.
     *
     * @public
     * @memberof api
     * @requires oauthToken
     * @method updateToken
     * @param {Object} credentials The credentials object.
     * @param {string} credentials.username The username without the application's domain.
     * @param {string} credentials.oauthToken An OAuth token provided by an outside service.
     * @example
     * client.updateToken({
     *   username: 'alfred@example.com',
     *   oauthToken: 'RTG9SV3QAoJaeUSEQCZAHqrhde1yT'
     * });
     */
    /**
     * If you're authenticating with tokens that expire, you can update your access token with `updateToken` before it expires to stay connected.
     *
     * @public
     * @memberof api
     * @requires bearerAccessTokenAuth
     * @method updateToken
     * @param {Object} credentials The credentials object.
     * @param {string} credentials.username The username without the application's domain.
     * @param {string} credentials.bearerAccessToken A bearerAccessToken provided by an outside service.
     * @example
     * client.updateToken({
     *   username: 'alfred@example.com',
     *   bearerAccessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
     * });
     */
    updateToken: function (credentials) {
      // We won't expose oauthToken because it essentially acts as a password being used in conjunction with username
      // ..and passwords should NOT be logged.
      log.debug(API_LOG_TAG + 'updateToken: ', credentials.username);
      context.dispatch(actions.refreshTokens(credentials));
      operations.updateToken(credentials);
    },
    /**
     * Retrieves information about the current user.
     *
     * @public
     * @memberof api
     * @method getUserInfo
     * @returns {Object} user The user data.
     * @returns {string} user.username The username of the current user. Note that this username can take different encoded forms.
     *                                 It's not meant to be displayed to a user.
     * @returns {string} user.token The current access token.
     */
    getUserInfo: function () {
      log.debug(API_LOG_TAG + 'getUserInfo');
      return (0, _selectors.getUserInfo)(context.getState());
    },
    /**
     * Get the connection state.
     *
     * @public
     * @memberof api
     * @requires connect
     * @method getConnection
     * @returns {Object} connection The connection state.
     * @returns {boolean} connection.isConnected Whether the authenticated user is currently connected.
     * @returns {boolean} connection.isPending Whether the authenticated user's connection is currently pending.
     * @returns {Object} connection.error The error object if an error occurred.
     * @returns {string} connection.error.message The error message.
     * @returns {string} connection.error.stack The stack trace of the error.
     */
    getConnection: function () {
      log.debug(API_LOG_TAG + 'getConnection');
      const {
        isConnected,
        isPending,
        error
      } = context.getState().authentication;
      return {
        isConnected,
        isPending,
        error,
        subscription: (0, _selectors.getServices)(context.getState())
      };
    },
    /**
     * Retrieves the services that the user is subscribed for.
     *
     * @public
     * @memberof api
     * @requires services
     * @method getServices
     * @return {Array} A list of subscribed-to services.
     */
    getServices: function () {
      log.debug(API_LOG_TAG + 'getServices');
      return (0, _selectors.getServices)(context.getState());
    },
    /**
     * Possible subscription states of the user.
     *
     * @public
     * @memberof api
     * @requires connect
     * @property {string} FULL All requested feature subscriptions exist.
     * @property {string} PARTIAL Some feature subscriptions exist.
     * @property {string} NONE No feature subscriptions exist.
     */
    subscriptionStates: _constants.SUBSCRIPTION_STATE,
    /**
     * Possible reasons for disconnecting.
     *
     * @public
     * @memberof api
     * @requires connect
     * @property {string} GONE Connection was terminated by the server
     * @property {string} LOST_CONNECTION Internet connection was lost
     * @property {string} WS_OVERRIDDEN WebSocket was overridden by the server
     */
    disconnectReasons: _constants.DISCONNECT_REASONS,
    /**
     * Sets the user credentials necessary to make requests to the platform.
     *
     * If credentials has previously been set, they cannot be set again if there is an active
     * subscription. An {@link api.event:auth:error auth:error} will be emitted in
     * this scenario.
     *
     * @public
     * @memberof api
     * @requires userCredentialsAuth
     * @method setCredentials
     * @param {Object} credentials The credentials object.
     * @param {string} credentials.username The username including the application's domain.
     * @param {string} credentials.password The user's password.
     * @param {string} [credentials.authname] The user's authorization name.
     * @example
     * client.setCredentials({
     *   username: 'alfred@example.com',
     *   password: '********'
     *   authname: '********'
     * });
     */
    /**
     * Sets the username and HMAC token necessary to make requests to the platform.
     * An HMAC token is used to verify a user via the user's authorization within an of organization.
     * HMAC tokens are generated by using the HmacSHA1 algorithm and a key on a data object
     * containing an `authenticationTokenRequest` object with the following properties:
     * - subscriberId - The user's subscriber ID in the organization.
     * - organizationId - The ID of the organization the user is a part of.
     *
     * @public
     * @memberof api
     * @requires hmacTokenAuth
     * @method setCredentials
     * @param {Object} credentials The credentials object.
     * @param {string} credentials.username The username.
     * @param {string} credentials.hmacToken An HMAC token for the user with the provided user ID.
     * @example
     * const hmacToken = HmacSHA1Algorithm({
     *   authenticationTokenRequest: {
     *     subscriberId: 'alfred',
     *     organizationId: 'example.com'
     *   }
     * }, key)
     *
     * client.setCredentials({
     *   username: 'alfred@example.com',
     *   hmacToken
     * });
     */
    /**
     * Provides a bearerAccessToken to any backend services that the SDK instance deals with.
     * The bearerAccessToken provided establishes what can be accessed by the SDK.
     *
     * @public
     * @memberof api
     * @requires bearerAccessTokenAuth
     * @method setCredentials
     * @param {Object} credentials The credentials object.
     * @param {string} credentials.username The username without the application's domain.
     * @param {string} credentials.bearerAccessToken A bearerAccessToken retrieved using the authentication APIs of the platform.
     * @example
     * client.setCredentials({
     *   username: 'alfred@example.com',
     *   bearerAccessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
     * });
     */
    /**
     * Provides an access token to any backend services that the SDK instance deals with.
     * The access token provided establishes what can be accessed by the SDK.
     *
     * @public
     * @memberof api
     * @requires accessTokenAuthCIM
     * @method setCredentials
     * @param {Object} credentials The credentials object.
     * @param {string} credentials.username The username without the application's domain.
     * @param {string} credentials.accessToken An accessToken retrieved using the authentication APIs of the platform. Used for CIM authentication.
     * @example
     * client.setCredentials({
     *   username: 'alfred@example.com',
     *   accessToken: 'ATgtBl8QAoJaeeJU!zhARKBYaN2BUxFQsc8F...'
     * });
     */
    setCredentials: function (_ref) {
      let {
        username,
        password,
        authname,
        hmacToken,
        bearerAccessToken,
        idToken,
        accessToken
      } = _ref;
      log.debug(API_LOG_TAG + 'setCredentials: ', username);
      // TODO: Refactor into multiple actions for each credential mode
      // TODO: Validation of two authentication possibility scenario
      context.dispatch(actions.setCredentials({
        username,
        password,
        authname,
        hmacToken,
        bearerAccessToken,
        idToken,
        accessToken
      }));
      operations.setCredentials({
        username,
        password,
        authname,
        hmacToken,
        bearerAccessToken,
        accessToken
      });
    }
  };
  return authenticationApi;
}

/***/ }),

/***/ 71430:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AUTH_RESUB = exports.AUTH_ERROR = exports.AUTH_CREDENTIALS_SET = exports.AUTH_CHANGE = void 0;
/**
 * The authentication credentials have been set. You can check the set user details with the `getUserInfo` API.
 *
 * @public
 * @static
 * @memberof api
 * @event auth:change
 * @param {Object} params
 */
const AUTH_CHANGE = exports.AUTH_CHANGE = 'auth:change';

/**
 * There was an error with authentication.
 *
 * @public
 * @static
 * @memberof api
 * @event auth:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 *
 */
const AUTH_ERROR = exports.AUTH_ERROR = 'auth:error';

/**
 * An attempt to extend the current user's subscription was made.
 *
 * In a failure scenario, the current user is still connected, and further
 * resubscription attempts will be made, but may become disconnected if the
 * session expires.
 * @public
 * @static
 * @memberof api
 * @requires connect
 * @event auth:resub
 * @param {Object} params
 * @param {number} params.attemptNum The attempt number of this resubscription.
 * @param {boolean} params.isFailure Whether the resubscription failed or not.
 * @param {api.BasicError} [params.error] The Basic error object.
 */
const AUTH_RESUB = exports.AUTH_RESUB = 'auth:resub';

/**
 * The information (credentials) needed for connecting have been set.
 *
 * @public
 * @static
 * @memberof api
 * @requires connect
 * @event auth:credentialsSet
 */
const AUTH_CREDENTIALS_SET = exports.AUTH_CREDENTIALS_SET = 'auth:credentialsSet';

/***/ }),

/***/ 71168:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAPI", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
Object.defineProperty(exports, "name", ({
  enumerable: true,
  get: function () {
    return _name.default;
  }
}));
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _reducers = _interopRequireDefault(__webpack_require__(53659));
var _name = _interopRequireDefault(__webpack_require__(57788));
var _api = _interopRequireDefault(__webpack_require__(36008));

/***/ }),

/***/ 57788:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
/**
 * This interface is for an authentication plugin.
 * @type {string}
 */
const name = 'authentication';
var _default = exports["default"] = name;

/***/ }),

/***/ 53659:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(24923));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _merge2 = _interopRequireDefault(__webpack_require__(9612));
var actionTypes = _interopRequireWildcard(__webpack_require__(10530));
var _reduxActions = __webpack_require__(68305);
const _excluded = ["x-token"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
reducers[actionTypes.CONNECT] = {
  next(state) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: true,
      error: undefined
    });
  }
};
reducers[actionTypes.SET_CONNECTION_INFO] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      platform: action.meta.platform,
      connection: _objectSpread(_objectSpread({}, state.connection), {}, {
        [action.meta.platform]: action.payload.connection
      }),
      userInfo: action.payload.userInfo
    });
  }
};
reducers[actionTypes.CONNECT_FINISHED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isConnected: true,
      isPending: false,
      error: undefined,
      isSSO: action.meta.isSSO,
      platform: action.meta.platform,
      // Separate subscription, connection info based on the platform used.
      // Store platform subscription information.
      subscription: _objectSpread(_objectSpread({}, state.subscription), {}, {
        [action.meta.platform]: action.payload.subscription
      }),
      // Store platform connection information to be provided to other plugins.
      connection: action.payload.connection ? _objectSpread(_objectSpread({}, state.connection), {}, {
        [action.meta.platform]: action.payload.connection
      }) : _objectSpread({}, state.connection),
      // Store user information to be provided to developers.
      userInfo: action.payload.userInfo ? action.payload.userInfo : state.userInfo
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isConnected: false,
      isPending: false,
      error: action.payload
    });
  }
};

// On connection occurred, store the connection information into state, but do
// not update any status state. The connection has not yet finished.
reducers[actionTypes.CONNECTION_OCCURRED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      // Separate subscription, connection info based on the platform used.
      // Store platform subscription information.
      subscription: _objectSpread(_objectSpread({}, state.subscription), {}, {
        [action.meta.platform]: action.payload.subscription
      }),
      // Store platform connection information to be provided to other plugins.
      connection: _objectSpread(_objectSpread({}, state.connection), {}, {
        [action.meta.platform]: action.payload.connection
      })
    });
  }
};
reducers[actionTypes.DISCONNECT] = {
  next(state) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: true,
      error: undefined
    });
  }
};

/*
 * Clear the authentication state when we disconnect.
 * Note: This should only be for 3.X (and 4.X backwards-compatible connect API)
 *    authentication.
 */
reducers[actionTypes.DISCONNECT_FINISHED] = {
  next(state, action) {
    return {
      isConnected: false,
      isPending: false,
      error: undefined
    };
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      // Treat an error as if we are still disconnected.
      isConnected: false,
      isPending: false,
      error: action.payload
    });
  }
};
reducers[actionTypes.REFRESH_TOKENS_FINISHED] = {
  next(state, action) {
    // Merge the updated requestOptions into the current state.
    const requestOptions = (0, _merge2.default)(state.connection[action.meta.platform].requestOptions, action.payload.connection.requestOptions);
    return _objectSpread(_objectSpread({}, state), {}, {
      connection: _objectSpread(_objectSpread({}, state.connection), {}, {
        [action.meta.platform]: _objectSpread(_objectSpread(_objectSpread({}, state.connection[action.meta.platform]), action.payload.connection), {}, {
          requestOptions
        })
      }),
      userInfo: _objectSpread(_objectSpread({}, state.userInfo), {}, {
        accessToken: action.payload.connection.accessToken,
        refreshToken: action.payload.connection.refreshToken
      })
    });
  }
};
reducers[actionTypes.SET_CREDENTIALS_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      error: undefined,
      platform: action.meta.platform,
      // Store platform connection information to be provided to other plugins.
      connection: _objectSpread(_objectSpread({}, state.connection), {}, {
        [action.meta.platform]: action.payload.connection
      }),
      // Store user information to be provided to developers.
      userInfo: action.payload.userInfo
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      error: action.payload
    });
  }
};

/*
 * Remove the x-token from the request header after subscription is successful.
 */
reducers[actionTypes.UPDATE_HMAC_TOKEN] = {
  next(state, action) {
    const _state$connection$act = state.connection[action.meta.platform].requestOptions.headers,
      {
        'x-token': _removed
      } = _state$connection$act,
      removeXtoken = (0, _objectWithoutProperties2.default)(_state$connection$act, _excluded);
    const headers = _objectSpread(_objectSpread({}, removeXtoken), {}, {
      'x-session': action.payload
    });
    return _objectSpread(_objectSpread({}, state), {}, {
      connection: _objectSpread(_objectSpread({}, state.connection), {}, {
        [action.meta.platform]: _objectSpread(_objectSpread({}, state.connection[action.meta.platform]), {}, {
          requestOptions: _objectSpread(_objectSpread({}, state.connection[action.meta.platform].requestOptions), {}, {
            headers
          })
        })
      })
    });
  }
};

/**
 * Auth Interface reducer
 * @method reducer
 * @param  {Object}  state - The current redux state.
 * @param  {Object}  action - A flux standard action.
 * @return {Object}  - The new redux state.
 * @example
 * Auth state structure example; connected.
 * authState = {
 *     isConnected: true,
 *     isPending: false,
 *     error: undefined,
 *     subscription: { ... },
 *     connection: { ... },
 *     userInfo: { ... }
 * }
 */
const reducer = (0, _reduxActions.handleActions)(reducers, {
  isConnected: false,
  isPending: false
});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 46942:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getAuthConfig = getAuthConfig;
exports.getAuthScenario = getAuthScenario;
exports.getConnectionInfo = getConnectionInfo;
exports.getDomain = getDomain;
exports.getIdentity = getIdentity;
exports.getPlatform = getPlatform;
exports.getRequestInfo = getRequestInfo;
exports.getServiceUnavailableMaxRetries = getServiceUnavailableMaxRetries;
exports.getServices = getServices;
exports.getSubscriptionInfo = getSubscriptionInfo;
exports.getUserInfo = getUserInfo;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _constants = __webpack_require__(72916);
var _constants2 = __webpack_require__(49833);
/*
 * Redux-saga selector functions.
 * Used with the `select` effect in sagas to Retrieves
 *      specific portions of the state.
 */

/**
 * Retrieves the config options provided by the auth plugin.
 * @method getAuthConfig
 * @return {Object}
 */
function getAuthConfig(state) {
  return (0, _cloneDeep2.default)(state.config.authentication);
}

/**
 * Retrieves the maximum number of times this client will attempt to subscribe, while getting a
 * 'Service Unavailable' response from backend.
 * @method getServiceUnavailableMaxRetries
 * @param {Object} state Current state object.
 * @return {number}
 */
function getServiceUnavailableMaxRetries(state) {
  return state.config.authentication.subscription.serviceUnavailableMaxRetries;
}

/**
 * Retrieves the subscription information of a platform.
 * @method getSubscriptionInfo
 * @param  {string} [platform] - The backend platform in use.
 * @return {Object}
 */
function getSubscriptionInfo(state, platform) {
  if (!platform) {
    platform = getPlatform(state);
  }
  if (state.authentication.subscription) {
    return (0, _cloneDeep2.default)(state.authentication.subscription[platform]);
  } else {
    return undefined;
  }
}

/**
 * Retrieves the connection information of a platform.
 * Includes the info needed to make requests to that platform.
 * @method getConnectionInfo
 * @param  {string} [platform] - The backend platform in use.
 * @return {Object}
 */
function getConnectionInfo(state, platform) {
  if (!platform) {
    platform = getPlatform(state);
  }
  if (state.authentication.connection) {
    return (0, _cloneDeep2.default)(state.authentication.connection[platform]);
  } else {
    return undefined;
  }
}

/**
 * Retrieves the domain of the callee address information of a platform.
 * @method getDomain
 * @return {string}
 */
function getDomain(state) {
  const {
    username = '',
    identity = username
  } = getUserInfo(state);
  const [, domain = ''] = identity.split('@');
  return domain;
}

/**
 * Retrieves the identity of the currently logged-in user.
 * The identity is of the form: <userName>@<domain>
 * @method getIdentity
 * @return {string}
 */
function getIdentity(state) {
  const userInfo = getUserInfo(state);
  return userInfo.identity || userInfo.username || '';
}

/**
 * Retrieves the user information.
 * @method getUserInfo
 * @return {Object} An object whose properties are: accessToken, identity & username. Identity is user's primary contact address.
 */
function getUserInfo(state) {
  return (0, _cloneDeep2.default)(state.authentication.userInfo) || {};
}

/**
 * Retrieves a flag from the store representing if the login scenario was SSO or not.
 * @method getAuthScenario
 * @return {boolean}
 */
function getAuthScenario(state) {
  return (0, _cloneDeep2.default)(state.authentication.isSSO);
}

/**
 * Retrieves information about the services that the user is subscribed for.
 * @method getServices
 * @return {Object}
 */
function getServices(state, platform) {
  const subscription = getSubscriptionInfo(state, platform);
  if (subscription && subscription.servicesInfo) {
    return subscription.servicesInfo;
  } else {
    return {
      // TODO: Have default as part of the reducer.
      requested: [],
      received: [],
      missing: [],
      status: _constants.SUBSCRIPTION_STATE.NONE,
      services: {}
    };
  }
}

/**
 * Retrieves the name of the backend platform the user is currently subscribed to.
 * @method getPlatform
 * @return {string}
 */
function getPlatform(state) {
  // Default as `link` until other selectors don't use `getPlatform` internally.
  return state.authentication.platform || 'link';
}

/**
 * Retrieves info needed to make a REST request for the different platforms.
 * @method getRequestInfo
 * @return {Object}
 */
function getRequestInfo(state, platform) {
  if (!platform) {
    platform = getPlatform(state);
  }
  const {
    subscription
  } = getAuthConfig(state);
  let {
    server
  } = getAuthConfig(state);
  let {
    userInfo
  } = (0, _cloneDeep2.default)(state.authentication);

  // For backwards compatibility, we need to fall back to
  // subscription for the server connection details
  if (!server) {
    server = {
      protocol: subscription.protocol,
      base: subscription.server,
      port: subscription.port,
      version: subscription.version
    };
  }

  // If user info does not exist yet, use an empty object. Requests will still fail, but they will be handled.
  if (!userInfo) {
    userInfo = {};
  }
  let requestInfo;
  if (platform === _constants2.platforms.LINK) {
    requestInfo = {
      baseURL: `${server.protocol}://${server.base}:${server.port}`,
      version: server.version,
      username: userInfo.username
    };
  } else {
    // Platform is not supported
    return {};
  }
  const connInfo = getConnectionInfo(state, platform);
  if (connInfo && connInfo.requestOptions) {
    requestInfo.requestOptions = connInfo.requestOptions;
  }
  return requestInfo;
}

/***/ }),

/***/ 86025:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = authFactory;
var _interface = __webpack_require__(71168);
var initOperations = _interopRequireWildcard(__webpack_require__(94653));
var _actions = __webpack_require__(43424);
var _utils = __webpack_require__(25189);
var _validation = __webpack_require__(42850);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// The interface to follow.

// Operations

// State setters.

// Utilities.

// Parse and/or Validate

/**
 * On link authentication implementation factory.
 * @method authLink
 * @param {Object} [options={}] - Configuration options for authentication. See above.
 * @return {Object} plugin - An authentication plugin.
 */
function authFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  const {
    logManager
  } = bottle.container;

  // Get the logger
  const log = logManager.getLogger('AUTH');

  /**
   * Configuration options for the Authentication feature.
   * @public
   * @name config.authentication
   * @memberof config
   * @instance
   * @param {Object} authentication Authentication configs.
   * @param {Object} authentication.server
   * @param {string} authentication.server.base Hostname of the server to be used for requests.
   * @param {string} [authentication.server.protocol='https'] Protocol to be used for requests.
   * @param {number} [authentication.server.port=443] Port to be used for requests.
   */

  const defaultOptions = {
    server: {
      protocol: 'https',
      base: null,
      port: 443,
      version: '1' // not documented, but important
    }
  };

  // config validation
  const v8nValidation = _validation.validation.schema({
    server: _validation.validation.schema({
      protocol: (0, _validation.enums)(['http', 'https']),
      base: _validation.validation.string(),
      port: _validation.validation.positive(),
      version: (0, _validation.enums)(['1']) // not documented, but important
    })
  });
  const parseOptions = (0, _validation.parse)('authentication', v8nValidation);
  options = (0, _utils.mergeValues)(defaultOptions, options);
  parseOptions(options);
  if (!options.server.base) {
    log.error('No server configuration provided. Please provide proper authentication configurations.');
  }
  function initPlugin(container) {
    const {
      context
    } = container;
    // Send the provided options to the store.
    // This will be `state.config[name]`.
    context.dispatch((0, _actions.update)(options, _interface.name));
  }

  // Register the component factory functions to the bottle.
  bottle.factory('AuthenticationAPI', _interface.createAPI);
  bottle.defer(initPlugin);
  for (const name in initOperations) {
    initOperations[name](bottle);
  }
  const capabilities = ['userCredentialsAuth', 'hmacTokenAuth', 'bearerAccessTokenAuth', 'accessTokenAuthCIM'];
  return {
    name: _interface.name,
    capabilities,
    reducer: _interface.reducer
  };
}

/***/ }),

/***/ 94653:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerOperations;
var _updateToken = _interopRequireDefault(__webpack_require__(5273));
var _setCredentials = _interopRequireDefault(__webpack_require__(82799));
/*
 * Register the operation with the bottle. This will make it available on the
 *    top-level container under its namespace.
 */
function registerOperations(bottle) {
  bottle.factory('AuthenticationOperations.updateToken', () => {
    return (0, _updateToken.default)(bottle.container);
  });
  bottle.factory('AuthenticationOperations.setCredentials', () => {
    return (0, _setCredentials.default)(bottle.container);
  });
}

/***/ }),

/***/ 82799:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(35770));
var eventTypes = _interopRequireWildcard(__webpack_require__(71430));
var _selectors = __webpack_require__(48944);
var _constants = __webpack_require__(49833);
var _selectors2 = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _base = _interopRequireDefault(__webpack_require__(21166));
var _utf = _interopRequireDefault(__webpack_require__(35050));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Auth

// Subscription plugin

// Constants

// State selectors

// Errors

// Libraries

function createOperation(container) {
  const {
    logManager,
    context,
    emitEvent
  } = container;
  const log = logManager.getLogger('AUTH');

  // This is an Link plugin.
  const platform = _constants.platforms.LINK;
  function setCredentials(_ref) {
    let {
      username,
      password,
      authname,
      hmacToken,
      bearerAccessToken,
      accessToken
    } = _ref;
    const {
      username: existingUsername,
      token: existingToken
    } = (0, _selectors2.getUserInfo)(context.getState());
    const activeServices = (0, _selectors.getSubscribedServices)(context.getState());
    const passedToken = accessToken || undefined; // convert empty string to undefined
    if ((existingUsername !== username || existingToken !== passedToken) && activeServices.length > 0) {
      // User wants to change credentials while SDK is already subscribed to some services, under different credentials.
      // Tell user to first unsubscribe.
      const error = new _errors.default({
        message: 'Cannot change credentials while previous user has an active subscription.',
        code: _errors.authCodes.INVALID_STATE
      });
      context.dispatch(actions.setCredentialsFinished({
        error
      }, platform));
      emitEvent(eventTypes.AUTH_ERROR, {
        error
      });
      return;
    }

    // Retrieve the connection info.
    const config = (0, _selectors2.getAuthConfig)(context.getState());

    // Common request options, to be used for all subsequent requests after connect.
    const requestOptions = {
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      }
    };
    if (hmacToken) {
      // Only need the hmacToken in the x-token header when subscribing.
      log.info('Setting the info for hmacToken scenario.');
      requestOptions.headers['x-token'] = hmacToken;
    } else if (username && accessToken) {
      log.info('Setting the info for accessToken CIM Auth scenario.');
      requestOptions.queryParams = {
        token: accessToken
      };
    } else if (authname && password) {
      log.info('Setting the info for authname/password scenario.');
      requestOptions.headers.Authorization = 'Basic ' + _base.default.encode(_utf.default.encode(authname + ':' + password));
    } else if (bearerAccessToken && username) {
      log.info('Setting the info for bearerAccessToken/username scenario.');
      requestOptions.headers.Authorization = `Bearer ${bearerAccessToken}`;
    } else if (username && password) {
      log.info('Setting the info for username/password scenario.');
      requestOptions.headers.Authorization = 'Basic ' + _base.default.encode(_utf.default.encode(username + ':' + password));
    } else {
      log.info('Unexpected credentials scenario.');
      const error = new _errors.default({
        message: 'This credentials signature is not valid.',
        code: _errors.authCodes.INVALID_CREDENTIALS
      });
      context.dispatch(actions.setCredentialsFinished({
        error
      }, platform));
      emitEvent(eventTypes.AUTH_ERROR, {
        error
      });
      return;
    }

    // Gather information to provide externally.
    const userInfo = {
      username
    };

    // Gather information to provide internally, to other plugins.
    const connection = {
      server: {
        server: config.server.base,
        port: config.server.port,
        protocol: config.server.protocol,
        version: config.server.version
      },
      username,
      bearerAccessToken,
      // Request options that all other (Link) plugins will use.
      requestOptions,
      accessToken
    };
    context.dispatch(actions.setCredentialsFinished({
      userInfo,
      connection
    }, platform));
    emitEvent(eventTypes.AUTH_CHANGE, {});
  }
  return setCredentials;
}

/***/ }),

/***/ 5273:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(35770));
var eventTypes = _interopRequireWildcard(__webpack_require__(71430));
var _constants = __webpack_require__(49833);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Auth

// Constants

function createOperation(container) {
  const {
    logManager,
    context,
    emitEvent
  } = container;
  const log = logManager.getLogger('AUTH');

  // This is an Link plugin.
  const platform = _constants.platforms.LINK;
  function updateToken(_ref) {
    let {
      username,
      accessToken,
      bearerAccessToken
    } = _ref;
    let requestOptions = {};
    if (bearerAccessToken && username && !accessToken) {
      // For subscription requests using an OAuth Token, attach it as a header.
      requestOptions = {
        headers: {
          Authorization: `Bearer ${bearerAccessToken}`
        }
      };
    } else if (accessToken && username && !bearerAccessToken) {
      // Ensure the extra options for requests is updated with the new token.
      requestOptions.queryParams = {
        token: accessToken
      };
    } else {
      log.debug('updateToken called without the necessary parameters');
    }
    log.info('Refreshing token for platform: ', platform);
    context.dispatch(actions.refreshTokensFinished({
      connection: {
        credentials: {
          username,
          accessToken,
          bearerAccessToken
        },
        requestOptions
      }
    }, platform));
    emitEvent(eventTypes.AUTH_CHANGE, {});
  }
  return updateToken;
}

/***/ }),

/***/ 99392:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createTracker;
var _constants = __webpack_require__(37409);
/**
 * Factory for an "on-going operation" tracker.
 * An "operation tracker" is a utility object for managing the list of on-going
 *    operations for a call.
 * @method createTracker
 * @param {Object} log A logger for the call being tracked.
 */
function createTracker(log) {
  // List of on-going operations.
  const operations = [];

  // State getters.
  const isBlocked = () => Boolean(getBlocking());

  /*
   * Methods.
   */

  /**
   * Adds a new operation to the list of on-going operations.
   * @method add
   * @param {Operation} operation
   */
  function add(operation) {
    const opString = `${operation.isLocal ? 'local' : 'remote'} ${operation.type}`;
    log.debug(`Operations: Tracking ${opString} operation with ${operations.length} other on-going operations.`);

    // TODO: operation.isBlocking instead?
    if (operation.isNegotiation && isBlocked()) {
      // Avoid glare scenarios with two "blocking" operations at the same time.
      const ongoing = getBy('isNegotiation', true);
      log.info(`Cannot track new negotiation because of ${ongoing.status} ${ongoing.type} operation.`);
      throw new Error('Cannot track two blocking operations!');
    } else if (getBy('id', operation.id)) {
      // Operations should only be 'added' once. This error indicates a bug.
      log.warn('Cannot track operation that was previously tracked.');
      throw new Error('Operation is already being tracked!');
    } else if (operation.tracker.status !== _constants.OP_STATUS.NOT_STARTED) {
      // Operations should be 'added' before they are started. This error indicates a bug.
      log.warn('Cannot track operation that was previously started.');
      throw new Error('Operation was already started!');
    }
    operations.push(operation);
  }

  /**
   * Removes a finished operation from the list of on-going operations.
   * @method remove
   * @param {Operation} operation
   */
  function remove(operation) {
    const opString = `${operation.isLocal ? 'local' : 'remote'} ${operation.type}`;
    log.debug(`Operations: Done tracking ${opString} operation with ${operations.length - 1} other on-going operations.`);
    if (!getBy('id', operation.id)) {
      // This error indicates a bug.
      log.warn('Cannot stop tracking operation that was not previously tracked.');
      throw new Error('Operation is not being tracked!');
    } else if (operation.tracker.status !== _constants.OP_STATUS.FINISHED) {
      if (operation.isLocal && [_constants.OPERATIONS.JOIN, _constants.OPERATIONS.DIRECT_TRANSFER, _constants.OPERATIONS.CONSULTATIVE_TRANSFER].includes(operation.type)) {
        // TODO: Fix complex operation flows to properly handle the response notification.
        // Complex operations are never "finished" because the remoteOnly flow does not have
        //    access to the Operation object, so don't error here.
      } else {
        // Operations follow a consistent "flow" before being 'removed'. This error indicates a bug.
        log.warn('Cannot stop tracking operation that has not finished.');
        throw new Error(`Cannot remove on-going ${opString} operation! (${operation.tracker.status})`);
      }
    }
    const index = operations.findIndex(op => op.id === operation.id);
    operations.splice(index, 1);
  }

  /*
   * Getter methods.
   */

  // Get an operation based on a property.
  function getBy(prop, val) {
    return operations.find(op => op[prop] === val);
  }

  // Get the list of operations in "pending" status"
  function getPending() {
    return operations.filter(op => op.tracker.status === _constants.OP_STATUS.PENDING);
  }

  /**
   * Get the on-going operation that is blocking other ones.
   * @method getBlocking
   * @return {Object}
   */
  function getBlocking() {
    return operations.find(op => {
      return op.isNegotiation && op.tracker.status !== _constants.OP_STATUS.FINISHED ||
      // Prevent new operations if the call is ending.
      op.type === _constants.OPERATIONS.END;
    });
  }

  // Get the list of all operations.
  function getAll() {
    return operations;
  }
  return {
    // Methods.
    add,
    remove,
    // TODO: Convert `operations` to redux friendly version.
    toState: () => {},
    // Getter methods.
    getById: id => getBy('id', id),
    // TODO: Does it make sense to have multiple operations of the same type?
    getByType: type => getBy('type', type),
    getNegotiation: () => getBy('isNegotiation', true),
    getPending,
    getBlocking,
    getAll,
    // Getter properties.
    get isBlocked() {
      return isBlocked();
    }
  };
}

/***/ }),

/***/ 22286:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createTracker;
exports.finishOperation = finishOperation;
exports.startOperation = startOperation;
exports.updateOperation = updateOperation;
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

/**
 * Factory for an "operation status" tracker.
 * A "status tracker" is a utility object for managing call state updates
 *    and events for tracking the status of an operation.
 *
 * Each function is a code-block that was repeated numerous times in the
 *    CallManager. So it was split out to reduce noise.
 * The fact that this utility exists is a sign that how we do this is bad.
 * @method createTracker
 * @param {Object} container
 * @param {string} callId
 * @param {string} operationId
 * @param {string} eventId
 * @param {Object} opInfo
 * @param {string} opInfo.type
 * @param {boolean} opInfo.isLocal
 * @param {boolean} opInfo.isNegotiation
 * @param {Object} [joinOptions] Edge-case parameter when the operation is created elsewhere.
 */
function createTracker(container, callId, operationId, eventId, opInfo, joinOptions) {
  const tracker = {
    status: _constants.OP_STATUS.NOT_STARTED
  };
  const log = container.logManager.getLogger('CALL', callId);
  // Human-readable operation type+endpoint, eg. "local HOLD", "remote ADD_MEDIA".
  const opString = `${opInfo.isLocal ? 'local' : 'remote'} ${opInfo.type}`;
  if (opInfo.type === _constants.OPERATIONS.JOIN && joinOptions && joinOptions.isJoinedCall) {
    // JOIN is a special-case. A newly joined call's `tracker.start()` method will not be called,
    //    so initialize the tracker in an already started state. The join operation needs to be
    //    changed for this to be fixed.
    tracker.status = _constants.OP_STATUS.ONGOING;
  }

  // The operation has started. Update status and perform side-effects.
  tracker.start = () => {
    log.info(`Operations: Starting ${opString} operation. Performing local changes.`);
    if (tracker.status !== _constants.OP_STATUS.NOT_STARTED) {
      log.debug(`Cannot start ${opString} operation; already started.`);
      throw new Error('Operation tracking has already been started.');
    }
    startOperation(container, callId, operationId, eventId, opInfo);
    tracker.status = _constants.OP_STATUS.ONGOING;
  };

  // The operation has finished local processing. Update status and perform side-effects.
  tracker.update = result => {
    log.info(`Operations: Updating ${opString} operation. Waiting on remote response.`);
    if (tracker.status !== _constants.OP_STATUS.ONGOING) {
      log.debug(`Cannot update ${opString} operation; already pending.`);
      throw new Error('Operation tracking cannot be updated.');
    }
    updateOperation(container, callId, operationId, eventId, opInfo, result);
    tracker.status = _constants.OP_STATUS.PENDING;
  };

  // The operation has finished. Update status and perform side-effects.
  tracker.finish = err => {
    log.info(`Operations: Finishing ${opString} operation as ${err ? 'failure' : 'success'}.`);
    if (![_constants.OP_STATUS.ONGOING, _constants.OP_STATUS.PENDING].includes(tracker.status)) {
      log.debug(`Cannot finish ${opString} operation; already finished.`);
      throw new Error('Operation tracking cannot be finished.');
    }
    finishOperation(container, callId, operationId, eventId, opInfo, err, tracker.status);
    tracker.status = _constants.OP_STATUS.FINISHED;
  };
  return tracker;
}

/**
 * Perform side-effects of an operation starting:
 *    - Add an operation event to the call's report.
 *    - Update redux state to add the operation.
 *    - Emit an event to the application.
 * @method startOperation
 * @param {Object} container
 * @param {string} callId
 * @param {string} operationId
 * @param {string} eventId
 * @param {Object} opInfo
 * @param {string} opInfo.type
 * @param {boolean} opInfo.isLocal
 * @param {boolean} opInfo.isNegotiation
 * @returns {undefined}
 */
function startOperation(container, callId, operationId, eventId, opInfo) {
  const {
    context,
    emitEvent
  } = container;
  const {
    type,
    isNegotiation
  } = opInfo;

  // Update call state to indicate that an operation is starting.
  context.dispatch(_actions.callActions.operationUpdate(callId, type, opInfo.isLocal, {
    transition: _constants.OP_TRANSITIONS.START,
    eventId,
    isBlocking: isNegotiation,
    operationId
  }));

  // Emit "operation start" event for the call.
  emitEvent(eventTypes.CALL_OPERATION, {
    callId,
    operationId,
    isLocal: opInfo.isLocal,
    operation: type,
    transition: _constants.OP_TRANSITIONS.START,
    previous: undefined
  });
}

/**
 * Perform side-effects of an operation updating:
 *    - Update redux state to update the operation.
 *    - Emit an event to the application.
 * @method updateOperation
 * @param {Object} container
 * @param {string} callId
 * @param {string} operationId
 * @param {string} eventId
 * @param {Object} opInfo
 * @param {string} opInfo.type
 * @param {boolean} opInfo.isLocal
 * @param {boolean} opInfo.isNegotiation
 * @param {Object} result
 * @returns {undefined}
 */
function updateOperation(container, callId, operationId, eventId, opInfo, result) {
  const {
    context,
    emitEvent
  } = container;
  context.dispatch(_actions.callActions.operationUpdate(callId, opInfo.type, opInfo.isLocal, {
    transition: _constants.OP_TRANSITIONS.UPDATE,
    operationData: result && result.operationData ? result.operationData : undefined,
    eventId,
    operationId
  }));

  // Emit "operation update/finish" event for the call.
  emitEvent(eventTypes.CALL_OPERATION, {
    callId,
    operationId,
    isLocal: opInfo.isLocal,
    operation: opInfo.type,
    transition: _constants.OP_TRANSITIONS.UPDATE,
    previous: {
      operation: opInfo.type,
      status: _constants.OP_STATUS.ONGOING
    }
  });
}

/**
 * Perform side-effects of an operation finishing:
 *    - Finish the operation's event in the call report.
 *    - Update redux state to update the operation.
 *    - Emit an event to the application.
 * @method finishOperation
 * @param {Object} container
 * @param {string} callId
 * @param {string} operationId
 * @param {string} eventId
 * @param {Object} opInfo
 * @param {string} opInfo.type
 * @param {boolean} opInfo.isLocal
 * @param {boolean} opInfo.isNegotiation
 * @param {BasicError} err
 * @param {string} status The current status of the operation, before being finished.
 * @returns {undefined}
 */
function finishOperation(container, callId, operationId, eventId, opInfo, err, status) {
  const {
    context,
    emitEvent
  } = container;

  // Update call state to indicate the operation is finished, since it failed.
  context.dispatch(_actions.callActions.operationUpdate(callId, opInfo.type, opInfo.isLocal, {
    transition: _constants.OP_TRANSITIONS.FINISH,
    eventId,
    operationId
  }));

  // Emit "operation finish" event for the application.
  emitEvent(eventTypes.CALL_OPERATION, {
    callId,
    operationId,
    isLocal: opInfo.isLocal,
    operation: opInfo.type,
    transition: _constants.OP_TRANSITIONS.FINISH,
    error: err,
    previous: {
      operation: opInfo.type,
      status
    }
  });
}

/***/ }),

/***/ 57679:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
var _StatusTracker = _interopRequireDefault(__webpack_require__(22286));
// CallManager.

/**
 * Operation flow for a consultative transfer operation.
 *
 * This operation has its own flow because of special-handling needed:
 *    - It acts on two local calls, which both need call report / status updates.
 *    - The primary call's "response" notification is of two different types,
 *        depending on success or failure.
 *    - The second call receives a generic "call end" notification to indicate
 *        success, and no notification on failure.
 */
function createFlow(container) {
  const {
    context,
    CallReporter
  } = container;

  /**
   * A consultative transfer operation has been started locally. Perform the
   *    operation, while tracking it against two calls.
   * @method localChanges
   */
  async function localChanges(priCallId, operation, params) {
    // Setup tracking on the secondary call.
    const secCallId = params[0];
    const secReport = CallReporter.getReport(secCallId);
    const secOpEvent = secReport.addEvent(operation.reportEvent.type);

    /*
     * Validate the operation before starting it. If the operation deems that it
     *    can't be done right now, avoid doing any state tracking, etc. for the
     *    operation.
     */
    const validationError = operation.stages.validate(context.getState(), priCallId, ...params);
    if (validationError) {
      // Update the Call Report to indicate the operation ended with an error.
      operation.reportEvent.endEvent(validationError);
      secOpEvent.endEvent(validationError);
      throw validationError;
    }
    operation.tracker.start();
    // The tracker to update the second call's state needs to be created manually.
    // TODO: How to "finish" the secTracker on notification response?
    const secTracker = (0, _StatusTracker.default)(container, secCallId, operation.id, secOpEvent.id, operation);
    secTracker.start();
    try {
      // Perform the operation.
      await operation.stages.localOffer(priCallId, ...params);

      // Update operation tracking; now waiting on remote response.
      operation.tracker.update();
      secTracker.update();
    } catch (err) {
      operation.reportEvent.endEvent(err);
      secOpEvent.endEvent(err);

      // Finish operation tracking; operation has failed.
      operation.tracker.finish(err);
      secTracker.finish(err);
      throw err;
    }
  }

  /**
   * A "session complete" notification has been received for the primay call,
   *    indicating the consultative transfer succeeded. The primary call needs
   *    to be cleaned-up.
   * @method remoteSuccess
   */
  async function remoteSuccess(call, operation, params) {
    /*
     * TODO: Pre-processing logic.
     *    - KJS-2175 Queue Inputs: Is the operation ready for this notification?
     *    - Update call report/status: From "waiting" to "processing"?
     */
    await operation.stages.remoteSuccess(call, params);
    operation.reportEvent.endEvent();
    operation.tracker.finish();
  }

  /**
   * A "session failure" notification has been received for the primary call,
   *    indicating the consultative transfer failed.
   * @method remoteFailure
   */
  async function remoteFailure(call, operation, params) {
    /*
     * TODO: Pre-processing logic.
     *    - KJS-2175 Queue Inputs: Is the operation ready for this notification?
     *    - Update call report/status: From "waiting" to "processing"?
     */
    const error = await operation.stages.remoteFailure(call, params);
    operation.reportEvent.endEvent(error);
    operation.tracker.finish(error);
  }

  /**
   * A "call end" notification has been received for the secondary call,
   *    indicating the consultative transfer succeeded. The backend considers
   *    the secondary call ended, so only need client-side updates.
   * @method callEndSuccess
   */
  async function callEndSuccess(call, operation, params) {
    // KJS-2176 TODO: Implement this. Have the CallManager redirect the
    //    notification here instead of the general "call end" handler.
  }
  return {
    localChanges,
    remoteSuccess,
    remoteFailure,
    callEndSuccess
  };
}

/***/ }),

/***/ 93907:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
var _LocalOperation = _interopRequireDefault(__webpack_require__(76445));
/**
 * Operation flow for a direct transfer operation.
 *
 * This operation has its own flow because of special-handling needed:
 *    - The "response" notification is of two different types, depending
 *        on success or failure.
 */
function createFlow(container) {
  /**
   * A direct transfer operation has been started locally.
   * The "local changes" portion is identical to a local
   *    negotiation. Re-use that flow.
   * @method localChanges
   */
  const localChanges = (0, _LocalOperation.default)(container);

  /**
   * A "session complete" notification has been received, indicating the
   *    direct transfer succeeded. The original call needs to be cleaned-up.
   * @method remoteSuccess
   */
  async function remoteSuccess(call, operation, params) {
    /*
     * TODO: Pre-processing logic.
     *    - KJS-2175 Queue Inputs: Is the operation ready for this notification?
     *    - Update call report/status: From "waiting" to "processing"?
     */
    await operation.stages.remoteSuccess(call, params);
    operation.reportEvent.endEvent();
    operation.tracker.finish();
  }

  /**
   * A "session failure" notification has been received, indicating the
   *    direct transfer failed. The original call still exists.
   * @method remoteFailure
   */
  async function remoteFailure(call, operation, params) {
    /*
     * TODO: Pre-processing logic.
     *    - KJS-2175 Queue Inputs: Is the operation ready for this notification?
     *    - Update call report/status: From "waiting" to "processing"?
     */
    const error = await operation.stages.remoteFailure(call, params);
    operation.reportEvent.endEvent(error);
    operation.tracker.finish(error);
  }
  return {
    localChanges,
    remoteSuccess,
    remoteFailure
  };
}

/***/ }),

/***/ 51994:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
var _StatusTracker = _interopRequireDefault(__webpack_require__(22286));
var _constants = __webpack_require__(37409);
// CallManager.

// Call plugin.

/**
 * Operation flow for a join operation.
 *
 * This operation has its own flow because of special-handling needed:
 *    - It acts on three local calls (two existing, one new).
 *    - The existing calls' "response" notification is of two different types,
 *        depending on success or failure.
 *    - The new, joined call's response notification is of two different types,
 *        depending on success or failure.
 */
function createFlow(container) {
  const {
    context,
    CallReporter
  } = container;

  /**
   * A join operation has been started locally.
   * @method localChanges
   */
  async function localChanges(priCallId, operation, params) {
    // Setup tracking on the secondary call.
    const secCallId = params[0];
    const secReport = CallReporter.getReport(secCallId);
    const secOpEvent = secReport.addEvent(operation.reportEvent.type);

    /*
     * Validate the operation before starting it. If the operation deems that it
     *    can't be done right now, avoid doing any state tracking, etc. for the
     *    operation.
     */
    const validationError = operation.stages.validate(context.getState(), priCallId, ...params);
    if (validationError) {
      // Update the Call Report to indicate the operation ended with an error.
      operation.reportEvent.endEvent(validationError);
      secOpEvent.endEvent(validationError);
      throw validationError;
    }
    operation.tracker.start();
    // The tracker to update the second call's state needs to be created manually.
    // TODO: How to "finish" the secTracker on notification response?
    const secTracker = (0, _StatusTracker.default)(container, secCallId, operation.id, secOpEvent.id, operation);
    secTracker.start();

    /*
     * Setup tracking for the third, joined call. Since this call is new, it does
     *    not have a tracker / call report yet.
     */
    const joinedCallId = params[1];
    const joinedCallReport = CallReporter.createReport('CALL', joinedCallId);
    const joinOpEvent = joinedCallReport.addEvent(operation.reportEvent.type);
    const joinTracker = (0, _StatusTracker.default)(container, joinedCallId, operation.id, joinOpEvent.id, operation, {
      isJoinedCall: true
    });
    try {
      // Perform the operation.
      await operation.stages.localOffer(priCallId, ...params);

      // Update operation tracking; now waiting on remote response.
      operation.tracker.update();
      secTracker.update();
      joinTracker.update();
    } catch (err) {
      operation.reportEvent.endEvent(err);
      secOpEvent.endEvent(err);
      joinOpEvent.endEvent(err);

      // Finish operation tracking; operation has failed.
      operation.tracker.finish(err);
      secTracker.finish(err);
      joinTracker.finish(err);
      throw err;
    }
  }

  /**
   * A "respond call update" notification has been received for the new, joined
   *    call, which indicates a successful operation. Process the answer to
   *    establish the joined call.
   * @method joinAnswer
   */
  async function joinAnswer() {
    // KJS-2176 TODO: Implement this. Have the CallManager redirect the
    //    notification here instead of the general "call end" handler.
  }

  /**
   * A "call end" notification has been received for the new, joined call,
   *    which indicates a failed operation. The other calls do not receive
   *    notifications in this scenario, so all must be updated.
   * @method joinEnd
   */
  async function joinEnd() {
    // KJS-2176 TODO: Implement this. Have the CallManager redirect the
    //    notification here instead of the general "call end" handler.
  }

  /**
   * A "session complete" notification has been received for an existing call,
   *    which indicates operation success. This call needs to be cleaned-up.
   * Note: Both existing calls receive their own notification, so only update
   *    one at a time.
   * @method remoteSuccess
   */
  async function remoteSuccess(call, operation, params) {
    /*
     * TODO: Pre-processing logic.
     *    - KJS-2175 Queue Inputs: Is the operation ready for this notification?
     *    - Update call report/status: From "waiting" to "processing"?
     */
    await operation.stages.remoteSuccess(call, params);

    /*
     * Note: Don't manage operation tracking with these success operations.
     * Join receives 3 notifications to indicate it succeeded (a respondCallUpdate for the new, joined
     *    call, and these sessionComplete for the existing calls). Because of this, there is overlap between
     *    them for when the operation actually ends. Currently, it is ended by the `respondCallUpdate`
     *    notification which is received first, so don't try to end it again here.
     */
  }

  /**
   * A "session fail" notification has been received for an existing call,
   *    which indicates a failed operation.
   * Note: Both existing calls receive their own notification, so only update
   *    one at a time.
   * @method remoteFailure
   */
  async function remoteFailure(call, operation, params) {
    /*
     * TODO: Pre-processing logic.
     *    - KJS-2175 Queue Inputs: Is the operation ready for this notification?
     *    - Update call report/status: From "waiting" to "processing"?
     */
    const error = await operation.stages.remoteFailure(call, params);
    if (operation.status !== _constants.OP_STATUS.FINISHED) {
      // Two "failure" notifications will be received; one for each call. Only end the
      //    the operation on the first notification processed to avoid overlap.
      operation.reportEvent.endEvent(error);
      operation.tracker.finish(error);
    }
  }
  return {
    localChanges,
    joinAnswer,
    joinEnd,
    remoteSuccess,
    remoteFailure
  };
}

/***/ }),

/***/ 25967:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _state = __webpack_require__(65794);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

/**
 * Operation flow for local negotiations.
 *
 * Defines how the "inputs" should be handled from each side of the call
 *    (ie. local API call and remote response received). Handles common
 *    logic for all negotiations, leaving actual call/webrtc processing
 *    to the Operation itself.
 *
 * A Local Negotiation can receive the following inputs:
 *    - API Call: To start the local negotiation.
 *    - Notification Response (success): The remote response to complete negotiation.
 *    - Notification Response (error): The remote response to indicate negotiation
 *        failed due to an error on the remote end.
 */
function createFlow(container) {
  const {
    context,
    emitEvent,
    logManager
  } = container;

  /**
   * Entry for the first half of the flow: perform local changes on the call
   *    before signalling to the remote side.
   * @method localChanges
   * @async
   * @param {string} callId ID for the call being operated on.
   * @param {Operation} operation The operation being performed.
   * @param {Object} params Operation
   * @return {Promise<undefined>}
   */
  async function localChanges(callId, operation, params) {
    /*
     * Check for glare scenarios.
     * ...
     */

    // Start tracking this operation in state.
    operation.tracker.start();

    /*
     * Validate the operation before starting it. If the operation deems that it
     *    can't be done right now, avoid doing any state tracking, etc. for the
     *    operation.
     */
    if (operation.stages.validate) {
      const validationError = operation.stages.validate(context.getState(), callId, ...params);
      if (validationError) {
        // Update the Call Report to indicate the operation ended with an error.
        operation.reportEvent.endEvent(validationError);
        operation.tracker.finish(validationError);
        throw validationError;
      }
    }

    /*
     * Perform the local portions of the negotiation.
     */
    try {
      const result = await operation.stages.localOffer(callId, ...params);
      operation.tracker.update(result);
      return result;
    } catch (err) {
      /*
       * Operation failed, end the operation tracking and throw the error.
       */
      operation.reportEvent.endEvent(err);
      operation.tracker.finish(err);
      throw err;
    }
  }

  /**
   * Entry for the second half of the flow: handle the remote response to complete the negotiation.
   *    If the response includes an answer SDP, process it to finish the negotiation.
   *    If the response indicate an error, rollback the local changes.
   * @method remoteResponse
   * @async
   * @param {Object} call The call being operated on.
   * @param {Operation} operation The operation being performed.
   * @param {Object} params Response data provided by the remote endpoint.
   * @return {Promise<undefined>}
   */
  async function remoteResponse(call, operation, params) {
    const wrtcsSessionId = call.wrtcsSessionId;
    const log = logManager.getLogger('CALL', call ? call.id : undefined);
    if (call.state === _constants.CALL_STATES.ENDED) {
      // Scenario: The notification is about a call that state says is ended.
      //    Ignore the notification, since ended calls should not have an active
      //    webRTC Session.
      log.info('Update response for ended call. Ignoring.', {
        wrtcsSessionId
      });
      return;
    }

    /**
     * Check that the notification was not an "error" notification.
     * Status code 49 with a `retryAfter` value indicates the original operation
     *    failed (likely glare condition) and the SDK should retry the operation.
     */
    if (!params.sdp && params.code === 49 && params.retryAfter) {
      await rollbackLocal(call, operation, params);
      return;
    }

    // Dispatch a custom parameters received action/event if any custom parameters
    //    were received as part of the notification.
    // TODO: Handle this is a more general way, since multiple notifications can
    //    have custom parameters on them.
    if (params.customParameters) {
      const customParameters = params.customParameters;
      const customNames = customParameters.map(param => param.name);
      log.debug(`Received custom parameters as part of the Call: ${customNames}.`);
      context.dispatch(_actions.callActions.customParametersReceived(call.id, {
        customParameters
      }));

      // Emit the associated event with the above action
      emitEvent(eventTypes.CUSTOM_PARAMETERS, {
        callId: call.id,
        customParameters
      });
    }
    return await processResponse(call, operation, params);
  }

  /**
   * Negotiation step to process the remote answer SDP.
   *
   * Process the answer SDP, update call state to mark the operation as
   *    finished, then tell the application of the update.
   * @method processResponse
   * @async
   * @param {Object} call The call being operated on.
   * @param {Operation} operation The operation being performed.
   * @param {Object} params Response data provided by the remote endpoint.
   * @return {Promise<undefined>}
   */
  async function processResponse(call, operation, params) {
    const log = logManager.getLogger('CALL', call.id);
    log.info(`Processing remote response for local ${operation.type} operation.`);
    const mediaState = (0, _state.getMediaState)(call);
    log.debug(`Current call info; State: ${call.state}, MediaState: ${mediaState}.`);
    await operation.stages.remoteAnswer(call, params);
    operation.reportEvent.endEvent();
    operation.tracker.finish();
  }

  /**
   * Negotiation step to undo the local changes.
   * @method rollbackLocal
   * @async
   * @param {Object} call
   * @param {Operation} operation
   * @param {Object} params
   * @return {Promise<undefined>}
   */
  async function rollbackLocal(call, operation, params) {
    const log = logManager.getLogger('CALL', call.id);
    // TODO: Properly handle this scenario. The call may be in a bad state
    //    because we set an offer but not an answer. May need to revert
    //    signaling state and/or re-perform operation internally.
    // For now, fail loudly and abort the operation to prevent crashes. The
    //    negotiation sagas expect there to be an SDP.
    // The call state will be left in a broken state because of KAA-1607.
    log.error(`Response indicates an error scenario (${params.message}). Aborting operation.`);
    const error = new _errors.default({
      message: 'Operation failed on remote side; aborting.',
      code: _errors.callCodes.GENERIC_ERROR
    });
    operation.reportEvent.endEvent(error);
    operation.tracker.finish(error);
    return;
  }
  return {
    localChanges,
    // Start the negotiation.
    remoteResponse // Handle remote response.
  };
}

/***/ }),

/***/ 76445:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
/**
 * Operation flow for local-only operations.
 *
 * Handles common logic for all local-only operations, leaving actual
 *    call/webrtc processing to the Operation itself.
 *
 * A Local Operation can receive the following inputs:
 *    - API Call: To start the local negotiation.
 */
function createFlow(container) {
  const {
    context
  } = container;

  /**
   * @method localChanges
   * @async
   * @param {string} callId
   * @param {Operation} operation
   * @param {Object} params
   * @throws {BasicError} Throws an error if operation validation fails.
   * @throws {BasicError} Throws an error if the operation itself fails.
   * @return {Promise<Object|undefined>}
   */
  async function localChanges(callId, operation, params) {
    /*
     * Check for glare scenarios.
     * ...
     */

    // Start tracking this operation in state.
    operation.tracker.start();

    /*
     * Validate the operation before starting it. If the operation deems that it
     *    can't be done right now, avoid doing any state tracking, etc. for the
     *    operation.
     */
    if (operation.stages.validate) {
      const validationError = operation.stages.validate(context.getState(), callId, ...params);
      if (validationError) {
        // Update the Call Report to indicate the operation ended with an error.
        operation.reportEvent.endEvent(validationError);
        operation.tracker.finish(validationError);
        throw validationError;
      }
    }

    /*
     * Perform the local portions of the negotiation.
     */
    try {
      const result = await operation.stages.localOffer(callId, ...params);
      operation.reportEvent.endEvent();
      operation.tracker.finish();
      return result;
    } catch (err) {
      /*
       * Operation failed, end the operation tracking and throw the error.
       */
      operation.reportEvent.endEvent(err);
      operation.tracker.finish(err);
      throw err;
    }
  }
  return {
    localChanges // Start the operation.
  };
}

/***/ }),

/***/ 94131:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
var _selectors = __webpack_require__(11430);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(42750);
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Call Reports.

// Libraries

/*
 * Operation flow for receiving a new, incoming call.
 *    ie. Only for handling a remote offer when the call doesn not exist already.
 *
 * Handles lots of logic for setting up the call in the SDK, and handling parts
 *    of the notification itself (eg. custom parameters), then hands-off to the
 *    operation itself to setup the WebRTC portions of the call.
 */
function createFlow(container) {
  const {
    context,
    Callstack,
    CallReporter,
    emitEvent,
    logManager
  } = container;

  /**
   * Handle incoming call "establish offer" messages.
   * @method newIncoming
   * @param {string} wrtcsSessionId The ID used by the backend to identify the call.
   * @param {Object} params Arbitrary parameter object.
   * @param {string} [channel] The notification channel the message was received on.
   */
  async function newIncoming(wrtcsSessionId, params, channel) {
    const log = logManager.getLogger('CALL', params.callId);
    log.info('Received new incoming call; initiating.', {
      wrtcsSessionId
    });
    const call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    if (call) {
      log.warn('Local call already exists; ignoring incoming call.');
      return;
    }
    const isSlowStart = !params.sdp;
    const callReport = CallReporter.createReport('CALL', params.callId);
    const notificationEvent = callReport.addEvent(_constants.REPORT_EVENTS.RECEIVE_CALL);
    let mediaOffered = null;
    if (!isSlowStart) {
      // For a regular call, parse the SDP & collect what media has been offered by the caller:
      // We only support two types
      mediaOffered = {
        audio: false,
        video: false
      };
      _sdpTransform.default.parse(params.sdp).media.forEach(aMedia => {
        mediaOffered[aMedia.type] = true;
      });
    }

    // Dispatch the action right away so the call is in state at this point.
    context.dispatch(_actions.callActions.callIncoming(params.callId, {
      remoteParticipant: {
        displayName: params.remoteName,
        displayNumber: params.remoteNumber
      },
      to: params.calleeNumber,
      // Number of the remote participant when the call was established.
      from: params.remoteNumber,
      // The ID that the backend uses to track this webRTC session.
      wrtcsSessionId,
      // Whether the call was received as a slow start call or not.
      isSlowStart,
      // Capture what the caller offered in terms of media
      // For a slow-start call, this will be null.
      mediaOffered
    }));
    emitEvent(eventTypes.CALL_INCOMING, {
      callId: params.callId,
      mediaOffered
    });

    // Dispatch a custom parameters received action/event if any custom parameters
    //    were received as part of the notification.
    // TODO: Handle this is a more general way, since multiple notifications can
    //    have custom parameters on them.
    if (params.customParameters) {
      const customParameters = params.customParameters;
      const customNames = customParameters.map(param => param.name);
      log.debug(`Received custom parameters as part of the Call: ${customNames}.`);
      context.dispatch(_actions.callActions.customParametersReceived(params.callId, {
        customParameters
      }));
      emitEvent(eventTypes.CUSTOM_PARAMETERS, {
        callId: params.callId,
        customParameters
      });
    }
    await Callstack.notifications.incomingCall(wrtcsSessionId, params);

    // Workaround for re-syncing incoming calls received via PUSH.
    // TODO: Check if this can be removed once we start receiving TURN credentials with incoming call notifications.
    if (channel && channel.toLowerCase() === 'push') {
      /*
       * If the incoming call notification came from the push channel, then there
       *    can be a gap where other notifications can be missed during the time
       *    it takes to setup the websocket channel. Resync the call state to
       *    make sure it is not out-of-sync with the backend.
       */
      try {
        await Callstack.operations.resyncCallState.stages.localOffer(params.callId);
      } catch (err) {
        // Don't do anything with an error here. This is a side-effect, and the
        //    operation will handly any required changes.
      }
    }
    notificationEvent.endEvent();
  }
  return {
    newIncoming
  };
}

/***/ }),

/***/ 56628:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
var _constants = __webpack_require__(37409);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _state = __webpack_require__(65794);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

/**
 * Operation flow for remote negotiations.
 *
 * Handles common logic for processing the notification (eg. custom parameters),
 *    then hands-off to the operation itself.
 *
 * A Remote Negotiation can recieve the following inputs:
 *    - Notification: To start the remote negotiation.
 */
function createFlow(container) {
  const {
    context,
    emitEvent,
    logManager
  } = container;

  /**
   * No existing on-going operation; it is a new remote op.
   * @method newRemoteOperation
   * @async
   * @param {Object} call
   * @param {Operation} operation
   * @param {Object} opInfo
   * @param {Object} params
   * @throws {BasicError} Throws an error if the operation itself fails.
   * @return {Promise<undefined>}
   */
  async function newRemoteOperation(call, operation, opInfo, params) {
    const log = logManager.getLogger('CALL', call.id);
    operation.tracker.start();

    // Get the new call state after starting the remote operation
    call = (0, _selectors.getCallById)(context.getState(), call.id);
    try {
      const mediaState = (0, _state.getMediaState)(call);
      log.info(`Processing update request as remote ${opInfo.remoteOp} operation in ${mediaState} scenario.`);
      await operation.stages.remoteOffer(call, params, opInfo);
    } catch (err) {
      operation.reportEvent.setError(err);
      operation.reportEvent.endEvent();
      operation.tracker.finish(err);
      throw err;
    }

    // Regular operations are finished now, but slow-start are not.
    if (operation.type === _constants.OPERATIONS.SLOW_START) {
      operation.tracker.update();
    } else {
      operation.reportEvent.endEvent();
      operation.tracker.finish();
    }
  }

  /**
   * Entry for a new remote negotiation. Performs the whole operation.
   * @method remoteChanges
   * @async
   * @param {Object} call
   * @param {Operation} operation
   * @param {Object} opInfo
   * @param {Object} params
   * @return {Promise<undefined>}
   */
  async function remoteChanges(call, operation, opInfo, params) {
    const log = logManager.getLogger('CALL', call ? call.id : undefined);
    log.info('Received new update call request; handling.', {
      wrtcsSessionId: call.wrtcsSessionId
    });

    // Dispatch a custom parameters received action/event if any custom parameters were received as part of the notification
    if (params.customParameters) {
      const customParameters = params.customParameters;
      const customNames = customParameters.map(param => param.name);
      log.debug(`Received custom parameters as part of the Call: ${customNames}.`);
      context.dispatch(_actions.callActions.customParametersReceived(call.id, {
        customParameters
      }));
      // Emit the associated event with the above action
      emitEvent(eventTypes.CUSTOM_PARAMETERS, {
        callId: call.id,
        customParameters
      });
    }
    return await newRemoteOperation(call, operation, opInfo, params);
  }
  return {
    remoteChanges
  };
}

/***/ }),

/***/ 13583:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = setupFlows;
var _RemoteCall = _interopRequireDefault(__webpack_require__(94131));
var _LocalOperation = _interopRequireDefault(__webpack_require__(76445));
var _LocalNegotiation = _interopRequireDefault(__webpack_require__(25967));
var _RemoteNegotiation = _interopRequireDefault(__webpack_require__(56628));
var _remoteOnly = _interopRequireDefault(__webpack_require__(73709));
var _DirectTransfer = _interopRequireDefault(__webpack_require__(93907));
var _ConsultativeTransfer = _interopRequireDefault(__webpack_require__(57679));
var _Join = _interopRequireDefault(__webpack_require__(51994));
// General flows.

// Special-case flows.

function setupFlows(container) {
  return {
    RemoteCall: (0, _RemoteCall.default)(container),
    LocalOperation: (0, _LocalOperation.default)(container),
    LocalNegotiation: (0, _LocalNegotiation.default)(container),
    RemoteNegotiation: (0, _RemoteNegotiation.default)(container),
    remoteOnly: (0, _remoteOnly.default)(container),
    directTransfer: (0, _DirectTransfer.default)(container),
    consulTransfer: (0, _ConsultativeTransfer.default)(container),
    join: (0, _Join.default)(container)
  };
}

/***/ }),

/***/ 73709:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createFlow;
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
var _constants3 = __webpack_require__(42750);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Call Reports.

/*
 * Operation flow for a "remote update" notification. This is for a simple state updates
 *    (eg. call ended) from the remote side of the call.
 */
function createFlow(container) {
  const {
    context,
    CallReporter,
    emitEvent
  } = container;

  /**
   * Flow entry-point for remote "update" notifications
   *
   * @method remoteOnly
   * @param {string} wrtcsSessionId
   * @param {Function|Object} handler The `handler` function to process the notification.
   * @param {Object} params Operation-specific data.
   * @return {Promise}
   */
  async function remoteNotification(wrtcsSessionId, handler, params) {
    let call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    let notificationEvent;
    const pendingLocal = call.currentOperations.find(op => op.isLocal && op.status === _constants.OP_STATUS.PENDING);

    // TODO: Handle all notifications instead of only the ones the reporter knows about.
    // If the call exists (in the sense that is both valid as an object AND it's state is not ended)
    if (call.state !== _constants2.CALL_STATES.ENDED) {
      if (pendingLocal && pendingLocal.eventId && _constants3.REPORTER_OPERATION_EVENTS_MAP.hasOwnProperty(handler.name)) {
        // if call has an on-going local operation, then the
        // notification is part of that operation.

        // Get the local main event
        const operationEvent = CallReporter.getReport(call.id).getEvent(pendingLocal.eventId);
        // create & add a local sub-event
        notificationEvent = operationEvent.addEvent(_constants3.REPORTER_OPERATION_EVENTS_MAP[handler.name]);
      } else if (_constants3.REPORTER_OPERATION_EVENTS_MAP.hasOwnProperty(handler.name)) {
        // Otherwise, if the call exists (but there isn't an on-going local operation),
        //    the notification is part of a new remote operation.
        const report = CallReporter.getReport(call.id);
        notificationEvent = report.addEvent(_constants3.REPORTER_OPERATION_EVENTS_MAP[handler.name]);
      }
    } else {
      // If the call doesn't exist, can't add anything to its report. TODO.
    }
    await handler(wrtcsSessionId, ...params);

    // End the sub-event from handling the notification.
    notificationEvent && notificationEvent.endEvent();

    // Get the call again for new state after the handler has run
    call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    // If this notification is an answer from a local operation, update call state
    //    to indicate that the local operation is finished.
    if (pendingLocal && ['callStatusUpdateEnded' // Call end notification mid-operation.
    ].includes(handler.name)) {
      const eventId = pendingLocal.eventId;
      // TODO: Have `Operation` objects for notifications so this isn't done manually.
      context.dispatch(_actions.callActions.operationUpdate(call.id, pendingLocal.type, true, {
        transition: _constants.OP_TRANSITIONS.FINISH,
        eventId
      }));

      // End the timeline event for the local operation.
      const operationEvent = CallReporter.getReport(call.id).getEvent(eventId);
      operationEvent.endEvent();

      // Emit "operation finish" event for the application.
      emitEvent(eventTypes.CALL_OPERATION, {
        callId: call.id,
        isLocal: true,
        operation: pendingLocal.type,
        transition: _constants.OP_TRANSITIONS.FINISH,
        previous: {
          operation: pendingLocal.type,
          status: _constants.OP_STATUS.PENDING
        }
      });
    }
  }
  return remoteNotification;
}

/***/ }),

/***/ 7995:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.callManager = callManager;
exports["default"] = createManager;
var _constants = __webpack_require__(60683);
var _constants2 = __webpack_require__(37409);
var _selectors = __webpack_require__(11430);
var _operationMap = __webpack_require__(81739);
var _flows = _interopRequireDefault(__webpack_require__(13583));
var _OperationTracker = _interopRequireDefault(__webpack_require__(99392));
var _Operation = _interopRequireDefault(__webpack_require__(9988));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _uuid = __webpack_require__(60130);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Call Manager.

// Other plugins.

// Libraries.

function createManager(bottle) {
  (0, _Operation.default)(bottle);
  bottle.factory('CallManager', () => callManager(bottle.container));
}

/**
 * @method checkCallExistence
 * @returns {undefined} Returns undefined if the call exists.
 * @throws {BasicError} Throws if the call does not exist.
 */
function checkCallExistence(state, id) {
  if (!(0, _selectors.getCallById)(state, id) && !(0, _selectors.getCallByWrtcsSessionId)(state, id)) {
    throw new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: `Call does not exist: ${id}`
    });
  }
}
function callManager(container) {
  const {
    context,
    Callstack,
    logManager,
    CallRequests
  } = container;
  const callFlows = (0, _flows.default)(container);

  // Map of calls to their on-going operations.
  const ongoing = {};

  // APIs exposed by the CallManager.
  const manager = {
    getTracker(callId) {
      return ongoing[callId];
    },
    getCallIds() {
      return Object.keys(ongoing);
    }
  };

  /**
   * Wrapper for the two "make outgoing call" APIs.
   * This function is wrapped so it can be used for both regular and anonymous calls.
   * @method newLocalCall
   * @param {string} stackMethod
   * @return {Function} The actual CallManager API.
   */
  function newLocalCall(stackMethod) {
    /**
     * CallManager API for making new, outgoing calls.
     * @method newOutgoingCall
     * @async
     * @param {string} callId
     * @param {Array} params
     * @return {Object|undefined}
     */
    return async function newOutgoingCall(callId) {
      // Other than creating a call report, the "new outgoing call" flow
      //    is the same as the "local operation" flow.
      if (!container.CallReporter.getReport(callId)) {
        // TechDebt TODO: The AnonymousMake operation does not fit nicely anymore since
        //    operations are strictly structured now. It re-uses the Make operation, so
        //    would create the call report twice (thus fail).
        // The AnonymousMake operation needs to be changed to fit the Operation/Flow changes.
        container.CallReporter.createReport('CALL', callId);
      }
      const operation = Callstack.operations[stackMethod].local(callId);
      // Set up new call mapping for on-going operations.
      ongoing[callId] = (0, _OperationTracker.default)(logManager.getLogger('CALL', callId));
      ongoing[callId].add(operation);
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      return await callFlows.LocalNegotiation.localChanges(callId, operation, params);
    };
  }

  // CallManager method for receiving a new, incoming call.
  async function newRemoteCall(wrtcsSessionId, params, channel) {
    // Create an ID for the SDK to use for the call.
    const callId = (0, _uuid.v4)();
    // Set up new call mapping for on-going operations.
    ongoing[callId] = (0, _OperationTracker.default)(logManager.getLogger('CALL', callId));
    params.callId = callId;
    await callFlows.RemoteCall.newIncoming(wrtcsSessionId, params, channel);
  }

  /**
   * CallManager method for receiving a new, remote operation.
   * @method newRemoteNegotiation
   * @async
   * @param {string} wrtcsSessionId
   * @param {Array} params
   * @throws {BasicError}
   * @return {undefined}
   */
  async function newRemoteNegotiation(wrtcsSessionId, params) {
    /**
     * Utility for determining if the new remote negotiation will cause a glare scenario or not.
     *
     * Scenario 1: The on-going negotiation is local, with a new remote negotiation received.
     *    This is a glare scenario whether we wait for the first negotiation to finish or not. The
     *    first, local negotiation will change WebRTC state which is not taken into account in the
     *    second, remote negotiation. It would cause a WebRTC error.
     *
     * Scenario 2: The on-going negotiation is remote, with another remote negotiation received.
     *    Delay processing the second negotiation until the first is finished (or until time-out.)
     *
     * Reference: KJS-1152, KJS-1918, KJS-2059
     * @method isGlare
     * @param {Object} call The up-to-date call object.
     * @param {number} [timeDelayed] The time delayed so far; only to be provided recursively.
     * @return {Promise<boolean>}
     */
    async function isGlare(call) {
      let timeDelayed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (!ongoing[call.id].isBlocked) {
        return false;
      } else if (timeDelayed >= 3000) {
        // Time-out after 3 seconds if it's still a glare scenario.
        return true;
      }
      const {
        isLocal,
        type
      } = ongoing[call.id].getBlocking();
      log.debug(`Received new remote operation during ${isLocal ? 'local' : 'remote'} ${type} operation. Delaying handling.`);
      if (isLocal || type === _constants2.OPERATIONS.END) {
        // If the on-going negotiation is local, then immediately respond as a glare scenario.
        //    The local negotiation will have changes that the remote side did not take into
        //    account, leading to WebRTC errors. Mark this as a glare scenario immediately so
        //    the remote side will be notified sooner.
        // If the blocking operation is an "end", also immediately respond. New operations
        //    cannot be started on ending calls.
        return true;
      } else {
        // If it is two remote negotiations causing the glare scenario, try to let the first
        //    negotiation finish before processing the second.
        await new Promise(resolve => setTimeout(resolve, 250));
        return isGlare((0, _selectors.getCallById)(context.getState(), call.id), timeDelayed + 250);
      }
    }
    let call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', call ? call.id : undefined);
    log.info('Received new update call request; handling.', {
      wrtcsSessionId
    });
    if (!call) {
      // Scenario: No call is associated with the wrtcsSessionId.
      log.info('Update request is for unknown wrtcsSession. Ignoring.', {
        wrtcsSessionId
      });
      throw new _errors.default({
        code: _errors.callCodes.INVALID_STATE,
        message: 'Cannot process new remote operation for call that does not exist.'
      });
    } else if (call.state === _constants.CALL_STATES.ENDED) {
      // Scenario: The associated call is ended, and should not have an active
      //    WebRTC session.
      log.info('Update request is for ended call. Ignoring.', {
        wrtcsSessionId
      });
      throw new _errors.default({
        code: _errors.callCodes.INVALID_STATE,
        message: 'Cannot process new remote operation for Ended call.'
      });
    }
    let opInfo;
    const isSlowStart = !params.sdp;
    if (isSlowStart) {
      opInfo = {
        remoteOp: _constants2.OPERATIONS.SLOW_START
      };
    } else {
      opInfo = await Callstack.utils.getRemoteOperationInfo(call, params.sdp);
    }
    const stackMethod = _operationMap.operationMap[opInfo.remoteOp];
    const operation = Callstack.operations[stackMethod].remote(call.id);
    if (await isGlare(call)) {
      operation.tracker.start();
      log.warn('Received new remote operation during on-going remote operation; cannot process.');
      // Call is "blocked"; starting a new negotiation is a glare scenario.
      // Therefore respond to Gateway that operation failed, so that the remote endpoint knows.
      CallRequests.updateSessionResponse({
        statusCode: 491,
        wrtcsSessionId
      }).then(() => {}).catch(error => {
        log.warn(`Failed to reply for a remote session update. Error: ${error.message}`);
      });

      // Locally, we need to mark that remote negotiation as a failure in the Call report.
      const err = new _errors.default({
        code: _errors.callCodes.GLARE,
        message: `Cannot process new remote ${opInfo.remoteOp} negotiation due to glare scenario.`
      });
      operation.reportEvent.setError(err);
      operation.reportEvent.endEvent();
      operation.tracker.finish(err); // stop tracking the op because we have an error
      throw err; // don't continue further
    } else {
      // Start tracking this operation.
      ongoing[call.id].add(operation);
    }
    try {
      // Get the latest call state, in case there was a delay due to glare.
      call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
      await callFlows.RemoteNegotiation.remoteChanges(call, operation, opInfo, params);
    } catch (err) {
      ongoing[call.id].remove(operation);
      throw err;
    }

    // Regular operations are finished now, but slow-start are not.
    if (!isSlowStart) {
      ongoing[call.id].remove(operation);
    }
  }

  /**
   * CallManager method for receiving the answer to an existing, local negotiation.
   * @method exiLocalNegotiation
   * @async
   * @param {string} wrtcsSessionId
   * @param {Array} params
   * @throws {BaiscError}
   * @return {undefined}
   */
  async function exiLocalNegotiation(wrtcsSessionId, params) {
    const call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', call ? call.id : undefined);

    /**
     * Helper to find the local operation that the received notification is a response for.
     * If the assumed local operation is not ready yet (ie. not PENDING), will delay a
     *    short time before re-finding the operation. Will attempt every 25ms, for a max of
     *    500ms, before eventually ignoring the notification.
     */
    async function getExistingNegotiation(callId) {
      let timeDelayed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      const call = (0, _selectors.getCallById)(context.getState(), callId);
      const opState = call.currentOperations.find((op, ind, arr) => {
        return op.isLocal && op.status === _constants2.OP_STATUS.PENDING && op.isBlocking ||
        // Local pending operation.
        !op.isLocal && op.type === _constants2.OPERATIONS.SLOW_START && op.isBlocking ||
        // Remote slow-start operation.
        op.isLocal && op.type === _constants2.OPERATIONS.JOIN && arr.length === 1 // Local pending join, as the only op.
        ;
      });

      /*
       * Scenarios:
       *    1. local PENDING negotiation found: this response is for that operation.
       *    2. still no PENDING after max delay: error scenario; can't delay forever.
       *    3. local ONGOING negotiation found: response was receive too early, delay then re-process.
       *    4. nether negotiation found: error scenario
       */
      if (opState) {
        return opState;
      } else if (timeDelayed >= 500) {
        // Local negotiation is not PENDING even after 500ms delay; can't process this notification.
        log.debug(`Received negotiation answer still cannot be processed; ignoring.`);
        return;
      } else {
        const ongoingOp = call.currentOperations.find(op => op.isLocal && op.status === _constants2.OP_STATUS.ONGOING && op.isBlocking);
        if (ongoingOp) {
          log.debug(`Received negotiation answer for local ${ongoingOp.type} too early; delaying processing.`);
          await new Promise(resolve => setTimeout(resolve, 25));
          // Re-get the operation after a delay, but indicate it was already delayed.
          return await getExistingNegotiation(callId, timeDelayed + 25);
        } else {
          // No PENDING or ONGOING local negotiation; can't process this notification.
          return;
        }
      }
    }
    if (!call) {
      // Scenario: The notification is about a call that state does not know about.
      //    Ignore the notification.
      log.info('Update response for unknown wrtcsSession. Ignoring.', {
        wrtcsSessionId
      });
      return;
    }
    log.info('Received new update call response; handling.', {
      wrtcsSessionId
    });

    // Find which operation this "remote answer" could be for.
    const opState = await getExistingNegotiation(call.id);
    if (!opState) {
      /*
       * Scenario #1: A remote (non slow-start) operation is on-going.
       * Scenario #2: No local or remote operation is on-going.
       *    We don't know why we're receiving an answer; it doesn't match any
       *    valid on-going WebRTC negotiation where we would expect it.
       */
      log.warn('Received negotiation answer without a matching offer; ignoring.');
      return;
    }
    const operation = ongoing[call.id].getByType(opState.type);
    if (!operation) {
      log.warn('Received negotiation answer without a matching offer; ignoring.');
      return;
    }
    try {
      await callFlows.LocalNegotiation.remoteResponse(call, operation, params);
    } finally {
      // Remove the operation from the on-going list.
      ongoing[call.id].remove(operation);
    }
  }

  /**
   * Wrapper for "new, local negotiation" operations.
   * @method newLocalNegotiation
   * @param {string} stackMethod
   * @return {Function}
   */
  function newLocalNegotiation(stackMethod) {
    /**
     * CallManager API for making new, local operation call.
     * @method localOperation
     * @async
     * @param {string} callId
     * @param {Array} params
     * @throws {BasicError}
     * @return {Object|undefined}
     */
    return async function localOperation(callId) {
      checkCallExistence(context.getState(), callId);
      const operation = Callstack.operations[stackMethod].local(callId);
      if (ongoing[callId].getByType(_constants2.OPERATIONS.END)) {
        // Prevent new operations when the call is ending.
        throw new _errors.default({
          code: _errors.callCodes.GLARE,
          message: `Cannot start new local ${operation.type} operation while call is ending.`
        });
      } else if (operation.isNegotiation && ongoing[callId].isBlocked) {
        // Call is "blocked"; starting a new negotiation is a glare scenario.
        throw new _errors.default({
          code: _errors.callCodes.GLARE,
          message: `Cannot start new local ${operation.type} negotiation due to glare scenario.`
        });
      } else {
        // Track this operation as on-going.
        ongoing[callId].add(operation);
      }
      let result;
      try {
        for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          params[_key2 - 1] = arguments[_key2];
        }
        if (operation.isNegotiation) {
          result = await callFlows.LocalNegotiation.localChanges(callId, operation, params);
        } else {
          result = await callFlows.LocalOperation.localChanges(callId, operation, params);
        }
      } catch (err) {
        // Operation failed; no longer on-going.
        ongoing[callId].remove(operation);
        throw err;
      }
      if (!operation.isNegotiation) {
        // Local-only operation are now ended.
        ongoing[callId].remove(operation);
      }
      return result;
    };
  }
  function newRemoteNotify(stackMethod) {
    return async function remoteOnly(wrtcsSessionId) {
      // TODO: Track 'remote notify' operations too.
      const handler = Callstack.notifications[stackMethod];
      const state = context.getState();
      const call = (0, _selectors.getCallByWrtcsSessionId)(state, wrtcsSessionId);
      checkCallExistence(state, call.id);
      for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        params[_key3 - 1] = arguments[_key3];
      }
      await callFlows.remoteOnly(wrtcsSessionId, handler, params);
    };
  }
  function exiComplexResponse(stackMethod) {
    const stage = stackMethod === _operationMap.notificationMap.SESSION_STATUS_ENDED ? 'remoteSuccess' : 'remoteFailure';
    /*
     * The JOIN operation will receive a response for each call.
     * The transfers will receive a single response.
     */
    return async function remoteOnly(wrtcsSessionId) {
      // Get the calls for both calls involved in the operation.
      const state = context.getState();
      const priCall = (0, _selectors.getCallByWrtcsSessionId)(state, wrtcsSessionId);
      checkCallExistence(state, priCall.id);
      const operation = ongoing[priCall.id].getAll().find(op => op.isLocal && [_constants2.OPERATIONS.JOIN, _constants2.OPERATIONS.CONSULTATIVE_TRANSFER, _constants2.OPERATIONS.DIRECT_TRANSFER].includes(op.type));

      // Note: secCall will not exist for direct transfer.
      const secCall = (0, _selectors.getCallById)(state, operation.data.secCallId);
      for (var _len4 = arguments.length, params = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        params[_key4 - 1] = arguments[_key4];
      }
      switch (operation.type) {
        case _constants2.OPERATIONS.DIRECT_TRANSFER:
          await callFlows.directTransfer[stage](priCall, operation, params);
          break;
        case _constants2.OPERATIONS.CONSULTATIVE_TRANSFER:
          await callFlows.consulTransfer[stage](priCall, operation, params);
          break;
        case _constants2.OPERATIONS.JOIN:
          await callFlows.join[stage](priCall, operation, params);
          break;
        default:
          // Error: This entry should only be for a complex operation. This path indicates a bug.
          throw new Error(`Complex response entry cannot be used for ${operation.type}`);
      }

      // Remove the operation from the on-going lists.
      ongoing[priCall.id].remove(operation);
      if (operation.type !== _constants2.OPERATIONS.JOIN && secCall) {
        // If a transfer, stop tracking the operation for every call involved.
        ongoing[secCall.id].remove(operation);
      } else if (priCall.id === operation.data.priCallId) {
        // If join AND the notification was for the primary call, also stop tracking
        //    the operation for the new, joined call.
        if (ongoing[operation.data.joinedCallId].getById(operation.id)) {
          // TODO: Why is this not tracked?
          ongoing[operation.data.joinedCallId].remove(operation);
        }
      }
    };
  }

  /**
   * Wrapper for new, local operations that act on two calls.
   * @method newDualCall
   * @param {string} stackMethod
   * @return {Function}
   */
  function newDualCall(stackMethod) {
    /**
     * @method dualCall
     * @async
     * @param {string} priCallId ID of the primary call for the operation.
     * @param {Array} params
     * @throws {BasicError}
     * @return {undefined}
     */
    return async function dualCall(priCallId) {
      for (var _len5 = arguments.length, params = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        params[_key5 - 1] = arguments[_key5];
      }
      // The ID of the secondary call is provided as a parameter.
      const secCallId = params[0];
      // For a JOIN, the ID for the new, joined call is provided as well.
      const joinedCallId = params[1];
      checkCallExistence(context.getState(), priCallId);
      checkCallExistence(context.getState(), secCallId);
      const operation = Callstack.operations[stackMethod].local(priCallId, {
        priCallId,
        secCallId,
        joinedCallId
      });
      if (ongoing[priCallId].isBlocked || ongoing[secCallId].isBlocked) {
        const blockedId = ongoing[priCallId].isBlocked ? priCallId : secCallId;
        // Call is "blocked"; starting a new negotiation is a glare scenario.
        throw new _errors.default({
          code: _errors.callCodes.GLARE,
          message: `Cannot start new local ${operation.type} operation due to glare scenario for call ${blockedId}.`
        });
      } else {
        // Track this operation as on-going for both calls.
        ongoing[priCallId].add(operation);
        ongoing[secCallId].add(operation);
        if (operation.type === _constants2.OPERATIONS.JOIN) {
          // Have the CallManager track the new call for the join operation.
          const track = (0, _OperationTracker.default)(logManager.getLogger('CALL', joinedCallId));
          ongoing[joinedCallId] = track;
          ongoing[joinedCallId].add(operation);
          await callFlows.join.localChanges(priCallId, operation, params);
        } else if (operation.type === _constants2.OPERATIONS.CONSULTATIVE_TRANSFER) {
          await callFlows.consulTransfer.localChanges(priCallId, operation, params);
        } else {
          // This entry should only be used for the above two operations. This path indicates a bug.
          throw new Error(`Dual-call entry cannot be used for ${operation.type}`);
        }
      }
    };
  }

  /*
   * callManager.make
   * callManager.makeAnonymousCall
   */
  ;
  [_constants2.OPERATIONS.MAKE, _constants2.OPERATIONS.MAKE_ANONYMOUS].forEach(type => {
    const stackMethod = _operationMap.operationMap[type];
    manager[stackMethod] = newLocalCall(stackMethod);
  });

  // CallManager method for receiving a new, incoming call.
  manager.establishOffer = newRemoteCall;
  // CallManager method for receiving a new, remote operation.
  manager.negotiationOffer = newRemoteNegotiation;
  // CallManager method for receiving the answer to a renegotiation.
  manager.negotiationAnswer = exiLocalNegotiation

  /*
   * Create CallManager methods for every local operation.
   *    eg. CallManager.hold or CallManager.reject
   */;
  [
  // Local Negotiations.
  _constants2.OPERATIONS.SLOW_ANSWER, _constants2.OPERATIONS.HOLD, _constants2.OPERATIONS.UNHOLD, _constants2.OPERATIONS.ADD_MEDIA, _constants2.OPERATIONS.REMOVE_MEDIA, _constants2.OPERATIONS.ADD_BASIC_MEDIA, _constants2.OPERATIONS.REMOVE_BASIC_MEDIA, _constants2.OPERATIONS.MEDIA_RESTART,
  // Local-only.
  _constants2.OPERATIONS.ANSWER, _constants2.OPERATIONS.REJECT, _constants2.OPERATIONS.IGNORE, _constants2.OPERATIONS.FORWARD_CALL, _constants2.OPERATIONS.END, _constants2.OPERATIONS.DIRECT_TRANSFER, _constants2.OPERATIONS.REPLACE_TRACK, _constants2.OPERATIONS.RESYNC, _constants2.OPERATIONS.PLAY_AUDIO, _constants2.OPERATIONS.SEND_RINGING_FEEDBACK, _constants2.OPERATIONS.SEND_CUSTOM_PARAMETERS, _constants2.OPERATIONS.SEND_DTMF, _constants2.OPERATIONS.GET_STATS].forEach(type => {
    const stackMethod = _operationMap.operationMap[type];
    manager[stackMethod] = newLocalNegotiation(stackMethod);
  })

  /*
   * For every supported notification, create a CallManager method that routes
   *    into `remoteOnlyOps`.
   */;
  [
  // TODO: No magic strings.
  'CALL_STATUS_ENDED', 'CALL_CANCELLED', 'CALL_STATUS_RINGING', 'RECEIVE_EARLY_MEDIA'].forEach(type => {
    const stackMethod = _operationMap.notificationMap[type];
    manager[stackMethod] = newRemoteNotify(stackMethod);
  })

  /*
   * Handle the response notifications for complex operations.
   */;
  ['CALL_STATUS_FAILED', 'SESSION_STATUS_ENDED'].forEach(type => {
    const stackMethod = _operationMap.notificationMap[type];
    manager[stackMethod] = exiComplexResponse(stackMethod);
  })

  /*
   * Create CallManager methods for two "dual call" operations.
   *    These are the complex operations that act on multiple calls at once.
   *    ie. CallManager.consultativeTransfer and CallManager.join
   */;
  [_constants2.OPERATIONS.CONSULTATIVE_TRANSFER, _constants2.OPERATIONS.JOIN].forEach(type => {
    const stackMethod = _operationMap.operationMap[type];
    manager[stackMethod] = newDualCall(stackMethod);
  });
  return manager;
}

/***/ }),

/***/ 9988:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _StatusTracker = _interopRequireDefault(__webpack_require__(22286));
var _constants = __webpack_require__(42750);
var _uuid = __webpack_require__(60130);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call Reports.
// Libraries.
function _default(bottle) {
  /**
   * Factory for creating instances of a generic Operation.
   * @param {Object} container The nested container; not actually used here.
   * @param {Object} opInfo Static info about this operation.
   * @param {string} opInfo.type Type constant of the operation.
   * @param {boolean} opInfo.isNegotiation Whether this operation includes negotiation.
   * @param {boolean} opInfo.isLocal Whether this operation is locall triggered.
   * @param {Object} opInfo.stages The methods to handle various stages of this operation.
   * @param {Function} opInfo.stages.validate
   * @param {Function} opInfo.stages.localOffer
   * @param {Function} opInfo.stages.remoteAnswer
   * @param {Function} opInfo.stages.remoteOffer
   * @param {Object} instanceInfo Info specific to this instance of the operation.
   * @param {string} instanceInfo.callId The ID of the call the operation is performed on.
   * @return {Operation} An instance of an operation.
   */
  bottle.instanceFactory('Callstack.models.Operation', (container, opInfo, instanceInfo) => {
    // TODO: Parameter validation.
    // TODO: Based on which stages were provided, determine the "flow" the operation needs to follow.

    // Static data for the operation.
    const {
      type,
      isNegotiation,
      isLocal,
      stages
    } = opInfo;
    const {
      validate,
      localOffer,
      remoteAnswer,
      remoteOffer
    } = stages;

    // Instance data for the operation.
    const id = (0, _uuid.v4)();
    const {
      callId,
      data
    } = instanceInfo;

    // TechDebt TODO: The Reporter's event map should be consistent so we don't have to guess for the right name.
    const eventName = _constants.REPORTER_OPERATION_EVENTS_MAP[type + (isLocal ? '_LOCAL' : '_REMOTE')] || _constants.REPORTER_OPERATION_EVENTS_MAP[type];
    // TODO: Should the Operation factory add the event immediately or at a later point?
    const reportEvent = bottle.container.CallReporter.getReport(callId).addEvent(eventName);
    const tracker = (0, _StatusTracker.default)(bottle.container, callId, id, reportEvent.id, opInfo);
    const Operation = {
      // Operation meta-data.
      type,
      isNegotiation,
      isLocal,
      // Operation methods.
      stages: {
        // TODO: Local validate vs. remote validate?
        validate: validate,
        localOffer: localOffer,
        remoteAnswer: remoteAnswer,
        remoteOffer: remoteOffer,
        remoteSuccess: stages.remoteSuccess,
        remoteFailure: stages.remoteFailure
      },
      // Instance specific.
      callId,
      id,
      data: _objectSpread({}, data),
      // Progress tracker.
      tracker,
      get status() {
        return tracker.status;
      },
      // Operation Event.
      reportEvent
    };
    return Operation;
  });
}

/***/ }),

/***/ 81739:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.operationMap = exports.notificationMap = void 0;
var _constants = __webpack_require__(37409);
/*
 * This is a mapping between the operation constants and the names used for the
 *    operations in various places. This only exists because the Callstack is
 *    inconsistent with the names/casing it uses in various places.
 * TODO: Technical-debt to clean this up.
 */
const operationMap = exports.operationMap = {
  // Local operations.
  [_constants.OPERATIONS.MAKE]: 'make',
  [_constants.OPERATIONS.MAKE_ANONYMOUS]: 'makeAnonymousCall',
  [_constants.OPERATIONS.ANSWER]: 'answer',
  SLOW_ANSWER: 'answerSlow',
  [_constants.OPERATIONS.REJECT]: 'reject',
  [_constants.OPERATIONS.IGNORE]: 'ignore',
  [_constants.OPERATIONS.FORWARD_CALL]: 'forward',
  [_constants.OPERATIONS.END]: 'end',
  [_constants.OPERATIONS.DIRECT_TRANSFER]: 'directTransfer',
  [_constants.OPERATIONS.CONSULTATIVE_TRANSFER]: 'consultativeTransfer',
  [_constants.OPERATIONS.JOIN]: 'join',
  [_constants.OPERATIONS.HOLD]: 'hold',
  [_constants.OPERATIONS.UNHOLD]: 'unhold',
  [_constants.OPERATIONS.ADD_MEDIA]: 'addMedia',
  [_constants.OPERATIONS.REMOVE_MEDIA]: 'removeMedia',
  [_constants.OPERATIONS.ADD_BASIC_MEDIA]: 'addBasicMedia',
  [_constants.OPERATIONS.REMOVE_BASIC_MEDIA]: 'removeBasicMedia',
  [_constants.OPERATIONS.REPLACE_TRACK]: 'replaceTrack',
  [_constants.OPERATIONS.MEDIA_RESTART]: 'iceRestart',
  [_constants.OPERATIONS.RESYNC]: 'resyncCallState',
  [_constants.OPERATIONS.PLAY_AUDIO]: 'playAudioFile',
  [_constants.OPERATIONS.SEND_RINGING_FEEDBACK]: 'sendRingingFeedback',
  [_constants.OPERATIONS.SEND_CUSTOM_PARAMETERS]: 'sendCustomParameters',
  [_constants.OPERATIONS.SEND_DTMF]: 'sendDtmf',
  [_constants.OPERATIONS.GET_STATS]: 'getStats',
  [_constants.OPERATIONS.GET_AVAILABLE_CODECS]: 'getAvailableCodecs',
  [_constants.OPERATIONS.START_MOH]: 'startMOH',
  [_constants.OPERATIONS.STOP_MOH]: 'stopMOH',
  // Remote-only.
  [_constants.OPERATIONS.SLOW_START]: 'slowStart',
  UNKNOWN: 'genericRemote',
  NO_CHANGE: 'genericRemote',
  [_constants.OPERATIONS.GENERIC_REMOTE]: 'genericRemote'
};

/*
 * List of Callstack notification handlers.
 */
const notificationMap = exports.notificationMap = {
  CALL_STATUS_ENDED: 'callStatusUpdateEnded',
  CALL_CANCELLED: 'callCancelled',
  CALL_STATUS_RINGING: 'callStatusUpdateRinging',
  CALL_STATUS_FAILED: 'callStatusUpdateFailed',
  RECEIVE_EARLY_MEDIA: 'receiveEarlyMedia',
  SESSION_STATUS_ENDED: 'sessionStatusUpdateEnded'
};

/***/ }),

/***/ 25974:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createCallstack;
var callOperations = _interopRequireWildcard(__webpack_require__(92660));
var _sdp = _interopRequireDefault(__webpack_require__(20590));
var _webrtc = _interopRequireDefault(__webpack_require__(68358));
var _callManager = _interopRequireDefault(__webpack_require__(7995));
var _reporter = _interopRequireDefault(__webpack_require__(13840));
var _utils = _interopRequireDefault(__webpack_require__(70504));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Callstack  factory function.
 * @method createCallstack
 * @param  {Object} bottle The bottle.
 */
function createCallstack(bottle) {
  // Initialize the operation handlers, adding them to the bottle.
  // They will be at `Callstack.operations` and `Callstack.utils`.
  for (const name in callOperations) {
    callOperations[name](bottle);
  }
  (0, _reporter.default)(bottle);
  // Initialize the SDP and WebRTC operations.
  (0, _sdp.default)(bottle);
  (0, _webrtc.default)(bottle);
  // Initialize Callstack utils.
  (0, _utils.default)(bottle);
  (0, _callManager.default)(bottle);
}

/***/ }),

/***/ 27319:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createActionHandler;
exports.shouldHandlePattern = shouldHandlePattern;
var _actionTypes = __webpack_require__(39100);
var _constants = __webpack_require__(60683);
/**
 * Factory function for the `callAudit` middleware handler. Creates an instance
 *    of the function in the scope / context of the built SDK.
 * @return {Function} The function which is responsible for triggering a call audit.
 */
function createActionHandler(context) {
  const operations = context.container.Callstack.operations;

  /**
   * Handle requests that are meant to trigger a call audit.
   *
   * @method callAudit
   * @param {Object} action Any action.
   * @return {undefined}
   */
  async function callAudit(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return false;
    }

    // Handle it by calling the `sendCallAudit` operation.
    // For Link, a "call audit" means to update the call's status to: 'Connected'
    // This will be accomplished by the operation by calling a specific request such as: updateSessionStatus
    operations.sendCallAudit(action.payload.id, {
      wrtcsSessionId: action.payload.wrtcsSessionId
    });
  }
  return callAudit;
}

/**
 * Test function for whether an action should be handled by this handler.
 * @param {Object} action
 * @return {boolean} True if action should be handled, false otherwise.
 */
function shouldHandlePattern(action) {
  const actionTypesToDoAuditOn = [_actionTypes.UPDATE_CALL, _actionTypes.PENDING_JOIN, _actionTypes.PENDING_MAKE_CALL];
  if (!action.error) {
    if (actionTypesToDoAuditOn.indexOf(action.type) !== -1) {
      const preConnectedState = action.payload.state === _constants.CALL_STATES.INITIATED || action.payload.state === _constants.CALL_STATES.RINGING;
      return preConnectedState;
    }
  }
  return false;
}

/***/ }),

/***/ 64513:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getSessionsMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _actionTypes = __webpack_require__(53202);
// Call plugin

// Other plugins

/**
 * Factory function for the `getSessions` middleware handler. Creates an instance
 *    of the function in the scope / context of the built SDK.
 * @return {Function} The function which is responsible for triggering a call audit.
 */
function getSessionsMiddleware(context) {
  const operations = context.container.Callstack.operations;

  /*
   * TODO: Rename this middleware (and file).
   * Should be something like `resyncOnConnect`, after it's updated to use the
   *    `resyncCallState` operation instead of the `updateCallState` operation.
   */

  /**
   * This function is part of the overall middleware.
   * Check (and update) the session status of all active calls upon websocket connection to ensure all call states are up to date.
   *
   * Responsibilities:
   *   1. Ensure resyncOnConnect config is set
   *   2. Filter out inactive calls (calls already in an ended state)
   *   3. Call updateCallState operation for each active call.
   * @method getSessions
   * @param {Object} action Any action.
   * @return {undefined}
   */
  async function getSessions(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }

    // Don't handle if resyncOnConnect is false
    const config = (0, _selectors.getOptions)(context.getState());
    if (!config.resyncOnConnect) {
      return;
    }

    // Grab all active calls
    const calls = (0, _selectors.getCalls)(context.getState());
    const activeCalls = calls.filter(call => call.state !== _constants.CALL_STATES.CANCELLED && call.state !== _constants.CALL_STATES.ENDED);

    // Check and update the call state of each call if necessary
    activeCalls.map(async activeCall => await operations.updateCallState(activeCall));
  }
  return getSessions;
}
function shouldHandlePattern(action) {
  return action.type === _actionTypes.WS_CONNECT_FINISHED;
}

/***/ }),

/***/ 93204:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = callCollectionCheckMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(24923));
var _actionTypes = __webpack_require__(1371);
const _excluded = ["id"];
/**
 * Bottle wrapper for "ICE collection check" triggers.
 * @return {Function}
 */
function callCollectionCheckMiddleware(context) {
  const operations = context.container.Callstack.operations;
  async function callCollectionCheck(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }

    // Handle it.
    const _action$payload = action.payload,
      {
        id
      } = _action$payload,
      iceCollectionInfo = (0, _objectWithoutProperties2.default)(_action$payload, _excluded);
    await operations.callIceCollectionCheck(id, iceCollectionInfo);
  }
  return callCollectionCheck;
}
function shouldHandlePattern(action) {
  return action.type === _actionTypes.SESSION_ICE_GATHERING_STATE_CHANGE || action.type === _actionTypes.SESSION_ICE_CANDIDATE_COLLECTED || action.type === _actionTypes.SESSION_ICE_COLLECTION_SCHEDULED_CHECK;
}

/***/ }),

/***/ 56390:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _getSessions = _interopRequireDefault(__webpack_require__(64513));
var _iceCollectionCheck = _interopRequireDefault(__webpack_require__(93204));
var _normalizeIceFailure = _interopRequireDefault(__webpack_require__(7240));
var _callAudit = _interopRequireDefault(__webpack_require__(27319));
const callStackMiddlewares = [_getSessions.default, _iceCollectionCheck.default, _normalizeIceFailure.default, _callAudit.default];
var _default = exports["default"] = callStackMiddlewares;

/***/ }),

/***/ 7240:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = normalizeIceFailureMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _actionTypes = __webpack_require__(1371);
var _constants = __webpack_require__(60683);
/**
 * Bottle wrapper for "normalize ICE failure" middleware.
 * @return {Function}
 */
function normalizeIceFailureMiddleware(context) {
  const Callstack = context.container.Callstack;

  /**
   * Handle actions that trigger ice failure normalization.
   * @param {Object} action A flux-standard action.
   */
  async function normalizeIceFailure(action) {
    if (!shouldHandlePattern(action)) {
      return;
    }
    Callstack.operations.normalizeIceFailure(action.payload.id, action.payload.iceConnectionState);
  }
  return normalizeIceFailure;
}

/**
 * Pattern check function for the normalize ice failure action pattern.
 * @param {Object} action A flux-standard action.
 */
function shouldHandlePattern(action) {
  return action.type === _actionTypes.SESSION_ICE_CONNECTION_STATE_CHANGE && action.payload.iceConnectionState === _constants.CALL_MEDIA_CONNECTION_STATES.DISCONNECTED;
}

/***/ }),

/***/ 50196:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _addMedia = _interopRequireDefault(__webpack_require__(21928));
var _validate = _interopRequireDefault(__webpack_require__(32238));
var _webrtcAddMedia = _interopRequireDefault(__webpack_require__(47196));
var _rollbackAddMedia = _interopRequireDefault(__webpack_require__(54488));
var _validateBasic = _interopRequireDefault(__webpack_require__(6274));
var _remoteOffer = _interopRequireDefault(__webpack_require__(75063));
var _remoteAnswer = _interopRequireDefault(__webpack_require__(31917));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.addMedia', () => {
    return {
      local: {
        // Stages of local operation.
        validate: _validate.default,
        localOffer: (0, _addMedia.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      },
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _remoteOffer.default)(bottle.container)
      }
    };
  });
  bottle.factory('Callstack.stages.addBasicMedia', () => {
    return {
      local: {
        // Stages of local operation.
        validate: _validateBasic.default,
        localOffer: (0, _addMedia.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.addMedia', () => {
    const Callstack = bottle.container.Callstack;
    const opFactory = Callstack.models.Operation;
    function addMedia(isLocal) {
      /**
       * Factory function for AddMedia operation.
       * @method addMedia
       * @param {string} callId ID for the call this operation will affect.
       * @return {Operation} An instance of an addMedia operation.
       */
      return callId => {
        const stages = Callstack.stages.addMedia[isLocal ? 'local' : 'remote'];
        return opFactory.instance({
          // Operation meta-data.
          type: _constants.OPERATIONS.ADD_MEDIA,
          isNegotiation: true,
          isLocal,
          // Operation methods.
          stages
        }, {
          callId
        });
      };
    }
    return {
      local: addMedia(true),
      remote: addMedia(false)
    };
  });
  bottle.factory('Callstack.operations.addBasicMedia', () => {
    const opFactory = bottle.container.Callstack.models.Operation;
    function basicAddMedia() {
      /**
       * Factory function for basic AddMedia operation.
       * @method basicAddMedia
       * @param {string} callId ID for the call this operation will affect.
       * @return {Operation} An instance of the basic addMedia operation.
       */
      return callId => {
        return opFactory.instance({
          // Operation meta-data.
          type: _constants.OPERATIONS.ADD_BASIC_MEDIA,
          isNegotiation: true,
          isLocal: true,
          // Operation methods.
          stages: bottle.container.Callstack.stages.addBasicMedia.local
        }, {
          callId
        });
      };
    }
    return {
      local: basicAddMedia()
      // There is no remote 'basic' operation; it is seen as a regular removeMedia operation.
    };
  });

  // Helpers used only within the operation.
  bottle.factory('Callstack.utils.webrtcAddMedia', () => (0, _webrtcAddMedia.default)(bottle.container));
  bottle.factory('Callstack.utils.rollbackAddMedia', () => (0, _rollbackAddMedia.default)(bottle.container));
}

/***/ }),

/***/ 21928:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = addMediaOperation;
var _actions = __webpack_require__(6313);
var _eventTypes = __webpack_require__(55166);
var _selectors = __webpack_require__(11430);
var _kandyWebrtc = __webpack_require__(15203);
// Call plugin

// Libraries

/**
 * Bottle wrapper for addMedia call operation.
 * @return {Function}
 */
function addMediaOperation(container) {
  const {
    context,
    CallRequests,
    Callstack,
    CallstackWebrtc,
    emitEvent,
    logManager
  } = container;

  /**
   * Adds media to the call
   *
   * This function performs the webRTC and signaling operations to
   *    update local and server sessions of a call.
   * Assumptions:
   *    1. Validate that the call state is "Connected".
   *        - The call is connected.
   * Responsibilities:
   *    1. Perform webRTC operations to add media.
   *    2. Update the backend with the new state.
   *    3. Update local state, using Redux
   * @method addMedia
   * @param {Object}   callId The ID of the call.
   * @param {Object}   mediaConstraints The constraints for the new media.
   * @param {Object}   options Extra options for the media.
   * @param {Object}   options.bandwidth Bandwidth options.
   * @param {Object}   options.dscpControls DSCP controls.
   */
  async function addMedia(callId, mediaConstraints, options) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Adding media to call.');
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const {
      bandwidth,
      dscpControls
    } = options;

    // Get some call data.
    const {
      webrtcSessionId,
      wrtcsSessionId,
      bandwidth: callBandwidth,
      isAnonymous,
      account,
      customParameters,
      customBodies
    } = targetCall;
    const finalBandwidth = {
      audio: bandwidth && bandwidth.audio ? bandwidth.audio : callBandwidth.audio,
      video: bandwidth && bandwidth.video ? bandwidth.video : callBandwidth.video
    };
    // Create media and add tracks using webRTC
    // TODO: This could so add try/catch and end the event if is an error
    const {
      sdp,
      medias
    } = await Callstack.utils.webrtcAddMedia(mediaConstraints, {
      sessionId: webrtcSessionId,
      bandwidth: finalBandwidth,
      dscpControls
    });
    const callInfo = {
      wrtcsSessionId,
      id: callId,
      offer: sdp,
      isAnonymous,
      account,
      customParameters,
      customBodies
    };

    // Perform signalling to add media
    try {
      await CallRequests.updateSession(callInfo);
    } catch (responseError) {
      log.info('Failed to add media to call.');
      // Rollback is not supported on safari or for a plan other than unified-plan
      let rollbackErr;
      try {
        await Callstack.utils.rollbackAddMedia(webrtcSessionId, medias);
      } catch (rollbackError) {
        log.debug('Automatic add media rollback failed:', rollbackError);
        // TODO:
        //  1 - Don't handle the error in the catch since we do the chrome behaviour only after rollback operation
        //  2 - Check if chrome still has a rollback issue
        // Ideally, we would do the chrome behaviour checks before we even attempt the rollback, but for now we
        // close the call on chrome after doing the rollback regardless of success/failure
        rollbackErr = rollbackError;
      }
      const browser = (0, _kandyWebrtc.getBrowserDetails)().browser;
      // There is an issue on Chrome where the remote track is removed from the call when the SDP rolls back
      //  leaving the call in an awkward state.
      if (rollbackErr || browser === 'chrome') {
        // Although Safari can automatically rollback and set another local offer while in `have-local-offer`
        //  signalling state, Safari does not perform an automatic rollback when a remote offer is
        //  received while in that state. An InvalidStateError is thrown instead and call is in an awkward state.
        if (browser === 'safari' || browser === 'chrome') {
          log.info('Ending call due to unrecoverable state after call add media failure.');
          // Hangup the call from WebRTC perspective
          await CallstackWebrtc.closeCall(webrtcSessionId);

          // Cleanup Redux state by sending END_CALL_FINISH action
          context.dispatch(_actions.callActions.endCallFinish(callId, {
            isLocal: true,
            transition: {
              reasonText: 'Call has ended due to call add media failure.'
            }
          }));
          emitEvent(_eventTypes.CALL_STATE_CHANGE, {
            callId,
            previous: {
              state: targetCall.state,
              localHold: targetCall.localHold,
              remoteHold: targetCall.remoteHold
            },
            error: responseError
          });
          throw responseError;
        }
        log.info('Unable to reset state after add media operation failure, future operations may not work as intended.');
      }
      throw responseError;
    }
    let tracks = [];
    medias.forEach(media => {
      tracks = tracks.concat(media.tracks.map(track => track.id));
    });
    log.info('Finished local portion of adding media. Waiting on remote response.');
    // Return the operation data so the CallManager can handle it.
    return {
      operationData: {
        local: true,
        mediaIds: medias.map(media => media.id),
        tracks,
        bandwidth: finalBandwidth
      }
    };
  }
  return addMedia;
}

/***/ }),

/***/ 31917:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAddMediaResponse;
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var _selectors = __webpack_require__(30105);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

// Other plugins.

function createAddMediaResponse(container) {
  const {
    context,
    logManager,
    emitEvent,
    CallstackWebrtc,
    CallReporter
  } = container;

  /**
   * Operation for handling the answer SDP of a locally-started add media operation.
   *
   * On succesful handling:
   *    - updates call state to added new local tracks,
   *    - emits a "media added" event
   *    - emits a "tracks added" event
   *
   * On failure to handle, ends the call as unrecoverable:
   *    - updates call state to "ended",
   *    - emits a "tracks removed" event
   *    - emits a "call state change" event.
   *
   * @method addMediaResponse
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote answer SDP.
   * @return {undefined}
   */
  async function addMediaResponse(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    const callReport = CallReporter.getReport(call.id);
    // Start the process reseponse event
    const operation = call.currentOperations.find(op => {
      return op.isLocal && [_constants.OPERATIONS.ADD_MEDIA, _constants.OPERATIONS.ADD_BASIC_MEDIA].includes(op.type);
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const processResponseEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    processResponseEvent.addData('operation', _constants2.REPORTER_OPERATION_EVENTS_MAP.ADD_MEDIA);

    // Handle the remote answer SDP.
    try {
      const sessionInfo = {
        sessionId: call.webrtcSessionId,
        answerSdp: params.sdp
      };
      await CallstackWebrtc.receivedAnswer(sessionInfo, call);
    } catch (error) {
      /*
       * Failed to set the remote answer SDP. End the call.
       * TODO: Better error handling. Is the Call fully cleaned-up here?
       */
      context.dispatch(_actions.callActions.endCallFinish(call.id, {
        error
      }));

      // Tell the application that local tracks are not available, since the
      //    call is ending in error.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });
      processResponseEvent.setError(error);
      processResponseEvent.endEvent();
      return;
    }
    log.info(`Finished processing remote response to local ${operation.type}. Changing state based on operation.`);

    // Get the list of track IDs added to the call by this operation.
    const medias = operation.operationData.mediaIds.map(id => (0, _selectors.getMediaById)(context.getState(), id));
    let affectedLocalTracks = [];
    medias.forEach(media => {
      affectedLocalTracks = affectedLocalTracks.concat(media.tracks);
    });

    // call:newMedia event
    emitEvent(eventTypes.CALL_ADDED_MEDIA, {
      callId: call.id,
      local: true,
      tracks: affectedLocalTracks,
      mediaId: operation.operationData.mediaIds
    });

    /*
     * Update call state:
     *    - add new tracks to the call.
     */
    context.dispatch(_actions.callActions.addMediaFinish(call.id, {
      bandwidth: operation.operationData.bandwidth,
      // For an add media operation, the newly added media are the affected tracks.
      localTracks: affectedLocalTracks
    }));

    // Tell the application that new tracks have been added.
    emitEvent(eventTypes.CALL_TRACKS_ADDED, {
      callId: call.id,
      trackIds: affectedLocalTracks
    });
    processResponseEvent.endEvent();
  }
  return addMediaResponse;
}

/***/ }),

/***/ 32238:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _constants = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Other plugins.

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */
function validate(state, callId, mediaConstraints, options) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `addMedia` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Connected` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.state !== _constants.CALL_STATES.CONNECTED) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Invalid call state: ${call.state}. It should be: ${_constants.CALL_STATES.CONNECTED}.`
    });
  }
}

/***/ }),

/***/ 6274:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _validate = _interopRequireDefault(__webpack_require__(32238));
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _selectors2 = __webpack_require__(30105);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */
function validate(state, callId, kind, mediaConstraints, options) {
  const call = (0, _selectors.getCallById)(state, callId);
  const tracksOfKind = call ? call.localTracks.map(id => (0, _selectors2.getTrackById)(state, id)).filter(track => track.kind === kind) : undefined;

  /*
   * `addMedia` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Connected` state.
   * `addBasicMedia` operation validation:
   *    3. Call must not already have a track of `kind` media.
   */
  const addMediaError = (0, _validate.default)(state, callId, mediaConstraints, options);
  if (addMediaError) {
    return addMediaError;
  } else if (tracksOfKind.length >= 1) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: `Too many ${kind} tracks for basic scenario!`
    });
  }
}

/***/ }),

/***/ 75063:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAddMediaHandler;
var _state = __webpack_require__(65794);
var _remoteTracks = _interopRequireDefault(__webpack_require__(45294));
var _setMediaInactive = _interopRequireDefault(__webpack_require__(23180));
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants2 = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

function createAddMediaHandler(container) {
  const {
    context,
    WebRTC,
    CallstackWebrtc,
    CallstackSDP,
    CallRequests,
    emitEvent,
    logManager
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - updates call state to add new remote tracks,
   *    - emits a "tracks added" event
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDesc
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when the operation fails.
   * @return {undefined}
   */
  async function operation(call, params, opInfo) {
    try {
      // Handle the remote add media operation and return the affected tracks.
      const {
        remoteTracks
      } = await onRemoteAddMedia(call, params, opInfo);
      context.dispatch(_actions.callActions.remoteAddMediaFinish(call.id, {
        remote: true,
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        },
        // Include the affected tracks as part of the action so the call's
        //    state can be updated accordingly.
        remoteTracks
      }));

      // New remote tracks have become available.
      emitEvent(eventTypes.CALL_TRACKS_ADDED, {
        callId: call.id,
        trackIds: remoteTracks
      });
    } catch (error) {
      // TODO: Does this action update any state? Is it needed?
      context.dispatch(_actions.callActions.remoteAddMediaFinish(call.id, {
        remote: true,
        error
      }));

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Operation for handling a new remote add-media offer SDP.
   *
   * Offer checks:
   *    - set media inactive if locally held
   *
   * @method onRemoteAddMedia
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDesc
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when WebRTC negotiation fails.
   * @throws {Error} Throws when Gateway signaling fails.
   * @return {Object} Tracks affected by the operation.
   */
  async function onRemoteAddMedia(call, params, opInfo) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }

    /*
     * The remote operation is offering media, so if the call is locally held,
     *    then we need to modify the offer to ensure that media does not restart.
     */
    const mediaState = (0, _state.getMediaState)(call);
    if ([_constants.CALL_MEDIA_STATES.DUAL_HOLD, _constants.CALL_MEDIA_STATES.LOCAL_HOLD].includes(mediaState)) {
      log.debug('Modifying remote offer to prevent resetting media while in local hold.');
      params.sdp = (0, _setMediaInactive.default)(params.sdp);
      if (!params.sdp) {
        log.debug('SDP is either undefined or not a string.');
        return;
      }
      // Update the `mediaDiff` after we modified the SDP.
      opInfo.mediaDiff = CallstackSDP.compareMedia(opInfo.remoteDesc.sdp, params.sdp, true);
    }

    // Handle the offer SDP to receive an answer SDP.
    let answer;
    try {
      answer = await CallstackWebrtc.handleOffer(params.sdp, call.webrtcSessionId, call.bandwidth);
    } catch (error) {
      log.debug('Failed to receive offer SDP.', error);

      // TODO: Notify the Gateway that negotiation has failed.
      // The call may now be in a bad state and needs to be fixed.

      throw error;
    }
    try {
      // Send answer sdp back to remote side
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: answer.answerSDP,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });
      log.info('Finished responding to remote update. Changing state based on the remote operation.');

      // Get the list of remote tracks that were added by the remote operation.
      //    This is done after `handleOffer` so the Transceivers are up-to-date
      //    with the changes being offered.
      const remoteTracks = await (0, _remoteTracks.default)(_constants2.OPERATIONS.ADD_MEDIA, opInfo.mediaDiff, session);
      return {
        remoteTracks
      };
    } catch (error) {
      // Scenario: The offer was processed, but failed to respond with the answer.
      // The remote side needs the answer SDP before the call is "connected".
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to remote offer with an answer.');
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 54488:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rollbackAddMediaOperation;
var _isUndefined2 = _interopRequireDefault(__webpack_require__(73346));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Other plugins.

// Libraries

/**
 * Bottle wrapper for "rollback AddMedia" operation.
 * @return {Function}
 */
function rollbackAddMediaOperation(container) {
  const {
    logManager,
    WebRTC
  } = container;

  /**
   * Performs the webRTC session functions associated rolling back the local portion
   *  of an "Add Media" offer
   *
   * Responsibilities:
   *  1. Remove and cleanup the tracks added to the peer
   *  2. Rollback the local description SDP offer
   * @method rollbackLocalAddMedia
   * @param {string} sessionId    The local webRTC session id, used to lookup the session object
   * @param {Array}  medias       A list of Media state objects
   * @return {Object} offer object containing a Session Description Protocol
   */
  async function rollbackAddMedia(sessionId, medias) {
    const log = logManager.getLogger('CALLSTACK');
    const session = await WebRTC.sessionManager.get(sessionId);
    if (!session) {
      const message = `WebRTC session ${sessionId} not found.`;
      log.debug(message);
      throw new _errors.default({
        message
      });
    }

    // Remove the new local media(s) that were added
    let tracks = [];
    medias.forEach(media => {
      tracks = tracks.concat(media.tracks.map(track => track.id));
    });

    // Get the tracks that we want to remove
    const localTracksToRemove = await WebRTC.track.getTracks(tracks);
    // Get the indexes of undefined tracks.
    const invalidIndexes = localTracksToRemove.reduce((acc, cur, ind) => {
      return (0, _isUndefined2.default)(cur) ? acc.concat(ind) : acc;
    }, []);
    // Get the track IDs of those indexes.
    const invalidTracks = invalidIndexes.map(ind => tracks[ind]);
    if (!(0, _isEmpty2.default)(invalidTracks)) {
      const message = `The following tracks could not be found for rollback: ${invalidTracks.join(', ')}`;
      log.debug(message);
    }

    // Removes tracks from peer (Will stop tracks from being sent to remote participant).
    // Does NOT end the tracks.
    await session.removeTracks(tracks);

    // Ends the tracks.
    // Clean-up the local tracks.
    await Promise.all(localTracksToRemove.map(track => track.stop()));

    // Rollback the local offer
    let offer;
    try {
      offer = await session.rollbackLocalDescription();
    } catch (error) {
      log.debug('Failed to rollback local description offer SDP:', error);
      throw error;
    }
    return {
      offer
    };
  }
  return rollbackAddMedia;
}

/***/ }),

/***/ 47196:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = webrtcAddMediaOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var _call = __webpack_require__(12442);
var _media = __webpack_require__(50654);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Utils

// Other plugins.

/**
 * Bottle wrapper for "webrtc AddMedia" operation.
 * @return {Function}
 */
function webrtcAddMediaOperation(container) {
  const {
    context,
    CallstackSDP,
    CallReporter,
    WebRTC
  } = container;

  /**
   * Performs the webRTC responsibilities for adding media
   *
   * @param  {Object} mediaConstraints Video and audio media constraints
   * @param  {boolean} mediaConstraints.audio Whether to enable audio or not
   * @param  {boolean} mediaConstraints.video Whether to enable video or not
   * @param  {Array<Object>} [mediaConstraints.medias] List of medias containing tracks to be attached to this call.
   * @param  {Object} sessionOptions
   * @param  {string} sessionOptions.sessionId the local webrtc session id
   * @param  {Object} [sessionOptions.bandwidth] Contains configuration details for setting bandwidth
   * @param  {Object} [sessionOptions.dscpControls] Contains configuration details for track network priorities
   * @return {Object} Object
   * @return {string} Object.sdp An offer in the form of a Session Description Protocol
   * @return {Object} Object.media media object containing tracks
   */
  async function webrtcAddMedia(mediaConstraints, sessionOptions) {
    const {
      CallstackWebrtc
    } = container;
    const {
      sessionId,
      bandwidth,
      dscpControls
    } = sessionOptions;
    const call = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), sessionId);
    const callId = call.id;
    const callReport = CallReporter.getReport(callId);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && [_constants.OPERATIONS.ADD_MEDIA, _constants.OPERATIONS.ADD_BASIC_MEDIA].includes(op.type);
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    let medias = [];
    // If detached media is passed in, use that.
    if (mediaConstraints.medias) {
      for (const media of mediaConstraints.medias) {
        medias.push({
          type: media.type,
          media: await WebRTC.media.get(media.media.id)
        });
      }
    }
    const createdMedias = await CallstackWebrtc.createLocal(mediaConstraints, callId);
    medias = medias.concat(createdMedias);
    const session = await WebRTC.sessionManager.get(sessionId);
    const trackLists = await (0, _media.organizeTracks)(medias);
    const dscpTrackMapping = (0, _call.getTrackDscpMapping)(trackLists, dscpControls);

    // Add all of the tracks to the Session.
    // TODO: Error handling.
    await session.addTracks(trackLists.all, dscpTrackMapping);

    /*
     * Create the local SDP offer, run it through any provided SDP handlers,
     *    then set it as the Session's local description.
     */
    // TODO: Make sure the session is in the correct signaling state to start a
    //    renegotiation operation.
    const callConfigOptions = (0, _selectors.getOptions)(context.getState());
    const setLocalDescriptionEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_LOCAL);
    setLocalDescriptionEvent.addData('operation', _constants2.REPORTER_OPERATION_EVENTS_MAP.ADD_MEDIA);
    let newSdp;
    try {
      let offer = await session.createOffer();
      // This is the "pre set local" stage.
      offer.sdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer.sdp, {
        callId,
        type: offer.type,
        step: 'set',
        endpoint: 'local',
        bandwidth
      });
      offer = await session.setLocalDescription(offer);

      // This is the "pre send local" stage.
      // Assign it to a new variable because some browsers enforce the read-only
      //    properties of a RTCSessionDescription object. The object from
      //    setLocalDescription is enforced read-only, but the `offer` before that
      //    is not enforced.
      newSdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer.sdp, {
        callId,
        type: offer.type,
        step: 'send',
        endpoint: 'local',
        bandwidth
      });
    } catch (setLocalError) {
      const error = new _errors.default({
        message: setLocalError.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
      setLocalDescriptionEvent.setError(error);
      setLocalDescriptionEvent.endEvent();
      throw error;
    }
    setLocalDescriptionEvent.endEvent();
    let mediaStates = [];
    for (const eachMedia of medias) {
      const mediaState = await eachMedia.media.getState();
      mediaStates = [...mediaStates, mediaState];
    }
    return {
      medias: mediaStates,
      sdp: newSdp
    };
  }
  return webrtcAddMedia;
}

/***/ }),

/***/ 88003:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = answerWebrtcSessionOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var _media = __webpack_require__(50654);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Utils

// Other plugins.

/**
 * Bottle wrapper for "answer session" operation.
 * @return {Function}
 */
function answerWebrtcSessionOperation(container) {
  const {
    context,
    logManager,
    CallstackSDP,
    WebRTC
  } = container;

  /**
   * Prepares the WebRTC portions of answering a call
   *
   * @method answerWebrtcSession
   * @param  {Object} mediaConstraints Video and audio media constraints
   * @param  {boolean} mediaConstraints.audio Whether to enable audio or not
   * @param  {boolean} mediaConstraints.video Whether to enable video or not
   * @param  {Object} sessionOptions
   * @param  {string} sessionOptions.sessionId the local webrtc session id
   * @param  {string} sessionOptions.callId the local call id
   * @param  {Object} [sessionOptions.bandwidth] Contains configuration details for setting bandwidth
   * @return {Object} Object
   * @return {string} Object.answerSDP Session Description Protocol for answer
   * @return {string} Object.mediaId an identifier for media
   */
  async function answerWebrtcSession(mediaConstraints, sessionOptions) {
    const {
      CallReporter
    } = container;
    const {
      sessionId,
      bandwidth,
      callId
    } = sessionOptions;
    const log = logManager.getLogger('CALL', callId);
    log.info('Setting up local WebRTC portions of call.');
    const incomingCall = (0, _selectors.getCallById)(context.getState(), callId);
    const report = CallReporter.getReport(callId);
    const operation = incomingCall.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.ANSWER;
    });
    const answerEvent = report.getEvent(operation.eventId);
    const gumEvent = answerEvent.addEvent(_constants2.REPORT_EVENTS.GET_USER_MEDIA);
    gumEvent.addData('mediaConstraints', mediaConstraints);

    // Remove detached media from mediaConstraints before creating media in session
    const {
      medias: detachedMedias
    } = mediaConstraints;
    delete mediaConstraints.medias;
    let session, medias;
    try {
      const result = await WebRTC.sessionManager.getWithMedia(sessionId, mediaConstraints);
      session = result.session;
      medias = result.medias;
      gumEvent.endEvent();
    } catch (err) {
      log.debug('Failed to get and add new media to call.');
      const errorObj = new _errors.default({
        message: err.message,
        code: _errors.callCodes.USER_MEDIA_ERROR
      });
      gumEvent.endEvent(errorObj);
      throw errorObj;
    }

    // Get detached media from WebRTC stack
    if (detachedMedias) {
      const detachedMediaObjs = [];
      for (const media of detachedMedias) {
        detachedMediaObjs.push({
          type: media.type,
          media: await WebRTC.media.get(media.media.id)
        });
      }
      // Add detached media to session
      const trackLists = await (0, _media.organizeTracks)(detachedMediaObjs);

      // eslint-disable-next-line no-useless-catch
      try {
        await session.addTracks(trackLists.all);
        detachedMediaObjs.forEach(detachedMedia => medias.push(detachedMedia.media));
      } catch (err) {
        // Follow-up / TODO.
        throw err;
      }
    }

    /*
     * Create the local SDP answer, run it through any provided SDP handlers,
     *    then set it as the Session's local description.
     */
    let answer, callConfigOptions;
    const setLocalDescriptionEvent = answerEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_LOCAL);
    setLocalDescriptionEvent.addData('operation', _constants2.REPORTER_OPERATION_EVENTS_MAP.ANSWER);
    try {
      answer = await session.createAnswer();
      callConfigOptions = (0, _selectors.getOptions)(context.getState());
      // This is the "pre set local" stage.
      answer.sdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, answer.sdp, {
        callId,
        type: answer.type,
        step: 'set',
        endpoint: 'local',
        bandwidth
      });
      answer = await session.setLocalDescription(answer);
    } catch (error) {
      setLocalDescriptionEvent.setError(error);
      setLocalDescriptionEvent.endEvent();
      throw new _errors.default({
        message: error.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }
    setLocalDescriptionEvent.endEvent();

    // Run the SDP through the Pipeline again before we send it to the remote side.
    //    This is the "pre send local" stage.
    // Assign it to a new variable because some browsers enforce the read-only
    //    properties of a RTCSessionDescription object. The object from
    //    setLocalDescription is enforced read-only, but the `offer` before that
    //    is not enforced.
    const newSdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, answer.sdp, {
      callId,
      type: answer.type,
      step: 'send',
      endpoint: 'local',
      bandwidth
    });
    log.info('Finished setting up local WebRTC portions of call.');
    return {
      error: false,
      answerSDP: newSdp,
      mediaIds: medias.map(media => media.id),
      session
    };
  }
  return answerWebrtcSession;
}

/***/ }),

/***/ 1614:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _answer = _interopRequireDefault(__webpack_require__(14515));
var _validate = _interopRequireDefault(__webpack_require__(7171));
var _slowAnswer = _interopRequireDefault(__webpack_require__(99000));
var _validate2 = _interopRequireDefault(__webpack_require__(47733));
var _remoteSlowAnswer = _interopRequireDefault(__webpack_require__(78112));
var _answerWebrtcSession = _interopRequireDefault(__webpack_require__(88003));
var _constants = __webpack_require__(37409);
// Operations.

// Helpers

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.answer', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This is `localOffer` because the "localOperation" flow uses that
        //    function. Eventually this should be "fixed" to properly reflect the answer.
        localOffer: (0, _answer.default)(bottle.container)
      }
    };
  });
  bottle.factory('Callstack.stages.answerSlow', () => {
    return {
      local: {
        validate: _validate2.default,
        localOffer: (0, _slowAnswer.default)(bottle.container),
        remoteAnswer: (0, _remoteSlowAnswer.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.answer', () => {
    const Callstack = bottle.container.Callstack;
    const opFactory = Callstack.models.Operation;

    /**
     * Factory function for a LocalAnswer operation.
     * @method LocalAnswer
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local answer operation.
     */
    function LocalAnswer(callId) {
      return opFactory.instance({
        type: _constants.OPERATIONS.ANSWER,
        isNegotiation: false,
        isLocal: true,
        stages: Callstack.stages.answer.local
      }, {
        callId
      });
    }
    return {
      local: LocalAnswer
    };
  });
  bottle.factory('Callstack.operations.answerSlow', () => {
    const Callstack = bottle.container.Callstack;
    const opFactory = Callstack.models.Operation;

    /**
     * Factory function for a SlowAnswer operation.
     * @method SlowAnswer
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local slow-start answer operation.
     */
    function SlowAnswer(callId) {
      return opFactory.instance({
        type: _constants.OPERATIONS.ANSWER,
        isNegotiation: true,
        isLocal: true,
        stages: Callstack.stages.answerSlow.local
      }, {
        callId
      });
    }
    return {
      local: SlowAnswer
    };
  });
  bottle.factory('Callstack.utils.answerWebrtcSession', () => (0, _answerWebrtcSession.default)(bottle.container));
}

/***/ }),

/***/ 14515:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = answerOperation;
var _actions = __webpack_require__(6313);
var _eventTypes = __webpack_require__(55166);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _call = __webpack_require__(12442);
var _remoteTracks = __webpack_require__(45294);
var _constants3 = __webpack_require__(42750);
var _selectors2 = __webpack_require__(30105);
// Call plugin

// Other plugins

/**
 * Bottle wrapper for answer call operation.
 * @return {Function}
 */
function answerOperation(container) {
  const {
    context,
    Callstack,
    CallRequests,
    CallReporter,
    emitEvent,
    logManager
  } = container;
  const {
    answerWebrtcSession
  } = Callstack.utils;

  /**
   * Answers an incoming call.
   *
   * This operation defines how a call is answered. It performs the webRTC and
   *    signaling operations to respond to a call on the server.
   *
   * The PeerConnection will exist already (created as part of receiving offer).
   *    Signaling with an answer SDP will establish the call, so it can be
   *    considered "Connected" afterwards.
   *
   * Assumptions:
   *    1. The call is in Initiated or Ringing state.
   *    2. The call's direction is incoming.
   *    3. The call is not marked as slow-start.
   * Responsibilities:
   *    1. Create an answer for the call, using the webRTC helpers.
   *    2. Update the call on the server with the answer.
   *    3. Update call state (via redux actions).
   * @method answer
   * @param {string} callId The ID of the call to answer.
   * @param {Object} media The media options the call should be initialized with.
   * @param {boolean} [media.audio=false] Whether the call should have audio on start. Currently, audio-less calls are not supported.
   * @param {Object} [media.audioOptions] Options for configuring the call's audio.
   * @param {call.MediaConstraint} [media.audioOptions.deviceId] ID of the microphone to receive audio from.
   * @param {boolean} [media.video=false] Whether the call should have video on start.
   * @param {Object} [media.videoOptions] Options for configuring the call's video.
   * @param {call.MediaConstraint} [media.videoOptions.deviceId] ID of the camera to receive video from.
   * @param {call.MediaConstraint} [media.videoOptions.height] The height of the video.
   * @param {call.MediaConstraint} [media.videoOptions.width] The width of the video.
   * @param {call.MediaConstraint} [media.videoOptions.frameRate] The frame rate of the video.
   * @param {boolean} [media.screen=false] Whether the call should have screenshare on start. (Note: Screensharing is not supported on iOS Safari.)
   * @param {Object} [media.screenOptions] Options for configuring the call's screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.height] The height of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.width] The width of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.frameRate] The frame rate of the screenShare.
   * @param {Object} [options]
   * @param {call.BandwidthControls} [options.bandwidth] Options for configuring media's bandwidth.
   * @param {call.DSCPControls} [options.dscpControls] Options for configuring DSCP markings on the media traffic
   * @param {Array<call.CustomParameter>} [options.customParameters] Custom SIP header parameters for the SIP backend.
   * @param {Array<call.CustomBody>} [options.customBodies] Custom SIP bodies for the SIP backend.
   */

  async function answer(callId, media, options) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Answering incoming call.');
    const incomingCall = (0, _selectors.getCallById)(context.getState(), callId);
    const bandwidth = (0, _call.checkBandwidthControls)(options.bandwidth);

    // Update the existing webRTC session with an answer.
    const sessionOptions = {
      sessionId: incomingCall.webrtcSessionId,
      bandwidth,
      dscpControls: options.dscpControls,
      callId: incomingCall.id
    };
    let webrtcInfo;
    try {
      webrtcInfo = await answerWebrtcSession(media, sessionOptions);
    } catch (error) {
      log.info('Failed to answer incoming call.');
      throw error;
    }
    const callInfo = {
      id: incomingCall.id,
      answer: webrtcInfo.answerSDP,
      wrtcsSessionId: incomingCall.wrtcsSessionId,
      customParameters: options.customParameters,
      customBodies: options.customBodies
    };

    // Perform the signaling to answer the call.
    try {
      await CallRequests.answerSession(callInfo);
      log.info(`Finished answering call. Changing to ${_constants2.CALL_STATES.CONNECTED}.`);

      // Get the list of all local tracks on the Session.
      const sessionState = (0, _selectors2.getSessionById)(context.getState(), incomingCall.webrtcSessionId) || {};
      const localTracks = sessionState.localTracks;

      // Get the list of all remote tracks being offered in this call. This is a
      //    new call, so this should be the full list of remote tracks available.
      const remoteTracks = await (0, _remoteTracks.getIncomingRemoteTracks)(webrtcInfo.session);
      context.dispatch(_actions.callActions.answerCallFinish(callId, {
        state: _constants2.CALL_STATES.CONNECTED,
        startTime: Date.now(),
        // The local Media object associated with this call.
        mediaIds: webrtcInfo.mediaIds,
        webrtcSessionId: webrtcInfo.sessionId,
        // TODO: Properly track the media that the call has.
        mediaConstraints: media,
        // The bandwidth of the call
        bandwidth,
        // The custom parameters (headers) and custom bodies of the call
        customParameters: options.customParameters,
        customBodies: options.customBodies,
        localTracks,
        // Add the remote tracks to the call state now that negotiation is done.
        remoteTracks
      }, {
        isSlowStart: false
      }));

      // Tell the application that tracks are available on the call now.
      emitEvent(_eventTypes.CALL_TRACKS_ADDED, {
        callId,
        trackIds: [...localTracks, ...remoteTracks]
      });
      emitEvent(_eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: incomingCall.state,
          localHold: incomingCall.localHold,
          remoteHold: incomingCall.remoteHold
        }
      });
    } catch (error) {
      log.info('Failed to answer call.');

      // If the call has been answered already by the same user logged into a different client then
      // we should let our resync call operation figure it out and put the call in the correct state
      // (Cancelled)
      if (error.code === 55) {
        const callReport = CallReporter.getReport(callId);
        // Start the call resync event
        const operation = incomingCall.currentOperations.find(op => {
          return op.isLocal && op.type === _constants.OPERATIONS.ANSWER;
        });
        const operationEvent = callReport.getEvent(operation.eventId);
        const resyncEvent = operationEvent.addEvent(_constants3.REPORT_EVENTS.RESYNC);
        await Callstack.operations.resyncCallState.stages.localOffer(callId);
        resyncEvent.endEvent();
      }
      throw error;
    }
  }
  return answer;
}

/***/ }),

/***/ 7171:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Other plugins

/*
 * Pre-operation validation method.
 *
 * @param {Object} state The current state.
 * @param {string} callId The unique id representing the call instance being operated on.
 * @param {Object} media The media being offered by the current answer operation.
 * @param {Object} options Any additional call-related options.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, media, options) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `answer` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Initiated` or `Ringing` state.
   *    3. Call must be `Incoming` direction.
   *    4. Call must be a regular one.
   *    5. Media (offered as part of answering call) should not include an offer that incoming call did not specify.
   *       This validation is needed because backend does not allow media mismatch for 'complex' operations and so
   *       SDK should abort call right away when it detects this firsthand, instead of allowing call to be established
   *       only to find that it fails during a complex operation. See `KJS-1631`.
   */
  if (!call) {
    // Call must exist.
    return new _errors.default({
      message: `Failed to answer call. Call ${callId} not found.`,
      code: _errors.callCodes.INVALID_PARAM
    });
  } else if (![_constants.CALL_STATES.INITIATED, _constants.CALL_STATES.RINGING].includes(call.state)) {
    // Call must be in Initiated or Ringing state.
    return new _errors.default({
      message: `Failed to answer call. Call must be in ${_constants.CALL_STATES.INITIATED} or ${_constants.CALL_STATES.RINGING} state.`,
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (call.direction !== _constants.CALL_DIRECTION.INCOMING) {
    // Call must be incoming.
    return new _errors.default({
      message: 'Failed to answer call. Call must be incoming.',
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (call.isSlowStart) {
    return new _errors.default({
      message: 'Failed to answer call. Call is slow-start.',
      code: _errors.callCodes.INVALID_STATE
    });
  } else {
    // For regular call, ensure local offer matches what is being offered in incoming call
    for (const [key, value] of Object.entries(media)) {
      // Detached media is validated at the API level.
      if (value && key !== 'medias') {
        // if callee offered screen share, then this is equivalent to video in webRTC framework,
        // so allow it to match as 'video' into the incoming offer
        const equivalentKey = key === 'screen' ? 'video' : key;

        // we tried to answer by offering a media that is either not present in incoming call
        // or the incoming call has that media offering turned off.
        if (!(equivalentKey in call.mediaOffered) || !call.mediaOffered[equivalentKey]) {
          return new _errors.default({
            message: `Failed to answer call by offering '${key}': Incoming call did not offer this media.`,
            code: _errors.callCodes.INVALID_PARAM
          });
        }
      }
    }
  }
}

/***/ }),

/***/ 78112:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createSlowAnswerResponse;
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _remoteTracks = __webpack_require__(45294);
var _constants3 = __webpack_require__(42750);
var _selectors = __webpack_require__(30105);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

// Other plugins.

function createSlowAnswerResponse(container) {
  const {
    context,
    logManager,
    emitEvent,
    CallstackWebrtc,
    CallReporter,
    WebRTC
  } = container;

  /**
   * Operation for handling the answer SDP of a locally-started slow-start answer operation.
   *
   * On succesful handling:
   *    - updates call state to "connected",
   *    - emits a "tracks added" event
   *    - emits a "call state change" event.
   *
   * On failure to handle, ends the call as unrecoverable:
   *    - updates call state to "ended",
   *    - emits a "call state change" event.
   *
   * @method slowAnswerResponse
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote answer SDP.
   * @return {undefined}
   */
  async function slowAnswerResponse(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    const callReport = CallReporter.getReport(call.id);
    // Start the process reseponse event
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.ANSWER;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const processResponseEvent = operationEvent.addEvent(_constants3.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    // Add two metadata properties providing more context to this event.
    processResponseEvent.addData('operation', _constants3.REPORTER_OPERATION_EVENTS_MAP.ANSWER);
    processResponseEvent.addData('isSlowStart', call.isSlowStart);

    // Handle the remote answer SDP.
    try {
      const sessionInfo = {
        sessionId: call.webrtcSessionId,
        answerSdp: params.sdp
      };
      await CallstackWebrtc.receivedAnswer(sessionInfo, call);
    } catch (error) {
      /*
       * Failed to set the remote answer SDP. End the call.
       * TODO: Better error handling. Is the Call fully cleaned-up here?
       */
      context.dispatch(_actions.callActions.endCallFinish(call.id, {
        error
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });
      processResponseEvent.setError(error);
      processResponseEvent.endEvent();
      return;
    }
    log.info(`Finished processing remote response to local ${operation.type}. Changing state based on operation.`);

    // Get the list of all remote tracks being offered in this call. This is a
    //    new call, so this should be the full list of remote tracks available.
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    const remoteTracks = await (0, _remoteTracks.getAllRemoteTracks)(session);

    // Get the list of all local tracks on the Session.
    const sessionState = (0, _selectors.getSessionById)(context.getState(), call.webrtcSessionId);
    const localTracks = sessionState.localTracks;

    /*
     * Update call state:
     *    - state change to "connected",
     *    - tracks added to call
     */
    context.dispatch(_actions.callActions.callAccepted(call.id, {
      state: _constants2.CALL_STATES.CONNECTED,
      startTime: Date.now(),
      // Remote participant's information.
      remoteParticipant: {
        displayNumber: params.remoteNumber,
        displayName: params.remoteName
      },
      // Add the tracks to the call state.
      remoteTracks,
      localTracks
    }));

    // Tell the application that tracks have been added.
    emitEvent(eventTypes.CALL_TRACKS_ADDED, {
      callId: call.id,
      trackIds: [...remoteTracks, ...localTracks]
    });

    // Tell the application that call state has changed.
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: call.localHold,
        remoteHold: call.remoteHold
      }
    });
    processResponseEvent.endEvent();
  }
  return slowAnswerResponse;
}

/***/ }),

/***/ 99000:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = answerOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _call = __webpack_require__(12442);
var _constants3 = __webpack_require__(42750);
// Call plugin

/**
 * Bottle wrapper for answer call operation.
 * @return {Function}
 */
function answerOperation(container) {
  const {
    context,
    Callstack,
    CallRequests,
    CallReporter,
    logManager
  } = container;
  const {
    setupOutgoingSession
  } = Callstack.utils;

  /**
   * Answers an incoming slow-start call.
   *
   * This operation defines how a slow-start call is answered. It performs the webRTC and
   *    signaling operations to respond to a call on the server.
   *
   * The local "call" does not exist at this point in time and needs to be created
   *    locally. An offer SDP from the call will be used for signaling (as per
   *    slow start), but the call cannot be considered "Connected" until we
   *    receive a response to the offer SDP.
   * Assumptions:
   *    1. The call is in Initiated or Ringing state.
   *    2. The call's direction is incoming.
   *    3. The call is marked as slow-start.
   * Responsibilities:
   *    1. Setup the call locally, using the webRTC helper operation.
   *    2. Update the call on the server with an offer.
   *    3. Update state (via redux actions).
   * @method answer
   * @param {string} callId The ID of the call to answer.
   * @param {Object} media The media options the call should be initialized with.
   * @param {boolean} [media.audio=false] Whether the call should have audio on start. Currently, audio-less calls are not supported.
   * @param {Object} [media.audioOptions] Options for configuring the call's audio.
   * @param {call.MediaConstraint} [media.audioOptions.deviceId] ID of the microphone to receive audio from.
   * @param {boolean} [media.video=false] Whether the call should have video on start.
   * @param {Object} [media.videoOptions] Options for configuring the call's video.
   * @param {call.MediaConstraint} [media.videoOptions.deviceId] ID of the camera to receive video from.
   * @param {call.MediaConstraint} [media.videoOptions.height] The height of the video.
   * @param {call.MediaConstraint} [media.videoOptions.width] The width of the video.
   * @param {call.MediaConstraint} [media.videoOptions.frameRate] The frame rate of the video.
   * @param {boolean} [media.screen=false] Whether the call should have screenshare on start. (Note: Screensharing is not supported on iOS Safari.)
   * @param {Object} [media.screenOptions] Options for configuring the call's screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.height] The height of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.width] The width of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.frameRate] The frame rate of the screenShare.
   * @param {Object} [options]
   * @param {call.BandwidthControls} [options.bandwidth] Options for configuring media's bandwidth.
   * @param {call.DSCPControls} [options.dscpControls] Options for configuring DSCP markings on the media traffic
   * @param {Array<call.CustomParameter>} [options.customParameters] Custom SIP header parameters for the SIP backend.
   * @param {Array<call.CustomBody>} [options.customBodies] Custom SIP bodies for the SIP backend.
   */
  async function slowAnswer(callId, media, options) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Answering incoming call.');
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    const bandwidth = (0, _call.checkBandwidthControls)(options.bandwidth);
    const wrtcsSessionId = call.wrtcsSessionId;
    log.debug('Answering call with slow start negotiation.');
    const turnInfo = (0, _selectors.getTurnInfo)(context.getState());
    const callOptions = (0, _selectors.getOptions)(context.getState());

    /*
     * If the call was a slow start call, then it doesn't have a webRTC session
     *    yet. We need to setup the session and provide the signaling server
     *    with an SDP offer.
     */
    let webrtcInfo;
    try {
      webrtcInfo = await setupOutgoingSession(media, {
        callId,
        defaultPeerConfig: callOptions.defaultPeerConfig,
        turnInfo,
        bandwidth,
        dscpControls: options.dscpControls,
        // ICE related configs.
        trickleIceMode: callOptions.trickleIceMode,
        removeBundling: callOptions.removeBundling,
        serverTurnCredentials: callOptions.serverTurnCredentials
      });
    } catch (error) {
      log.info('Failed to answer incoming call.');
      throw error;
    }
    const callInfo = {
      id: callId,
      answer: webrtcInfo.offerSdp,
      wrtcsSessionId,
      customParameters: options.customParameters,
      customBodies: options.customBodies
    };

    // Perform the signaling to answer the call.
    try {
      await CallRequests.answerSession(callInfo);
      log.info(`Finished answering slow-start call. Changing to ${_constants2.CALL_STATES.RINGING} and waiting for remote slow-start answer.`);
      context.dispatch(_actions.callActions.answerCallFinish(callId, {
        state: _constants2.CALL_STATES.RINGING,
        // TODO: Proper start time for slow-start calls.
        startTime: Date.now(),
        // The local Media object associated with this call.
        mediaIds: webrtcInfo.mediaIds,
        // For slow start calls, there isn't a webRTC session yet.
        webrtcSessionId: webrtcInfo.sessionId,
        // TODO: Properly track the media that the call has.
        mediaConstraints: media,
        // The bandwidth of the call
        bandwidth,
        // The custom parameters (headers) and custom bodies of the call
        customParameters: options.customParameters,
        customBodies: options.customBodies,
        localTracks: [],
        remoteTracks: []
      }, {
        isSlowStart: call.isSlowStart
      }));
    } catch (error) {
      log.info('Failed to answer call.');

      // If the call has been answered already by the same user logged into a different client then
      // we should let our resync call operation figure it out and put the call in the correct state
      // (Cancelled)
      if (error.code === 55) {
        const callReport = CallReporter.getReport(callId);
        // Start the call resync event
        const operation = call.currentOperations.find(op => {
          return op.isLocal && op.type === _constants.OPERATIONS.ANSWER;
        });
        const operationEvent = callReport.getEvent(operation.eventId);
        const resyncEvent = operationEvent.addEvent(_constants3.REPORT_EVENTS.RESYNC);
        await Callstack.operations.resyncCallState.stages.localOffer(callId);
        resyncEvent.endEvent();
      }
      throw error;
    }
  }
  return slowAnswer;
}

/***/ }),

/***/ 47733:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Other plugins

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, media, options) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `answer` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Initiated` or `Ringing` state.
   *    3. Call must be `Incoming` direction.
   */
  if (!call) {
    // Call must exist.
    return new _errors.default({
      message: `Failed to answer call. Call ${callId} not found.`,
      code: _errors.callCodes.INVALID_PARAM
    });
  } else if (![_constants.CALL_STATES.INITIATED, _constants.CALL_STATES.RINGING].includes(call.state)) {
    // Call must be in Initiated or Ringing state.
    return new _errors.default({
      message: `Failed to answer call. Call must be in ${_constants.CALL_STATES.INITIATED} or ${_constants.CALL_STATES.RINGING} state.`,
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (call.direction !== _constants.CALL_DIRECTION.INCOMING) {
    // Call must be incoming.
    return new _errors.default({
      message: 'Failed to answer call. Call must be incoming.',
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (!call.isSlowStart) {
    return new _errors.default({
      message: 'Failed to answer call. Call is not slow-start.',
      code: _errors.callCodes.INVALID_STATE
    });
  }
}

/***/ }),

/***/ 93948:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _callCancelled = _interopRequireDefault(__webpack_require__(18898));
// The factory funnction for the notification handler.

function initOperation(bottle) {
  // Provide the top-level container to the factory function.
  //    Otherwise it would get the `notification` sub-container.
  bottle.factory('Callstack.notifications.callCancelled', () => (0, _callCancelled.default)(bottle.container));
}

/***/ }),

/***/ 18898:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = callCancelOperation;
var _eventTypes = __webpack_require__(55166);
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
/**
 * Bottle wrapper for "call cancel" notification handler.
 * @return {Function}
 */
function callCancelOperation(container) {
  const {
    context,
    emitEvent,
    CallstackWebrtc,
    logManager
  } = container;

  /**
   * A "call cancelled" notification needs to be handled.
   *
   * A call can be "cancelled" for different reasons. In general, it means that
   *    the call was not established (locally) but it is no longer available for
   *    the user to respond. For example, it may have been answered on another
   *    device, or the caller may have ended it while it was ringing.
   *
   * The call is cancelled locally by cleaning up any/all Webrtc resources and
   *    changing the call state to indicate it was cancelled.
   *
   * @method callCancel
   * @param {string} wrtcsSessionId The server-side session ID of the call.
   */
  async function callCancel(wrtcsSessionId) {
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', (targetCall || {}).id);
    log.info('Received call cancelled notice; handling.', {
      wrtcsSessionId
    });
    if (!targetCall) {
      log.info('Call cancelled notice for unknown wrtcsSession. Ignoring.', {
        wrtcsSessionId
      });
      return;
    } else if ([_constants.CALL_STATES.ENDED, _constants.CALL_STATES.CANCELLED].includes(targetCall.state)) {
      log.info(`Call cancelled notice for already ${targetCall.state} call. Ignoring.`, {
        wrtcsSessionId
      });
      return;
    }

    // Clean up the Webrtc portion of the Call.
    await CallstackWebrtc.closeCall(targetCall.webrtcSessionId);
    log.info(`Finished handling call cancelled notice. Changing to ${_constants.CALL_STATES.CANCELLED}.`);
    // Dispatch an action to handle the redux portion of the Call.
    context.dispatch(_actions.callActions.callCancelled(targetCall.id));

    // Emit an event for the state change to cancelled
    emitEvent(_eventTypes.CALL_STATE_CHANGE, {
      callId: targetCall.id,
      previous: {
        state: targetCall.state,
        localHold: targetCall.localHold,
        remoteHold: targetCall.remoteHold
      }
    });
  }
  return callCancel;
}

/***/ }),

/***/ 21147:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = consultativeTransferOperation;
var _selectors = __webpack_require__(11430);
// Call Plugin

/**
 * Bottle wrapper for consultativeTransfer call operation.
 * @return {Function}
 */
function consultativeTransferOperation(container) {
  const {
    context,
    CallRequests,
    logManager
  } = container;

  /**
   *
   * Transfers 2 ongoing calls to one another.
   *
   * This function handles the WebRTC and signalling portions of transferring 2 ongoing calls to one another.
   * Assumptions:
   *    1. The action contains the other call id
   *    2. The calls are in the 'On Hold' state
   * Responsibilities:
   *    1. Perform the signaling to tell the server that we want to transfer 2 ongoing calls to one other.
   *    2. Update call state (via redux actions).
   * @method consultativeTransfer
   * @param {string} callId ID of the call which needs to be transferred to another call.
   * @param {string} otherCallId The ID of the second call, where the first call will be transfered to.
   */
  async function consultativeTransfer(callId, otherCallId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Performing consultative transfer on call.');
    const currentCall = (0, _selectors.getCallById)(context.getState(), callId);
    const otherCall = (0, _selectors.getCallById)(context.getState(), otherCallId);

    // Collect the information needed to make the request.
    const callInfo = {
      id: callId,
      wrtcsSessionId: currentCall.wrtcsSessionId,
      otherWrtcsSessionId: otherCall.wrtcsSessionId,
      destination: otherCall.direction === 'outgoing' ? otherCall.to : otherCall.from
    };
    try {
      await CallRequests.consultativeTransferSessions(callInfo);
    } catch (responseError) {
      log.info('Failed to consultative transfer call.');
      throw responseError;
    }
    log.info('Finished local portion of consultative transfer. Waiting on remote response.');
  }
  return consultativeTransfer;
}

/***/ }),

/***/ 10219:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _consultativeTransfer = _interopRequireDefault(__webpack_require__(21147));
var _remoteSuccess = _interopRequireDefault(__webpack_require__(25103));
var _remoteFailure = _interopRequireDefault(__webpack_require__(50414));
var _validate = _interopRequireDefault(__webpack_require__(85363));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.consultativeTransfer', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalConsultTransfer operation.
     * @method LocalConsultTransfer
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local consultative transfer operation.
     */
    function LocalConsultTransfer(callId, data) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.CONSULTATIVE_TRANSFER,
        // TODO: This operation is not actually a negotiation, but this is currently
        //    how we indicate this is a "blocking" operation (to prevent glare).
        isNegotiation: true,
        isLocal: true,
        // Operation methods.
        stages: {
          validate: _validate.default,
          // TODO: Don't use negotiation terms for this.
          localOffer: (0, _consultativeTransfer.default)(bottle.container),
          remoteSuccess: (0, _remoteSuccess.default)(bottle.container),
          remoteFailure: (0, _remoteFailure.default)(bottle.container)
        }
      }, {
        callId,
        data
      });
    }
    return {
      local: LocalConsultTransfer
    };
  });
}

/***/ }),

/***/ 50414:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHandler;
var _actions = __webpack_require__(6313);
var _constants = __webpack_require__(60683);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

function createHandler(container) {
  const {
    context,
    emitEvent,
    logManager
  } = container;

  /**
   * A "session failure" notification has been received, indicating the operation failed.
   *    Finish the operation.
   *
   * @method remoteFailure
   * @param {Object} call The primary call for the operation.
   * @param {Object} params Parameters describing the incoming call.
   * @param {string} [params.reasonText] Human-readable explanation for the call change.
   * @param {string} [params.statusCode] Code representing the reason for the call change.
   * @return {BasicError}
   */
  return function remoteFailure(call, params) {
    const reasonText = params.reasonText || _constants.COMPLEX_OPERATION_MESSAGES.CONSULTATIVE_TRANSFER_FAILURE;
    const statusCode = params.statusCode || _constants.STATUS_CODES.CONSULTATIVE_TRANSFER_FAILURE;
    const log = logManager.getLogger('CALL', call.id);
    log.info('Received call operation failed notice; handling.', {
      wrtcsSessionId: call.wrtcsSessionId
    });
    log.debug(`Processing as a local consultative transfer failure (${statusCode}).`);
    log.info('Finished handling call operation failed notice.');
    const error = new _errors.default({
      message: `Consultative transfer operation failed: ${reasonText} (${statusCode})`,
      code: _errors.callCodes.GENERIC_ERROR
    });
    context.dispatch(_actions.callActions.consultativeTransferFinish(call.id, {
      error,
      transition: {
        reasonText,
        statusCode
      }
    }));

    // Notify the app that there has been a call state change
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: true,
        remoteHold: false
      },
      error
    });
    return error;
  };
}

/***/ }),

/***/ 25103:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHandler;
var _actions = __webpack_require__(6313);
var _eventTypes = __webpack_require__(55166);
var _constants = __webpack_require__(60683);
var _call = __webpack_require__(12442);
// Call plugin.

// Helpers

function createHandler(container) {
  const {
    context,
    CallRequests,
    CallstackWebrtc,
    emitEvent,
    logManager
  } = container;

  /**
   * A "session complete" notification has been received, indicating the operation was
   *    successful. Finish the operation by ending the call.
   *
   * For a consultative transfer, this notification is only for the primary call of the
   *    operation. The secondary call will receive a separate "call end" notification.
   *
   * @method consultativeSuccess
   * @param {Object} call The primary call for the operation.
   * @param {Object} params Parameters describing the incoming call.
   * @param {string} [params.reasonText] Human-readable explanation for the call change.
   * @param {string} [params.statusCode] Code representing the reason for the call change.
   * @return {Promise<undefined>}
   */
  async function consultativeSuccess(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    log.info('Received session status completed notice; handling.', {
      wrtcsSessionId: call.wrtcsSessionId
    });
    const {
      reasonText,
      statusCode
    } = params;
    if (reasonText) {
      let customStatusCode;
      if (!statusCode && statusCode !== 0) {
        customStatusCode = _constants.STATUS_CODES.CONSULTATIVE_TRANSFER_SUCCESS;
      } else {
        customStatusCode = statusCode;
      }
      log.debug(`Session completed notice caused by ${reasonText} (${customStatusCode}).`);
    }
    log.info(`Ending webRTC session with id: ${call.webrtcSessionId}, locally ...`);
    // Close the local webRTC session
    await CallstackWebrtc.closeCall(call.webrtcSessionId);

    // Update call state to 'Ended'.
    context.dispatch(_actions.callActions.consultativeTransferFinish(call.id, {
      transition: {
        reasonText: _constants.COMPLEX_OPERATION_MESSAGES.CONSULTATIVE_TRANSFER_SUCCESS,
        statusCode: _constants.STATUS_CODES.CONSULTATIVE_TRANSFER_SUCCESS
      }
    }));
    try {
      log.debug('Ending call session on server-side.');
      await CallRequests.endSession({
        callId: call.id,
        wrtcsSessionId: call.wrtcsSessionId,
        isAnonymous: call.isAnonymous,
        account: call.account
      });
    } catch (error) {
      // Ignore an error from the REST request. End the call locally no matter what.
      log.debug(`Error received when attempting to end the session: ${error}.`);
    } finally {
      log.info(`Finished ending call. Changing call state to ${_constants.CALL_STATES.ENDED}.`);
      // TODO: Is this action needed? The call should be 'Ended' by the above action.
      context.dispatch(_actions.callActions.endCallFinish(call.id, (0, _call.generateEndParams)(call.state, true, params)));

      // Tell the application that no tracks are available any longer.
      emitEvent(_eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(_eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        }
      });
    }
  }
  return consultativeSuccess;
}

/***/ }),

/***/ 85363:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Helpers.

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, otherCallId) {
  const call = (0, _selectors.getCallById)(state, callId);
  const otherCall = (0, _selectors.getCallById)(state, otherCallId);
  /*
   * `consultativeTransfer` operation validation:
   *    1. First Call must exist.
   *    2. Second Call must exist.
   *    3. First Call must be in `On Hold` state.
   *    4. Second Call must be in `On Hold` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (!otherCall) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.state !== _constants.CALL_STATES.ON_HOLD) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call is in an invalid state: state=${call.state}. It should be: state=${_constants.CALL_STATES.ON_HOLD}.`
    });
  } else if (otherCall.state !== _constants.CALL_STATES.ON_HOLD) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call is in an invalid state: state=${otherCall.state}. It should be: state=${_constants.CALL_STATES.ON_HOLD}.`
    });
  }
}

/***/ }),

/***/ 42871:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = directTransferOperation;
var _selectors = __webpack_require__(11430);
// Call Plugin

/**
 * Bottle wrapper for directTransfer call operation.
 * @return {Function}
 */
function directTransferOperation(container) {
  const {
    context,
    CallRequests,
    logManager
  } = container;

  /**
   *
   * Direct Transfers an ongoing call.
   *
   * This function handles the WebRTC and signalling portions of direct transferring an ongoing call
   * Assumptions:
   *    1. The action contains a destination address
   *    2. The call is in the 'On Hold' state
   * Responsibilities:
   *    1. Perform the signaling to tell the server that we want to direct transfer the call to a specified destination address.
   *    2. Update call state (via redux actions).
   * @method directTransfer
   * @param {string} callId ID of the call being acted on.
   * @param {string} destination The destination to transfer the call to.
   */
  async function directTransfer(callId, destination) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Performing direct transfer on call.');
    const currentCall = (0, _selectors.getCallById)(context.getState(), callId);
    // Collect the information needed to make the request.
    const callInfo = {
      wrtcsSessionId: currentCall.wrtcsSessionId,
      address: destination,
      id: callId
    };
    try {
      await CallRequests.directTransferSession(callInfo);
    } catch (responseError) {
      log.info('Failed to direct transfer call.');
      throw responseError;
    }
    log.info('Finished local portion of direct transfer. Waiting on remote response.');
  }
  return directTransfer;
}

/***/ }),

/***/ 79675:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _directTransfer = _interopRequireDefault(__webpack_require__(42871));
var _validate = _interopRequireDefault(__webpack_require__(65372));
var _remoteSuccess = _interopRequireDefault(__webpack_require__(33800));
var _remoteFailure = _interopRequireDefault(__webpack_require__(46016));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.directTransfer', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalDirectTransfer operation.
     * @method LocalDirectTransfer
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local direct transfer operation.
     */
    function LocalDirectTransfer(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.DIRECT_TRANSFER,
        // TODO: This is not a WebRTC negotiation, but it does expect a notification
        //    in response. Currently, `isNegotiation` is the only flag to tell the
        //    `localOperation` flow that the operation needs to wait for a response.
        isNegotiation: true,
        isLocal: true,
        // Operation methods.
        stages: {
          validate: _validate.default,
          // TODO: This operation isn't a negotiation, so we shouldn't be naming
          //    a stage with WebRTC negotiation terms. But this is the method
          //    name the `localOperation` flow uses.
          localOffer: (0, _directTransfer.default)(bottle.container),
          remoteSuccess: (0, _remoteSuccess.default)(bottle.container),
          remoteFailure: (0, _remoteFailure.default)(bottle.container)
        }
      }, {
        callId
      });
    }
    return {
      local: LocalDirectTransfer
    };
  });
}

/***/ }),

/***/ 46016:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHandler;
var _actions = __webpack_require__(6313);
var _constants = __webpack_require__(60683);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

function createHandler(container) {
  const {
    context,
    emitEvent,
    logManager
  } = container;

  /**
   * A "session failure" notification has been received, indicating the operation failed.
   *    Finish the operation.
   *
   * @method remoteFailure
   * @param {Object} call The primary call for the operation.
   * @param {Object} params Parameters describing the incoming call.
   * @param {string} [params.reasonText] Human-readable explanation for the call change.
   * @param {string} [params.statusCode] Code representing the reason for the call change.
   * @return {BasicError}
   */
  return function remoteFailure(call, params) {
    const reasonText = params.reasonText || _constants.COMPLEX_OPERATION_MESSAGES.DIRECT_TRANSFER_FAILURE;
    const statusCode = params.statusCode || _constants.STATUS_CODES.DIRECT_TRANSFER_FAILURE;
    const log = logManager.getLogger('CALL', call.id);
    log.info('Received call operation failed notice; handling.', {
      wrtcsSessionId: call.wrtcsSessionId
    });
    log.debug(`Processing as a local direct transfer failure (${statusCode}).`);
    log.info('Finished handling call operation failed notice.');
    const error = new _errors.default({
      message: `Direct transfer operation failed: ${reasonText} (${statusCode})`,
      code: _errors.callCodes.GENERIC_ERROR
    });
    context.dispatch(_actions.callActions.directTransferFinish(call.id, {
      error,
      transition: {
        reasonText,
        statusCode
      }
    }));

    // Notify the app that there has been a call state change
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: true,
        remoteHold: false
      },
      error
    });
    return error;
  };
}

/***/ }),

/***/ 33800:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHandler;
var _actions = __webpack_require__(6313);
var _eventTypes = __webpack_require__(55166);
var _constants = __webpack_require__(60683);
var _call = __webpack_require__(12442);
// Call plugin.

// Helpers

function createHandler(container) {
  const {
    context,
    CallRequests,
    CallstackWebrtc,
    emitEvent,
    logManager
  } = container;

  /**
   * A "session complete" notification has been received, indicating the operation was
   *    successful. Finish the operation by ending the call.
   *
   * @method consultativeSuccess
   * @param {Object} call The call being operated on.
   * @param {Object} params Parameters describing the incoming call.
   * @param {string} [params.reasonText] Human-readable explanation for the call change.
   * @param {string} [params.statusCode] Code representing the reason for the call change.
   * @return {Promise<undefined>}
   */
  async function directSuccess(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    log.info('Received session status completed notice; handling.', {
      wrtcsSessionId: call.wrtcsSessionId
    });
    const {
      reasonText,
      statusCode
    } = params;
    if (reasonText) {
      let customStatusCode;
      if (!statusCode && statusCode !== 0) {
        customStatusCode = _constants.STATUS_CODES.DIRECT_TRANSFER_SUCCESS;
      } else {
        customStatusCode = statusCode;
      }
      log.debug(`Session completed notice caused by ${reasonText} (${customStatusCode}).`);
    }
    log.info(`Ending webRTC session with id: ${call.webrtcSessionId}, locally ...`);
    // Close the local webRTC session
    await CallstackWebrtc.closeCall(call.webrtcSessionId);

    // Update call state to 'Ended'.
    context.dispatch(_actions.callActions.directTransferFinish(call.id, {
      transition: {
        reasonText: _constants.COMPLEX_OPERATION_MESSAGES.DIRECT_TRANSFER_SUCCESS,
        statusCode: _constants.STATUS_CODES.DIRECT_TRANSFER_SUCCESS
      }
    }));
    try {
      log.debug('Ending call session on server-side.');
      await CallRequests.endSession({
        callId: call.id,
        wrtcsSessionId: call.wrtcsSessionId,
        isAnonymous: call.isAnonymous,
        account: call.account
      });
    } catch (error) {
      // Ignore an error from the REST request. End the call locally no matter what.
      log.debug(`Error received when attempting to end the session: ${error}.`);
    } finally {
      log.info(`Finished ending call. Changing call state to ${_constants.CALL_STATES.ENDED}.`);
      // TODO: Is this action needed? The call should be 'Ended' by the above action.
      context.dispatch(_actions.callActions.endCallFinish(call.id, (0, _call.generateEndParams)(call.state, true, params)));

      // Tell the application that no tracks are available any longer.
      emitEvent(_eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(_eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        }
      });
    }
  }
  return directSuccess;
}

/***/ }),

/***/ 65372:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Helpers.

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, destination) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `directTransfer` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `On Hold` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Cannot direct transfer call: Invalid call ID.'
    });
  } else if (call.state !== _constants.CALL_STATES.ON_HOLD) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call is in an invalid state: state=${call.state}. It should be: state=${_constants.CALL_STATES.ON_HOLD}.`
    });
  }
}

/***/ }),

/***/ 42702:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _receiveEarlyMedia = _interopRequireDefault(__webpack_require__(75934));
// The factory funnction for the notification handler.

function initOperation(bottle) {
  // Provide the top-level container to the factory function.
  //    Otherwise it would get the `notification` sub-container.
  bottle.factory('Callstack.notifications.receiveEarlyMedia', () => (0, _receiveEarlyMedia.default)(bottle.container));
}

/***/ }),

/***/ 75934:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = receiveEarlyMediaOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _remoteTracks = __webpack_require__(45294);
var _eventTypes = __webpack_require__(55166);
var _constants = __webpack_require__(60683);
// Call Plugin

/**
 * Bottle wrapper for "receive early media" notification handler.
 * @return {Function}
 */
function receiveEarlyMediaOperation(container) {
  const {
    context,
    emitEvent,
    logManager,
    WebRTC,
    CallstackSDP
  } = container;

  /**
   * A "session progress" notification has been received. It contains an "early
   *    media" SDP (pranswer) that needs to be processed.
   *
   * Processing a pranswer is done by:
   *    1. Validating the Call / Session.
   *    2. Running the SDP through the SDP pipeline.
   *    3. Setting the SDP as the Session's remote description (as pranswer).
   *    4. Updating the Call state.
   *
   * @method receiveEarlyMedia
   * @param {Object} params       Parameters describing the notification.
   */
  async function receiveEarlyMedia(wrtcsSessionId, params) {
    const {
      customParameters
    } = params;

    /**
     * Get the call from state.
     */
    const currentCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', (currentCall || {}).id);
    log.info('Received early media notice; handling.', {
      wrtcsSessionId
    });
    if (!currentCall) {
      log.info('Early media notice for unknown wrtcsSession. Ignoring.', {
        wrtcsSessionId
      });
      return;
    }

    /**
     * Get the Webrtc Session.
     */
    const session = await WebRTC.sessionManager.get(currentCall.webrtcSessionId);
    if (!session) {
      log.info('Early media notice for missing wrtcsSession. Ignoring.', {
        wrtcsSessionId
      });
      // TODO: Better error.
      return;
    }
    // Dispatch a custom parameters received action/event if any custom parameters were received as part of the notification
    if (customParameters) {
      const customNames = customParameters.map(param => param.name);
      log.debug(`Received custom parameters as part of the Call: ${customNames}.`);
      context.dispatch(_actions.callActions.customParametersReceived(currentCall.id, {
        customParameters
      }));

      // Emit the associated event with the above action
      emitEvent(_eventTypes.CUSTOM_PARAMETERS, {
        callId: currentCall.id,
        customParameters
      });
    }
    try {
      /*
       * Run the remote SDP pranswer through any SDP handlers provided, then set it
       *    as the Session's remote description.
       * This is the "pre set remote" stage.
       */
      const callConfigOptions = (0, _selectors.getOptions)(context.getState());
      const sdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, params.sdp, {
        callId: currentCall.id,
        type: 'pranswer',
        step: 'set',
        endpoint: 'remote'
      });
      await session.processAnswer({
        type: 'pranswer',
        sdp: sdp
      });
    } catch (err) {
      log.debug(`Failed to process pranswer for Call ${currentCall.id}; ignoring.`);
      return;
    }

    // Get the list of all remote tracks being offered in this call. This is a
    //    new call, so this should be the full list of remote tracks available.
    const remoteTracks = await (0, _remoteTracks.getAllRemoteTracks)(session);
    log.info(`Finished handling early media notice. Changing to ${_constants.CALL_STATES.EARLY_MEDIA}.`);
    context.dispatch(_actions.callActions.sessionProgress(currentCall.id, {
      // Remote participant's information.
      remoteParticipant: {
        displayNumber: params.remoteNumber,
        displayName: params.remoteName
      },
      remoteTracks
    }));

    // Tell the application that tracks are available on the call now.
    emitEvent(_eventTypes.CALL_TRACKS_ADDED, {
      callId: currentCall.id,
      trackIds: remoteTracks
    });
    emitEvent(_eventTypes.CALL_STATE_CHANGE, {
      callId: currentCall.id,
      previous: {
        state: currentCall.state,
        localHold: currentCall.localHold,
        remoteHold: currentCall.remoteHold
      }
    });
  }
  return receiveEarlyMedia;
}

/***/ }),

/***/ 28732:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _end = _interopRequireDefault(__webpack_require__(16108));
var _validate = _interopRequireDefault(__webpack_require__(84725));
var _callStatusUpdateEnded = _interopRequireDefault(__webpack_require__(61881));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.end', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _end.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.end', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalEnd operation.
     * @method LocalEnd
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local end operation.
     */
    function LocalEnd(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.END,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.end.local
      }, {
        callId
      });
    }
    return {
      local: LocalEnd
    };
  });
  bottle.factory('Callstack.notifications.callStatusUpdateEnded', () => (0, _callStatusUpdateEnded.default)(bottle.container));
}

/***/ }),

/***/ 16108:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = endOperation;
var _selectors = __webpack_require__(11430);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(60683);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Helpers

/**
 * Bottle wrapper for end call operation.
 * @return {Function}
 */
function endOperation(container) {
  const {
    context,
    CallRequests,
    CallstackWebrtc,
    logManager,
    emitEvent
  } = container;

  /**
   * Callstack operation to end an existing call.
   *
   * @method endCall
   * @param {string} callId The ID that the SDK uses to identify this call.
   * @return {undefined}
   * @throws {BasicError} Throws an error if the WebRTC operation fails.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function end(callId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Ending call.');
    let call = (0, _selectors.getCallById)(context.getState(), callId);
    const {
      wrtcsSessionId,
      webrtcSessionId,
      isAnonymous,
      account
    } = call;
    try {
      // Perform webRTC functions
      await CallstackWebrtc.closeCall(webrtcSessionId);
    } catch (error) {
      // Even if there is an error at the webrtc callstack layer,
      // don't abort, but rather still attempt to send REST request to backend.
      log.warn(`Could not successfully complete closing webrtc call: ${error}`);
    }
    call = (0, _selectors.getCallById)(context.getState(), callId);
    try {
      // Invoke the request
      await CallRequests.endSession({
        callId,
        wrtcsSessionId,
        isAnonymous,
        account
      });
    } catch (error) {
      // Catch and ignore the error.
      // Design choice: The `end` operation will never fail for a valid call. If
      //    the application wants to end the call, then make sure it ends. Avoid
      //    the application getting in an awkward error state where they can't
      //    end a call.
    } finally {
      log.info(`Finished ending call. Changing to ${_constants.CALL_STATES.ENDED}.`);

      // Tell the application that no tracks are available any longer.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
    }
  }
  return end;
}

/***/ }),

/***/ 84725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `end` operation validation:
   *    1. Call must exist.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  }
}

/***/ }),

/***/ 61881:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = callStatusEndedOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _eventTypes = __webpack_require__(55166);
var _call = __webpack_require__(12442);
// Call plugin.

/**
 * Bottle wrapper for "call status ended" notification handler.
 * @return {Function}
 */
function callStatusEndedOperation(container) {
  const {
    context,
    emitEvent,
    CallstackWebrtc,
    logManager
  } = container;

  /**
   * Handle a "call ended" notification from the backend.
   *
   * This notification means that the session has ended on the other side and we need to end our session as well.
   * Handling the notification will cleanup the session's media and puts the call in ENDED state.
   * Responsibilities:
   *    1. Have the callstack perform the required webRTC cleanup process.
   *    2. Update call state to ENDED (via redux action).
   *    3. Emit events to the application about the operation.
   * @method callStatusUpdateEnded
   * @param {string}  wrtcsSessionId         ID that the server uses to identify the session.
   * @param {Object}  params
   * @param {string}  [params.reasonText]    Human-readable explanation for the call change.
   * @param {string}  [params.statusCode]    Code representing the reason for the call change.
   * @param {string}  [params.remoteName]    Name of the remote participant.
   * @param {string}  [params.remoteNumber]  Number of the remote participant.
   */
  async function callStatusUpdateEnded(wrtcsSessionId) {
    let {
      reasonText,
      statusCode,
      remoteName,
      remoteNumber
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const currentCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', (currentCall || {}).id);
    log.info('Received call status ended notice; handling.', {
      wrtcsSessionId
    });
    if (!currentCall) {
      log.info('Call ended notice for unknown wrtcsSession. Ignoring.', {
        wrtcsSessionId
      });
      return;
    }
    if (currentCall.state === _constants2.CALL_STATES.ENDED) {
      log.info('Call ended notice for already Ended call. Ignoring.', {
        wrtcsSessionId
      });
      return;
    }
    const prevCall = currentCall;
    log.debug(`Call ended notice caused by ${reasonText} (Status Code: ${statusCode}).`);
    await CallstackWebrtc.closeCall(currentCall.webrtcSessionId);
    log.info(`Finished handling call ended notice. Changing to ${_constants2.CALL_STATES.ENDED}.`);
    context.dispatch(_actions.callActions.endCallFinish(currentCall.id, (0, _call.generateEndParams)(currentCall.state, false, {
      reasonText,
      statusCode,
      remoteName,
      remoteNumber
    })));
    emitEvent(_eventTypes.CALL_OPERATION, {
      callId: currentCall.id,
      operation: _constants.OPERATIONS.END,
      transition: _constants.OP_TRANSITIONS.FINISH,
      isLocal: false,
      previous: {}
    });

    // Tell the application that no tracks are available any longer.
    emitEvent(_eventTypes.CALL_TRACKS_REMOVED, {
      callId: currentCall.id,
      trackIds: [...prevCall.localTracks, ...prevCall.remoteTracks]
    });
    emitEvent(_eventTypes.CALL_STATE_CHANGE, {
      callId: currentCall.id,
      transition: {
        reasonText,
        statusCode
      },
      previous: {
        state: prevCall.state,
        localHold: prevCall.localHold,
        remoteHold: prevCall.remoteHold
      }
    });
  }
  return callStatusUpdateEnded;
}

/***/ }),

/***/ 85314:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = forwardOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
// Call plugin.

/**
 * Bottle wrapper for forward call operation.
 * @return {Function}
 */
function forwardOperation(container) {
  const {
    CallRequests,
    CallstackWebrtc,
    context,
    logManager
  } = container;

  /**
   *
   * Forwards an incoming call.
   *
   * This operation handles the WebRTC and signalling portions of forwarding an incoming call
   * Assumptions:
   *    1. The action contains a destination address
   * Responsibilities:
   *    1. Perform the signaling to tell the server that we want to forward the call to a specified destination address.
   *    2. Update call state (via redux actions).
   * @method forwardCall
   * @param {string} callId      ID of the call being acted on.
   * @param {string} destination The destination to forward the call to.
   * @return {undefined}
   * @throws {BasicError} Throws INVALID_PARAM if the call cannot be found.
   * @throws {BasicError} Throws INVALID_STATE if the call is in the wrong state.
   * @throws {BasicError} Throws ??? if the REST request fails.
   */
  async function forward(callId, destination) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Forwarding incoming call.');
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    // Collect the information needed to make the request.
    const callInfo = {
      wrtcsSessionId: call.wrtcsSessionId,
      address: destination
    };
    try {
      await CallRequests.forwardSession(callInfo);

      // Clean-up webrtc resources.
      await CallstackWebrtc.closeCall(call.webrtcSessionId);
      log.info(`Finished forwarding call. Changing to ${_constants.CALL_STATES.ENDED}.`);
    } catch (err) {
      log.info('Failed to forward call.');
      throw err;
    }
  }
  return forward;
}

/***/ }),

/***/ 34316:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _forward = _interopRequireDefault(__webpack_require__(85314));
var _validate = _interopRequireDefault(__webpack_require__(98067));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.forward', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _forward.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.forward', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalForward operation.
     * @method LocalForward
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local forward operation.
     */
    function LocalForward(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.FORWARD_CALL,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.forward.local
      }, {
        callId
      });
    }
    return {
      local: LocalForward
    };
  });
}

/***/ }),

/***/ 98067:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, destination) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `forward` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Initiated` or `Ringing` state.
   *    3. Call must be `Incoming` direction.
   */
  if (!call) {
    // Call must exist.
    return new _errors.default({
      message: `Failed to forward call. Call ${callId} not found.`,
      code: _errors.callCodes.INVALID_PARAM
    });
  } else if (![_constants.CALL_STATES.INITIATED, _constants.CALL_STATES.RINGING].includes(call.state)) {
    // Call must be in Initiated or Ringing state.
    return new _errors.default({
      message: `Failed to forward call. Call must be in ${_constants.CALL_STATES.INITIATED} or ${_constants.CALL_STATES.RINGING} state.`,
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (call.direction !== _constants.CALL_DIRECTION.INCOMING) {
    // Call must be incoming.
    return new _errors.default({
      message: 'Failed to forward call. Call must be incoming.',
      code: _errors.callCodes.INVALID_STATE
    });
  }
}

/***/ }),

/***/ 53894:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _remoteOffer = _interopRequireDefault(__webpack_require__(61425));
var _constants = __webpack_require__(37409);
// Operation.

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.genericRemote', () => {
    return {
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _remoteOffer.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.genericRemote', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a RemoteGeneric operation.
     * @method RemoteGeneric
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a remote generic operation.
     */
    function RemoteGeneric(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.GENERIC_REMOTE,
        isNegotiation: true,
        isLocal: false,
        // Operation methods.
        stages: bottle.container.Callstack.stages.genericRemote.remote
      }, {
        callId
      });
    }
    return {
      remote: RemoteGeneric
    };
  });
}

/***/ }),

/***/ 61425:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createGenericHandler;
var _remoteTracks = __webpack_require__(45294);
var _setMediaInactive = _interopRequireDefault(__webpack_require__(23180));
var _hasMediaFlowing = _interopRequireDefault(__webpack_require__(43393));
var _webrtc = __webpack_require__(82332);
var _state = __webpack_require__(65794);
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
function createGenericHandler(container) {
  const {
    context,
    WebRTC,
    CallstackWebrtc,
    CallRequests,
    CallstackSDP,
    logManager
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - updates call state ...?
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDesc
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when the operation fails.
   * @return {undefined}
   */
  async function operation(call, params, opInfo) {
    try {
      const {
        remoteTracks
      } = await onGenericRemote(call, params, opInfo);
      context.dispatch(_actions.callActions.updateCall(call.id, {
        remote: true,
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        },
        remoteTracks
      }));

      // TODO: If there were remote tracks added or removed, we need to emit an
      //    event for that.
    } catch (error) {
      context.dispatch(_actions.callActions.updateCall(call.id, {
        remote: true,
        error
      }));

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Operation for handling a new offer SDP in a generic way.
   * If this operation is used, it means we don't know what the remote operation
   *    is, so we can follow through with generic WebRTC negotiation without any
   *    added flair.
   *
   * The "media restart" operation will be handled as a generic remote (NO_CHANGE)
   *    operation. Other operations are negotiations that we don't understand
   *    (UNKNOWN or other types of NO_CHANGE).
   *
   * @method onGenericRemote
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDesc
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when WebRTC negotiation fails.
   * @throws {Error} Throws when Gateway signaling fails.
   * @return {Object} Tracks affected by the operation.
   */
  async function onGenericRemote(call, params, opInfo) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }

    /*
     * If the remote operation is offering media but the call is locally held,
     *    then we need to modify the offer to ensure that media does not restart.
     */
    const mediaState = (0, _state.getMediaState)(call);
    const isMediaFlowing = (0, _hasMediaFlowing.default)(params.sdp);
    if (isMediaFlowing && [_constants.CALL_MEDIA_STATES.DUAL_HOLD, _constants.CALL_MEDIA_STATES.LOCAL_HOLD].includes(mediaState)) {
      log.debug('Modifying remote offer to prevent resetting media while in local hold.');
      params.sdp = (0, _setMediaInactive.default)(params.sdp);
      if (!params.sdp) {
        log.debug('SDP is either undefined or not a string.');
        return;
      }
      // Update the `mediaDiff` after we modified the SDP.
      opInfo.mediaDiff = CallstackSDP.compareMedia(opInfo.remoteDesc.sdp, params.sdp, true);
    }

    /**
     * Decision: When we receive a remote offer SDP that has a different "session
     *    ID" as the currently set remote SDP, recreate the call's PeerConnection.
     * This is a workaround/fix for scenarios where the remote endpoint changes.
     *    It avoids possible DTLS role conflict issues.
     */
    const sameSession = await (0, _webrtc.isSameSdpSessionId)(WebRTC, call.webrtcSessionId, params.sdp);
    if (!sameSession) {
      log.debug(`Received offer SDP is from a different session. Recreating Peer for call ${call.id}.`);
      const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
      await session.recreatePeer();
    }

    /**
     * If the offer SDP has a DTLS role of active (which is invalid), change it to
     *    actpass. This is a workaround for transfer scenarios where the offer SDP
     *    is the remote endpoint's answer SDP from them answering the call. This
     *    happens when slow-start is not done for the transfer.
     */
    if (params.sdp.includes('setup:active')) {
      log.debug(`Received offer SDP with active role for call ${call.id}. Changing.`);
      params.sdp = params.sdp.replace(/setup:active/g, 'setup:actpass');
    }
    let answer;
    try {
      answer = await CallstackWebrtc.handleOffer(params.sdp, call.webrtcSessionId, call.bandwidth);
    } catch (error) {
      log.debug('Failed to receive offer SDP.', error);

      // TODO: Notify the Gateway that negotiation has failed.
      // The call may now be in a bad state and needs to be fixed.

      throw error;
    }
    try {
      // Send answer sdp back to remote side
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: answer.answerSDP,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });

      // Get the list of remote tracks that are changing (either added or removed) as
      //    part of the remote operation. This is done after `handleOffer` so the
      //    Transceivers are up-to-date with the changes being offered.
      let remoteTracks = [];
      if (!sameSession) {
        // If the PeerConnection was recreated, then ALL remote tracks will be new.
        remoteTracks = await (0, _remoteTracks.getAllRemoteTracks)(session);
      }
      return {
        remoteTracks
      };
    } catch (error) {
      // Scenario: The offer was processed, but failed to respond with the answer.
      // The remote side needs the answer SDP before the call is "connected".
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to remote offer with an answer.');
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 46120:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getAvailableCodecsOperation;
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Other plugins.

/**
 * Bottle wrapper for "get codecs" operation.
 * @return {Function}
 */
function getAvailableCodecsOperation(container) {
  const {
    logManager,
    WebRTC
  } = container;

  /**
   * Uses the WebRTC stack to get the list of available and supported codecs by the browser
   *
   * @method getAvailableCodecs
   * @param  {string} kind The kind of media, i.e., 'audio' or 'video', to get the list of available codecs of.
   * @return {Object} An object containing the available codecs.
   */
  async function getAvailableCodecs(kind) {
    const log = logManager.getLogger('CALL');

    // TODO: Remove this once parameter validation is available for APIs
    if (kind !== 'audio' && kind !== 'video') {
      const errorMsg = `Cannot retrieve codecs for media kind ${kind}. Only 'audio' or 'video' kind supported.`;
      log.info(errorMsg);
      throw new _errors.default({
        message: errorMsg
      });
    }
    log.info(`Retrieving list of available codecs for media kind '${kind}'.`);

    // Get the list of codecs from the general WebRTCManager
    const codecs = await WebRTC.webrtcManager.getAvailableCodecs(kind);

    // NOTE: There does not seem to be a path for failure, as RTCRtpSender.getCapabilities(kind)
    //       always returns something according to API doc
    //       (including null, if there are simply no capabilities present)
    //       As a result of null, may want to consider an empty array of `codecs` as a failure in the furture.
    log.debug('Successfully retrieved codec list:', codecs);
    return codecs;
  }
  return getAvailableCodecs;
}

/***/ }),

/***/ 51561:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _getAvailableCodecs = _interopRequireDefault(__webpack_require__(46120));
function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.getAvailableCodecs', () => {
    // Note: getAvailableCodecs is not a call-specific operation. The CallManager
    //    does not manage it.
    return (0, _getAvailableCodecs.default)(bottle.container);
  });
}

/***/ }),

/***/ 77279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getStatsOperation;
var _selectors = __webpack_require__(11430);
var _kandyWebrtc = __webpack_require__(15203);
var _version = __webpack_require__(10825);
var _sdkId = _interopRequireDefault(__webpack_require__(15878));
// Call plugin.

// Libraries.

// Utils.

/**
 * Bottle wrapper for getStats call operation.
 * @return {Function}
 */
function getStatsOperation(container) {
  const {
    context,
    logManager,
    WebRTC
  } = container;

  /**
   * Gets low-level statistics about a call (or track).
   *
   * This operation defines how/what statistics are retrieved about a call. It performs
   *    the webRTC operations on the local session. No signaling is involved.
   * The retrieved call statistics are a RTCStatsReport as provided by the WebRTC
   *    specification. Stats can be retrieved for either an entire call or
   *    individual tracks.
   * Assumptions:
   *    1. The call is on-going.
   * Responsibilities:
   *    1. Ensure the call exists.
   *    2. Use the webRTC layer to retrieve the stats.
   *    3. Dispatch an action with the results (which triggers an event).
   * @method getStats
   * @param {string} callId The ID of the Call to retrieve the report.
   * @param {string} trackId Id of a Track being used by the Call. If not
   *    provided, RTCStatsReport is generated for the Call itself.
   * @throws {BasicError} Throws an error if the call is not found.
   * @throws {BasicError} Throws an error if the WebRTC stats can't be retrieved.
   * @return {Promise} A promise that will resolve with the stats report or an error if it fails.
   */
  async function getStats(callId, trackId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Getting call statistics.');

    // Get the call.
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const result = new Map();
    // Get the local Session for the call.
    const session = await WebRTC.sessionManager.get(targetCall.webrtcSessionId);

    // Retrieve the RTCStatsReport from the session.
    const rtcStatsReport = await session.getStats(trackId);
    log.info('Finished getting call statistics.');

    // Extract values for our own custom Statistics
    const type = 'kandy_sdk_info';
    const id = 'kandy-sdk-info_' + _sdkId.default;
    const version = (0, _version.getVersion)();
    const sdk = '@kandy-io/' + (targetCall.isAnonymous ? 'callme-sdk' : 'link-sdk');

    // Note that getting browser details is only intended for local browser.
    // For proxy mode this would return undefined. (see getBrowserDetails() on proxyStack)
    const details = (0, _kandyWebrtc.getBrowserDetails)();

    // Define our custom Stats object
    const sdkMetaData = {
      id,
      type,
      sdk,
      version,
      callId: callId
    };
    if (details) {
      sdkMetaData.platform = details.browser + '/' + details.version;
    }

    // Set the timestamp value of our custom report to be same value as
    // the timestamp associated with any stat coming from original webRTC report.
    const iter = rtcStatsReport.keys();
    const rtcStatValue = rtcStatsReport.get(iter.next().value);
    if (rtcStatValue) {
      sdkMetaData.timestamp = rtcStatValue.timestamp;
    }
    // Add our custom stats to the ones reported by Web RTC.
    // Since rtcStatsReport seems to be read-only Map, create a new Map
    // which includes both our stat & the ones from webrtc.
    result.set(id, sdkMetaData);
    rtcStatsReport.forEach(stat => {
      result.set(stat.id, stat);
    });
    return result;
  }
  return getStats;
}

/***/ }),

/***/ 7196:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _getStats = _interopRequireDefault(__webpack_require__(77279));
var _validate = _interopRequireDefault(__webpack_require__(58999));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.getStats', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _getStats.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.getStats', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalGetStats operation.
     * @method LocalGetStats
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local get stats operation.
     */
    function LocalGetStats(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.GET_STATS,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.getStats.local
      }, {
        callId
      });
    }
    return {
      local: LocalGetStats
    };
  });
}

/***/ }),

/***/ 58999:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, trackId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `getStats` operation validation:
   *    1. Call must exist.
   *    2. Call must not be Ended.
   *    3. If provided, `trackId` must be a local track.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.state === _constants.CALL_STATES.ENDED) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: 'Failed to get call stats; call must not be ended.'
    });
  } else if (trackId && !call.localTracks.includes(trackId)) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Provided trackId is not a local track on the call.'
    });
  }
}

/***/ }),

/***/ 26846:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _hold = _interopRequireDefault(__webpack_require__(45413));
var _validate = _interopRequireDefault(__webpack_require__(38085));
var _rollbackHold = _interopRequireDefault(__webpack_require__(92766));
var _remoteAnswer = _interopRequireDefault(__webpack_require__(59745));
var _remoteOffer = _interopRequireDefault(__webpack_require__(46889));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.hold', () => {
    return {
      local: {
        // Stages of local operation.
        validate: _validate.default,
        localOffer: (0, _hold.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      },
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _remoteOffer.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.hold', () => {
    const Callstack = bottle.container.Callstack;
    const opFactory = Callstack.models.Operation;
    function hold(isLocal) {
      /**
       * Factory function for a Hold operation.
       * @method hold
       * @param {string} callId ID for the call this operation will affect.
       * @return {Operation} An instance of the hold operation.
       */
      return callId => {
        const stages = Callstack.stages.hold[isLocal ? 'local' : 'remote'];
        return opFactory.instance({
          // Operation meta-data.
          type: _constants.OPERATIONS.HOLD,
          isNegotiation: true,
          isLocal,
          // Operation methods.
          stages
        }, {
          callId
        });
      };
    }
    return {
      local: hold(true),
      remote: hold(false)
    };
  });
  bottle.factory('Callstack.utils.rollbackHold', () => (0, _rollbackHold.default)(bottle.container));
}

/***/ }),

/***/ 45413:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = holdOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _kandyWebrtc = __webpack_require__(15203);
// Call plugin

// Libraries

/**
 * Bottle wrapper for hold call operation.
 * @return {Function}
 */
function holdOperation(container) {
  const {
    context,
    CallRequests,
    Callstack,
    CallstackWebrtc,
    logManager
  } = container;

  /**
   * Updates an existing call to have inactive media.
   * Can be used as a "hold" operation for plain webRTC scenarios.
   *
   * This function defines how a call is put "on hold". It performs the webRTC and
   *    signaling operations to update the local and server sessions of a call.
   *    This represents the start of the webRTC renegotiation process for the
   *    local side.
   * Assumptions:
   *    1. The call is in the correct state for the operation.
   *        - The call exists, and is not already locally held.
   * Responsibilities:
   *    1. Generate an offer with the media directions as "locally held".
   *    2. Perform signaling to update the server session with the offer.
   *    3. Update call state (via redux actions).
   * @method hold
   * @param {string}   callId  The ID of the call to hold.
   */
  async function hold(callId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Holding call.');
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const {
      wrtcsSessionId,
      webrtcSessionId,
      isAnonymous,
      account,
      customParameters,
      customBodies
    } = targetCall;
    // TODO: Make sure the session is in the correct signaling state to start a
    //    renegotiation operation.
    let offer;
    try {
      offer = await CallstackWebrtc.generateOffer(webrtcSessionId, {
        audio: 'inactive',
        video: 'inactive'
      }, targetCall.bandwidth);
    } catch (generateOfferError) {
      log.debug('Failed to generate SDP offer');
      throw generateOfferError;
    }
    const callInfo = {
      wrtcsSessionId,
      id: callId,
      offer: offer.sdp,
      isAnonymous,
      account,
      customParameters,
      customBodies
    };
    try {
      await CallRequests.updateSession(callInfo);
    } catch (responseError) {
      log.info('Failed to hold call.');
      // Rollback is not supported on safari or for a plan other than unified-plan
      let rollbackErr;
      try {
        await Callstack.utils.rollbackHold(webrtcSessionId);
      } catch (rollbackError) {
        log.debug('Automatic hold rollback failed:', rollbackError);
        rollbackErr = rollbackError;
      }

      // There is a "browser issue" with Chrome where the remote track is removed from the call when the local description
      //  offer is set. This track is not recovered during rollback so call remains in an awkward state.
      //  See comments on PR-3224.
      const browser = (0, _kandyWebrtc.getBrowserDetails)().browser;
      if (rollbackErr || browser === 'chrome') {
        // Although Safari can automatically rollback and set another local offer while in `have-local-offer`
        //  signalling state, Safari does not perform an automatic rollback when a remote offer is
        //  received while in that state. An InvalidStateError is thrown instead and call is in an awkward state.
        if (browser === 'safari' || browser === 'chrome') {
          log.info('Ending call due to unrecoverable state after call hold failure.');
          // Hangup the call from WebRTC perspective
          await CallstackWebrtc.closeCall(webrtcSessionId);

          // Cleanup Redux state by sending END_CALL_FINISH action
          context.dispatch(_actions.callActions.endCallFinish(callId, {
            isLocal: true,
            transition: {
              reasonText: 'Call has ended due to call hold failure.'
            }
          }));
          throw responseError;
        }
        log.info('Unable to reset state after hold operation failure, future operations may not work as intended.');
      }
      throw responseError;
    }
    log.info('Finished local portion of holding call. Waiting on remote response.');
  }
  return hold;
}

/***/ }),

/***/ 59745:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHoldResponse;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Callstack.
function createHoldResponse(container) {
  const {
    context,
    logManager,
    emitEvent,
    CallstackWebrtc,
    CallReporter
  } = container;

  /**
   * Operation for handling the answer SDP of a locally-started hold operation.
   *
   * On succesful handling:
   *    - updates call state to "on hold",
   *    - emits a "tracks removed" event
   *    - emits a "call state change" event.
   *
   * On failure to handle, ends the call as unrecoverable:
   *    - updates call state to "ended",
   *    - emits a "tracks removed" event
   *    - emits a "call state change" event.
   *
   * @method holdResponse
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote answer SDP.
   * @return {undefined}
   */
  async function holdResponse(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    const callReport = CallReporter.getReport(call.id);
    // Start the process reseponse event
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.HOLD;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const processResponseEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    processResponseEvent.addData('operation', _constants2.REPORTER_OPERATION_EVENTS_MAP.HOLD);

    // Handle the remote answer SDP.
    try {
      const sessionInfo = {
        sessionId: call.webrtcSessionId,
        answerSdp: params.sdp
      };
      await CallstackWebrtc.receivedAnswer(sessionInfo, call);
    } catch (error) {
      /*
       * Failed to set the remote answer SDP. End the call.
       * TODO: Better error handling. Is the Call fully cleaned-up here?
       */
      context.dispatch(_actions.callActions.endCallFinish(call.id, {
        error
      }));

      // Tell the application that local tracks are not available, since the
      //    call is ending in error.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });
      processResponseEvent.setError(error);
      processResponseEvent.endEvent();
      return;
    }
    log.info(`Finished processing remote response to local ${operation.type}. Changing state based on operation.`);

    /*
     * Update call state:
     *    - state change to "on hold",
     *    - tracks affected by operation removed.
     */
    context.dispatch(_actions.callActions.holdCallFinish(call.id, _objectSpread(_objectSpread({}, operation.operationData), {}, {
      // For a hold operation, all tracks currently on the call are affected.
      localTracks: call.localTracks,
      remoteTracks: call.remoteTracks
    })));

    // Tell the application that tracks have been removed.
    emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
      callId: call.id,
      trackIds: [...call.localTracks, ...call.remoteTracks]
    });

    // Tell the application that call state has changed.
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: call.localHold,
        remoteHold: call.remoteHold
      }
    });
    processResponseEvent.endEvent();
  }
  return holdResponse;
}

/***/ }),

/***/ 38085:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `hold` operation validation:
   *    1. Call must exist.
   *    2. Call must be not be held locally.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.localHold !== false) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: 'Call is in an invalid state: localHold=true. It should be: localHold=false.'
    });
  }
}

/***/ }),

/***/ 46889:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHoldHandler;
var _webrtc = __webpack_require__(82332);
var _remoteTracks = _interopRequireWildcard(__webpack_require__(45294));
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

function createHoldHandler(container) {
  const {
    context,
    WebRTC,
    CallstackWebrtc,
    CallRequests,
    emitEvent,
    logManager
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - updates call state to add "remote hold" flag,
   *    - emits a "tracks removed" event
   *    - emits a "call state change" event.
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *    - emits a "call state change" error event.
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber The display number of the remote endpoint.
   * @param {string} params.remoteName The display name of the remote endpoint.
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @return {undefined}
   */
  async function operation(call, params, opInfo) {
    try {
      // Handle the remote hold operation and return the affected local/remote tracks.
      const {
        localTracks,
        remoteTracks
      } = await onRemoteHold(call, params, opInfo);
      context.dispatch(_actions.callActions.remoteHoldFinish(call.id, {
        remote: true,
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        },
        // Include the affected tracks as part of the action so the call's
        //    state can be updated accordingly.
        localTracks,
        remoteTracks
      }));

      // The call has changed to a new state.
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        }
      });

      // All local and remote tracks have become unavailable.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...localTracks, ...remoteTracks]
      });
    } catch (error) {
      // TODO: Does this action update any state? Is it needed?
      context.dispatch(_actions.callActions.remoteHoldFinish(call.id, {
        remote: true,
        error
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Operation for handling a new remote hold offer SDP.
   *
   * Offer checks:
   *    - recreate Peer if different SDP session
   *
   * @method onRemoteHold
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @return {Object} Affected local and remote tracks.
   */
  async function onRemoteHold(call, params, opInfo) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }

    /**
     * Decision: When we receive a remote offer SDP that has a different "session
     *    ID" as the currently set remote SDP, recreate the call's PeerConnection.
     * This is a workaround/fix for scenarios where the remote endpoint changes.
     *    It avoids possible DTLS role conflict issues.
     */
    // TODO: Verify that this is needed for remote hold operations.
    const sameSession = await (0, _webrtc.isSameSdpSessionId)(WebRTC, call.webrtcSessionId, params.sdp);
    if (!sameSession) {
      log.debug(`Received offer SDP is from a different session. Recreating Peer for call ${call.id}.`);
      await session.recreatePeer();
    }

    // Handle the offer SDP to receive an answer SDP.
    let answer;
    try {
      answer = await CallstackWebrtc.handleOffer(params.sdp, call.webrtcSessionId, call.bandwidth);
    } catch (error) {
      log.debug('Failed to receive offer SDP.', error);

      // TODO: Notify the Gateway that negotiation has failed.
      // The call may now be in a bad state and needs to be fixed.

      throw error;
    }
    try {
      // Send answer sdp back to remote side
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: answer.answerSDP,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });
      log.info('Finished responding to remote update. Changing state based on the remote operation.');

      // Get the list of remote tracks that are changing (either added or removed) as
      //    part of the remote operation. This is done after `handleOffer` so the
      //    Transceivers are up-to-date with the changes being offered.
      let remoteTracks = [];
      if (!sameSession) {
        // If the PeerConnection was recreated, then ALL remote tracks will be new.
        remoteTracks = await (0, _remoteTracks.getAllRemoteTracks)(session);
      } else {
        remoteTracks = await (0, _remoteTracks.default)(_constants.OPERATIONS.HOLD, opInfo.mediaDiff, session);
      }

      // On remote hold, all local tracks become unavailable.
      const affectedLocalTracks = call.localTracks;
      return {
        remoteTracks,
        localTracks: affectedLocalTracks
      };
    } catch (error) {
      // Scenario: The offer was processed, but failed to respond with the answer.
      // The remote side needs the answer SDP before the call is "connected".
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to remote offer with an answer.');
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 92766:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rollbackHoldOperation;
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Other plugins.

/**
 * Bottle wrapper for "rollback hold" operation.
 * @return {Function}
 */
function rollbackHoldOperation(container) {
  const {
    logManager,
    WebRTC
  } = container;

  /**
   * Performs the webRTC session functions associated rolling back the local portion
   *  of a "hold" (inactive media) offer
   *
   * Responsibilities:
   *  1. Revert the direction of the local and remote transceivers to "sendrecv"
   *  2. Rollback the local description SDP offer
   * @method rollbackHold
   * @param {string} sessionId the local webRTC session id, used to lookup the session object
   * @return {Object} offer object containing a Session Description Protocol
   */
  async function rollbackHold(sessionId) {
    const log = logManager.getLogger('CALLSTACK');
    const session = await WebRTC.sessionManager.get(sessionId);
    if (!session) {
      const message = `WebRTC session ${sessionId} not found.`;
      throw new _errors.default({
        message
      });
    }
    try {
      await session.setTransceiversDirection({
        audio: 'sendrecv',
        video: 'sendrecv'
      });
    } catch (error) {
      // TODO: Handle this potential error
      // log.debug('Failed to restore local/remote tranceiver directions for audio/video:', error)
      // throw error
    }

    // Rollback the local offer
    let offer;
    try {
      offer = await session.rollbackLocalDescription();
    } catch (error) {
      log.debug('Failed to rollback local description offer SDP:', error);
      throw error;
    }
    return {
      offer
    };
  }
  return rollbackHold;
}

/***/ }),

/***/ 20398:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = callIceCollectionCheckOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _actions = __webpack_require__(6313);
var _constants = __webpack_require__(60683);
var _constants2 = __webpack_require__(42750);
var _eventTypes = __webpack_require__(55166);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Other plugins.
/**
 * Bottle wrapper for ..."callIceCollectionCheck".
 * @return {Function}
 */
function callIceCollectionCheckOperation(container) {
  const {
    CallReporter,
    context,
    emitEvent,
    logManager,
    WebRTC
  } = container;

  /**
   * Add the necessary information to the ice collection info object and call the
   *  ice collection check function. Then pass the results of the check back to the
   *  WebRTC stack for further processing.
   *
   * @method callIceCollectionCheck
   * @param {Object} webrtcSessionId    The id of the call being acted on.
   * @param {Object} iceCollectionInfo  An object containing necessary info for the call.
   */
  async function callIceCollectionCheck(webrtcSessionId, iceCollectionInfo) {
    // Get info from state for the operation.
    const currentCall = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), webrtcSessionId);
    const config = (0, _selectors.getOptions)(context.getState());
    const log = logManager.getLogger('CALL', currentCall ? webrtcSessionId : '');

    // Metrics tracking for relay candidates
    const callReport = CallReporter.getReport(currentCall.id);
    const latestMainEvent = callReport.findLastOngoingEvent(Object.values(_constants2.ICE_COLLECTION_OPERATIONS));
    let iceCollectionEvent;
    if (latestMainEvent) {
      const setLocalDescEvent = latestMainEvent.timeline.find(event => event.type === _constants2.REPORT_EVENTS.PROCESS_MEDIA_LOCAL);
      if (setLocalDescEvent) {
        const relayCandidates = iceCollectionInfo.iceCandidates.filter(candidate => candidate.component === 'rtp' && candidate.type === 'relay');

        // Get or create the ice collection reporter event if it doesn't already exist
        iceCollectionEvent = setLocalDescEvent.timeline.find(event => event.type === _constants2.REPORT_EVENTS.ICE_COLLECTION);
        if (!iceCollectionEvent) {
          iceCollectionEvent = setLocalDescEvent.addEvent(_constants2.REPORT_EVENTS.ICE_COLLECTION);
        }
        if (relayCandidates.length > 0) {
          const eventData = iceCollectionEvent.getData('relayCandidates') || [];
          relayCandidates.forEach(candidate => {
            if (!eventData.includes(candidate)) {
              const relayCollectedEvent = iceCollectionEvent.addEvent(_constants2.REPORT_EVENTS.RELAY_CANDIDATE_COLLECTED);
              relayCollectedEvent.addData('address', candidate.address);
              relayCollectedEvent.addData('port', candidate.port);
              relayCollectedEvent.endEvent();
              // Update the relayCandidates array
              iceCollectionEvent.addData('relayCandidates', relayCandidates);
            }
          });
        }
      }
    } else {
      // If latestMainEvent is undefined, that's a bug. Log it loudly.
      log.error('ICE collection process could not determine current operation.');
    }
    log.debug('Calling ICE collection check function for reason:', iceCollectionInfo.reason);
    let result;
    /*
     * Scenarios expected after calling `iceCollectionCheckFunction`:
     *    1. Returns a 'Start' or 'Wait' result.
     *    2. Returns an 'Error' result (with a string error message).
     *    3. Returns in invalid result object (eg. not expected type).
     *    4. Throws an error.
     *
     * In error scenarios (2, 3, 4), the result will be formatted as:
     *    { type: 'Error', error: BasicError }
     * In success scenario, the result will be formatted as `IceCollectionCheckResult`
     *    is documented.
     */
    try {
      // Find the current operation in the call state.
      const operation = currentCall.currentOperations.find(op => {
        // latestMainEvent _should_ be defined, but the above has an if/else around
        //    it.... so the logic is not confident that is always is. Do the same here.
        if (latestMainEvent) {
          return op.eventId === latestMainEvent.id;
        }
      });
      result = config.iceCollectionCheckFunction(_objectSpread({
        callId: currentCall.id,
        callOperation: operation ? operation.type : 'UNKNOWN'
      }, iceCollectionInfo), {
        // TODO: If a call changes these configs in the middle of ICE collection,
        //    it will change the values given to this function. Very unlikely scenario,
        //    but could cause issues. Could also change `iceCollectionCheckFunction` itself.
        iceCollectionIdealTimeout: config.iceCollectionIdealTimeout,
        iceCollectionMaxTimeout: config.iceCollectionMaxTimeout
      });
      if (typeof result !== 'object' || !Object.values(_constants.ICE_COLLECTION_RESULT_TYPES).includes(result.type)) {
        // Scenario 3:
        //  If the result is not an IceCollectionCheckResult object, convert it to an Error result.
        log.error('Configured IceCollectionCheckFunction returned an invalid result type. Ending call.', result);
        result = {
          type: _constants.ICE_COLLECTION_RESULT_TYPES.ERROR,
          error: new _errors.default({
            code: _errors.callCodes.INVALID_PARAM,
            message: 'Malformed IceCollectionCheckResult provided by configured IceCollectionCheckFunction.'
          })
        };
      } else if (result.type === _constants.ICE_COLLECTION_RESULT_TYPES.ERROR) {
        // Scenario 2:
        //  If the result was an Error result, format it to match other error scenarios.
        result = {
          type: _constants.ICE_COLLECTION_RESULT_TYPES.ERROR,
          error: new _errors.default({
            message: result.error,
            code: _errors.callCodes.GENERIC_ERROR
          })
        };
      }
    } catch (e) {
      // Scenario 4:
      //  If the function threw an error, format it to match other error scenarios.
      log.info('Error thrown by the iceCollectionCheckFunction. Ending call.', e);
      result = {
        type: _constants.ICE_COLLECTION_RESULT_TYPES.ERROR,
        error: new _errors.default({
          code: _errors.callCodes.UNKNOWN_ERROR,
          message: 'Configured IceCollectionCheckFunction threw an error during ICE collection.'
        })
      };
    }

    // Get the webrtc Session for the call.
    const session = await WebRTC.sessionManager.get(webrtcSessionId);
    // Get the remote description for the Session.
    log.debug('Handling ICE collection check result:', result.type);
    await session.iceCollectionCheckResult(result);

    // ICE collection is complete if we are not waiting any longer.
    // TODO: Is iceCollectionEvent ever not defined here? Why check for it?
    if (iceCollectionEvent && result.type !== _constants.ICE_COLLECTION_RESULT_TYPES.WAIT) {
      if (result.type === _constants.ICE_COLLECTION_RESULT_TYPES.ERROR) {
        iceCollectionEvent.setError(result);
      }
      iceCollectionEvent.endEvent();
    }

    // If the result is an error, the call should be ended. The Session should have
    //     cleaned-up the WebRTC resources (in `session.iceCollectionCheckResult`),
    //     so update the call state here.
    if (result.type === _constants.ICE_COLLECTION_RESULT_TYPES.ERROR) {
      context.dispatch(_actions.callActions.endCallFinish(currentCall.id, {
        isLocal: true,
        error: result.error
      }));
      emitEvent(_eventTypes.CALL_STATE_CHANGE, {
        callId: currentCall.id,
        previous: {
          state: currentCall.state,
          localHold: currentCall.localHold,
          remoteHold: currentCall.remoteHold
        },
        error: result.error
      });
    }
  }
  return callIceCollectionCheck;
}

/***/ }),

/***/ 78840:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _iceCollectionCheck = _interopRequireDefault(__webpack_require__(20398));
function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.callIceCollectionCheck', () => (0, _iceCollectionCheck.default)(bottle.container));
}

/***/ }),

/***/ 9322:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _iceRestart = _interopRequireDefault(__webpack_require__(11708));
var _validate = _interopRequireDefault(__webpack_require__(96093));
var _remoteAnswer = _interopRequireDefault(__webpack_require__(96483));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.iceRestart', () => {
    return {
      local: {
        validate: _validate.default,
        localOffer: (0, _iceRestart.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.iceRestart', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalIceRestart operation.
     * @method LocalIceRestart
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local ICE restart operation.
     */
    function LocalIceRestart(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.MEDIA_RESTART,
        isNegotiation: true,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.iceRestart.local
      }, {
        callId
      });
    }
    return {
      local: LocalIceRestart
      // TODO: KJS-1604. A remote ICE restart is currently handled as a "generic
      //    remote" operation.
    };
  });
}

/***/ }),

/***/ 11708:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = iceRestartOperation;
var _selectors = __webpack_require__(11430);
var _call = __webpack_require__(12442);
var _selectors2 = __webpack_require__(46942);
var _selectors3 = __webpack_require__(53951);
var _utils = __webpack_require__(54866);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _utils2 = __webpack_require__(25189);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Other plugins

// Utils

/**
 * Bottle wrapper for iceRestart call operation.
 * @return {Function}
 */
function iceRestartOperation(container) {
  const {
    context,
    CallRequests,
    WebRTC,
    CallstackWebrtc,
    logManager
  } = container;
  /**
   * Updates an existing call with unchanged media to trigger an ICE restart and renegotiation.
   *
   * This operation defines how a call's media is restarted. It performs the webRTC and
   *    signaling operations to update the local and server sessions of a call.
   *    This represents the start of the webRTC renegotiation process for the
   *    local side.
   * Assumptions:
   *    1. The call is in the correct state for the operation.
   *        - The call exists.
   * Responsibilities:
   *    1. Flag the Peer to restart ICE.
   *    2. Generate an offer with unchanged media directions.
   *    3. Perform signaling to update the server session with the offer.
   *    4. Update call state (via redux actions).
   * @method iceRestart
   * @param {string} callId The id of the call having it's media restarted.
   */
  async function iceRestart(callId) {
    const call = (0, _selectors.getCallById)(context.getState(), callId);

    // Get some call data.
    const {
      webrtcSessionId,
      wrtcsSessionId,
      bandwidth,
      isAnonymous,
      account,
      localHold,
      customParameters,
      customBodies
    } = call;
    const session = await WebRTC.sessionManager.get(webrtcSessionId);
    const dtlsRole = await session.getDtlsRole();

    // The passive side of the call should wait a short amount of time before restarting media connection
    // to avoid a glare scenario where both sides of the call try to restart the media connection
    // at the same time.
    if (dtlsRole === 'passive') {
      const {
        mediaConnectionRetryDelay
      } = (0, _selectors.getOptions)(context.getState());
      await (0, _utils2.delay)(mediaConnectionRetryDelay);
    }
    const log = logManager.getLogger('CALL', callId);

    // Tell the RTCPeerConnection to restart the ICE connection as part of the
    //    next negotiation.
    try {
      await session.restartIce();
    } catch (error) {
      log.debug('Peer restartIce function not available. Restarting ICE with createOffer instead.');
    }

    // Before doing the negotiation for ICE Restart, make sure we have network.
    const platform = (0, _selectors2.getPlatform)(context.getState());
    const {
      connected: isConnected
    } = (0, _selectors3.getConnectionState)(context.getState(), platform);
    if (!isConnected) {
      log.debug('Websocket not connected; waiting for reconnect before performing media restart.');
      const isConnected = await (0, _utils.waitForReconnect)(container);
      if (!isConnected) {
        log.info('Subscription lost; stopping media restart attempt.');
        throw new _errors.default({
          code: _errors.subscriptionCodes.WS_CONNECTION_ERROR,
          message: 'No subscription for operation.'
        });
      }
    }
    log.info('Performing call renegotiation to reconnect media connection.');

    // Make sure we have the right media directions in the negotiation.
    //    We don't want to accidentally unhold media while on local hold.
    const mediaDirections = {
      audio: localHold ? 'inactive' : 'sendrecv',
      video: localHold ? 'inactive' : 'sendrecv'
    };

    // If we're not on hold nor sending any audio or video, change the media direction(s) to recvonly to
    //  prevent the other side from getting empty tracks.
    if (!localHold) {
      const localTracks = (0, _call.getLocalTracks)(context, callId);
      mediaDirections.audio = localTracks.some(track => track.kind === 'audio') ? 'sendrecv' : 'recvonly';
      mediaDirections.video = localTracks.some(track => track.kind === 'video') ? 'sendrecv' : 'recvonly';
    }
    const callInfo = {
      wrtcsSessionId,
      id: callId,
      isAnonymous,
      account,
      customParameters,
      customBodies
    };

    // Backwards compatibility - can remove after KJS-2044
    const otherOptions = {
      iceRestart: true
    };

    // Generate the offer
    let offer;
    try {
      offer = await CallstackWebrtc.generateOffer(webrtcSessionId, mediaDirections, bandwidth, otherOptions);
      callInfo.offer = offer.sdp;
    } catch (err) {
      log.debug('Failed to generate offer.');
      throw new _errors.default({
        code: _errors.callCodes.INVALID_OFFER,
        message: 'Failed to generate SDP offer'
      });
    }

    // Update the server
    try {
      await CallRequests.updateSession(callInfo);
      log.info('Finished local portion of media restart. Waiting on remote response.');
    } catch (error) {
      log.info('Failed to renegotiate call.');
      throw error;
    }
  }
  return iceRestart;
}

/***/ }),

/***/ 96483:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMediaRestartResponse;
var _state = __webpack_require__(65794);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

function createMediaRestartResponse(container) {
  const {
    context,
    logManager,
    emitEvent,
    CallstackWebrtc,
    CallReporter
  } = container;

  /**
   * Operation for handling the answer SDP of a locally-started media restart operation.
   *
   * On succesful handling:
   *    - emits a "media restart" event
   *
   * On failure to handle, ends the call as unrecoverable:
   *    - updates call state to "ended",
   *    - emits a "tracks removed" event
   *    - emits a "call state change" event.
   *
   * @method mediaRestartResponse
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote answer SDP.
   * @return {undefined}
   */
  async function mediaRestartResponse(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    log.info('Processing remote response from regular, local update request.');
    const callReport = CallReporter.getReport(call.id);
    // Start the process reseponse event
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.MEDIA_RESTART;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const processResponseEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    processResponseEvent.addData('operation', _constants2.REPORTER_OPERATION_EVENTS_MAP.MEDIA_RESTART);
    const mediaState = (0, _state.getMediaState)(call);
    log.debug(`Current call info; State: ${call.state}, MediaState: ${mediaState}.`);

    // Handle the remote answer SDP.
    try {
      const sessionInfo = {
        sessionId: call.webrtcSessionId,
        answerSdp: params.sdp
      };
      await CallstackWebrtc.receivedAnswer(sessionInfo, call);
    } catch (error) {
      /*
       * Failed to set the remote answer SDP. End the call.
       * TODO: Better error handling. Is the Call fully cleaned-up here?
       */
      context.dispatch(_actions.callActions.endCallFinish(call.id, {
        error
      }));

      // Tell the application that local tracks are not available, since the
      //    call is ending in error.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });
      processResponseEvent.setError(error);
      processResponseEvent.endEvent();
      return;
    }
    log.info(`Finished processing remote response to local ${operation.type}. Changing state based on operation.`);

    /*
     * Dispatch action. Doesn't update state.
     */
    context.dispatch(_actions.callActions.restartMediaFinish(call.id));

    // Tell the application that media has restarted.
    emitEvent(eventTypes.MEDIA_RESTART, {
      callId: call.id
    });
    processResponseEvent.endEvent();
  }
  return mediaRestartResponse;
}

/***/ }),

/***/ 96093:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `iceRestart` operation validation:
   *    1. Call must exist.
   *    2. Call must not be in `Ended` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.state === _constants.CALL_STATES.ENDED) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Invalid call state: ${call.state}. It should be on-going.`
    });
  }
}

/***/ }),

/***/ 96123:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = ignoreOperation;
var _constants = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
// Call plugin

// Other plugins

/**
 * Bottle wrapper for ignore call operation.
 * @return {Function}
 */
function ignoreOperation(container) {
  const {
    context,
    CallstackWebrtc,
    logManager
  } = container;
  /**
   * Ignores an incoming call.
   *
   * This operation defines how a call is ignored. It performs the webRTC
   *    operations to ignore a "call".
   * Assumptions:
   *    1. None
   * Responsibilities:
   *    1. Cleanup the call locally, using the webRTC helper operation.
   *    2. Update call state (via redux action).
   * @method ignoreCall
   * @param {string}   callId        The id for the call to be ignored.
   */
  async function ignore(callId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Ignoring incoming call.');
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    // Clean-up webRTC objects. Ignore any errors returned, since we want the
    //    call / session to be ended either way.
    CallstackWebrtc.closeCall(targetCall.webrtcSessionId);
    log.info(`Finished ignoring call. Changing to ${_constants.CALL_STATES.ENDED}.`);
  }
  return ignore;
}

/***/ }),

/***/ 87969:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _ignore = _interopRequireDefault(__webpack_require__(96123));
var _validate = _interopRequireDefault(__webpack_require__(83628));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.ignore', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _ignore.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.ignore', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalIgnore operation.
     * @method LocalIgnore
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local ignore operation.
     */
    function LocalIgnore(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.IGNORE,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.ignore.local
      }, {
        callId
      });
    }
    return {
      local: LocalIgnore
    };
  });
}

/***/ }),

/***/ 83628:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _constants = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `ignore` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Initiated` or `Ringing` state.
   *    3. Call must be `Incoming` direction.
   */
  if (!call) {
    // Call must exist.
    return new _errors.default({
      message: `Failed to ignore call. Call ${callId} not found.`,
      code: _errors.callCodes.INVALID_PARAM
    });
  } else if (![_constants.CALL_STATES.INITIATED, _constants.CALL_STATES.RINGING].includes(call.state)) {
    // Call must be in Initiated or Ringing state.
    return new _errors.default({
      message: `Failed to ignore call. Call must be in ${_constants.CALL_STATES.INITIATED} or ${_constants.CALL_STATES.RINGING} state.`,
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (call.direction !== _constants.CALL_DIRECTION.INCOMING) {
    // Call must be incoming.
    return new _errors.default({
      message: 'Failed to ignore call. Call must be incoming.',
      code: _errors.callCodes.INVALID_STATE
    });
  }
}

/***/ }),

/***/ 92660:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAddMedia", ({
  enumerable: true,
  get: function () {
    return _addMedia.default;
  }
}));
Object.defineProperty(exports, "createAnswer", ({
  enumerable: true,
  get: function () {
    return _answer.default;
  }
}));
Object.defineProperty(exports, "createCallCancelled", ({
  enumerable: true,
  get: function () {
    return _callCancelled.default;
  }
}));
Object.defineProperty(exports, "createConsultTransfer", ({
  enumerable: true,
  get: function () {
    return _consultativeTransfer.default;
  }
}));
Object.defineProperty(exports, "createDirectTransfer", ({
  enumerable: true,
  get: function () {
    return _directTransfer.default;
  }
}));
Object.defineProperty(exports, "createEarlyMedia", ({
  enumerable: true,
  get: function () {
    return _earlyMedia.default;
  }
}));
Object.defineProperty(exports, "createEnd", ({
  enumerable: true,
  get: function () {
    return _end.default;
  }
}));
Object.defineProperty(exports, "createForward", ({
  enumerable: true,
  get: function () {
    return _forward.default;
  }
}));
Object.defineProperty(exports, "createGenericRemote", ({
  enumerable: true,
  get: function () {
    return _genericRemote.default;
  }
}));
Object.defineProperty(exports, "createGetCodecs", ({
  enumerable: true,
  get: function () {
    return _getAvailableCodecs.default;
  }
}));
Object.defineProperty(exports, "createGetStats", ({
  enumerable: true,
  get: function () {
    return _getStats.default;
  }
}));
Object.defineProperty(exports, "createHold", ({
  enumerable: true,
  get: function () {
    return _hold.default;
  }
}));
Object.defineProperty(exports, "createIceCollectionCheck", ({
  enumerable: true,
  get: function () {
    return _iceCollectionCheck.default;
  }
}));
Object.defineProperty(exports, "createIceRestart", ({
  enumerable: true,
  get: function () {
    return _iceRestart.default;
  }
}));
Object.defineProperty(exports, "createIgnore", ({
  enumerable: true,
  get: function () {
    return _ignore.default;
  }
}));
Object.defineProperty(exports, "createJoin", ({
  enumerable: true,
  get: function () {
    return _join.default;
  }
}));
Object.defineProperty(exports, "createMake", ({
  enumerable: true,
  get: function () {
    return _make.default;
  }
}));
Object.defineProperty(exports, "createMoH", ({
  enumerable: true,
  get: function () {
    return _musicOnHold.default;
  }
}));
Object.defineProperty(exports, "createNormalizeIceFailure", ({
  enumerable: true,
  get: function () {
    return _normalizeIceFailure.default;
  }
}));
Object.defineProperty(exports, "createPlayAudioFile", ({
  enumerable: true,
  get: function () {
    return _playAudioFile.default;
  }
}));
Object.defineProperty(exports, "createReject", ({
  enumerable: true,
  get: function () {
    return _reject.default;
  }
}));
Object.defineProperty(exports, "createRemoveMedia", ({
  enumerable: true,
  get: function () {
    return _removeMedia.default;
  }
}));
Object.defineProperty(exports, "createReplaceTrack", ({
  enumerable: true,
  get: function () {
    return _replaceTrack.default;
  }
}));
Object.defineProperty(exports, "createResyncCallState", ({
  enumerable: true,
  get: function () {
    return _resyncCallState.default;
  }
}));
Object.defineProperty(exports, "createSendCallAudit", ({
  enumerable: true,
  get: function () {
    return _sendCallAudit.default;
  }
}));
Object.defineProperty(exports, "createSendCustom", ({
  enumerable: true,
  get: function () {
    return _sendCustomParameters.default;
  }
}));
Object.defineProperty(exports, "createSendDtmf", ({
  enumerable: true,
  get: function () {
    return _sendDtmf.default;
  }
}));
Object.defineProperty(exports, "createSendRingingFeedback", ({
  enumerable: true,
  get: function () {
    return _sendRingingFeedback.default;
  }
}));
Object.defineProperty(exports, "createSlowStart", ({
  enumerable: true,
  get: function () {
    return _slowStart.default;
  }
}));
Object.defineProperty(exports, "createUnhold", ({
  enumerable: true,
  get: function () {
    return _unhold.default;
  }
}));
Object.defineProperty(exports, "createUpdateCallState", ({
  enumerable: true,
  get: function () {
    return _updateCallState.default;
  }
}));
var _consultativeTransfer = _interopRequireDefault(__webpack_require__(10219));
var _directTransfer = _interopRequireDefault(__webpack_require__(79675));
var _join = _interopRequireDefault(__webpack_require__(17198));
var _make = _interopRequireDefault(__webpack_require__(11641));
var _answer = _interopRequireDefault(__webpack_require__(1614));
var _end = _interopRequireDefault(__webpack_require__(28732));
var _forward = _interopRequireDefault(__webpack_require__(34316));
var _ignore = _interopRequireDefault(__webpack_require__(87969));
var _reject = _interopRequireDefault(__webpack_require__(48215));
var _earlyMedia = _interopRequireDefault(__webpack_require__(42702));
var _callCancelled = _interopRequireDefault(__webpack_require__(93948));
var _addMedia = _interopRequireDefault(__webpack_require__(50196));
var _hold = _interopRequireDefault(__webpack_require__(26846));
var _unhold = _interopRequireDefault(__webpack_require__(10823));
var _removeMedia = _interopRequireDefault(__webpack_require__(3009));
var _replaceTrack = _interopRequireDefault(__webpack_require__(81072));
var _playAudioFile = _interopRequireDefault(__webpack_require__(98117));
var _getAvailableCodecs = _interopRequireDefault(__webpack_require__(51561));
var _iceRestart = _interopRequireDefault(__webpack_require__(9322));
var _sendDtmf = _interopRequireDefault(__webpack_require__(56792));
var _updateCallState = _interopRequireDefault(__webpack_require__(37398));
var _resyncCallState = _interopRequireDefault(__webpack_require__(75795));
var _iceCollectionCheck = _interopRequireDefault(__webpack_require__(78840));
var _getStats = _interopRequireDefault(__webpack_require__(7196));
var _normalizeIceFailure = _interopRequireDefault(__webpack_require__(67274));
var _sendCallAudit = _interopRequireDefault(__webpack_require__(11254));
var _sendCustomParameters = _interopRequireDefault(__webpack_require__(89851));
var _sendRingingFeedback = _interopRequireDefault(__webpack_require__(40367));
var _musicOnHold = _interopRequireDefault(__webpack_require__(46092));
var _genericRemote = _interopRequireDefault(__webpack_require__(53894));
var _slowStart = _interopRequireDefault(__webpack_require__(99051));

/***/ }),

/***/ 17198:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _join = _interopRequireDefault(__webpack_require__(83254));
var _validate = _interopRequireDefault(__webpack_require__(85344));
var _remoteAnswer = _interopRequireDefault(__webpack_require__(35845));
var _remoteSuccess = _interopRequireDefault(__webpack_require__(43271));
var _remoteFailure = _interopRequireDefault(__webpack_require__(28522));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.join', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalJoin operation.
     * @method LocalJoin
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local join operation.
     */
    function LocalJoin(callId, data) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.JOIN,
        /*
         * TechDebt TODO: The join operation should be a blocking negotiation,
         *    but there are so many failure edge-cases that cause more issues
         *    with the framework. Allow other operations to happen with a join
         *    to avoid getting stuck in permanent-glare when a join fails in a`
         *    bad way.
         * The main edge-case for this is that `remoteOnly` does not track the
         *    operations. A join can fail where only the new joined call gets a
         *    'call end' notification to indicate failure, so that notification
         *    needs to "clean-up" the operation for all 3 calls.
         */
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: {
          validate: _validate.default,
          localOffer: (0, _join.default)(bottle.container),
          // Negotiation handler for the new, joined call.
          remoteAnswer: (0, _remoteAnswer.default)(bottle.container),
          // Response handlers for the existing calls.
          remoteSuccess: (0, _remoteSuccess.default)(bottle.container),
          remoteFailure: (0, _remoteFailure.default)(bottle.container)
        }
      }, {
        callId,
        data
      });
    }
    return {
      local: LocalJoin
    };
  });
}

/***/ }),

/***/ 83254:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = joinOperation;
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var _call = __webpack_require__(12442);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _selectors = __webpack_require__(11430);
var _constants2 = __webpack_require__(37409);
var _constants3 = __webpack_require__(42750);
var _selectors2 = __webpack_require__(30105);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

/**
 * Bottle wrapper for join call operation.
 * @return {Function}
 */
function joinOperation(container) {
  const {
    CallRequests,
    CallReporter,
    Callstack,
    context,
    emitEvent,
    logManager
  } = container;
  const {
    setupOutgoingSession
  } = Callstack.utils;

  /**
   *
   * Joins 2 ongoing calls.
   *
   * This operation handles the WebRTC and signalling portions of joining 2 ongoing calls
   * Validations:
   *    1. The calls are in the 'On Hold' state
   * Responsibilities:
   *    1. Perform the signaling to tell the server that we want to join 2 ongoing calls.
   *    2. Update call state (via redux actions).
   * @method join
   * @param {string} callId The ID of the call.
   * @param {string} otherCallId The ID of the other call being joined.
   * @param {string} newCallId The IF of the new joined call.
   * @param {string} from The username of the account joining the calls.
   */
  async function join(callId, otherCallId, newCallId, from) {
    const log = logManager.getLogger('CALL', callId);
    log.info(`Performing join on calls ${callId} and ${otherCallId}.`);
    const currentCall = (0, _selectors.getCallById)(context.getState(), callId);
    const otherCall = (0, _selectors.getCallById)(context.getState(), otherCallId);

    // Determine combined participant name if any
    const currentCallRemoteName = currentCall.remoteParticipant.displayName;
    const otherCallRemoteName = otherCall.remoteParticipant.displayName;
    let participantName;
    if (currentCallRemoteName && otherCallRemoteName) {
      participantName = `${currentCallRemoteName},${otherCallRemoteName}`;
    } else if (currentCallRemoteName) {
      participantName = `${currentCallRemoteName},`;
    } else if (otherCallRemoteName) {
      participantName = `,${otherCallRemoteName}`;
    }

    // Determine combined remote participant address
    const currentCallRemoteAddress = currentCall.direction === _constants.CALL_DIRECTION.OUTGOING ? currentCall.to : currentCall.from;
    const otherCallRemoteAddress = otherCall.direction === _constants.CALL_DIRECTION.OUTGOING ? otherCall.to : otherCall.from;
    const participantAddress = `${currentCallRemoteAddress},${otherCallRemoteAddress}`;

    // User the audio constraints from the current call and set video to false.
    const mediaConstraints = {
      video: false,
      audio: currentCall.mediaConstraints ? currentCall.mediaConstraints.audio || true : true
    };

    // Use the bandwidth constraints from the current call
    const bandwidth = (0, _call.checkBandwidthControls)(currentCall.bandwidth);
    const dscpControls = currentCall.dscpControls;
    const turnInfo = (0, _selectors.getTurnInfo)(context.getState());
    const {
      trickleIceMode,
      defaultPeerConfig,
      removeBundling,
      serverTurnCredentials
    } = (0, _selectors.getOptions)(context.getState());

    // Get the call report event ID
    const callReport = CallReporter.getReport(newCallId);
    const operationEvent = callReport.findLastOngoingEvent(_constants3.REPORTER_OPERATION_EVENTS_MAP.JOIN);
    const operation = currentCall.currentOperations.find(op => op.type === _constants2.OPERATIONS.JOIN);

    // Create the new joined call in state right away
    context.dispatch(_actions.callActions.joinStart(newCallId, {
      // The media constraints this call has.
      mediaConstraints,
      // The combined addresses of the 2 other participants in the joined call.
      participantAddress,
      // The combined names of the 2 other participants in the joined call.
      participantName,
      // This call's current user
      from,
      // The ids of the calls that were used for joining.
      usedCallIds: [currentCall.id, otherCall.id],
      // The custom parameters of the combined call.
      customParameters: currentCall.customParameters,
      // The DSCP Controls of the combined call.
      dscpControls,
      // The bandwidth from the original call.
      bandwidth,
      // The call report event id for this operation
      eventId: operationEvent.id,
      operationId: operation.id
    }));
    let webrtcInfo;
    try {
      webrtcInfo = await setupOutgoingSession(mediaConstraints, {
        defaultPeerConfig,
        turnInfo,
        trickleIceMode,
        dscpControls,
        removeBundling,
        bandwidth,
        callId: newCallId,
        serverTurnCredentials
      });
    } catch (error) {
      // An error occurred while trying to setup the WebRTC portion of the joined call.
      //    Report the error and mark the call as ended.
      log.info(`Failed to initiate call. Changing to ${_constants.CALL_STATES.ENDED}.`);
      context.dispatch(_actions.callActions.joinFinish(newCallId, {
        usedCallIds: [currentCall.id, otherCall.id],
        error
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: newCallId,
        previous: {
          // JOIN_START action sets the new call's state to initiating and holds to false
          state: _constants.CALL_STATES.INITIATING,
          localHold: false,
          remoteHold: false
        },
        error
      });
      // Emits a call operation event only for the new call
      emitEvent(eventTypes.CALL_OPERATION, {
        callId: newCallId,
        isLocal: true,
        operation: _constants2.OPERATIONS.JOIN,
        transition: _constants2.OP_TRANSITIONS.FINISH,
        previous: undefined,
        error
      });
      throw error;
    }
    const {
      offerSdp,
      sessionId,
      mediaIds
    } = webrtcInfo;

    // Collect the information needed to make the request.
    const callInfo = {
      id: callId,
      wrtcsSessionId: currentCall.wrtcsSessionId,
      otherWrtcsSessionId: otherCall.wrtcsSessionId,
      sdp: offerSdp,
      // Use the customParameters of the current call
      customParameters: currentCall.customParameters
    };
    let newWrtcsSessionId;
    try {
      newWrtcsSessionId = await CallRequests.joinSessions(callInfo);
    } catch (error) {
      log.info('Failed to join call.');
      context.dispatch(_actions.callActions.joinFinish(newCallId, {
        error,
        usedCallIds: [callId, otherCallId]
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: newCallId,
        previous: {
          // JOIN_START action sets the new call's state to initiating and holds to false
          state: _constants.CALL_STATES.INITIATING,
          localHold: false,
          remoteHold: false
        },
        error
      });
      // Emits a call operation event only for the new call
      emitEvent(eventTypes.CALL_OPERATION, {
        callId: newCallId,
        isLocal: true,
        operation: _constants2.OPERATIONS.JOIN,
        transition: _constants2.OP_TRANSITIONS.FINISH,
        previous: undefined,
        error
      });
      throw error;
    }
    log.info('Finished local portion of join. Waiting on remote response.');

    // Get the list of all local tracks on the Session. Add the local tracks
    //    to call state now so they are available while the call rings.
    const sessionState = (0, _selectors2.getSessionById)(context.getState(), sessionId);
    // Dispatch an action to do the following:
    //  - create a new "joined" call in state
    //  - update calls used in the join to have isPending property
    context.dispatch(_actions.callActions.pendingJoin(newCallId, {
      // The ID that the backend uses to track this webRTC session.
      wrtcsSessionId: newWrtcsSessionId,
      // The ID that the webRTC stack uses to track this webRTC session.
      webrtcSessionId: sessionId,
      // The local Media object associated with this call.
      mediaIds,
      // The ids of the calls that were used for joining.
      usedCallIds: [currentCall.id, otherCall.id],
      localTracks: sessionState.localTracks,
      // Set the state of the joined call to Initiated.
      state: _constants.CALL_STATES.INITIATED
    }));
    emitEvent(eventTypes.CALL_JOIN, {
      callId: newCallId
    });

    // Tell the application that local tracks are available on the call now.
    emitEvent(eventTypes.CALL_TRACKS_ADDED, {
      callId: newCallId,
      trackIds: sessionState.localTracks
    });
  }
  return join;
}

/***/ }),

/***/ 35845:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _remoteAnswer = _interopRequireDefault(__webpack_require__(43658));
/*
 * The `join` operation creates a new outgoing call (the "joined" call). This function
 *    handles the remote answer SDP for that new call. (The two existing calls do
 *    not perform any WebRTC negotiation.)
 *
 * The scenario for the new joined call is the same as a new outgoing call. All
 *    events, state changes, etc. are done exactly the same. So, as a shortcut,
 *    re-use the `make` operation's "remote answer" handler. If this join operation
 *    would need any special handling, then its own handler should be implemented.
 */
var _default = exports["default"] = _remoteAnswer.default;

/***/ }),

/***/ 28522:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHandler;
var _actions = __webpack_require__(6313);
var _constants = __webpack_require__(60683);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

function createHandler(container) {
  const {
    context,
    emitEvent,
    logManager
  } = container;

  /**
   * A "session failure" notification has been received, indicating the operation failed.
   *    Finish the operation.
   *
   * @method joinFailure
   * @param {Object} call The primary call for the operation.
   * @param {Object} params Parameters describing the incoming call.
   * @param {string} [params.reasonText] Human-readable explanation for the call change.
   * @param {string} [params.statusCode] Code representing the reason for the call change.
   * @emits call#call:stateChange Error event for operation; no actual state change.
   * @return {BasicError}
   */
  return function joinFailure(call, params) {
    const reasonText = params.reasonText || _constants.COMPLEX_OPERATION_MESSAGES.JOIN_FAILURE;
    const statusCode = params.statusCode || _constants.STATUS_CODES.JOIN_FAILURE;
    const log = logManager.getLogger('CALL', call.id);
    log.info('Received call operation failed notice; handling.', {
      wrtcsSessionId: call.wrtcsSessionId
    });
    log.debug(`Processing as a local join failure (${statusCode}).`);
    log.info('Finished handling call operation failed notice.');
    const error = new _errors.default({
      message: `Join operation failed: ${reasonText} (${statusCode})`,
      code: _errors.callCodes.GENERIC_ERROR
    });
    context.dispatch(_actions.callActions.joinFinish(call.id, {
      error,
      transition: {
        reasonText,
        statusCode
      }
    }));

    // Notify the app that there has been a call state change
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: true,
        remoteHold: false
      },
      error
    });
    return error;
  };
}

/***/ }),

/***/ 43271:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createHandler;
var _actions = __webpack_require__(6313);
var _constants = __webpack_require__(60683);
var _eventTypes = __webpack_require__(55166);
var _call = __webpack_require__(12442);
// Call plugin

// Helpers

/**
 * Bottle wrapper for the "join success" notification handler.
 * @return {Function}
 */
function createHandler(container) {
  const {
    context,
    CallRequests,
    CallstackWebrtc,
    emitEvent,
    logManager
  } = container;

  /**
   * A "session complete" notification has been received, indicating the operation was
   *    successful. Finish the operation by ending the call and notifying the application.
   *
   * @method joinSuccess
   * @param {Object} call The call being operated on.
   * @param {Object} params Parameters describing the incoming call.
   * @param {string} [params.reasonText] Human-readable explanation for the call change.
   * @param {string} [params.statusCode] Code representing the reason for the call change.
   * @emits call#call:tracksRemoved All tracks on the call have been removed.
   * @emits call#call:stateChange The call has changed to 'Ended' state.
   * @return {Promise<undefined>}
   */
  async function joinSuccess(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    log.info('Received session status completed notice; handling.', {
      wrtcsSessionId: call.wrtcsSessionId
    });
    const {
      reasonText,
      statusCode
    } = params;
    if (reasonText) {
      let customStatusCode;
      if (!statusCode && statusCode !== 0) {
        customStatusCode = _constants.STATUS_CODES.JOIN_SUCCESS;
      } else {
        customStatusCode = statusCode;
      }
      log.debug(`Session completed notice caused by ${reasonText} (${customStatusCode}).`);
    }
    log.info(`Ending webRTC session with id: ${call.webrtcSessionId}, locally ...`);
    // Close the local webRTC session
    await CallstackWebrtc.closeCall(call.webrtcSessionId);

    // Update call state to 'Ended'.
    context.dispatch(_actions.callActions.joinFinish(call.id, {
      transition: {
        reasonText: _constants.COMPLEX_OPERATION_MESSAGES.JOIN_SUCCESS,
        statusCode: _constants.STATUS_CODES.JOIN_SUCCESS
      }
    }));
    try {
      log.debug('Ending call session on server-side.');
      await CallRequests.endSession({
        callId: call.id,
        wrtcsSessionId: call.wrtcsSessionId,
        isAnonymous: call.isAnonymous,
        account: call.account
      });
    } catch (error) {
      // Ignore an error from the REST request. End the call locally so the call/application isn't
      //    stuck in a limbo state.
      log.debug(`Error received when attempting to end the session: ${error}`);
    } finally {
      log.info(`Finished ending call. Changing call state to ${_constants.CALL_STATES.ENDED}.`);
      // TODO: Is this action needed? The call should be 'Ended' by the above action.
      context.dispatch(_actions.callActions.endCallFinish(call.id, (0, _call.generateEndParams)(call.state, true, params)));

      // Tell the application that no tracks are available any longer.
      emitEvent(_eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(_eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        }
      });
    }
  }
  return joinSuccess;
}

/***/ }),

/***/ 85344:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _constants = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, otherCallId, newCallId, from) {
  const primaryCall = (0, _selectors.getCallById)(state, callId);
  const secondaryCall = (0, _selectors.getCallById)(state, otherCallId);
  /*
   * `join` operation validation:
   *    1. First Call must exist.
   *    2. Second Call must exist.
   *    3. First Call must be in `On Hold` state.
   *    4. Second Call must be in `On Hold` state.
   */
  if (!primaryCall) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (!secondaryCall) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (primaryCall.state !== _constants.CALL_STATES.ON_HOLD) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call is in an invalid state: state=${primaryCall.state}. It should be: state=${_constants.CALL_STATES.ON_HOLD}.`
    });
  } else if (secondaryCall.state !== _constants.CALL_STATES.ON_HOLD) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call is in an invalid state: state=${secondaryCall.state}. It should be: state=${_constants.CALL_STATES.ON_HOLD}.`
    });
  }
}

/***/ }),

/***/ 83517:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = incomingCallOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _eventTypes = __webpack_require__(55166);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _constants3 = __webpack_require__(42750);
// Call plugin

/**
 * Bottle wrapper for "incoming call" notification handler.
 * @return {Function}
 */
function incomingCallOperation(container) {
  const {
    context,
    CallRequests,
    Callstack,
    emitEvent,
    CallReporter,
    logManager
  } = container;
  const {
    setupIncomingCall
  } = Callstack.utils;
  /**
   * A "call incoming" notification has been received and needs to be handled.
   *
   * This operation is intended to be the entry point for all "call incoming"
   *    notifications. A "call incoming" notification is the initial offer to
   *    establish a call with a remote endpoint. It represents the start of both
   *    the call flow and webRTC negotiation process for the local side.
   * Handling the notification will create a new call in state.
   * Responsibilities:
   *    1. Have the callstack perform the required webRTC negotiation process.
   *        - Regular or Slow Start negotiation.
   *    2. Respond that the call has been received (ie. ringing).
   *    3. Create call state (via redux action).
   * @method incomingCall
   * @param {string}   wrtcsSessionId ID that the server uses to identify the session.
   * @param {Object}   params        Parameters describing the incoming call.
   * @param {string}   [params.sdp]  The remote SDP offer included with the notification (if any).
   * @param {string}   params.remoteNumber   Number of the remote participant.
   * @param {string}   params.remoteName     Display name of the remote participant.
   * @param {string}   params.calleeNumber  Number of the intended call recipient
   */
  async function incomingCall(wrtcsSessionId, params, channel) {
    const {
      sdp,
      callId
    } = params;
    const callConfig = (0, _selectors.getOptions)(context.getState());

    // Get the call report for this call
    const callReport = CallReporter.getReport(callId);

    // Get the RECEIVE_CALL event from the report
    const receiveCallEvent = callReport.findLastOngoingEvent(_constants3.REPORT_EVENTS.RECEIVE_CALL);
    const log = logManager.getLogger('CALL', callId);

    /**
     * An incoming call may or may not have an SDP offer associated with it.
     * If it has an SDP, then it is a "regular" call scenario and can be handled
     *    as a normal webRTC negotiation.
     * If it has no SDP, then it is a "slow start" call scenario. In a slow start
     *    scenario, the signaling server acts as a webRTC-middleman, requiring
     *    both sides to provide it with offers and generating the answers itself.
     */
    if (sdp) {
      // Regular call.
      receiveCallEvent.addData('isSlowStart', false);
      const turnInfo = (0, _selectors.getTurnInfo)(context.getState());

      // Since we have the remote offer SDP, we can setup a webRTC session.
      try {
        await setupIncomingCall({
          offer: {
            sdp,
            type: 'offer'
          },
          trickleIceMode: callConfig.trickleIceMode,
          defaultPeerConfig: callConfig.defaultPeerConfig,
          turnInfo,
          callId,
          removeBundling: callConfig.removeBundling,
          serverTurnCredentials: callConfig.serverTurnCredentials
        });
      } catch (error) {
        // The reason we're wrapping the error in an object here is because the setupIncomingCall operation
        // used to return an object with an error property. Now that we are throwing instead, we throw the
        // BasicError directly, but our interface is expecting an object with an error property.
        log.info(`Failed to initiate incoming call. Changing to ${_constants2.CALL_STATES.ENDED}.`);
        context.dispatch(_actions.callActions.endCallFinish(callId, {
          isLocal: true,
          error: {
            error
          }
        }));
        emitEvent(_eventTypes.CALL_OPERATION, {
          callId,
          isLocal: true,
          operation: _constants.OPERATIONS.END,
          transition: _constants.OP_TRANSITIONS.FINISH,
          error: {
            error
          }
        });
        emitEvent(_eventTypes.CALL_STATE_CHANGE, {
          callId,
          previous: {
            state: _constants2.CALL_STATES.INITIATING,
            localHold: false,
            remoteHold: false
          },
          error: {
            error
          }
        });
        receiveCallEvent.setError(error);
        return;
      }
    } else {
      log.debug('Incoming call is a slow-start call.');
      // Slow start call.
      receiveCallEvent.addData('isSlowStart', true);

      /*
       * We can't setup a webRTC session yet because generating an offer requires
       *   media constraints. We need to wait until the application provides
       *   media information before we can setup the call.
       */
    }

    // Next state will be Initiated normally, or Ringing if ringing feedback is sent.
    let nextState = _constants2.CALL_STATES.INITIATED;

    // If in 'auto' mode for `ringingFeedbackMode`, send the feedback immediately.
    if (callConfig.ringingFeedbackMode === 'auto') {
      log.info('Sending ringing feedback automatically for incoming call.');
      const callInfo = {
        wrtcsSessionId,
        id: callId
      };
      try {
        await CallRequests.updateCallRinging(callInfo);
        log.debug('Successfully sent ringing feedback.');
        nextState = _constants2.CALL_STATES.RINGING;
      } catch (error) {
        log.info(`Failed to send ringing feedback - ${error.code}: ${error.message} `);
      }
    }
    log.info(`Finished initiating incoming call. Changing to ${nextState} and waiting on local answer.`);
    context.dispatch(_actions.callActions.updateCall(callId, {
      state: nextState
    }));
    emitEvent(_eventTypes.CALL_STATE_CHANGE, {
      callId,
      previous: {
        state: _constants2.CALL_STATES.INITIATING,
        localHold: false,
        remoteHold: false
      }
    });
  }
  return incomingCall;
}

/***/ }),

/***/ 11641:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _make = _interopRequireDefault(__webpack_require__(96422));
var _remoteAnswer = _interopRequireDefault(__webpack_require__(43658));
var _incomingCall = _interopRequireDefault(__webpack_require__(83517));
var _setupIncomingCall = _interopRequireDefault(__webpack_require__(10418));
var _setupOutgoingSession = _interopRequireDefault(__webpack_require__(71290));
var _constants = __webpack_require__(37409);
// Operations.

// Helpers

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.make', () => {
    return {
      local: {
        // Note: No `validate` stage; can always start a new call.
        localOffer: (0, _make.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      }
    };
  });

  // Register the Operation as a whole entity.
  bottle.factory('Callstack.operations.make', () => {
    const Callstack = bottle.container.Callstack;
    const opFactory = Callstack.models.Operation;

    /**
     * Factory function for a LocalMake operation.
     * @method LocalMake
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local make operation.
     */
    function LocalMake(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.MAKE,
        isNegotiation: true,
        isLocal: true,
        // Operation methods.
        stages: Callstack.stages.make.local
      }, {
        callId
      });
    }
    return {
      local: LocalMake
    };
  });
  bottle.factory('Callstack.notifications.incomingCall', () => (0, _incomingCall.default)(bottle.container));
  bottle.factory('Callstack.utils.setupIncomingCall', () => (0, _setupIncomingCall.default)(bottle.container));
  bottle.factory('Callstack.utils.setupOutgoingSession', () => (0, _setupOutgoingSession.default)(bottle.container));
}

/***/ }),

/***/ 96422:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMakeOperation;
var _actions = __webpack_require__(6313);
var _eventTypes = __webpack_require__(55166);
var _selectors = __webpack_require__(11430);
var _call = __webpack_require__(12442);
var _constants = __webpack_require__(60683);
var _selectors2 = __webpack_require__(30105);
// Call plugin.

// Other plugins.

/**
 * Bottle wrapper for the local portion of the make operation.
 * @return {Function}
 */
function createMakeOperation(container) {
  const {
    context,
    CallRequests,
    Callstack,
    CallstackWebrtc,
    emitEvent,
    logManager
  } = container;
  const {
    setupOutgoingSession
  } = Callstack.utils;

  /**
   * Callstack operation to start a new outgoing call.
   *
   * To start a new call, it requires:
   *    - User media,
   *    - A local PeerConnection, setup with the media and local offer, and
   *    - To start the call on the server, providing the local offer.
   * @method makeCall
   * @param {string} callId The ID that the SDK uses to identify this call.
   * @param {Object} participants
   * @param {string} participants.to The "callee" address for the call.
   * @param {string} participants.from The "caller" address for the call.
   * @param {Object} media
   * @param {Object|boolean} media.audio
   * @param {Object|boolean} media.video
   * @param {Object|boolean} media.screen
   * @param {Object|Array<Object>} media.medias
   * @param {Object} [options={}]
   * @param {string} [options.displayName]
   * @param {call.DSCPControls} [options.dscpControls]
   * @param {call.BandwidthControls} [options.bandwidth]
   * @param {Array<call.CustomParameter>} [options.customParameters]
   * @param {Array<call.CustomBody>} [options.customBodies]
   * @param {boolean} [options.isAnonymous] Whether the call is being made with an "anonymous user" or not.
   * @param {string} [options.account] If anonymous, the user account used to authenticate the call.
   * @return {undefined}
   * @throws {BasicError} Throws an error if the WebRTC operation fails.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function makeCall(callId, participants, media) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const log = logManager.getLogger('CALL', callId);
    log.info('Initiating new outgoing call.');

    // Get info from state for the operation.
    const turnInfo = (0, _selectors.getTurnInfo)(context.getState());
    const callOptions = (0, _selectors.getOptions)(context.getState());

    // Verify input parameter(s).
    // TODO: Validation of application-input should happen in the API.
    const bandwidth = (0, _call.checkBandwidthControls)(options.bandwidth);
    let callInfo;
    try {
      // Compile all of the info needed for the WebRTC operation.
      const webrtcInfo = {
        defaultPeerConfig: callOptions.defaultPeerConfig,
        turnInfo,
        bandwidth,
        dscpControls: options.dscpControls,
        callId,
        // ICE related.
        trickleIceMode: callOptions.trickleIceMode,
        // ??? Remove.
        removeBundling: callOptions.removeBundling
      };

      /*
       * Setup local WebRTC resources needed for the call. This includes user media
       *    and a local PeerConnection.
       *
       * Expected return format:
       * @type {Object}
       * @param {string} sessionId The ID of the Session object associated with this call.
       * @param {Array<string>} mediaIds List of Media objects associated with this call.
       * @param {string} offerSdp The local offer SDP generated during Session setup.
       */
      callInfo = await setupOutgoingSession(media, webrtcInfo);
    } catch (err) {
      log.info(`Failed to initiate call. Changing to ${_constants.CALL_STATES.ENDED}.`);
      // Rethrow the error so it gets to the API.
      throw err;
    }
    let wrtcsSessionId;
    try {
      // Info required for the server to create the session.
      const sessionInfo = {
        id: callId,
        to: participants.to,
        offer: callInfo.offerSdp,
        // For anonymous calls.
        isAnonymous: options.isAnonymous,
        account: options.account,
        from: participants.from
      };
      // Info to augment the server session, but not required.
      const sessionOptions = {
        displayName: options.displayName ? options.displayName : '',
        customParameters: options.customParameters,
        customBodies: options.customBodies
      };

      /*
       * Create the call on the server.
       *
       * Expected return format:
       * @param {string} wrtcsSessionId The ID that the server uses to identify this call.
       */
      wrtcsSessionId = await CallRequests.createSession(sessionInfo, sessionOptions);
    } catch (err) {
      /*
       * The call failed being created on the server. Clean up the local WebRTC resources
       *    and finish the operation by updating state and emitting the "state change" error event.
       */
      log.info('Failed to initiate call. Ending call and cleaning up WebRTC portions.');

      // TODO: Update redux state that the Media object is stopped.
      //    Need an event from Media model to notify about the stop, and listener
      //    set on Media when it is created (in `createLocalMedia` saga).
      await CallstackWebrtc.closeCall(callInfo.sessionId);

      // Rethrow the error to the API.
      throw err;
    }

    /*
     * The call was succesfully created on the server. Finish the local side of
     *    the operation by updating state and emitting the "state change" event.
     */
    log.info(`Finished initiating call. Changing to ${_constants.CALL_STATES.INITIATED} and waiting on remote answer.`);

    // Get the list of all local tracks on the Session. Add the local tracks
    //    to call state now so they are available while the call rings.
    const sessionState = (0, _selectors2.getSessionById)(context.getState(), callInfo.sessionId);
    context.dispatch(_actions.callActions.pendingMakeCall(callId, {
      // The ID that the backend uses to track this webRTC session.
      wrtcsSessionId: wrtcsSessionId,
      // The ID that the webRTC stack uses to track this webRTC session.
      webrtcSessionId: callInfo.sessionId,
      // The local Media object associated with this call.
      mediaIds: callInfo.mediaIds,
      // The bandwidth of the call.
      bandwidth,
      // The custom display name to use. Not supported on all environments.
      displayName: options.displayName,
      // The custom parameters (headers) and custom bodies of the call
      customParameters: options.customParameters,
      customBodies: options.customBodies,
      localTracks: sessionState.localTracks,
      // The current state of the call
      // TODO: Normally, call state should not be part of action because
      //       whoever checks this action payload, should obtain the call state from
      //       Redux state, using a selector.
      //       So further changes are needed in 'callAudit' middleware
      state: _constants.CALL_STATES.INITIATED
    }));

    // Tell the application that local tracks are available on the call now.
    emitEvent(_eventTypes.CALL_TRACKS_ADDED, {
      callId,
      trackIds: sessionState.localTracks
    });
  }
  return makeCall;
}

/***/ }),

/***/ 43658:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMakeResponse;
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _remoteTracks = __webpack_require__(45294);
var _constants3 = __webpack_require__(42750);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

function createMakeResponse(container) {
  const {
    context,
    logManager,
    emitEvent,
    CallstackWebrtc,
    CallReporter,
    WebRTC
  } = container;

  /**
   * Operation for handling the answer SDP of a locally-started make operation.
   *
   * On succesful handling:
   *    - updates call state to "connected",
   *    - emits a "tracks added" event
   *    - emits a "call state change" event.
   *
   * On failure to handle, ends the call as unrecoverable:
   *    - updates call state to "ended",
   *    - emits a "tracks removed" event
   *    - emits a "call state change" event.
   *
   * @method makeResponse
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote answer SDP.
   * @return {undefined}
   */
  async function makeResponse(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    const callReport = CallReporter.getReport(call.id);
    // Start the process reseponse event
    const operation = call.currentOperations.find(op => {
      // This response can be for either MAKE or JOIN operations.
      return op.isLocal && [_constants.OPERATIONS.MAKE, _constants.OPERATIONS.MAKE_ANONYMOUS, _constants.OPERATIONS.JOIN].includes(op.type);
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const processResponseEvent = operationEvent.addEvent(_constants3.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    processResponseEvent.addData('operation', _constants.OPERATIONS.MAKE);

    // Handle the remote answer SDP.
    try {
      const sessionInfo = {
        sessionId: call.webrtcSessionId,
        answerSdp: params.sdp
      };
      await CallstackWebrtc.receivedAnswer(sessionInfo, call);
    } catch (error) {
      /*
       * Failed to set the remote answer SDP. End the call.
       * TODO: Better error handling. Is the Call fully cleaned-up here?
       */
      context.dispatch(_actions.callActions.endCallFinish(call.id, {
        error
      }));

      // Tell the application that local tracks are not available, since the
      //    call is ending in error.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });
      processResponseEvent.setError(error);
      processResponseEvent.endEvent();
      return;
    }
    log.info(`Finished processing remote response to local ${operation.type}. Changing state based on operation.`);

    // Get the list of all remote tracks being offered in this call. This is a
    //    new call, so this should be the full list of remote tracks available.
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    const remoteTracks = await (0, _remoteTracks.getAllRemoteTracks)(session);

    /*
     * Update call state:
     *    - state change to "connected",
     *    - remote tracks added to call
     */
    context.dispatch(_actions.callActions.makeCallFinish(call.id, {
      state: _constants2.CALL_STATES.CONNECTED,
      // TODO: Make sure this is the correct units
      startTime: Date.now(),
      // Remote participant's information.
      remoteParticipant: {
        displayNumber: params.remoteNumber,
        displayName: params.remoteName
      },
      // Add the remote tracks to the call state.
      remoteTracks
      // Local tracks have already been added on "pending make call".
    }));

    // Tell the application that tracks have been added.
    emitEvent(eventTypes.CALL_TRACKS_ADDED, {
      callId: call.id,
      trackIds: remoteTracks
    });

    // Tell the application that call state has changed.
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: call.localHold,
        remoteHold: call.remoteHold
      }
    });
    processResponseEvent.endEvent();
  }
  return makeResponse;
}

/***/ }),

/***/ 10418:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = setupIncomingCallOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Helpers
/**
 * Bottle wrapper for "setup incoming call" operation.
 * @return {Function}
 */
function setupIncomingCallOperation(container) {
  const {
    context,
    logManager,
    WebRTC,
    CallstackSDP
  } = container;
  /**
   * Prepares the WebRTC portions of setting up an incoming call.
   *
   * @method setupIncomingCall
   * @param  {Object} sessionOptions
   * @param  {string} sessionOptions.callId the local call id.
   * @param  {Object} sessionOptions.sdpSemantics semantics for the SDP to use. The only supported value is: `'unified-plan'`. It implies video and audio constraints.
   * @param  {Object} sessionOptions.turnInfo TURN information, contains server info.
   * @param  {string} sessionOptions.trickleIceMode the mode to enable for Trickle ICE.
   * @param  {Object} sessionOptions.offer an offer containing an SDP.
   * @throws {BasicError} Throws an error if the WebRTC operation fails.
   * @return {string} sessionId an identifier for the session.
   */
  async function setupIncomingCall(sessionOptions) {
    const {
      defaultPeerConfig,
      turnInfo,
      trickleIceMode,
      callId,
      removeBundling
    } = sessionOptions;
    const offer = sessionOptions.offer;
    const log = logManager.getLogger('CALL', callId);
    log.info('Setting up remote WebRTC portions of call.');
    let session;
    try {
      let iceServers = defaultPeerConfig.iceServers;
      // Merge the ICE server information together with their credentials.
      if (turnInfo) {
        iceServers = iceServers.map(iceInfo => {
          return _objectSpread(_objectSpread({}, iceInfo), {}, {
            username: turnInfo.username,
            credential: turnInfo.password
          });
        });
      }
      session = await WebRTC.sessionManager.create({
        peer: {
          rtcConfig: _objectSpread(_objectSpread({}, defaultPeerConfig), {}, {
            iceServers
          }),
          trickleIceMode,
          removeBundling
        }
      });
    } catch (error) {
      log.debug('Failed to create WebRTC Session for incoming Call.', error.message);
      const createSessionError = new _errors.default({
        message: error.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
      throw createSessionError;
    }

    // Trigger a new action specifying that the session has been created
    context.dispatch(_actions.callActions.sessionCreated(callId, {
      webrtcSessionId: session.id
    }));

    /*
     * Run the remote SDP offer through any SDP handlers provided, then set it
     *    as the Session's remote description.
     * This is the "pre set remote" stage.
     */
    const callConfigOptions = (0, _selectors.getOptions)(context.getState());
    offer.sdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer.sdp, {
      callId,
      type: offer.type,
      step: 'set',
      endpoint: 'remote'
    });
    await session.processOffer({
      type: 'offer',
      sdp: offer.sdp
    });
    log.info('Finished setting up remote WebRTC portions of call.');
    return session.id;
  }
  return setupIncomingCall;
}

/***/ }),

/***/ 71290:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = setupOutgoingSessionOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _media = __webpack_require__(50654);
var _call = __webpack_require__(12442);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _constants2 = __webpack_require__(42750);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Utils
// Other plugins.
/**
 * Bottle wrapper for "setup outgoing session" operation.
 * @return {Function}
 */
function setupOutgoingSessionOperation(container) {
  const {
    context,
    logManager,
    CallReporter,
    CallstackSDP,
    WebRTC
  } = container;

  /**
   * Performs the WebRTC portion necessary for establishing outgoing calls
   *
   * @method setupOutgoingSession
   * @async
   * @param {Object} mediaConstraints
   * @param {Object|boolean} mediaConstraints.audio
   * @param {Object|boolean} mediaConstraints.video
   * @param {Object|boolean} mediaConstraints.screen
   * @param {Object|Array<string>} mediaConstraints.tracks
   * @param {Object} options
   * @param {string} options.callId
   * @param {Object} options.defaultPeerConfig
   * @param {Object} options.turnInfo
   * @param {call.BandwidthControls} options.bandwidth
   * @param {call.DSCPControls} options.dscpControls
   * @param {boolean} options.removeBundling
   * @return {Object} callInfo
   * @return {string} callInfo.sessionId
   * @return {Arrray<string>} callInfo.mediaIds
   * @return {string} callInfo.offerSdp
   * @throws {BasicError} Throws a USER_MEDIA_ERROR error if cannot get user media.
   * @throws {BasicError} Throws a GENERIC_ERROR error if cannot create webrtc Session.
   * @throws {BasicError} Throws a TODO error if cannot add tracks to Session.
   * @throws {BasicError} Throws a GENERIC_ERROR error if SDP handling fails.
   */
  async function setupOutgoingSession(mediaConstraints, options) {
    const log = logManager.getLogger('CALL', options.callId);
    log.info('Setting up local WebRTC portions of call.');
    const call = (0, _selectors.getCallById)(context.getState(), options.callId);
    const callReport = CallReporter.getReport(call.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.status === _constants.OP_STATUS.ONGOING;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    let medias = [];
    // If detached media is passed in, use that.
    if (mediaConstraints.medias) {
      for (const media of mediaConstraints.medias) {
        medias.push({
          type: media.type,
          media: await WebRTC.media.get(media.media.id)
        });
      }
    }

    // If any further media is requested by the api but not detached, create it.
    if (mediaConstraints.audio || mediaConstraints.video || mediaConstraints.screen) {
      try {
        /*
         * Create local user media for the call.
         * Expected return:
         * @param {Array<Object>} medias List of objects.
         * @param {Object} mediaObj
         * @param {Media}  mediaObj.media The WebRTC-Stack Media object.
         * @param {string} mediaObj.type The kind of media.
         */
        const createdMedias = await container.CallstackWebrtc.createLocal(mediaConstraints, options.callId);
        medias = medias.concat(createdMedias);
      } catch (err) {
        log.debug('Failed to get media requested for the call.');
        throw err;
      }
    }
    let session;
    try {
      let iceServers = options.defaultPeerConfig.iceServers;
      // Merge the ICE server information together with their credentials.
      if (options.turnInfo) {
        iceServers = iceServers.map(iceInfo => {
          return _objectSpread(_objectSpread({}, iceInfo), {}, {
            username: options.turnInfo.username,
            credential: options.turnInfo.password
          });
        });
      }

      // Create a WebRTC-Stack Session object.
      session = await WebRTC.sessionManager.create({
        peer: {
          rtcConfig: _objectSpread(_objectSpread({}, options.defaultPeerConfig), {}, {
            iceServers
          }),
          // Follow-up / TODO: Remove `trickleIceMode` option; not used.
          trickleIceMode: options.trickleIceMode,
          removeBundling: options.removeBundling
        }
      });
      log.debug('Created WebRTC Session for Call.', {
        webrtcSessionId: session.id
      });
    } catch (err) {
      log.debug('Failed to create WebRTC Session for Call.', err.message);
      throw new _errors.default({
        message: err.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }

    // Dispatch action to update state; linking the Call to the Session.
    context.dispatch(_actions.callActions.sessionCreated(options.callId, {
      webrtcSessionId: session.id
    }));
    const trackLists = await (0, _media.organizeTracks)(medias);
    const dscpTrackMapping = (0, _call.getTrackDscpMapping)(trackLists, options.dscpControls);

    // eslint-disable-next-line no-useless-catch
    try {
      // Add all of the tracks to the Session.
      await session.addTracks(trackLists.all, dscpTrackMapping);
    } catch (err) {
      // Follow-up / TODO.
      throw err;
    }
    const callConfig = (0, _selectors.getOptions)(context.getState());
    let finalSdp;

    /*
     * Create the local SDP offer, run it through any provided SDP handlers,
     *    then set it as the Session's local description.
     */
    const setLocalDescriptionEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_LOCAL);
    setLocalDescriptionEvent.addData('operation', operation.type);
    try {
      let offer = await session.createOffer();
      // Run the SDP through the Pipeline before we set it locally.
      //    This is the "pre set local" stage.
      offer.sdp = CallstackSDP.runPipeline(callConfig.sdpHandlers, offer.sdp, {
        callId: options.callId,
        type: offer.type,
        step: 'set',
        endpoint: 'local',
        bandwidth: options.bandwidth
      });
      offer = await session.setLocalDescription(offer);

      // Run the SDP through the Pipeline again before we send it to the remote side.
      //    This is the "pre send local" stage.
      finalSdp = CallstackSDP.runPipeline(callConfig.sdpHandlers, offer.sdp, {
        callId: options.callId,
        type: offer.type,
        step: 'send',
        endpoint: 'local',
        bandwidth: options.bandwidth
      });
    } catch (err) {
      log.debug('Failed to set local SDP.', err.message);
      setLocalDescriptionEvent.setError(err);
      setLocalDescriptionEvent.endEvent();
      // Follow-up / TODO: Clean-up Media and Session resources.
      throw new _errors.default({
        message: err.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }
    setLocalDescriptionEvent.endEvent();
    log.info('Finished setting up local WebRTC portions of call.');
    return {
      offerSdp: finalSdp,
      sessionId: session.id,
      mediaIds: medias.map(media => media.media.id)
    };
  }
  return setupOutgoingSession;
}

/***/ }),

/***/ 46092:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _start = _interopRequireDefault(__webpack_require__(31408));
var _stop = _interopRequireDefault(__webpack_require__(50163));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.startMOH', () => {
    return {
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _start.default)(bottle.container)
      }
    };
  });
  bottle.factory('Callstack.stages.stopMOH', () => {
    return {
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _stop.default)(bottle.container)
      }
    };
  });

  // Remote-only "start MOH" operation.
  bottle.factory('Callstack.operations.startMOH', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a RemoteStartMOH operation.
     * @method RemoteStartMOH
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a remote start MOH operation.
     */
    function RemoteStartMOH(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.START_MOH,
        isNegotiation: true,
        isLocal: false,
        // Operation methods.
        stages: bottle.container.Callstack.stages.startMOH.remote
      }, {
        callId
      });
    }
    return {
      remote: RemoteStartMOH
    };
  });

  // Remote-only "stop MOH" operation.
  bottle.factory('Callstack.operations.stopMOH', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a RemoteStopMOH operation.
     * @method RemoteStopMOH
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a remote stop MOH operation.
     */
    function RemoteStopMOH(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.STOP_MOH,
        isNegotiation: true,
        isLocal: false,
        // Operation methods.
        stages: bottle.container.Callstack.stages.stopMOH.remote
      }, {
        callId
      });
    }
    return {
      remote: RemoteStopMOH
    };
  });
}

/***/ }),

/***/ 31408:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createStartMohHandler;
var _state = __webpack_require__(65794);
var _remoteTracks = _interopRequireDefault(__webpack_require__(45294));
var _hasMediaFlowing = _interopRequireDefault(__webpack_require__(43393));
var _setMediaInactive = _interopRequireDefault(__webpack_require__(23180));
var _webrtc = __webpack_require__(82332);
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants2 = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function createStartMohHandler(container) {
  const {
    context,
    CallstackWebrtc,
    CallRequests,
    CallstackSDP,
    WebRTC,
    logManager,
    emitEvent
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - updates call state to add new remote tracks,
   *    - emits a "tracks added" event
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when the operation fails.
   * @return {undefined}
   */
  async function operation(call, params, opInfo) {
    try {
      const {
        remoteTracks
      } = await onStartMOH(call, params, opInfo);
      context.dispatch(_actions.callActions.remoteStartMohFinish(call.id, {
        remote: true,
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        },
        remoteTracks
      }));

      // New remote tracks have become available.
      emitEvent(eventTypes.CALL_TRACKS_ADDED, {
        callId: call.id,
        trackIds: remoteTracks
      });
    } catch (error) {
      context.dispatch(_actions.callActions.remoteStartMohFinish(call.id, {
        remote: true,
        error
      }));

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Operation for handling a new remote start MOH offer SDP.
   *
   * Offer checks:
   *    - set media inactive if locally held
   *    - recreate Peer if different SDP session
   *
   * @method onStartMOH
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when WebRTC negotiation fails.
   * @throws {Error} Throws when Gateway signaling fails.
   * @return {Object} Tracks affected by the operation.
   */
  async function onStartMOH(call, params, opInfo) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }

    /*
     * If the remote operation is offering media but the call is locally held,
     *    then we need to modify the offer to ensure that media does not restart.
     */
    const mediaState = (0, _state.getMediaState)(call);
    const isMediaFlowing = (0, _hasMediaFlowing.default)(params.sdp);
    if (isMediaFlowing && [_constants.CALL_MEDIA_STATES.DUAL_HOLD, _constants.CALL_MEDIA_STATES.LOCAL_HOLD].includes(mediaState)) {
      log.debug('Modifying remote offer to prevent resetting media while in local hold.');
      params.sdp = (0, _setMediaInactive.default)(params.sdp);
      if (!params.sdp) {
        log.debug('SDP is either undefined or not a string.');
        return;
      }
      // Update the `mediaDiff` after we modified the SDP.
      opInfo.mediaDiff = CallstackSDP.compareMedia(opInfo.remoteDesc.sdp, params.sdp, true);
    }

    /**
     * Decision: When we receive a remote offer SDP that has a different "session
     *    ID" as the currently set remote SDP, recreate the call's PeerConnection.
     * This is a workaround/fix for scenarios where the remote endpoint changes.
     *    It avoids possible DTLS role conflict issues.
     */
    const sameSession = await (0, _webrtc.isSameSdpSessionId)(WebRTC, call.webrtcSessionId, params.sdp);
    if (!sameSession) {
      log.debug(`Received offer SDP is from a different session. Recreating Peer for call ${call.id}.`);
      const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
      await session.recreatePeer();
    }

    // Handle the offer SDP to receive an answer SDP.
    let answer;
    try {
      answer = await CallstackWebrtc.handleOffer(params.sdp, call.webrtcSessionId, call.bandwidth);
    } catch (error) {
      log.debug('Failed to receive offer SDP.', error);

      // TODO: Notify the Gateway that negotiation has failed.
      // The call may now be in a bad state and needs to be fixed.

      throw error;
    }
    try {
      // Send answer sdp back to remote side
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: answer.answerSDP,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });
      log.info('Finished responding to remote update. Changing state based on the remote operation.');

      // Get the list of remote tracks that were added by the remote operation.
      //    This is done after `handleOffer` so the Transceivers are up-to-date
      //    with the changes being offered.
      const remoteTracks = await (0, _remoteTracks.default)(_constants2.OPERATIONS.START_MOH, opInfo.mediaDiff, session);
      return {
        remoteTracks
      };
    } catch (error) {
      // Scenario: The offer was processed, but failed to respond with the answer.
      // The remote side needs the answer SDP before the call is "connected".
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to remote offer with an answer.');
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 50163:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createStopMohHandler;
var _state = __webpack_require__(65794);
var _remoteTracks = _interopRequireDefault(__webpack_require__(45294));
var _hasMediaFlowing = _interopRequireDefault(__webpack_require__(43393));
var _setMediaInactive = _interopRequireDefault(__webpack_require__(23180));
var _webrtc = __webpack_require__(82332);
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants2 = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function createStopMohHandler(container) {
  const {
    context,
    CallstackWebrtc,
    CallRequests,
    CallstackSDP,
    WebRTC,
    logManager,
    emitEvent
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - updates call state to add new remote tracks,
   *    - emits a "tracks added" event
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when the operation fails.
   * @return {undefined}
   */
  async function operation(call, params, opInfo) {
    try {
      const {
        remoteTracks
      } = await onStopMOH(call, params, opInfo);
      context.dispatch(_actions.callActions.remoteStopMohFinish(call.id, {
        remote: true,
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        },
        remoteTracks
      }));

      // Existing remote tracks have become unavailable.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: remoteTracks
      });
    } catch (error) {
      context.dispatch(_actions.callActions.remoteStopMohFinish(call.id, {
        remote: true,
        error
      }));

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Operation for handling a new remote stop MOH offer SDP.
   *
   * Offer checks:
   *    - set media inactive if locally held
   *    - recreate Peer if different SDP session
   *
   * @method onStopMOH
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when WebRTC negotiation fails.
   * @throws {Error} Throws when Gateway signaling fails.
   * @return {Object} Tracks affected by the operation.
   */
  async function onStopMOH(call, params, opInfo) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }

    /*
     * If the remote operation is offering media but the call is locally held,
     *    then we need to modify the offer to ensure that media does not restart.
     */
    const mediaState = (0, _state.getMediaState)(call);
    const isMediaFlowing = (0, _hasMediaFlowing.default)(params.sdp);
    if (isMediaFlowing && [_constants.CALL_MEDIA_STATES.DUAL_HOLD, _constants.CALL_MEDIA_STATES.LOCAL_HOLD].includes(mediaState)) {
      log.debug('Modifying remote offer to prevent resetting media while in local hold.');
      params.sdp = (0, _setMediaInactive.default)(params.sdp);
      if (!params.sdp) {
        log.debug('SDP is either undefined or not a string.');
        return;
      }
      // Update the `mediaDiff` after we modified the SDP.
      opInfo.mediaDiff = CallstackSDP.compareMedia(opInfo.remoteDesc.sdp, params.sdp, true);
    }

    /**
     * Decision: When we receive a remote offer SDP that has a different "session
     *    ID" as the currently set remote SDP, recreate the call's PeerConnection.
     * This is a workaround/fix for scenarios where the remote endpoint changes.
     *    It avoids possible DTLS role conflict issues.
     */
    const sameSession = await (0, _webrtc.isSameSdpSessionId)(WebRTC, call.webrtcSessionId, params.sdp);
    if (!sameSession) {
      log.debug(`Received offer SDP is from a different session. Recreating Peer for call ${call.id}.`);
      const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
      await session.recreatePeer();
    }

    // Handle the offer SDP to receive an answer SDP.
    let answer;
    try {
      answer = await CallstackWebrtc.handleOffer(params.sdp, call.webrtcSessionId, call.bandwidth);
    } catch (error) {
      log.debug('Failed to receive offer SDP.', error);

      // TODO: Notify the Gateway that negotiation has failed.
      // The call may now be in a bad state and needs to be fixed.

      throw error;
    }
    try {
      // Send answer sdp back to remote side
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: answer.answerSDP,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });
      log.info('Finished responding to remote update. Changing state based on the remote operation.');

      // Get the list of remote tracks that were added by the remote operation.
      //    This is done after `handleOffer` so the Transceivers are up-to-date
      //    with the changes being offered.
      const remoteTracks = await (0, _remoteTracks.default)(_constants2.OPERATIONS.STOP_MOH, opInfo.mediaDiff, session);
      return {
        remoteTracks
      };
    } catch (error) {
      // Scenario: The offer was processed, but failed to respond with the answer.
      // The remote side needs the answer SDP before the call is "connected".
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to remote offer with an answer.');
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 67274:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _normalizeIceFailure = _interopRequireDefault(__webpack_require__(53550));
function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.normalizeIceFailure', () => (0, _normalizeIceFailure.default)(bottle.container));
}

/***/ }),

/***/ 53550:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createNormalizeIceFailureOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _actionTypes = __webpack_require__(1371);
var _actionTypes2 = __webpack_require__(39100);
var sessionActions = _interopRequireWildcard(__webpack_require__(57423));
var _eventTypes = __webpack_require__(55166);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Other plugins

/**
 * Bottle wrapper for "normalize ICE failure" operation.
 * @return {Function}
 */
function createNormalizeIceFailureOperation(container) {
  const {
    context,
    emitEvent,
    logManager,
    Notifications
  } = container;
  /**
   * This operation is meant to normalize ICE connection state changes for Unified-Plan PeerConnections only.
   *
   * Expectation: When ICE connection has an issue, it moves into `disconnected`
   *    state. If it can't automatically fix the issue, it should move into `failed`
   *    state shortly afterwards.
   * Reality: Unified-Plan behaves a little differently, where it never transitions
   *    into `failed` state. Other plans (such as Plan-B) use heuristics to know when to give up and
   *    transition into `failed` state, but Unified-Plan does not.
   * Ref: https://docs.google.com/document/d/1-ZfikoUtoJa9k-GZG1daN0BU3IjIanQ_JSscHxQesvU/edit#heading=h.xy9xt6bk24e
   *
   * So this function is meant to "fill-in" that missing behaviour for Unified-Plan:
   *    If a Unified-Plan call enters `disconnected` state, we want to wait a short
   *    amount of time (due to lacking any real heuristic). If the call is still
   *    disconnect after that time, we assume it should be in `failed` state and
   *    manually update the call state.
   *
   * The purpose for doing this is to enter other behaviours that rely on the `failed`
   *    state (eg. ICE restart, telling the application there is no media) still occur.
   * @method normalizeIceFailure
   * @param  {Action} action A "ICE connection state change" action specifically
   *    for the disconnected state.
   */
  async function normalizeIceFailure(webrtcSessionId, mediaConnectionState) {
    /**
     * Determines if a call is in limbo disconnected media state.
     * @param  {CallObject}  targetCall
     * @return {boolean} Whether the call is on-going but in disconnected ICE state.
     */
    function isDisconnected(targetCall) {
      // 1) Call exists, 2) Call is on-going, 3) Call's media is disconnected.
      return targetCall && ![_constants.CALL_STATES.ENDED, _constants.CALL_STATES.CANCELLED].includes(targetCall.state) && mediaConnectionState === _constants.CALL_MEDIA_CONNECTION_STATES.DISCONNECTED;
    }
    const call = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), webrtcSessionId);
    if (!isDisconnected(call, mediaConnectionState)) {
      // We only want to act if the call is currently disconnected.
      return;
    }
    try {
      /*
       * Wait a short time to let the Call try fixing things itself.
       * The number "10000" was determined by comparing how long it takes for the
       *    disconnected-->failed transition to happen when on Plan-B. It consistently
       *    took [almost] exactly 10 seconds for the change to happen, no matter
       *    if it was an audio-only or audio+video call.
       * Note: This test was done on Chrome, since it was the only browser to support
       *       Plan-B.
       * Note: 10s is also Chrome's timeout for collecting ICE candidates on an
       *    interface. I assume this isn't a coincidence.
       */
      await Notifications.takeAction(action => {
        return action.type === _actionTypes.SESSION_ICE_CONNECTION_STATE_CHANGE && action.payload.id === webrtcSessionId && action.payload.iceConnectionState !== _constants.CALL_MEDIA_CONNECTION_STATES.DISCONNECTED || action.type === _actionTypes2.END_CALL_FINISH && action.payload.id === call.id;
      }, 10000);
    } catch (error) {
      // Timed out waiting for ice connection state to change
      // Get the call state again, to make sure we have the latest state.
      const currentCall = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), webrtcSessionId);
      // If the call is still disconnected, assume that it should have moved into
      //    failed state. Manually trigger the action to transition into failed state.
      const log = logManager.getLogger('CALL', currentCall.id);
      log.debug('Call has remained in disconnected media connection state too long. Manually transitioning to failed state.');
      context.dispatch(sessionActions.sessionIceConnectionStateChange(currentCall.webrtcSessionId, {
        iceConnectionState: _constants.CALL_MEDIA_CONNECTION_STATES.FAILED
      }));
      emitEvent(_eventTypes.MEDIA_CONNECTION_CHANGE, {
        callId: currentCall.id,
        previous: {
          state: currentCall.mediaConnectionState
        }
      });
    }
  }
  return normalizeIceFailure;
}

/***/ }),

/***/ 98117:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _playAudio = _interopRequireDefault(__webpack_require__(81037));
var _validate = _interopRequireDefault(__webpack_require__(55470));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.playAudioFile', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _playAudio.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.playAudioFile', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalPlayAudio operation.
     * @method LocalPlayAudio
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local play audio operation.
     */
    function LocalPlayAudio(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.PLAY_AUDIO,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.playAudioFile.local
      }, {
        callId
      });
    }
    return {
      local: LocalPlayAudio
    };
  });
}

/***/ }),

/***/ 81037:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _actionTypes = __webpack_require__(1371);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Other plugins

/**
 * Bottle wrapper for playAudioFile call operation.
 * @return {Function}
 */
function createOperation(container) {
  const {
    context,
    WebRTC,
    emitEvent,
    Notifications,
    logManager
  } = container;

  /**
   * "Play audio file" operation.
   * Validates that it can perform the operation, then passes it off to the
   *    Call's Session object. The WebRTC stack performs the actual operation; this
   *    function manages the responses from the WebRTC stack and forwards feedback
   *    to the API.
   *
   * @method playAudio
   * @param {string}   callId            ID of the Call the act on.
   * @param {string}   filePath          Path to the audio file.
   * @param {Function} onPlayingCallback Callback for when audio starts playing.
   * @return {undefined}
   * @throws {BasicError} Throws if call does not exist.
   * @throws {BasicError} Throws if call is not in correct state.
   * @throws {BasicError} Throws if call does not have a WebRTC session.
   * @throws {BasicError} Throws if the session cannot play audio.
   * @throws {BasicError} Throws if audio plays longer than expected duration.
   */
  async function playAudio(callId, filePath, onPlayingCallback) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Replacing call audio with file media.');
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      throw new _errors.default({
        code: _errors.callCodes.INVALID_STATE,
        message: "Call's WebRTC session not found."
      });
    }
    let duration;
    try {
      duration = await session.insertAudio(filePath);
      log.info('Audio file has started to play.');
      const operation = call.currentOperations.find(op => {
        return op.isLocal && op.type === _constants.OPERATIONS.PLAY_AUDIO;
      });
      /*
       * Special-case: Have the playAudio operation manage the "update" transition.
       *    This is because it is not a negotiation operation (hence the CallManager
       *    wouldn't give it an update transition), but still has a "pending" stage
       *    (hence needs an update transition).
       */
      context.dispatch(_actions.callActions.operationUpdate(callId, _constants.OP_TRANSITIONS.PLAY_AUDIO, true, {
        transition: _constants.OP_TRANSITIONS.UPDATE,
        eventId: operation.eventId
      }));
      emitEvent(eventTypes.CALL_OPERATION, {
        callId,
        isLocal: true,
        operation: _constants.OPERATIONS.PLAY_AUDIO,
        transition: _constants.OP_TRANSITIONS.UPDATE,
        previous: {
          operations: _constants.OPERATIONS.PLAY_AUDIO,
          status: _constants.OP_STATUS.ONGOING
        }
      });
    } catch (err) {
      // Failed to start playing audio file.
      log.info('Failed to start playing audio file.');
      let code;
      switch (err.message) {
        case 'Failed to play audio file.':
          // Likely: the filePath is invalid.
          code = _errors.callCodes.INVALID_PARAM;
          break;
        case 'No valid local audio track found to insert audio file on.':
          // Error: The Call needs to have a local audio track.
          code = _errors.callCodes.NOT_SUPPORTED;
          break;
        default:
          // Likely: the native `replaceTrack` function failed.
          code = _errors.callCodes.UNKNOWN_ERROR;
          break;
      }
      throw new _errors.default({
        code,
        message: err.message
      });
    }

    // Resolve the 'pending' promise to signify the file has started to play.
    onPlayingCallback({
      duration
    });

    // Wait for the notice saying that the audio file has stopped playing.
    const timeout = duration * 1000 + 3000;
    let action;
    try {
      action = await Notifications.takeAction(action => {
        return action.type === _actionTypes.SESSION_AUDIO_ENDED && action.payload.id === session.id;
      }, timeout);
    } catch (err) {
      // Audio file hasn't completed when it should have; assume error.
      log.info('No response from audio file after expected duration; timing-out.');
      throw new _errors.default({
        code: _errors.callCodes.STATE_DESYNC,
        message: 'Play audio file operation timed-out.'
      });
    }
    if (action.error) {
      // Audio file encountered an error.
      log.info('Audio file encountered an error while playing.');
      throw new _errors.default({
        code: _errors.callCodes.UNKNOWN_ERROR,
        message: 'Encountered error while playing audio file.'
      });
    } else {
      // Audio file ended.
      log.info('Audio file has finished playing.');
    }
  }
  return playAudio;
}

/***/ }),

/***/ 55470:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} state The SDK state.
 * @param {Object} callId The ID the SDK uses to identify the call.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, filePath, onPlayingCallback) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `playAudioFile` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Connected` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.state !== _constants.CALL_STATES.CONNECTED) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Invalid call state: ${call.state}. It should be: ${_constants.CALL_STATES.CONNECTED}.`
    });
  }
}

/***/ }),

/***/ 48215:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _reject = _interopRequireDefault(__webpack_require__(62923));
var _validate = _interopRequireDefault(__webpack_require__(70688));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.reject', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _reject.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.reject', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalReject operation.
     * @method LocalReject
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local reject operation.
     */
    function LocalReject(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.REJECT,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.reject.local
      }, {
        callId
      });
    }
    return {
      local: LocalReject
    };
  });
}

/***/ }),

/***/ 62923:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rejectOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
// Call plugin

// Other plugins

/**
 * Bottle wrapper for reject call operation.
 * @return {Function}
 */
function rejectOperation(container) {
  const {
    context,
    CallRequests,
    CallstackWebrtc,
    logManager
  } = container;
  /**
   * Rejects an incoming call.
   *
   * This operation defines how a call is rejected. It performs the WebRTC and
   *    signalling operations to reject a "call" both locally and on the server.
   * Assumptions:
   *    1. None
   * Responsibilities:
   *    1. Cleanup the call locally, using the WebRTC helper saga.
   *    2. Reject the call on the server.
   *    3. Update call state (via redux action).
   * @method rejectCall
   * @param {Object} callId The ID of the call to reject.
   */
  async function reject(callId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Rejecting incoming call.');
    const incomingCall = (0, _selectors.getCallById)(context.getState(), callId);
    // Collect the information needed to make the request.
    const callInfo = {
      id: callId,
      wrtcsSessionId: incomingCall.wrtcsSessionId
    };
    try {
      await CallRequests.rejectSession(callInfo);
    } catch (error) {
      log.info('Failed to reject call.');
      throw error;
    }

    // Clean-up WebRTC resources AFTER the REST request to ensure that the
    //    server-side call is ended. Avoids issues if REST request fails.
    await CallstackWebrtc.closeCall(incomingCall.webrtcSessionId);
    log.info(`Finished rejecting call. Changing to ${_constants.CALL_STATES.ENDED}.`);
  }
  return reject;
}

/***/ }),

/***/ 70688:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} state The SDK state.
 * @param {Object} callId The ID used by the SDK to identify the call.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `reject` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Initiated` or `Ringing` state.
   *    3. Call must be `Incoming` direction.
   */
  if (!call) {
    // Call must exist.
    return new _errors.default({
      message: `Failed to reject call. Call ${callId} not found.`,
      code: _errors.callCodes.INVALID_PARAM
    });
  } else if (![_constants.CALL_STATES.INITIATED, _constants.CALL_STATES.RINGING].includes(call.state)) {
    // Call must be in Initiated or Ringing state.
    return new _errors.default({
      message: `Failed to reject call. Call must be in ${_constants.CALL_STATES.INITIATED} or ${_constants.CALL_STATES.RINGING} state.`,
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (call.direction !== _constants.CALL_DIRECTION.INCOMING) {
    // Call must be incoming.
    return new _errors.default({
      message: 'Failed to reject call. Call must be incoming.',
      code: _errors.callCodes.INVALID_STATE
    });
  }
}

/***/ }),

/***/ 3009:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _removeMedia = _interopRequireDefault(__webpack_require__(55808));
var _validate = _interopRequireDefault(__webpack_require__(11810));
var _webrtcRemoveMedia = _interopRequireDefault(__webpack_require__(74104));
var _rollbackRemoveMedia = _interopRequireDefault(__webpack_require__(67959));
var _validateBasic = _interopRequireDefault(__webpack_require__(63378));
var _remoteOffer = _interopRequireDefault(__webpack_require__(43352));
var _remoteAnswer = _interopRequireDefault(__webpack_require__(47455));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.removeMedia', () => {
    return {
      local: {
        // Stages of local operation.
        validate: _validate.default,
        localOffer: (0, _removeMedia.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      },
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _remoteOffer.default)(bottle.container)
      }
    };
  });
  bottle.factory('Callstack.stages.removeBasicMedia', () => {
    return {
      local: {
        // Only the validate stage is different compared to LocalRemoveMedia.
        validate: _validateBasic.default,
        localOffer: (0, _removeMedia.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.removeMedia', () => {
    const Callstack = bottle.container.Callstack;
    const opFactory = Callstack.models.Operation;
    function removeMedia(isLocal) {
      /**
       * Factory function for a RemoveMedia operation.
       * @method removeMedia
       * @param {string} callId ID for the call this operation will affect.
       * @return {Operation} An instance of the removeMedia operation.
       */
      return callId => {
        const stages = Callstack.stages.removeMedia[isLocal ? 'local' : 'remote'];
        return opFactory.instance({
          // Operation meta-data.
          type: _constants.OPERATIONS.REMOVE_MEDIA,
          isNegotiation: true,
          isLocal,
          // Operation methods.
          stages
        }, {
          callId
        });
      };
    }
    return {
      local: removeMedia(true),
      remote: removeMedia(false)
    };
  });
  bottle.factory('Callstack.operations.removeBasicMedia', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalRemoveBasicMedia operation.
     *    An "remove basic media" operation is identical to an "remove media" operation
     *    except that it has stricter "validate" rules.
     * @method LocalRemoveBasicMedia
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local basic removeMedia operation.
     */
    function LocalRemoveBasicMedia(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.REMOVE_BASIC_MEDIA,
        isNegotiation: true,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.removeBasicMedia.local
      }, {
        callId
      });
    }
    return {
      local: LocalRemoveBasicMedia
      // Note: There is no remote RemoveBasicMedia operation. It's handled as a
      //    remote RemoveMedia operation.
    };
  });
  bottle.factory('Callstack.utils.webrtcRemoveMedia', () => (0, _webrtcRemoveMedia.default)(bottle.container));
  bottle.factory('Callstack.utils.rollbackRemoveMedia', () => (0, _rollbackRemoveMedia.default)(bottle.container));
}

/***/ }),

/***/ 47455:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRemoveMediaResponse;
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

function createRemoveMediaResponse(container) {
  const {
    context,
    logManager,
    emitEvent,
    CallstackWebrtc,
    CallReporter
  } = container;

  /**
   * Operation for handling the answer SDP of a locally-started remove media operation.
   *
   * On succesful handling:
   *    - updates call state to remove specified local tracks,
   *    - emits a "media removed" event
   *    - emits a "tracks removed" event
   *
   * On failure to handle, ends the call as unrecoverable:
   *    - updates call state to "ended",
   *    - emits a "tracks removed" event
   *    - emits a "call state change" event.
   *
   * @method removeMediaResponse
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote answer SDP.
   * @return {undefined}
   */
  async function removeMediaResponse(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    const callReport = CallReporter.getReport(call.id);
    // Start the process reseponse event
    const operation = call.currentOperations.find(op => {
      // This response can be for either regular or basic 'remove media' operations.
      return op.isLocal && [_constants.OPERATIONS.REMOVE_MEDIA, _constants.OPERATIONS.REMOVE_BASIC_MEDIA].includes(op.type);
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const processResponseEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    processResponseEvent.addData('operation', _constants2.REPORTER_OPERATION_EVENTS_MAP.REMOVE_MEDIA);

    // Handle the remote answer SDP.
    try {
      const sessionInfo = {
        sessionId: call.webrtcSessionId,
        answerSdp: params.sdp
      };
      await CallstackWebrtc.receivedAnswer(sessionInfo, call);
    } catch (error) {
      /*
       * Failed to set the remote answer SDP. End the call.
       * TODO: Better error handling. Is the Call fully cleaned-up here?
       */
      context.dispatch(_actions.callActions.endCallFinish(call.id, {
        error
      }));

      // Tell the application that tracks are not available, since the
      //    call is ending in error.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...call.localTracks, ...call.remoteTracks]
      });
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });
      processResponseEvent.setError(error);
      processResponseEvent.endEvent();
      return;
    }
    log.info(`Finished processing remote response to local ${operation.type}. Changing state based on operation.`);

    // Get the list of track IDs removed from the call by this operation.
    const affectedLocalTracks = operation.operationData.tracks;

    // call:removedMedia event
    emitEvent(eventTypes.CALL_REMOVED_MEDIA, {
      callId: call.id,
      local: true,
      tracks: affectedLocalTracks
    });

    /*
     * Update call state:
     *    - remove tracks from the call.
     */
    context.dispatch(_actions.callActions.removeMediaFinish(call.id, {
      bandwidth: operation.operationData.bandwidth,
      // For an remove media operation, the affected tracks are those that
      //    where specified at the start of the operation.
      localTracks: affectedLocalTracks
    }));

    // Tell the application that tracks have been removed.
    emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
      callId: call.id,
      trackIds: affectedLocalTracks
    });
    processResponseEvent.endEvent();
  }
  return removeMediaResponse;
}

/***/ }),

/***/ 55808:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = removeMediaOperation;
var _eventTypes = __webpack_require__(55166);
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _kandyWebrtc = __webpack_require__(15203);
// Call plugin

// Libraries

// Other plugins

/**
 * Bottle wrapper for removeMedia call operation.
 * @return {Function}
 */
function removeMediaOperation(container) {
  const {
    context,
    CallRequests,
    Callstack,
    CallstackWebrtc,
    emitEvent,
    logManager
  } = container;

  /**
   *
   * Removes media from an existing session.
   *
   * This function handles the WebRTC and signalling portions of removing media from an existing call
   * Assumptions:
   *    1. The action contains a tracks object that is neither an array or an empty object
   *    2. The call is in the 'Connected' state
   * Responsibilities:
   *    1. Perform the signaling to tell the server that we want to to remove the specified track
   *    2. Update call state (via redux actions).
   * @method removeMedia
   * @param {Object} callId The ID of the call.
   * @param {Array}  tracks The list of track IDs to be removed.
   * @param {Object} options Extra options for the media.
   */
  async function removeMedia(callId, tracks) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const log = logManager.getLogger('CALL', callId);
    log.info('Removing media from call.');
    const {
      bandwidth
    } = options;
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const {
      webrtcSessionId,
      wrtcsSessionId,
      bandwidth: callBandwidth,
      isAnonymous,
      account,
      customParameters,
      customBodies
    } = targetCall;
    const finalBandwidth = {
      audio: bandwidth && bandwidth.audio ? bandwidth.audio : callBandwidth.audio,
      video: bandwidth && bandwidth.video ? bandwidth.video : callBandwidth.video
    };
    let sdp;
    try {
      sdp = await Callstack.utils.webrtcRemoveMedia({
        sessionId: webrtcSessionId,
        tracks,
        bandwidth: finalBandwidth
      });
    } catch (removeMediaError) {
      log.info('Failed to remove media from call.');
      throw removeMediaError;
    }
    const callInfo = {
      wrtcsSessionId,
      id: callId,
      offer: sdp,
      isAnonymous,
      account,
      customParameters,
      customBodies
    };

    // Perform signalling to remove media
    try {
      await CallRequests.updateSession(callInfo);
    } catch (responseError) {
      log.info('Failed to remove media from call.');
      // Rollback is not supported on safari or for a plan other than unified-plan
      try {
        await Callstack.utils.rollbackRemoveMedia(webrtcSessionId);
      } catch (rollbackError) {
        log.debug('Automatic remove media rollback failed:', rollbackError);
        const browser = (0, _kandyWebrtc.getBrowserDetails)().browser;
        // Although Safari can automatically rollback and set another local offer while in `have-local-offer`
        // signalling state, Safari does not perform an automatic rollback when a remote offer is
        // received while in that state. An InvalidStateError is thrown instead and call is in an awkward state.
        if (browser === 'safari') {
          log.info('Ending call due to unrecoverable state after call remove media failure.');
          // Hangup the call from WebRTC perspective
          await CallstackWebrtc.closeCall(webrtcSessionId);

          // Cleanup Redux state by sending END_CALL_FINISH action
          context.dispatch(_actions.callActions.endCallFinish(callId, {
            isLocal: true,
            transition: {
              reasonText: 'Call has ended due to call remove media failure.'
            }
          }));
          emitEvent(_eventTypes.CALL_STATE_CHANGE, {
            callId,
            previous: {
              state: targetCall.state,
              localHold: targetCall.localHold,
              remoteHold: targetCall.remoteHold
            },
            error: responseError
          });
          throw responseError;
        }
        log.info('Unable to reset state after remove media operation failure, future operations may not work as intended.');
      }
      throw responseError;
    }
    log.info('Finished local portion of removing media. Waiting on remote response.');
    // Return the operation data so the CallManager can handle it.
    return {
      operationData: {
        local: true,
        tracks,
        bandwidth: finalBandwidth
      }
    };
  }
  return removeMedia;
}

/***/ }),

/***/ 11810:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _constants = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, tracks) {
  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `removeMedia` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Connected` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.state !== _constants.CALL_STATES.CONNECTED) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Invalid call state: ${call.state}. It should be: ${_constants.CALL_STATES.CONNECTED}.`
    });
  } else if (!(0, _isArray2.default)(tracks) || (0, _isEmpty2.default)(tracks)) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Invalid parameter"; no track IDs specified to remove.'
    });
  }
}

/***/ }),

/***/ 63378:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validateBasic;
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _constants = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validateBasic(state, callId, tracks) {
  const call = (0, _selectors.getCallById)(state, callId);

  /*
   * `removeMedia` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Connected` state.
   * `removeBasicMedia` operation validation:
   *    3. Call must not already have a track of `kind` media.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.state !== _constants.CALL_STATES.CONNECTED) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Invalid call state: ${call.state}. It should be: ${_constants.CALL_STATES.CONNECTED}.`
    });
  } else if (tracks.length !== 1) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Must have only one track for basic scenario!'
    });
  }
}

/***/ }),

/***/ 43352:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRemoveMediaHandler;
var _state = __webpack_require__(65794);
var _remoteTracks = _interopRequireDefault(__webpack_require__(45294));
var _hasMediaFlowing = _interopRequireDefault(__webpack_require__(43393));
var _setMediaInactive = _interopRequireDefault(__webpack_require__(23180));
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants2 = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

function createRemoveMediaHandler(container) {
  const {
    context,
    WebRTC,
    CallstackWebrtc,
    CallstackSDP,
    CallRequests,
    emitEvent,
    logManager
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - updates call state to remote remote tracks,
   *    - emits a "tracks removed" event
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber The display number of the remote endpoint.
   * @param {string} params.remoteName The display name of the remote endpoint.
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @throws {Error} Throws when the operation fails.
   * @return {undefined}
   */
  async function operation(call, params, opInfo) {
    try {
      // Handle the remote remove media operation and return the affected remote tracks.
      const {
        remoteTracks
      } = await onRemoteRemoveMedia(call, params, opInfo);
      context.dispatch(_actions.callActions.remoteRemoveMediaFinish(call.id, {
        remote: true,
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        },
        // Include the affected tracks as part of the action so the call's
        //    state can be updated accordingly.
        localTracks: undefined,
        remoteTracks
      }));

      // Remote tracks have become unavailable.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: remoteTracks
      });
    } catch (error) {
      // TODO: Does this action update any state? Is it needed?
      context.dispatch(_actions.callActions.remoteRemoveMediaFinish(call.id, {
        remote: true,
        error
      }));

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Operation for handling a new remote remove-media offer SDP.
   *
   *
   * Offer checks:
   *    - set media inactive if locally held
   *
   * @method onRemoteRemoveMedia
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDesc
   * @param {Object} opInfo.remoteDesc
   * @throws {Error} Throws when WebRTC negotiation fails.
   * @throws {Error} Throws when Gateway signaling fails.
   * @return {Object} Tracks affected by the operation.
   */
  async function onRemoteRemoveMedia(call, params, opInfo) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }

    /*
     * If the remote operation is offering media but the call is locally held,
     *    then we need to modify the offer to ensure that media does not restart.
     */
    const mediaState = (0, _state.getMediaState)(call);
    const isMediaFlowing = (0, _hasMediaFlowing.default)(params.sdp);
    if (isMediaFlowing && [_constants.CALL_MEDIA_STATES.DUAL_HOLD, _constants.CALL_MEDIA_STATES.LOCAL_HOLD].includes(mediaState)) {
      log.debug('Modifying remote offer to prevent resetting media while in local hold.');
      params.sdp = (0, _setMediaInactive.default)(params.sdp);
      if (!params.sdp) {
        log.debug('SDP is either undefined or not a string.');
        return;
      }
      // Update the `mediaDiff` after we modified the SDP.
      opInfo.mediaDiff = CallstackSDP.compareMedia(opInfo.remoteDesc.sdp, params.sdp, true);
    }

    // Handle the offer SDP to receive an answer SDP.
    let answer;
    try {
      answer = await CallstackWebrtc.handleOffer(params.sdp, call.webrtcSessionId, call.bandwidth);
    } catch (error) {
      log.debug('Failed to receive offer SDP.', error);

      // TODO: Notify the Gateway that negotiation has failed.
      // The call may now be in a bad state and needs to be fixed.

      throw error;
    }
    try {
      // Send answer sdp back to remote side
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: answer.answerSDP,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });
      log.info('Finished responding to remote update. Changing state based on the remote operation.');

      // Get the list of remote tracks that were removed by the remote operation.
      //    This is done after `handleOffer` so the Transceivers are up-to-date
      //    with the changes being offered.
      const remoteTracks = await (0, _remoteTracks.default)(_constants2.OPERATIONS.REMOVE_MEDIA, opInfo.mediaDiff, session);
      return {
        remoteTracks
      };
    } catch (error) {
      // Scenario: The offer was processed, but failed to respond with the answer.
      // The remote side needs the answer SDP before the call is "connected".
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to remote offer with an answer.');
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 67959:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rollbackRemoveMediaOperation;
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Other plugins.

/**
 * Bottle wrapper for "rollback RemoveMedia" operation.
 * @return {Function}
 */
function rollbackRemoveMediaOperation(container) {
  const {
    logManager,
    WebRTC
  } = container;

  /**
   * Performs the webRTC session functions associated rolling back the local portion
   *  of a "Remove Media" offer.
   *
   * Unlike other rollback operations, for a remove media operation we will not try and re-add
   *  the removed tracks since the application's intention was to stop the media.
   *
   * Responsibilities:
   *  1. Rollback the local description SDP offer
   * @method rollbackLocalRemoveMedia
   * @param {Object} deps
   * @param {Object} deps.webRTC  The WebRTC stack.
   * @param {string} sessionId    The local webRTC session id, used to lookup the session object
   * @return {Object} offer object containing a Session Description Protocol
   */
  async function rollbackRemoveMedia(sessionId) {
    const log = logManager.getLogger('CALLSTACK');
    const session = await WebRTC.sessionManager.get(sessionId);
    if (!session) {
      const message = `WebRTC session ${sessionId} not found.`;
      log.debug(message);
      throw new _errors.default({
        message
      });
    }

    // Rollback the local offer
    let offer;
    try {
      offer = await session.rollbackLocalDescription();
    } catch (error) {
      log.debug('Failed to rollback local description offer SDP:', error);
      throw error;
    }
    return {
      offer
    };
  }
  return rollbackRemoveMedia;
}

/***/ }),

/***/ 74104:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = webrtcRemoveMediaOperation;
var _isUndefined2 = _interopRequireDefault(__webpack_require__(73346));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Libraries

// Other plugins.

/**
 * Bottle wrapper for "webrtc RemoveMedia" operation.
 * @return {Function}
 */
function webrtcRemoveMediaOperation(container) {
  const {
    context,
    CallstackSDP,
    CallReporter,
    WebRTC
  } = container;

  /**
   * Performs the webRTC responsibilities for removing media
   *
   * @param {Object} sessionOptions
   * @param {string} sessionOptions.sessionId The local webrtc session id
   * @param {Array}  sessionOptions.tracks A list of track IDs to remove
   * @param {Object} [sessionOptions.bandwidth] Contains configuration details for setting bandwidth
   * @return {string} sdp An offer in the form of a Session Description Protocol
   */
  async function webrtcRemoveMedia(sessionOptions) {
    const {
      sessionId,
      bandwidth,
      tracks
    } = sessionOptions;

    // Get the tracks that we want to remove
    const localTracksToRemove = await WebRTC.track.getTracks(tracks);
    // Get the indexes of undefined tracks.
    const invalidIndexes = localTracksToRemove.reduce((acc, cur, ind) => {
      return (0, _isUndefined2.default)(cur) ? acc.concat(ind) : acc;
    }, []);
    // Get the track IDs of those indexes.
    const invalidTracks = invalidIndexes.map(ind => tracks[ind]);
    if (!(0, _isEmpty2.default)(invalidTracks)) {
      const message = `The following invalid track ids were provided: ${invalidTracks.join(', ')}`;
      throw new _errors.default({
        code: _errors.callCodes.INVALID_PARAM,
        message
      });
    }
    const session = await WebRTC.sessionManager.get(sessionId);
    const call = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), sessionId);
    const callId = call.id;
    const callReport = CallReporter.getReport(callId);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && [_constants.OPERATIONS.REMOVE_MEDIA, _constants.OPERATIONS.REMOVE_BASIC_MEDIA].includes(op.type);
    });
    const operationEvent = callReport.getEvent(operation.eventId);

    // Removes tracks from peer (Will stop tracks from being sent to remote participant).
    // Does NOT end the tracks.
    await session.removeTracks(tracks);

    // TODO: This should only cleanup the removed tracks, shouldn't it?
    // Ends the tracks.
    // Clean-up the local tracks.
    try {
      await Promise.all(localTracksToRemove.map(track => track.stop()));
    } catch (error) {
      // TODO: Throw a BasicError (using GENERIC_ERROR code) and abort (see the skipped unit test)
    }

    /*
     * Create the local SDP offer, run it through any provided SDP handlers,
     *    then set it as the Session's local description.
     */
    // TODO: Make sure the session is in the correct signaling state to start a
    //    renegotiation operation.
    const callConfigOptions = (0, _selectors.getOptions)(context.getState());
    const setLocalDescriptionEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_LOCAL);
    setLocalDescriptionEvent.addData('operation', _constants2.REPORTER_OPERATION_EVENTS_MAP.REMOVE_MEDIA);
    let newSdp;
    try {
      let offer = await session.createOffer();
      // This is the "pre set local" stage.
      offer.sdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer.sdp, {
        callId,
        type: offer.type,
        step: 'set',
        endpoint: 'local',
        bandwidth
      });
      offer = await session.setLocalDescription(offer);

      // This is the "pre send local" stage.
      // Assign it to a new variable because some browsers enforce the read-only
      //    properties of a RTCSessionDescription object. The object from
      //    setLocalDescription is enforced read-only, but the `offer` before that
      //    is not enforced.
      newSdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer.sdp, {
        callId,
        type: offer.type,
        step: 'send',
        endpoint: 'local',
        bandwidth
      });
    } catch (setLocalError) {
      const error = new _errors.default({
        message: setLocalError.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
      setLocalDescriptionEvent.setError(error);
      setLocalDescriptionEvent.endEvent();
      throw error;
    }
    setLocalDescriptionEvent.endEvent();
    return newSdp;
  }
  return webrtcRemoveMedia;
}

/***/ }),

/***/ 81072:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _replaceTrack = _interopRequireDefault(__webpack_require__(45965));
var _validate = _interopRequireDefault(__webpack_require__(66823));
var _webrtcReplaceTrack = _interopRequireDefault(__webpack_require__(12257));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.replaceTrack', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _replaceTrack.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.replaceTrack', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalReplaceTrack operation.
     * @method LocalReplaceTrack
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local replace track operation.
     */
    function LocalReplaceTrack(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.REPLACE_TRACK,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.replaceTrack.local
      }, {
        callId
      });
    }
    return {
      local: LocalReplaceTrack
    };
  });
  bottle.factory('Callstack.utils.webRtcReplaceTrack', () => (0, _webrtcReplaceTrack.default)(bottle.container));
}

/***/ }),

/***/ 45965:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = replaceTrackOperation;
var _selectors = __webpack_require__(11430);
// Call plugin

// Helpers.

/**
 * Bottle wrapper for replaceTrack call operation.
 * @return {Function}
 */
function replaceTrackOperation(container) {
  const {
    context,
    Callstack,
    logManager
  } = container;
  /**
   *
   * Replaces an existing track with a new track.
   *
   * This function handles the WebRTC portion of replacing a track.
   * Assumptions:
   *    1. The action contains call id, trackId, and mediaConstraints
   * Responsibilities:
   *    1. Creates a new track.
   *    2. Replaces an an existing track with the newly created track.
   *    3. Update call state (via redux actions).
   * @method replaceTrack
   * @param {string} callId The ID of the call to replace the track of.
   * @param {string} trackId The ID of the track to replace.
   * @param {Object} [mediaConstraints={}] The media constraints.
   *
   * @param {Object|boolean} [mediaConstraints.audio] Audio-based constraints object or false.
   * @param {string} [mediaConstraints.audio.deviceId] ID of the microphone to receive audio from.
   *
   * @param {Object|boolean} [mediaConstraints.video] Video-based constraints object or false.
   * @param {string} [mediaConstraints.video.deviceId] ID of the camera to receive video from.
   * @param {string} [mediaConstraints.video.width] The width of the video.
   * @param {string} [mediaConstraints.video.height] The height of the video.
   * @param {string} [mediaConstraints.video.frameRate] The frame rate of the video.
   *
   * @param {Object|boolean} [mediaConstraints.screen] Screen Share-based constraints object or false.
   * @param {string} [mediaConstraints.screen.width] The width of the video.
   * @param {string} [mediaConstraints.screen.height] The height of the video.
   * @param {string} [mediaConstraints.screen.frameRate] The frame rate of the video.
   *
   * @param {Array} [mediaConstraints.medias] List of medias containing tracks to be attached to this call.
   */
  async function replaceTrack(callId, trackId, mediaConstraints) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Replacing track on call.');
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    let result;
    try {
      result = await Callstack.utils.webRtcReplaceTrack({
        sessionId: targetCall.webrtcSessionId,
        trackId,
        mediaConstraints
      });
    } catch (error) {
      log.info('Failed to replace track on call.');
      throw error;
    }
    const {
      newTrackId,
      oldTrackState
    } = result;
    return {
      newTrackId,
      oldTrackState
    };
  }
  return replaceTrack;
}

/***/ }),

/***/ 66823:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} state SDK state.
 * @param {Object} callId The ID the SDK uses to identify the call.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */
function validate(state, callId, trackId, mediaConstraints) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `replaceTrack` operation validation:
   *    1. Call must exist.
   *    2. Call  must not be `Cancelled`, `Ended` or `Initiating` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if ([_constants.CALL_STATES.CANCELLED, _constants.CALL_STATES.ENDED, _constants.CALL_STATES.INITIATING].includes(call.state)) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call is in an invalid state: ${call.state}.`
    });
  }
}

/***/ }),

/***/ 12257:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = webrtcReplaceTrackOperation;
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Bottle wrapper for "webrtc ReplaceTrack" operation.
 * @return {Function}
 */
function webrtcReplaceTrackOperation(container) {
  const {
    context,
    logManager,
    WebRTC
  } = container;

  /**
   * Performs the webRTC responsibilities for replacing a track.
   *
   * @param {Object} params
   * @param {string} params.sessionId The id of the session to replace the track of.
   * @param {string} params.trackId The id of the track to replace.
   * @param  {Object} params.mediaConstraints Video or audio media constraints.
   * @param  {Object|boolean} params.mediaConstraints.audio Audio configs.
   * @param  {Object|boolean} params.mediaConstraints.video Video configs.
   * @param  {Object|boolean} params.mediaConstraints.screenShare Screen sharing configs.
   * @param {Array} [params.mediaConstraints.medias] List of medias containing tracks to be attached to this call.
   * @returns {Object} replaceTrackResult The result of the track replace operation.
   * @returns {string} replaceTrackResult.newTrackId The ID of the new track that we used to replace the old one.
   * @returns {Object} replaceTrackResult.oldTrackState The state of the old track before it was replaced.
   * @throws {BasicError} [replaceTrackResult.error] Error object if track replacment fails.
   */
  async function webrtcReplaceTrack(params) {
    const {
      CallstackWebrtc
    } = container;
    const {
      sessionId,
      trackId,
      mediaConstraints
    } = params;
    const log = logManager.getLogger('CALLSTACK');
    let noOfTruthyTrackTypes = 0;
    let newTrackKind;
    Object.entries(mediaConstraints).forEach(_ref => {
      let [key, value] = _ref;
      if (value) {
        noOfTruthyTrackTypes++;
        newTrackKind = key === 'medias' ? mediaConstraints.medias[0].type : key;
      }
    });

    // Need to handle both cases as valid media constraints, for example:
    //   mediaConstraints = {video: true, audio: false, screenShare: false}
    //   mediaConstraints = {video: true}
    if (noOfTruthyTrackTypes !== 1) {
      // We require exactly one new track to be provided by API.
      throw new _errors.default({
        code: _errors.callCodes.INVALID_PARAM,
        message: `Require exactly one new track type to be specified. Found ${noOfTruthyTrackTypes} track types.`
      });
    }
    let session;
    try {
      session = await WebRTC.sessionManager.get(sessionId);
    } catch (err) {
      /*
       * A WebRTC operation should only throw in Proxy mode when the channel times-out
       *    the operation. Check the first "get" in the saga to catch this problem.
       */
      log.debug(err.message);
      throw err;
    }
    const oldTrack = session.allLocalTracks.find(track => track.id === trackId);
    if (!oldTrack) {
      throw new _errors.default({
        code: _errors.callCodes.INVALID_PARAM,
        message: `Old track ${trackId} not found.`
      });
    }
    const oldTrackState = await oldTrack.getState();
    const oldTrackKind = oldTrackState.kind;
    // At the moment, only video & screen share are compatible tracks that can replace each other.
    // (That's because screen share is sent as a video track to remote peer)
    // Otherwise, the exact media type is required in order to allow a track replacement.
    const compatibleTrackKinds = oldTrackKind === 'audio' && newTrackKind === 'audio' || oldTrackKind === 'video' && ['video', 'screen'].includes(newTrackKind);
    if (!compatibleTrackKinds) {
      throw new _errors.default({
        code: _errors.callCodes.INVALID_PARAM,
        message: `Media constraints incompatible for old track kind: ${oldTrackKind}.`
      });
    }
    let newMedias = [];
    // If detached media is passed in, use that.
    if (mediaConstraints.medias) {
      for (const media of mediaConstraints.medias) {
        newMedias.push({
          type: media.type,
          media: await WebRTC.media.get(media.media.id)
        });
      }
    } else {
      // If no detached media was passed in, create new media.
      try {
        // Create Media
        const call = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), sessionId);
        newMedias = await CallstackWebrtc.createLocal(mediaConstraints, call.id);
      } catch (err) {
        // Error thown from call/callstack/webrtc/media/createLocal
        log.debug('Failed to create local media.');
        throw err;
      }
    }
    let allNewTracks = [];

    // Find the new track that matches the old track we want to replace.
    for (const eachMedia of newMedias) {
      const newTracks = await eachMedia.media.getTracks();
      allNewTracks = [...allNewTracks, ...newTracks];
    }
    let newTrack;
    for (const track of allNewTracks) {
      // Matching the track is done this way because we need to yield to getState,
      //    but we can't yield inside of a `.find(func)` or similar. So iterate
      //    over the new tracks "manually".
      const state = await track.getState();
      if (state.kind === oldTrackKind) {
        newTrack = track;
        break;
      }
    }
    if (!newTrack) {
      throw new _errors.default({
        code: _errors.callCodes.USER_MEDIA_ERROR,
        message: `${oldTrackKind} track not found`
      });
    }

    // Replace the track
    // According to packages/webrtc/src/models/session it can return a failed Promise
    const replaceTrackError = await session.replaceTrack(newTrack, {
      trackId
    });
    if (replaceTrackError) {
      log.debug('Failed to replace track.');
      // If cannot replace old track, cleanup the newly created track
      await newTrack.stop();
      throw new _errors.default({
        code: _errors.callCodes.GENERIC_ERROR,
        message: replaceTrackError.message
      });
    }

    // stop the old track
    await oldTrack.stop();
    return {
      newTrackId: newTrack.id,
      oldTrackState
    };
  }
  return webrtcReplaceTrack;
}

/***/ }),

/***/ 75795:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _resyncCallState = _interopRequireDefault(__webpack_require__(46063));
var _validate = _interopRequireDefault(__webpack_require__(62235));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.resyncCallState', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _resyncCallState.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.resyncCallState', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalResync operation.
     * @method LocalResync
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local resync operation.
     */
    function LocalResync(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.RESYNC,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.resyncCallState.local
      }, {
        callId
      });
    }
    return {
      local: LocalResync,
      // Special-case: The local changes stage can also be called as part of other operations
      //    (notably answer), so expose that stage directly as well.
      stages: {
        // TOOD: This shouldn't be `localOffer`; it's not a negotiation.
        localOffer: (0, _resyncCallState.default)(bottle.container)
      }
    };
  });
}

/***/ }),

/***/ 46063:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = resyncCallStateOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

// Other plugins

/**
 * Bottle wrapper for resyncCallState call operation.
 * @return {Function}
 */
function resyncCallStateOperation(container) {
  const {
    context,
    CallRequests,
    logManager,
    emitEvent
  } = container;
  /**
   * Sends a GET session request and updates the call if necessary.
   * The response to the GET session request contains two properties that can be used for determining the call state:
   *  1. `statusCode` - Code which can be used to provide more info for error responses
   *  2. `state`
   *    a. "RINGING" - Call exists, and can be either accepted or rejected.
   *    b. "ANSWERED" - Call is active, and can be either Connected or Held.
   *
   * This operation performs the signaling operation to get the status of a call session on the server, and any local
   *    WebRTC operations necessary for closing the call if necessary.
   *
   * Responsibilities:
   *    1. Update the call state if the call is out of sync (call's status does not match the response from the server)
   * @method resyncCallState
   * @param {string}   callId        The call being acted on.
   */
  async function resyncCallState(callId) {
    const {
      CallstackWebrtc
    } = container;
    const log = logManager.getLogger('CALL', callId);
    const currentCall = (0, _selectors.getCallById)(context.getState(), callId);
    try {
      const sessionStatusResponse = await CallRequests.getSession({
        wrtcsSessionId: currentCall.wrtcsSessionId,
        id: callId
      });
      if (sessionStatusResponse.state === 'ANSWERED' && currentCall.state !== _constants.CALL_STATES.CONNECTED && currentCall.state !== _constants.CALL_STATES.ON_HOLD) {
        log.info('Call re-sync found that call is cancelled. Cancelling call.');
        // If the call is answered, but not by us, report call as cancelled
        await CallstackWebrtc.closeCall(currentCall.webrtcSessionId);
        const latestCall = (0, _selectors.getCallById)(context.getState(), callId);
        if (latestCall.state !== _constants.CALL_STATES.ENDED && latestCall.state !== _constants.CALL_STATES.CANCELLED) {
          context.dispatch(_actions.callActions.callCancelled(currentCall.id));

          // Notifiy the application that the call has been closed
          emitEvent(eventTypes.CALL_STATE_CHANGE, {
            callId,
            previous: {
              state: latestCall.state,
              localHold: latestCall.localHold,
              remoteHold: latestCall.remoteHold
            }
          });
        }
      } else {
        log.info('Call re-sync found that there are no changes necessary for the call');
        context.dispatch(_actions.callActions.resyncFinish(currentCall.id));
      }
    } catch (error) {
      // Call not found
      if (error.code === 47) {
        log.info('Call re-sync found that the call has ended. Ending Call.');
        // End the call as the session does not exist on the server anymore (statusCode 47 response)
        await CallstackWebrtc.closeCall(currentCall.webrtcSessionId);
        const latestCall = (0, _selectors.getCallById)(context.getState(), callId);
        if (latestCall.state !== _constants.CALL_STATES.ENDED && latestCall.state !== _constants.CALL_STATES.CANCELLED) {
          context.dispatch(_actions.callActions.endCallFinish(currentCall.id, {
            isLocal: true
          }));

          // Tell the application that no tracks are available any longer.
          emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
            callId,
            trackIds: [...currentCall.localTracks, ...currentCall.remoteTracks]
          });

          // 2- 'call state change' event, which updates the state.
          emitEvent(eventTypes.CALL_STATE_CHANGE, {
            callId,
            previous: {
              state: currentCall.state,
              localHold: currentCall.localHold,
              remoteHold: currentCall.remoteHold
            },
            error
          });
        }
      } else {
        // GET response errors other than session not found
        log.info(`Call re-sync failure (${error.code}).`, error);
      }
    }
  }
  return resyncCallState;
}

/***/ }),

/***/ 62235:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */
function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `resyncCallState` operation validation:
   *    1. Call must exist.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call not found; invalid call ID.'
    });
  }
}

/***/ }),

/***/ 11254:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _sendCallAudit = _interopRequireDefault(__webpack_require__(14254));
function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.sendCallAudit', () => {
    // `sendCallAudit` operation returns an object of functions instead of the
    //    operation itself.
    return (0, _sendCallAudit.default)(bottle.container).sendCallAudit;
  });
}

/***/ }),

/***/ 14254:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = sendCallAuditOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants2 = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Bottle wrapper for call audit operation.
 * @return {Function}
 */
function sendCallAuditOperation(container) {
  const {
    context,
    CallstackWebrtc,
    CallRequests,
    logManager,
    emitEvent
  } = container;

  // Global within the scope of this operation. This is the handle returned by the
  // call to `setTimeout` which involves a 4000 ms waiting time.
  let timeoutHandle;
  let successDelay;
  let errorDelay;
  function getAuditDuration(lastAudit) {
    return Date.now() - lastAudit;
  }

  /**
   * This is the first called helper function in a continuous audit loop.
   * It just instantiates the two tasks that are about to be run: a timeout task and a call audit task.
   * These two tasks will be competing against each other to see which one executes first.
   *
   * @param {Object} currentCall The Call's state.
   * @returns {Object} An object containing the two tasks.
   */
  function prepareRaceTriggers(currentCall, wrtcsSessionId) {
    const triggerTimeout = new Promise((resolve, reject) => {
      const result = {
        timeout: 4000
      }; // `value` returned when timeout expires.
      timeoutHandle = setTimeout(resolve, 4000, result);
    });
    const triggerAudit = new Promise((resolve, reject) => {
      // Clear the timeout handle since it is still on-going at this point.
      clearTimeout(timeoutHandle);

      // For Link the function request has the same name.
      // Note that the caller, wrtcsSessionId is not yet available as part of the currentCall,
      // as it was not yet commited in Redux state.
      // This is because the `callAudit` middleware is still in progress at this time.
      // TODO: Replace the logic in determining value for `wrtcsSessionId` with a better way..
      const wrtcsSessionIdToUse = currentCall.isCaller ? wrtcsSessionId : currentCall.wrtcsSessionId;
      CallRequests.auditCall({
        wrtcsSessionId: wrtcsSessionIdToUse,
        isAnonymous: currentCall.isAnonymous,
        account: currentCall.account,
        id: currentCall.id
      }).then(result => {
        resolve({
          audit: {
            status: result.status
          }
        }); // `value` returned when we get a response from request (for either success or failure)
      }).catch(error => {
        // Assume for most of errors we can retry..
        let statusVal = 'Retry';
        // 42  is the 'Not found' error that LINK may return
        if (error && error.code === 42) {
          // We got a 'Not found' error. In this case we can safely assume status is Closed. No need to keep retrying...
          statusVal = 'Closed';
        }
        resolve({
          audit: {
            status: statusVal,
            error
          }
        });
      });
    });
    return {
      triggerTimeout,
      triggerAudit
    };
  }

  /**
   * This is the second helper function invoked as part of the audit loop.
   * @param {Object} value The race result. If audit task completed first, then it will have an audit property, otherwise it will have a timeout property.
   * @param {Object} currentCall The current call we're auditing.
   * @param {number} lastAudit The most recently generated timestamp as returned by: Date.now().
   * @param {Object} log The logger necessary to generate some logs along the way.
   * @returns {number} Milliseconds to wait before next loop. If negative, should not loop again.
   */
  async function handleAuditResult(value, currentCall, lastAudit, log) {
    const config = (0, _selectors.getOptions)(context.getState());
    successDelay = Math.max(10000, config.callAuditTimer);
    errorDelay = Math.min(5000, config.callAuditTimer * 0.45);

    /*
     * Audit response error scenarios include the response having an `error: true` and `status` property.
     *  The status will be either 'Retry' or 'Closed' (depending on statusCode we get from response),
     *  and nothing else. See `auditCall` request implementation in Link.
     * Success scenarios will have `error: false` along with the call's `status`.
     */
    if (value.audit.status === 'Retry') {
      // We have an error but status is not Closed, so we continue sending audit request in hoping audit will recover
      const basicError = value.audit.error;
      const auditDuration = getAuditDuration(lastAudit);
      log.debug(`Call audit failed, caused by ${basicError.message} (${basicError.code}); will retry failed audit for call in: ${errorDelay - auditDuration} ms`);
      return errorDelay - auditDuration;
    } else if (value.audit.status === 'Closed') {
      // If this audit returned 'Closed', then the audit loop should stop right away.
      log.info(`Ending audit loop and Call due to Closed status. Changing to ${_constants.CALL_STATES.ENDED}.`);
      // Hangup call automatically (from webRTC perspective)
      await CallstackWebrtc.closeCall(currentCall.webrtcSessionId);
      const latestCallState = (0, _selectors.getCallById)(context.getState(), currentCall.id);
      if (latestCallState.state !== _constants.CALL_STATES.ENDED && latestCallState.state !== _constants.CALL_STATES.CANCELLED) {
        // Cleanup Redux state by sending END_CALL_FINISH action
        context.dispatch(_actions.callActions.endCallFinish(currentCall.id, {
          isLocal: true,
          transition: {
            statusCode: 9909,
            reasonText: 'Call has ended due to call audit failure.'
          }
        }));

        // Dispatch the same events that are normally triggered by action: END_CALL_FINISH
        // (see `call/callstack/operations/establish/end` operation)

        // 1- 'call operation' event
        emitEvent(eventTypes.CALL_OPERATION, {
          callId: currentCall.id,
          isLocal: true,
          operation: _constants2.OPERATIONS.END,
          transition: _constants2.OP_TRANSITIONS.FINISH,
          previous: {},
          error: undefined
        });

        // Tell the application that no tracks are available any longer.
        emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
          callId: currentCall.id,
          trackIds: [...currentCall.localTracks, ...currentCall.remoteTracks]
        });

        // 2- 'call state change' event, which updates the state.
        emitEvent(eventTypes.CALL_STATE_CHANGE, {
          callId: currentCall.id,
          previous: {
            state: currentCall.state,
            localHold: currentCall.localHold,
            remoteHold: currentCall.remoteHold
          },
          transition: {
            statusCode: 9909,
            reasonText: 'Call has ended due to call audit failure.'
          },
          error: value.audit.error
        });
      }
      // Return a negative number to prevent the task from looping again.
      return -1;
    } else {
      const auditDuration = getAuditDuration(lastAudit);
      log.debug(`Call audit status is ${value.audit.status}. Will retry in ${successDelay - auditDuration} ms`);
      return successDelay - auditDuration;
    }
  }

  /**
   * This is the repeated task executed during each call audit's loop iteration.
   * @param {string} callId The unique call identifier for which we're auditing.
   * @param {string} wrtcsSessionId The ID that the server uses to identify the call.
   */
  async function repeatingTask(callId, wrtcsSessionId) {
    const log = logManager.getLogger('CALL', callId || '');
    let state;
    try {
      /**
       * KJS-2164 TODO: This task should be stopped when the SDK is destroyed,
       *  instead of having to check that state exists
       */
      state = context.getState();
    } catch (e) {
      log.debug('Failed to run repeating task; state has likely been destroyed');
      return;
    }
    const currentCall = (0, _selectors.getCallById)(state, callId);

    // Stop repeating if the Call has already ended or it has been cancelled.
    if ([_constants.CALL_STATES.ENDED, _constants.CALL_STATES.CANCELLED].includes(currentCall.state)) {
      log.info(`Call is in ${currentCall.state} state; stopping audit loop.`);
      return;
    }
    const raceTriggers = prepareRaceTriggers(currentCall, wrtcsSessionId);

    // NOTE: lastAudit value is calculated at the beginning of each loop
    const lastAudit = Date.now();
    return Promise.race([raceTriggers.triggerTimeout, raceTriggers.triggerAudit]).then(value => {
      if (value.timeout) {
        // No need to cancel the audit task since the effect that loses the race is automatically cancelled
        log.debug('Audit request timed out, retrying in 1 second.');
        return 1000;
      } else {
        if (value.audit) {
          return handleAuditResult(value, currentCall, lastAudit, log);
        } else {
          log.debug('Audit loop encountered an unknown scenario; ending.');
          // Return a negative number to prevent the task from looping again.
          return -1;
        }
      }
    }).then(waitTime => {
      // If the resolve has a positive wait time, loop again after that.
      if (waitTime >= 0) {
        setTimeout(function () {
          repeatingTask(callId, wrtcsSessionId);
        }, waitTime);
      }
    });
  }

  /**
   * Performs a call audit and manages the audit loop.
   *
   * This function is responsible for sending a call audit repeatedly on a consistent interval.
   *  Consistency is ensured by calculating the time it takes to perform the actual
   *  audit request, and subtracting that from the configured call audit timer.
   *
   * The function determines which interval to use for the delay between requests by analyzing
   *  the response to the audit request:
   *    - for a successful response we use __Max(10s, configured `callAuditTimer`) - request duration__
   *    - for an error response we use __Min(5s, 45% of `callAuditTimer`) - request duration__
   *    - for a "Closed" status response, we stop the audit loop and tear down the call
   *
   * Responsibilities:
   *    1. Determine if an audit should be sent.
   *        - Check call's state.
   *    2. Perform signaling (if needed).
   *    3. Return the status of the audit
   * @method sendCallAudit
   * @param {string} callId The unique identifier of a call instance.
   * @param {Object} params
   * @param {string} params.wrtcsSessionId The ID that the server uses to identify the call.
   * @return {undefined}
   */
  async function sendCallAudit(callId, params) {
    const wrtcsSessionId = params.wrtcsSessionId;
    const currentCall = (0, _selectors.getCallById)(context.getState(), callId);
    const log = logManager.getLogger('CALL', currentCall ? callId : '');
    // Basic validation
    if (!currentCall) {
      log.debug(`Call ${callId} not found; no audit loop needed.`);
      return;
    }
    log.info('Starting audit loop for new call.');
    repeatingTask(callId, wrtcsSessionId);
  }
  return {
    sendCallAudit,
    prepareRaceTriggers,
    handleAuditResult,
    repeatingTask,
    errorDelay,
    successDelay
  };
}

/***/ }),

/***/ 89851:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _sendCustomParameters = _interopRequireDefault(__webpack_require__(14273));
var _validate = _interopRequireDefault(__webpack_require__(91005));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.sendCustomParameters', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _sendCustomParameters.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.sendCustomParameters', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalSendParameters operation.
     * @method LocalSendParameters
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local send custom parameters operation.
     */
    function LocalSendParameters(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.SEND_CUSTOM_PARAMETERS,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.sendCustomParameters.local
      }, {
        callId
      });
    }
    return {
      local: LocalSendParameters
      // TODO: Handle received custom parameters should be split into a mini-operation.
    };
  });
}

/***/ }),

/***/ 14273:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = sendCustomParametersOperation;
var _selectors = __webpack_require__(11430);
// Call plugin

/**
 * Bottle wrapper for sendCustomParameters call operation.
 * @return {Function}
 */
function sendCustomParametersOperation(container) {
  const {
    context,
    CallRequests,
    logManager
  } = container;

  /**
   * Sends custom parameters for a call.
   * @param {string} callId The ID of the call being acted on.
   * @return {undefined}
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function sendCustomParameters(callId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Sending custom parameters for call.');

    // Get the call.
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const {
      wrtcsSessionId,
      isAnonymous,
      account,
      customParameters
    } = targetCall;
    const callInfo = {
      wrtcsSessionId,
      isAnonymous,
      account,
      customParameters,
      id: callId
    };
    try {
      await CallRequests.updateCustomParameters(callInfo);
      log.info('Finished sending custom parameters.');
    } catch (error) {
      log.info('Failed to send custom parameters.');
      throw error;
    }
  }
  return sendCustomParameters;
}

/***/ }),

/***/ 91005:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} state The SDK state.
 * @param {string} callId The ID used by the SDK to identify the call.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `sendCustomParameters` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Connected` or `On Hold` state.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: `Invalid Call ID. No call found with Call ID: ${callId}`
    });
  } else if (call.state !== _constants.CALL_STATES.CONNECTED && call.state !== _constants.CALL_STATES.ON_HOLD) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call in invalid state for sending custom parameters. Call state: ${call.state}`
    });
  } else {
    const {
      customParameters
    } = call;
    if (!customParameters) {
      return new _errors.default({
        code: _errors.callCodes.INVALID_STATE,
        message: `No custom parameters set on call: ${callId}.`
      });
    }
  }
}

/***/ }),

/***/ 56792:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _sendDtmf = _interopRequireDefault(__webpack_require__(93367));
var _validate = _interopRequireDefault(__webpack_require__(18515));
var _constants = __webpack_require__(37409);
function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.sendDtmf', () => {
    return {
      local: {
        validate: _validate.default,
        // TODO: This operation isn't a negotiation, so we shouldn't be naming
        //    a stage with WebRTC negotiation terms. But this is the method
        //    name the `localOperation` flow uses.
        localOffer: (0, _sendDtmf.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.sendDtmf', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalSendDtmf operation.
     * @method LocalSendDtmf
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local send DTMF operation.
     */
    function LocalSendDtmf(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.SEND_DTMF,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: bottle.container.Callstack.stages.sendDtmf.local
      }, {
        callId
      });
    }
    return {
      local: LocalSendDtmf
    };
  });
}

/***/ }),

/***/ 4140:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.playInBand = playInBand;
exports.playOutBand = playOutBand;
var _tones = __webpack_require__(39858);
/**
 * Sends DTMF tones out-of-band over a Session.
 *
 * The Callstack implementation uses the WebRTC stack's implementation for this.
 *    There is no signaling involved.
 *
 * @method playOutBand
 * @param  {Session} session A Webrtc Session object.
 * @param  {Object}  options
 * @param  {string}  options.tone           The tone sequence.
 * @param  {number}  [options.duration]     The length of each DTMF tone.
 * @param  {number}  [options.intertoneGap] The gap between each DTMF tone.
 * @return {boolean} Whether the operation was successful or not.
 */
async function playOutBand(session, options) {
  return await session.sendDTMF(options);
}

/**
 * Sends DTMF tones in-band over a Session.
 *
 * DTMF tones are added to the audio track by using AudioContext nodes. A
 *    MediaStream is converted into an audio node, which allows us to add more
 *    audio inputs into the node. The original audio and DTMF tones are mixed
 *    into a single node this way, and the track from this node temporarily
 *    replaces the original track in the Session.
 *
 *                       +-------------------------+
 *    Original           | Additional Audio Source |
 *   MediaStream         +---------+---------------+
 *       |                         |
 *       |                         |
 *       v                         v
 * +-----+-------+         +-------+----------+
 * | Source Node +-------->| Destination Node |
 * +-------------+         +-------+----------+
 *                                 |
 *                                 |
 *                                 v
 *                         MediaStream w/ DTMF
 *
 * @method playInBand
 * @param  {Session} session A Webrtc Session object.
 * @param  {Object}  options
 * @param  {string}  options.tone           The tone sequence.
 * @param  {number}  [options.duration=100]     The length of each DTMF tone.
 * @param  {number}  [options.intertoneGap=70]  The gap between each DTMF tone.
 * @return {boolean} Whether the operation was successful or not.
 */
async function playInBand(session, options) {
  let {
    tone,
    duration,
    intertoneGap: gap
  } = options;

  // Ensure optional options are numbers (not strings). If not numbers, or
  //    undefined, use default values.
  duration = Number(duration) > 0 ? Number(duration) : 100;
  gap = Number(gap) > -1 ? Number(gap) : 70;

  // Get the (native) track the tones will be inserted into.
  const track = session.localTracks.find(track => {
    const state = track.getState();
    return state.kind === 'audio';
  });
  const stream = track.getStream();
  const context = new AudioContext();

  // Create a source node that has the stream media.
  const source = context.createMediaStreamSource(stream);

  /**
   * Create the "destination node". All audio sources will be connected to This
   *    node, and it will be used as the "final output".
   */
  const dest = context.createMediaStreamDestination();
  // Connect the source node to it, so that it has the original audio.
  source.connect(dest);

  // Get the track from the destination node and replace the original track
  //    on the PeerConnection with it. The remote endpoint will now receive
  //    any/all audio that is connected to the destination node.
  const newTrack = dest.stream.getAudioTracks()[0];
  await session.peer.replaceTrack(newTrack, {
    trackId: track.id
  });

  // Add the DTMF tones to the destination node.
  await (0, _tones.addTones)(context, dest, tone, {
    duration,
    gap
  });

  // Un-replace track on the PeerConnection. This resets the tracks back to
  //    "normal".
  await session.peer.replaceTrack(track.track, {
    trackId: newTrack.id
  });

  // Clean-up the AudioContext nodes.
  context.close();
  return true;
}

/***/ }),

/***/ 93367:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createDtmfOperation;
var _playMethods = __webpack_require__(4140);
var _hasTelephoneEvent = _interopRequireDefault(__webpack_require__(78692));
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// import { addTone, convertTone, splitTones } from './tones'

// Call plugin.

// Other plugins.

/**
 * Bottle wrapper for sendDtmf call operation.
 * @return {Function}
 */
function createDtmfOperation(container) {
  const {
    context,
    logManager,
    WebRTC
  } = container;

  /**
   * Operation for sending DTMF tones on a call.
   * Determines if the DTMF tones need to be out-of-band (preferred) or in-band.
   *    Refers to helper functions to send the tones.
   *
   * Responsibilities:
   *    1. Validate the operation is currently possible.
   *    2. Determine if out-of-band tones are possible for the call.
   *    3. Send the tones, depending on method available.
   * @async
   * @method sendDtmf
   * @param {string} callId ID for the Call.
   * @param {string} tone The tone(s) to be sent.
   * @param {Object} options
   * @param {number} options.duration How long each tone should be played for.
   * @param {number} options.intertoneGap How long in between of each tone.
   * @return {undefined}
   * @throws {BasicError} Throws INVALID_PARAM if call does not exist.
   * @throws {BasicError} Throws INVALID_STATE if call is in the wrong state.
   * @throws {BasicError} Throws INVALID_PARAM if tone is not a valid DTMF tone.
   * @throws {BasicError} Throws GENERIC_ERROR if sending the tone fails.
   */
  async function sendDtmf(callId, tone) {
    let {
      duration,
      intertoneGap
    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const log = logManager.getLogger('CALL', callId);
    const call = (0, _selectors.getCallById)(context.getState(), callId);

    // Get the webrtc Session for the call.
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    // Get the remote description for the Session.
    const remoteDesc = await session.getRemoteDescription();
    const canSendOutBand = (0, _hasTelephoneEvent.default)(remoteDesc.sdp);
    try {
      if (canSendOutBand) {
        log.debug(`Sending DTMF tones out-of-band for call ${call.id}.`);
        await (0, _playMethods.playOutBand)(session, {
          tone,
          duration,
          intertoneGap
        });
      } else {
        log.debug(`Sending DTMF tones in-band for call ${call.id}.`);
        await (0, _playMethods.playInBand)(session, {
          tone,
          duration,
          intertoneGap
        });
      }
      log.info(`Successfully sent DTMF tones for call ${call.id}.`);
    } catch (err) {
      log.debug(`Failed to send DTMF tones for call ${call.id}.`);
      throw new _errors.default({
        code: _errors.callCodes.GENERIC_ERROR,
        message: `Unable to send DTMF tones for call ${call.id}.`
      });
    }
  }
  return sendDtmf;
}

/***/ }),

/***/ 39858:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addTones = addTones;
exports.convertTone = convertTone;
exports.splitTones = splitTones;
/**
 * Converts a single tone input to its dual-frequencies.
 * @method convertTone
 * @param  {string} tone A DTMF tone input character.
 * @return {Array} The set of frequencies for the DTMF tone.
 */
function convertTone(tone) {
  if (typeof tone !== 'string' || tone.length > 1 || !/[\d*#]+/.test(tone)) {
    throw new Error('Invalid input for DTMF tone.');
  }
  switch (tone) {
    case '1':
      return ['697', '1209'];
    case '2':
      return ['697', '1336'];
    case '3':
      return ['697', '1477'];
    case '4':
      return ['770', '1209'];
    case '5':
      return ['770', '1336'];
    case '6':
      return ['770', '1477'];
    case '7':
      return ['852', '1209'];
    case '8':
      return ['852', '1336'];
    case '9':
      return ['852', '1477'];
    case '0':
      return ['941', '1336'];
    case '*':
      return ['941', '1209'];
    case '#':
      return ['941', '1477'];
  }
}

/**
 * Splits a DTMF tone sequence into individual tones.
 * @method splitTones
 * @param  {string} tone A DTMF tone string.
 * @return {Array} List of single-character tones.
 */
function splitTones(tone) {
  const matches = tone.match(/[\d*#]+/);
  if (!matches || matches[0] !== tone) {
    throw new Error('Invalid characters in tone.');
  }
  return tone.split('');
}

/**
 * Generates DTMF tones based on input, and connects the audio to the provided
 *    target node.
 * @method addTones
 * @param  {AudioContext} context      The AudioContext being used.
 * @param  {AudioNode} targetNode      The AudioNode to add DTMF tones to.
 * @param  {string} tones              The input tones.
 * @param  {Object} [options]
 * @param  {number} [options.duration] The length of each DTMF tone.
 * @param  {number} [options.gap]      The gap between each DTMF tone.
 */
async function addTones(context, targetNode, tones, options) {
  /**
   * Node Diagram:
   * +--------------+
   * | Oscillator 1 +--+
   * +--------------+  |    +--------------+
   *                   +--->|   Osc Node   |
   * +--------------+  |    +------+-------+
   * | Oscillator 2 +--+           |
   * +--------------+              | Connect generated audio
   *                               v to the provided node.
   *                        +------+--------+
   *                        |  Target Node  |
   *                        +---------------+
   */

  /**
   * Step 1: Setup the audio nodes.
   */
  // Create the Oscillator nodes that will generate the frequencies.
  const oscillators = [context.createOscillator(), context.createOscillator()];
  oscillators[0].type = 'sine';
  oscillators[1].type = 'sine';

  /**
   * Create an intermediary Gain node to control the volume of the oscillator
   *   frequencies before connecting them to anything else.
   */
  const oscNode = context.createGain();
  oscillators[0].connect(oscNode);
  oscillators[1].connect(oscNode);
  oscNode.gain.value = 0.1;

  // Connect the combined oscillators to the target node. Any tones created
  //    by the oscillators will be heard in the target node.
  oscNode.connect(targetNode);

  // Connect the oscillators to the "destination" as well, which works magically.
  // `context.destination` connects to the "default destination" (or something
  //    like that), which will be the machine's speakers. This will play the
  //    audio locally.
  oscNode.connect(context.destination);

  /**
   * Step 2: Use the oscillators to generate DTMF tones.
   */

  /**
   * Schedule a frequency to be played for a period of time.
   * @method scheduleTone
   * @param  {number} tone  A frequency.
   * @param  {number} start When the tone should start.
   * @param  {number} dur   The duration of the tone, in seconds.
   */
  function scheduleTone(tone, start, dur) {
    oscillators[0].frequency.setValueAtTime(tone[0], start);
    oscillators[0].frequency.setValueAtTime(0, start + dur);
    oscillators[1].frequency.setValueAtTime(tone[1], start);
    oscillators[1].frequency.setValueAtTime(0, start + dur);
  }
  const toneSequence = splitTones(tones).map(convertTone);

  // Convert the time units to seconds.
  const dur = options.duration / 1000;
  const gap = options.gap / 1000;
  let toneStart = context.currentTime;
  for (let i = 0; i < toneSequence.length; i++) {
    scheduleTone(toneSequence[i], toneStart, dur);
    toneStart = toneStart + dur + gap;
  }

  // Start playing the scheduled tones.
  oscillators[0].start();
  oscillators[1].start();

  /**
   * Step 3: Clean-up the audio nodes.
   */

  // Wait until all tones have finished playing.
  const numTones = toneSequence.length;
  const delayTime = numTones * (options.duration + options.gap);
  await new Promise(resolve => {
    setTimeout(resolve, delayTime);
  });

  // Disconnect all nodes from each other.
  oscNode.disconnect();
  oscillators[0].stop();
  oscillators[0].disconnect();
  oscillators[1].stop();
  oscillators[1].disconnect();
}

/***/ }),

/***/ 18515:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} call The call being operated on.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */

function validate(state, callId, tone) {
  let {
    duration,
    intertoneGap
  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `sendDtmf` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Connected`, `Ringing`, or `Early Media` state.
   *    3. A valid tone was provided.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (![_constants.CALL_STATES.CONNECTED, _constants.CALL_STATES.RINGING, _constants.CALL_STATES.EARLY_MEDIA].includes(call.state)) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: `Call is in an invalid state (${call.state}).`
    });
  } else if (!tone || !/^[\d*#]+/.test(tone)) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'No DTMF tone specified.'
    });
  }
}

/***/ }),

/***/ 40367:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _sendRingingFeedback = _interopRequireDefault(__webpack_require__(53516));
var _validate = _interopRequireDefault(__webpack_require__(97965));
var _callStatusUpdateRinging = _interopRequireDefault(__webpack_require__(43846));
var _constants = __webpack_require__(37409);
// Local operation.

// Remote operation.

// Call plugin.

function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.sendRingingFeedback', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a LocalSendFeedback operation.
     * @method LocalSendFeedback
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a local send ringing feedback operation.
     */
    function LocalSendFeedback(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.SEND_RINGING_FEEDBACK,
        isNegotiation: false,
        isLocal: true,
        // Operation methods.
        stages: {
          validate: _validate.default,
          // TODO: This operation isn't a negotiation, so we shouldn't be naming
          //    a stage with WebRTC negotiation terms. But this is the method
          //    name the `localOperation` flow uses.
          localOffer: (0, _sendRingingFeedback.default)(bottle.container)
        }
      }, {
        callId
      });
    }
    return {
      local: LocalSendFeedback
    };
  });

  // Register the handler for the "call ringing" notitication.
  bottle.factory('Callstack.notifications.callStatusUpdateRinging', () => (0, _callStatusUpdateRinging.default)(bottle.container));
}

/***/ }),

/***/ 53516:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = sendRingingFeedbackOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
// Call plugin

// Other plugins

/**
 * Bottle wrapper for sendRingingFeedback call operation.
 * @return {Function}
 */
function sendRingingFeedbackOperation(container) {
  const {
    context,
    CallRequests,
    logManager
  } = container;
  /**
   * Sends ringing feedback to the server for an incoming, Initiated call.
   *
   * This saga defines how/when a call can send ringing feedback to the remote user.
   *    It performs signaling to send this notification to the server, which forwards
   *    it to the remote side of the call.
   * Assumptions:
   *    1. The call is in Initiated state.
   *    2. The call's direction is incoming.
   *    3. The SDK is configured `ringingFeedbackMode: 'manual'`.
   * Responsibilities:
   *    1. Perform signaling.
   *    2. Update call state (via redux action).
   * @method sendRingingFeedback
   * @param {string}   callId        The id for the call sending ringing feedback.
   */
  async function sendRingingFeedback(callId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Sending ringing feedback for incoming call.');
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const callInfo = {
      wrtcsSessionId: targetCall.wrtcsSessionId,
      id: targetCall.id
    };
    try {
      await CallRequests.updateCallRinging(callInfo);
    } catch (error) {
      log.info(`Failed to send ringing feedback: ${error.code}: ${error.message}`);
      throw error;
    }
    log.info(`Ringing feedback sent. Changing call to ${_constants.CALL_STATES.RINGING} state.`);
  }
  return sendRingingFeedback;
}

/***/ }),

/***/ 97965:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} state The SDK state.
 * @param {string} callId The ID used by the SDK to identify the call.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */
function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  const options = (0, _selectors.getOptions)(state);
  /*
   * `sendRingingFeedback` operation validation:
   *    1. Call must exist.
   *    2. Call must be in `Initiated` state.
   *    3. Call must be `Incoming` direction.
   */
  if (!call) {
    return new _errors.default({
      message: `Failed to send ringing feedback. Call ${callId} not found.`,
      code: _errors.callCodes.INVALID_PARAM
    });
  } else if (options.ringingFeedbackMode !== 'manual') {
    return new _errors.default({
      message: "Failed to send ringing feedback. Configuration must be set to 'manual' mode.",
      code: _errors.callCodes.NOT_SUPPORTED
    });
  } else if (call.state !== _constants.CALL_STATES.INITIATED) {
    return new _errors.default({
      message: `Failed to send ringing feedback. Call must be in ${_constants.CALL_STATES.INITIATED} state.`,
      code: _errors.callCodes.INVALID_STATE
    });
  } else if (call.direction !== _constants.CALL_DIRECTION.INCOMING) {
    return new _errors.default({
      message: 'Failed to send ringing feedback. Call must be incoming.',
      code: _errors.callCodes.INVALID_STATE
    });
  }
}

/***/ }),

/***/ 43846:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = callStatusRingingOperation;
var _actions = __webpack_require__(6313);
var _eventTypes = __webpack_require__(55166);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(60683);
var _constants3 = __webpack_require__(42750);
// Call plugin.

/**
 * Bottle wrapper for "call status ringing" notification handler.
 * @return {Function}
 */
function callStatusRingingOperation(container) {
  const {
    context,
    CallReporter,
    emitEvent,
    logManager
  } = container;

  /**
   * A "call status update" has been received and needs to be handled.
   * The update specifies the server session is in "ringing" state.
   *
   * This operation handles the "call ringing" notification by updating the local
   *    session state to match the server session state. This only affects the
   *    local call state.
   * Responsibilities:
   *    1. Update call state to RINGING (via redux action).
   *    2. Emit event to application.
   * @method callStatusUpdateRinging
   * @param {string} wrtcsSessionId ID that the server uses to identify the session.
   * @param {Object} [params={}]
   * @param {string} params.remoteName   Name of the remote participant.
   * @param {string} params.remoteNumber Number of the remote participant.
   * @param {Array}  params.customParameters
   */
  function callStatusUpdateRinging(wrtcsSessionId) {
    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', (call || {}).id);
    log.info('Received call status ringing notice; handling.', {
      wrtcsSessionId
    });
    if (!call) {
      log.info('Call ringing notice for unknown wrtcsSession. Ignoring.', {
        wrtcsSessionId
      });
      return;
    } else if (call.state !== _constants2.CALL_STATES.INITIATED) {
      log.info(`Call ringing notice for Call in an invalid state: ${call.state}. Ignoring.`);
      return;
    }
    const callReport = CallReporter.getReport(call.id);
    const makeOrJoinOp = call.currentOperations.find(op => {
      return op.isLocal && (op.type === _constants.OPERATIONS.MAKE || op.type === _constants.OPERATIONS.MAKE_ANONYMOUS || op.type === _constants.OPERATIONS.JOIN);
    });
    const operationEvent = callReport.getEvent(makeOrJoinOp.eventId);
    const receiveRingingEvent = operationEvent.addEvent(_constants3.REPORT_EVENTS.REMOTE_RINGING);

    // Dispatch a custom parameters received action/event if any custom parameters were
    //    received as part of the notification
    if (params.customParameters) {
      const customNames = params.customParameters.map(param => param.name);
      log.debug(`Received custom parameters as part of the Call: ${customNames}.`);
      context.dispatch(_actions.callActions.customParametersReceived(call.id, {
        customParameters: params.customParameters
      }));
      emitEvent(_eventTypes.CUSTOM_PARAMETERS, {
        callId: call.id,
        customParameters: params.customParameters
      });
    }
    log.info(`Finished handling call ringing notice. Changing to ${_constants2.CALL_STATES.RINGING}.`);
    context.dispatch(_actions.callActions.callRinging(call.id, {
      // Remote participant's information.
      remoteParticipant: {
        displayNumber: params.remoteNumber,
        displayName: params.remoteName
      }
    }));
    emitEvent(_eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: call.localHold,
        remoteHold: call.remoteHold
      }
    });
    receiveRingingEvent.endEvent();
  }
  return callStatusUpdateRinging;
}

/***/ }),

/***/ 32132:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createSlowFinishHandler;
var _state = __webpack_require__(65794);
var _hasMediaFlowing = _interopRequireDefault(__webpack_require__(43393));
var _remoteTracks = _interopRequireDefault(__webpack_require__(45294));
var _constants = __webpack_require__(60683);
var _constants2 = __webpack_require__(37409);
var callActions = _interopRequireWildcard(__webpack_require__(77202));
var actionTypes = _interopRequireWildcard(__webpack_require__(39100));
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants3 = __webpack_require__(42750);
var _selectors = __webpack_require__(30105);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

/**
 * Operation for the answer of a slow-start negotiation.
 *
 * A "call update response" has been received and needs to be handled.
 * The response is for a remote operation, so this a slow start webRTC scenario.
 *
 * This operation is intended to process all "call update responses", that are from
 *    remote operations, received from the call's remote side. This represents
 *    the end of slow start webRTC negotiation process for the local side.
 * Handling the response will affect the call's media, and the call state will
 *    be updated depending on the new media and the current call state.
 */
function createSlowFinishHandler(container) {
  const {
    context,
    WebRTC,
    Callstack,
    CallstackSDP,
    CallstackWebrtc,
    emitEvent,
    logManager,
    CallReporter
  } = container;

  /**
   * Operation flow handler.
   */
  async function operation(call, params) {
    /*
     * Now that we have the remote SDP, we can compare the previous SDP and the
     *    new SDP to determine what the remote operation is.
     */
    const opInfo = await getOpInfo(call, params.sdp);

    // Handle the remote answer SDP for the slow-start operation.
    const session = await onSlowFinish(call, opInfo.sdp);

    // Handle state changes and/or events to be emitted.
    await handleUpdates(call, params, opInfo, session);
  }

  /**
   * Helper function to get information about the operation.
   * Mostly a wrapper around `getRemoteOperationInfo`.
   *
   * @method getOpInfo
   * @param {Object} call
   * @param {Object} params
   * @param {Object} params.sdp
   * @return {Object} opInfo
   * @return {string} opInfo.remoteOp The type of operation.
   * @return {MediaDiff} opInfo.mediaDiff
   * @return {SDP} opInfo.remoteDesc The remote SDP.
   */
  async function getOpInfo(call, sdp) {
    const log = logManager.getLogger('CALL', call.id);

    /*
     * Determine what the remote operation was. The remote operation and our
     *    current local state will affect how we update the call's state.
     */
    let {
      remoteOp,
      mediaDiff,
      remoteDesc
    } = await Callstack.utils.getRemoteOperationInfo(call, sdp);
    const mediaState = (0, _state.getMediaState)(call);
    log.info(`Handling state change as remote ${remoteOp} in ${mediaState} scenario.`);

    /*
     * If the remote operation was an unhold and we're in a dual hold scenario,
     *    then make sure the remote SDP can't restart media. Do this by ensuring
     *    that all media directions in the remote SDP are inactive.
     *
     * This won't affect the remote end, but it prevents the local side from
     *    thinking it is receiving a track when it shouldn't be.
     *
     * This can occur during slow start renegotiation, if the server doesn't
     *    respect the media directions we set (assuming we set them correctly).
     */
    if (remoteOp === _constants2.OPERATIONS.UNHOLD && call.localHold === true) {
      const undesired = ['sendrecv', 'sendonly', 'recvonly'];
      // If any undesirable direction is found in the SDP, replace it with inactive.
      if (undesired.some(dir => sdp.includes(dir))) {
        log.debug('Modifying remote SDP to prevent media in local hold scenario.');
        sdp = sdp.replace(/sendrecv|sendonly|recvonly/gi, 'inactive');
        // Update the `mediaDiff` after we modified the SDP.
        mediaDiff = CallstackSDP.compareMedia(remoteDesc.sdp, sdp, true);
      }
    }
    return {
      remoteOp,
      mediaDiff,
      remoteDesc,
      sdp
    };
  }

  /**
   * Function for handling the WebRTC negotiation and Gateway signaling aspects
   *    of the operation. Processes the remote answer SDP.
   *
   * @method onSlowFinish
   * @param {Call} call
   * @param {SDP} sdp
   * @return {Session} WebRTC-stack Session.
   */
  async function onSlowFinish(call, sdp) {
    const log = logManager.getLogger('CALL', call.id);
    log.info('Processing remote response from slow-start remote update request.');
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }
    const callReport = CallReporter.getReport(call.id);
    const operation = call.currentOperations.find(op => {
      // always look for remote side
      return !op.isLocal && op.type === _constants2.OPERATIONS.SLOW_START;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const setRemoteDescriptionEvent = operationEvent.addEvent(_constants3.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    setRemoteDescriptionEvent.addData('operation', operationEvent.type);
    try {
      await CallstackWebrtc.receivedAnswer({
        sessionId: call.webrtcSessionId,
        answerSdp: sdp
      }, call);
      setRemoteDescriptionEvent.endEvent();
    } catch (error) {
      log.debug('Failed to receive answer SDP', error);
      setRemoteDescriptionEvent.endEvent(error);
      // TODO: Dispatch an error action to notify of the error scenario.
      // The call may now be in a bad state and needs to be fixed.
      throw error;
    }
    const mediaFlowing = (0, _hasMediaFlowing.default)(sdp);
    const nextState = mediaFlowing ? _constants.CALL_STATES.CONNECTED : _constants.CALL_STATES.ON_HOLD;
    log.info(`Finished processing remote slow-start response. Changing to ${nextState}.`);
    return session;
  }

  /*
   * Function to handle the state changes and events related to a slow-start
   *    operation. The slow-start operation could be any of the other operations,
   *    so this is really just a copy/paste of how the other operations handle
   *    their changes.
   *
   * TODO: Make use of other operation handling instead of duplicating the logic
   *    here.
   */
  async function handleUpdates(call, params, opInfo, session) {
    const {
      remoteOp,
      mediaDiff
    } = opInfo;

    // Get the list of remote tracks that are changing (either added or removed) as
    //    part of the remote operation. This is done after `handleOffer` so the
    //    Transceivers are up-to-date with the changes being offered.
    const remoteTracks = await (0, _remoteTracks.default)(remoteOp, mediaDiff, session);
    let localTracks = [];
    // If we're not in dual-hold (ie. we will be entering or leaving ON_HOLD), then
    //    local tracks will be affected
    if (!call.localHold && [_constants2.OPERATIONS.HOLD, _constants2.OPERATIONS.UNHOLD].includes(remoteOp)) {
      // For local tracks, just need to get the local tracks the Session has.
      const sessionState = (0, _selectors.getSessionById)(context.getState(), call.webrtcSessionId);
      localTracks = sessionState.localTracks;
    }
    const mediaFlowing = (0, _hasMediaFlowing.default)(params.sdp);
    const nextState = mediaFlowing ? _constants.CALL_STATES.CONNECTED : _constants.CALL_STATES.ON_HOLD;
    const actionCreator = getActionCreator(remoteOp);
    context.dispatch(actionCreator(call.id, {
      state: nextState,
      // Remote participant's information.
      remoteParticipant: {
        displayNumber: params.remoteNumber,
        displayName: params.remoteName
      },
      // Add the remote tracks to the call state.
      remoteTracks: remoteTracks,
      localTracks: localTracks
    }));
    if (_constants2.OPERATIONS.HOLD === remoteOp) {
      // The call has changed to a new state.
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        }
      });

      // All local and remote tracks have become unavailable.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: [...localTracks, ...remoteTracks]
      });
    } else if (_constants2.OPERATIONS.UNHOLD === remoteOp) {
      // The call has changed to a new state.
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        }
      });

      // The affected tracks are now available on the call.
      emitEvent(eventTypes.CALL_TRACKS_ADDED, {
        callId: call.id,
        trackIds: [...localTracks, ...remoteTracks]
      });
    } else if ([_constants2.OPERATIONS.ADD_MEDIA, _constants2.OPERATIONS.START_MOH].includes(remoteOp)) {
      // New remote tracks have become available.
      emitEvent(eventTypes.CALL_TRACKS_ADDED, {
        callId: call.id,
        trackIds: remoteTracks
      });
    } else if ([_constants2.OPERATIONS.REMOVE_MEDIA, _constants2.OPERATIONS.STOP_MOH].includes(remoteOp)) {
      // Remote tracks have become unavailable.
      emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
        callId: call.id,
        trackIds: remoteTracks
      });
    }
  }
  function getActionCreator(remoteOp) {
    // Maps operations to actions.
    const actionMap = {
      [_constants2.OPERATIONS.HOLD]: callActions.remoteHoldFinish,
      [_constants2.OPERATIONS.UNHOLD]: callActions.remoteUnholdFinish,
      [_constants2.OPERATIONS.ADD_MEDIA]: callActions.remoteAddMediaFinish,
      [_constants2.OPERATIONS.REMOVE_MEDIA]: callActions.remoteRemoveMediaFinish,
      [_constants2.OPERATIONS.START_MOH]: callActions.remoteStartMohFinish,
      [_constants2.OPERATIONS.STOP_MOH]: callActions.remoteStopMohFinish,
      [_constants2.OPERATIONS.SLOW_START]: callActions.remoteSlowStart
    };
    return function createAction() {
      const actionCreator = actionMap[remoteOp] || callActions.updateCall;
      const action = actionCreator(...arguments);
      if (action.type === actionTypes.UPDATE_CALL) {
        /*
         * This is a hack. The proper solution would be to never use a generic action for state changes.
         * This action doesn't work with the SDK's "operation tracking" logic in the call reducers, so
         *     the call state becomes out-of-sync with the operations.
         *  In this scenario, the operation start was a remote slow-start negotiation, but the SDK fails
         *      to determine what the actual operation was, so it falls-back to using the generic action
         *      for the "finish". This means that the remoteOp in state never gets cleaned-up, which can
         *      cause issues later.
         *  The workaround is to mark the action as a remote update action, so that the reducer can
         *      manually clean-up the remote operation in this scenario.
         * Reference: KJS-542, , KJS-571
         */
        action.meta = {
          isRemote: true
        };
      }
      return action;
    };
  }
  return operation;
}

/***/ }),

/***/ 99051:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _start = _interopRequireDefault(__webpack_require__(88453));
var _finish = _interopRequireDefault(__webpack_require__(32132));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.slowStart', () => {
    return {
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _start.default)(bottle.container),
        remoteAnswer: (0, _finish.default)(bottle.container)
      }
    };
  });
  // Remote-only "slow start" operation.
  bottle.factory('Callstack.operations.slowStart', () => {
    const opFactory = bottle.container.Callstack.models.Operation;

    /**
     * Factory function for a RemoteSlowStart operation.
     * @method RemoteSlowStart
     * @param {string} callId ID for the call this operation will affect.
     * @return {Operation} An instance of a remote hold operation.
     */
    function RemoteSlowStart(callId) {
      return opFactory.instance({
        // Operation meta-data.
        type: _constants.OPERATIONS.SLOW_START,
        isNegotiation: true,
        isLocal: false,
        // Operation methods.
        stages: bottle.container.Callstack.stages.slowStart.remote
      }, {
        callId
      });
    }
    return {
      remote: RemoteSlowStart
    };
  });
}

/***/ }),

/***/ 88453:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createSlowStartHandler;
var _state = __webpack_require__(65794);
var _selectors = __webpack_require__(11430);
var callActions = _interopRequireWildcard(__webpack_require__(77202));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Operation for the "offer" of a slow-start negotiation.
 *
 * A "call update request" has been received and needs to be handled.
 * The request does not include an SDP, so this is a slow start webRTC scenario.
 *
 * This function is intended to process all "call update requests", that have no
 *    SDP, received from the call's remote side. It is assumed the call has
 *    already been established, so this represents the start of the slow start
 *    webRTC renegotiation process for the local side.
 * Handling the request will not affect the call's media at this point. As
 *    opposed to regular negotiation, we require an additional "call response"
 *    notification before negotiation is complete. Media and call state will
 *    only be affected by that response notification.
 */
function createSlowStartHandler(container) {
  const {
    context,
    WebRTC,
    CallstackWebrtc,
    CallRequests,
    logManager
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - dispatche action (no state change?)
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber The display number of the remote endpoint.
   * @param {string} params.remoteName The display name of the remote endpoint.
   * @return {undefined}
   */
  async function operation(call, params) {
    try {
      await onSlowStart(call, params);

      /*
       * The operation is not complete until we receive a response to our offer. The
       *    response will be handled by the `slowStart/finish` handler.
       */
      context.dispatch(callActions.remoteSlowStart(call.id, {
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        }
      }));
    } catch (error) {
      context.dispatch(callActions.remoteSlowStart(call.id, {
        remote: true,
        error
      }));

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Function for handling the WebRTC negotiation and Gateway signaling aspects
   *    of the operation. Creates a new offer SDP and sends it to the Gateway.
   *
   * @method onSlowStart
   * @param {Object} call The call being acted on.
   * @param {Object} params       Parameters of the update request.
   * @param {string} params.remoteNumber Number of the remote participant.
   * @param {string} params.remoteName   Name of the remote participant.
   */
  async function onSlowStart(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    log.info('Processing slow-start update request from remote endpoint.');
    const mediaState = (0, _state.getMediaState)(call);
    log.debug(`Current call info; State: ${call.state}, MediaState: ${mediaState}.`);

    /**
     * Decision: Whenever we receive a slow-start notification, recreate the Peer.
     *    This is needed in certain situations (but not all...)
     * Known Scenarios:
     * 1. Direct transfer:
     *    - The user being transferred will be on remote hold and will receive a
     *        slow-start notification as part of the "transfer renegotitions".
     *        Not recreating the Peer will result in a DTLS role conflict.
     *    - The user receiving the transfer will negotiate the initial connection,
     *        then will receive a slow-start notification (when Connected). Not
     *        recreating the Peer for the slow-start results in DTLS conflict.
     * Exception: If client has set the call option 'mediaBrokerOnly' to true, then
     *    we don't need to recreate the call's PeerConnection.
     */
    const {
      mediaBrokerOnly
    } = (0, _selectors.getOptions)(context.getState());
    if (!mediaBrokerOnly) {
      log.debug(`Recreating Peer for Session ${call.webrtcSessionId}.`);
      const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
      await session.recreatePeer();
    } else {
      log.debug('Not recreating PeerConnection as mediaBrokerOnly is set to true in configuration.');
    }

    /*
     * Decision: Whenever we receive an offer without an SDP (slow start), and
     *    we're not locally held, respond with all media directions as sendrecv.
     *    This is to signal what we are capable of, rather than what we want.
     *    When we are locally held, we don't want to allow the remote side to
     *    restart media, hence respond with media directions as inactive.
     * This handles two (non-local hold) scenarios specifically:
     *  1. Re-invite: We have already negotiated to perform the remote operation,
     *      but we received a second offer (without an SDP) as a side-effect to
     *      further update media.
     *    Eg. Music on Hold: The remote operation is to set media to inactive,
     *      and the re-invite updates media so we can receive the hold audio.
     *  2. Slow start unhold: We receive an offer without an SDP, but we have no
     *      idea what the remote operation was. If we are on remote hold, we
     *      assume that it's a remote unhold operation.
     */
    const mediaDirections = {
      audio: call.localHold ? 'inactive' : 'sendrecv',
      video: call.localHold ? 'inactive' : 'sendrecv'
    };

    // Create an offer to use for responding to the slow start notification.
    let slowOffer;
    try {
      slowOffer = await CallstackWebrtc.generateOffer(call.webrtcSessionId, mediaDirections);
    } catch (error) {
      // TODO: Handle this scenario (revert operation if necessary).
      log.info('Failed to respond to slow-start remote update.', error);
      throw error;
    }
    try {
      // Respond with our "offer".
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: slowOffer.sdp,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });
      log.info('Finished responding to slow-start remote update. Waiting on remote response.');
    } catch (error) {
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to slow-start remote update.', error);
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 10823:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _unhold = _interopRequireDefault(__webpack_require__(46827));
var _validate = _interopRequireDefault(__webpack_require__(25253));
var _rollbackUnhold = _interopRequireDefault(__webpack_require__(17436));
var _remoteOffer = _interopRequireDefault(__webpack_require__(78130));
var _remoteAnswer = _interopRequireDefault(__webpack_require__(74071));
var _constants = __webpack_require__(37409);
// Operations.

function initOperation(bottle) {
  // Register the individual stages for the operation.
  bottle.factory('Callstack.stages.unhold', () => {
    return {
      local: {
        // Stages of local operation.
        validate: _validate.default,
        localOffer: (0, _unhold.default)(bottle.container),
        remoteAnswer: (0, _remoteAnswer.default)(bottle.container)
      },
      remote: {
        // Stages of remote operation.
        remoteOffer: (0, _remoteOffer.default)(bottle.container)
      }
    };
  });

  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.unhold', () => {
    const Callstack = bottle.container.Callstack;
    const opFactory = Callstack.models.Operation;
    function unhold(isLocal) {
      /**
       * Factory function for a Hold operation.
       * @method unhold
       * @param {string} callId ID for the call this operation will affect.
       * @return {Operation} An instance of the hold operation.
       */
      return callId => {
        const stages = Callstack.stages.unhold[isLocal ? 'local' : 'remote'];
        return opFactory.instance({
          // Operation meta-data.
          type: _constants.OPERATIONS.UNHOLD,
          isNegotiation: true,
          isLocal,
          // Operation methods.
          stages
        }, {
          callId
        });
      };
    }
    return {
      local: unhold(true),
      remote: unhold(false)
    };
  });
  bottle.factory('Callstack.utils.rollbackUnhold', () => (0, _rollbackUnhold.default)(bottle.container));
}

/***/ }),

/***/ 74071:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createUnholdResponse;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _remoteTracks = __webpack_require__(45294);
var _constants2 = __webpack_require__(42750);
var _selectors = __webpack_require__(11430);
var _selectors2 = __webpack_require__(30105);
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Callstack.
// Other plugins.
// Libraries
function createUnholdResponse(container) {
  const {
    context,
    logManager,
    emitEvent,
    CallstackWebrtc,
    CallReporter,
    WebRTC
  } = container;

  /**
   * Operation for handling the answer SDP of a locally-started unhold operation.
   *
   * On succesful handling:
   *    - updates call state to remove "local hold" flag,
   *    - emits a "tracks added" event
   *    - emits a "call state change" event.
   *
   * On failure to handle, ends the call as unrecoverable:
   *    - updates call state to "ended",
   *    - emits a "call state change" event.
   *
   * @method unholdResponse
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote answer SDP.
   * @return {undefined}
   */
  async function unholdResponse(call, params) {
    const log = logManager.getLogger('CALL', call.id);
    const callReport = CallReporter.getReport(call.id);
    // Start the process reseponse event
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.UNHOLD;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const processResponseEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    processResponseEvent.addData('operation', _constants.OPERATIONS.UNHOLD);

    // Handle the remote answer SDP.
    try {
      const sessionInfo = {
        sessionId: call.webrtcSessionId,
        answerSdp: params.sdp
      };
      await CallstackWebrtc.receivedAnswer(sessionInfo, call);
    } catch (error) {
      /*
       * Failed to set the remote answer SDP. End the call.
       * TODO: Better error handling. Is the Call fully cleaned-up here?
       */
      context.dispatch(_actions.callActions.endCallFinish(call.id, {
        error
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });
      processResponseEvent.setError(error);
      processResponseEvent.endEvent();
      return;
    }

    /*
     * Handle unexpected media directions after the operation.
     *    ie. If we were on local-only hold, then unheld, the SDK assumes that
     *      media is now flowing (`Connected` call state), but that may not be
     *     the case.
     *
     *     Regular hold/unhold
     *       media.direction == 'sendrecv'
     *     Dual hold/unhold
     *       media.direction == 'inactive'
     *     MOH Dual hold/unhold
     *       media.direction == 'sendonly'
     */
    const parsedSdp = _sdpTransform.default.parse(params.sdp);
    if (parsedSdp.media.every(media => media.direction === 'inactive' || media.direction === 'sendonly')) {
      // No active or send only media in sdp means we must be on remote hold, update call state.
      context.dispatch(_actions.callActions.updateCall(call.id, {
        remoteHold: true
      }));
    } else if (call.remoteHold && parsedSdp.media.some(media => media.direction === 'sendrecv')) {
      context.dispatch(_actions.callActions.updateCall(call.id, {
        remoteHold: false
      }));
    }
    log.info(`Finished processing remote response to local ${operation.type}. Changing state based on operation.`);

    // For a local unhold, we need to look at the SDP and what tracks are
    //    available in the Session to know which remote tracks will be re-added
    //    by this operation.
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    const affectedRemoteTracks = await (0, _remoteTracks.getAllRemoteTracks)(session);

    // Get an updated call object
    call = (0, _selectors.getCallById)(context.getState(), call.id);
    let affectedLocalTracks = [];
    // If we're not in dual-hold (ie. we will be Connected after this), then
    //    local tracks will become available.
    if (!call.remoteHold) {
      // For local tracks, just need to get the local tracks the Session has.
      const sessionState = (0, _selectors2.getSessionById)(context.getState(), call.webrtcSessionId);
      affectedLocalTracks = sessionState.localTracks;
    }

    /*
     * Update call state:
     *    - state change to remove local hold flag,
     *    - add tracks affected by operation.
     */
    context.dispatch(_actions.callActions.unholdCallFinish(call.id, _objectSpread(_objectSpread({}, operation.operationData), {}, {
      // For an unhold operation, only certain tracks are affected.
      localTracks: affectedLocalTracks,
      remoteTracks: affectedRemoteTracks
    })));

    // Tell the application that tracks have been added.
    if ([...affectedLocalTracks, ...affectedRemoteTracks].length > 0) {
      emitEvent(eventTypes.CALL_TRACKS_ADDED, {
        callId: call.id,
        trackIds: [...affectedLocalTracks, ...affectedRemoteTracks]
      });
    }

    // Tell the application that call state has changed.
    // We use the original 'call' object that was passed to this operation
    // (as previous call representation) because after triggering
    // 'unholdCallFinish' action (above), call state already changed.
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId: call.id,
      previous: {
        state: call.state,
        localHold: call.localHold,
        remoteHold: call.remoteHold
      }
    });
    processResponseEvent.endEvent();
  }
  return unholdResponse;
}

/***/ }),

/***/ 46827:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = unholdOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _kandyWebrtc = __webpack_require__(15203);
var _selectors2 = __webpack_require__(30105);
// Call plugin

// Libraries

/**
 * Bottle wrapper for unhold call operation.
 * @return {Function}
 */
function unholdOperation(container) {
  const {
    context,
    CallRequests,
    Callstack,
    CallstackWebrtc,
    logManager
  } = container;

  /**
   * Updates an existing call to have "full" media.
   * Can be used as an "unhold" operation for plain webRTC scenarios.
   *
   * This function defines how a call is taken off "hold". It performs the webRTC and
   *    signaling operations to update the local and server sessions of a call.
   *    This represents the start of the webRTC renegotiation process for the
   *    local side.
   * Assumptions:
   *    1. The call is in the correct state for the operation.
   *        - The call exists, and is locally held.
   * Responsibilities:
   *    1. Generate an offer with the media directions as "connected".
   *    2. Perform signaling to update the server session with the offer.
   *    3. Update call state (via redux actions).
   * @method unhold
   * @param {string} callId  The ID of the call to unhold.
   */
  async function unhold(callId) {
    const log = logManager.getLogger('CALL', callId);
    log.info('Unholding call.');
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const {
      wrtcsSessionId,
      webrtcSessionId,
      isAnonymous,
      account,
      customParameters,
      customBodies
    } = targetCall;

    // If the Session doesn't have a local track for a media kind, then don't change
    //    that direction to say we're sending one. This prevents the other side
    //    from getting an empty track.
    const sessionState = (0, _selectors2.getSessionById)(context.getState(), webrtcSessionId);
    const localTracks = sessionState.localTracks;
    const tracks = localTracks.map(id => (0, _selectors2.getTrackById)(context.getState(), id));
    const mediaDirections = {
      audio: tracks.some(track => track.kind === 'audio') ? 'sendrecv' : 'recvonly',
      video: tracks.some(track => track.kind === 'video') ? 'sendrecv' : 'recvonly'
    };
    let offer;
    try {
      offer = await CallstackWebrtc.generateOffer(webrtcSessionId, mediaDirections, targetCall.bandwidth);
    } catch (generateOfferError) {
      log.debug('Invalid SDP offer or SDP offer not received.');
      throw generateOfferError;
    }
    const callInfo = {
      wrtcsSessionId,
      id: callId,
      offer: offer.sdp,
      isAnonymous,
      account,
      customParameters,
      customBodies
    };
    try {
      await CallRequests.updateSession(callInfo);
    } catch (responseError) {
      log.info('Failed to unhold call.');
      // Rollback only supported on unified-plan
      let rollbackErr;
      try {
        await Callstack.utils.rollbackUnhold(webrtcSessionId);
      } catch (rollbackError) {
        log.debug('Automatic unhold rollback failed:', rollbackError);
        rollbackErr = rollbackError;
      }
      const browser = (0, _kandyWebrtc.getBrowserDetails)().browser;
      if (rollbackErr) {
        // Although Safari can automatically rollback and set another local offer while in `have-local-offer`
        //  signalling state, Safari does not perform an automatic rollback when a remote offer is
        //  received while in that state. An InvalidStateError is thrown instead and call is in an awkward state.
        if (browser === 'safari') {
          log.info('Ending call due to unrecoverable state after call unhold failure.');
          // Hangup the call from WebRTC perspective
          await CallstackWebrtc.closeCall(webrtcSessionId);

          // Cleanup Redux state by sending END_CALL_FINISH action
          context.dispatch(_actions.callActions.endCallFinish(callId, {
            isLocal: true,
            transition: {
              reasonText: 'Call has ended due to call unhold failure.'
            }
          }));
          throw responseError;
        }
        log.info('Unable to reset state after unhold operation failure, future operations may not work as intended.');
      }
      throw responseError;
    }
    log.info('Finished local portion of unholding call. Waiting on remote response.');
  }
  return unhold;
}

/***/ }),

/***/ 25253:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = validate;
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Pre-operation validation method.
 *
 * @param {Object} state The SDK state.
 * @param {string} callId The ID used by the SDK to identify the call.
 * @return {BasicError|undefined} If operation cannot be performed, returns an error.
 */
function validate(state, callId) {
  const call = (0, _selectors.getCallById)(state, callId);
  /*
   * `unhold` operation validation:
   *    1. Call must exist.
   *    2. Call must be be held locally.
   */
  if (!call) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_PARAM,
      message: 'Call state not found; invalid call ID.'
    });
  } else if (call.localHold !== true) {
    return new _errors.default({
      code: _errors.callCodes.INVALID_STATE,
      message: 'Call is in an invalid state: localHold=false. It should be: localHold=true.'
    });
  }
}

/***/ }),

/***/ 78130:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createUnholdHandler;
var _webrtc = __webpack_require__(82332);
var _state = __webpack_require__(65794);
var _remoteTracks = _interopRequireWildcard(__webpack_require__(45294));
var _hasMediaFlowing = _interopRequireDefault(__webpack_require__(43393));
var _setMediaInactive = _interopRequireDefault(__webpack_require__(23180));
var _constants = __webpack_require__(60683);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _selectors = __webpack_require__(11430);
var _constants2 = __webpack_require__(37409);
var _selectors2 = __webpack_require__(30105);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Callstack.

// Other plugins.

function createUnholdHandler(container) {
  const {
    context,
    WebRTC,
    CallstackWebrtc,
    CallstackSDP,
    CallRequests,
    emitEvent,
    logManager
  } = container;

  /**
   * Operation wrapper to handle state changes and events.
   *
   * On succesful handling:
   *    - updates call state to remove "remote hold" flag,
   *    - emits a "tracks added" event
   *    - conditionally emits a "track removed" event if MoH
   *    - emits a "call state change" event.
   *
   * On failure to handle, ...?:
   *    - updates call state ...?,
   *    - emits a "call state change" error event.
   *
   * @method operation
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber The display number of the remote endpoint.
   * @param {string} params.remoteName The display name of the remote endpoint.
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDiff
   * @throws {Error} Throws when the operation fails.
   * @return {undefined}
   */
  async function operation(call, params, opInfo) {
    try {
      // Handle the remote unhold operation and return the affected local/remote tracks.
      const {
        remoteTracks,
        localTracks
      } = await onRemoteUnhold(call, params, opInfo);
      context.dispatch(_actions.callActions.remoteUnholdFinish(call.id, {
        remote: true,
        remoteParticipant: {
          displayNumber: params.remoteNumber,
          displayName: params.remoteName
        },
        // Include the affected tracks as part of the action so the call's
        //    state can be updated accordingly.
        localTracks,
        remoteTracks
      }));

      // The call has changed to a new state.
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        }
      });

      // The affected tracks are now available on the call.
      emitEvent(eventTypes.CALL_TRACKS_ADDED, {
        callId: call.id,
        trackIds: [...localTracks, ...remoteTracks]
      });

      /*
       * Special-case: If the call was previously on remote hold with a track, then that
       *    track was MoH and is being removed as part of the unhold operation. Need to
       *    also emit an event to notify that the track is gone.
       * This is needed because "stop MoH" and "unhold" are done in a single renegotiation
       *    instead of as two.
       */
      if (call.localHold === false && call.remoteHold === true && call.remoteTracks.length > 0) {
        // Get the tracks from original call state that are not in new call state.
        const newCall = (0, _selectors.getCallById)(context.getState(), call.id);
        const removedTracks = call.remoteTracks.filter(id => !newCall.remoteTracks.includes(id));
        emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
          callId: call.id,
          trackIds: removedTracks
        });
      }
    } catch (error) {
      // TODO: Does this action update any state? Is it needed?
      context.dispatch(_actions.callActions.remoteUnholdFinish(call.id, {
        remote: true,
        error
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId: call.id,
        previous: {
          state: call.state,
          localHold: call.localHold,
          remoteHold: call.remoteHold
        },
        error
      });

      // Rethrow the error so the CallManager knows of the failure.
      throw error;
    }
  }

  /**
   * Operation for handling a new remote unhold offer SDP.
   *
   * Offer checks:
   *    - set media inactive if locally held
   *    - recreate Peer if remote op is hold + stop MOH in one
   *    - unset DTLS role in offer if set
   *
   * @method onRemoteUnhold
   * @param {Object} call The call being acted on.
   * @param {Object} params
   * @param {Object} params.sdp The remote offer SDP.
   * @param {string} params.remoteNumber
   * @param {string} params.remoteName
   * @param {Object} opInfo
   * @param {Object} opInfo.mediaDesc
   * @throws {Error} Throws when WeBRTC negotiation fails.
   * @throws {Error} Throws when Gateway signaling fails.
   * @return {Object} Affected local and remote tracks.
   */
  async function onRemoteUnhold(call, params, opInfo) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${call.webrtcSessionId} not found.`);
      throw new Error(`Session for call ${call.id} not found.`);
    }

    /*
     * If the remote operation is offering media but the call is locally held,
     *    then we need to modify the offer to ensure that media does not restart.
     */
    const mediaState = (0, _state.getMediaState)(call);
    const isMediaFlowing = (0, _hasMediaFlowing.default)(params.sdp);
    if (isMediaFlowing && [_constants.CALL_MEDIA_STATES.DUAL_HOLD, _constants.CALL_MEDIA_STATES.LOCAL_HOLD].includes(mediaState)) {
      log.debug('Modifying remote offer to prevent resetting media while in local hold.');
      params.sdp = (0, _setMediaInactive.default)(params.sdp);
      if (!params.sdp) {
        log.debug('SDP is either undefined or not a string.');
        return;
      }
      // Update the `mediaDiff` after we modified the SDP.
      opInfo.mediaDiff = CallstackSDP.compareMedia(opInfo.remoteDesc.sdp, params.sdp, true);
    }

    /**
     * Decision: When we receive a remote unhold offer SDP that currently has MoH,
     *    then we want to recreate the PeerConnection even if it's the same Session.
     * This is a workaround/fix for to avoid possible DTLS role conflict issues.
     *    This usually is only for remote offers for a different "session ID",
     *    but is a special-case.
     * The remote operation is an unhold but it is also stopping MoH. The Peer was
     *    recreated on start MOH because the SDP was from a different session, but
     *    the session doesn't change for stop MOH because it was a remote complex
     *    operation. The Peer needs to be recreated again otherwise local tracks
     *    will not be properly added back the call (because of how `recreatePeer` works).
     * Exception: If client has set the call option 'mediaBrokerOnly' to true, then
     *    we don't need to recreate the call's PeerConnection.
     * Reference: KJS-934
     */
    const {
      mediaBrokerOnly
    } = (0, _selectors.getOptions)(context.getState());
    const sameSession = await (0, _webrtc.isSameSdpSessionId)(WebRTC, call.webrtcSessionId, params.sdp);
    if (sameSession && call.hasMOH && !mediaBrokerOnly) {
      log.debug(`Received offer SDP is both an unhold and stop MoH on the same session. Recreating Peer for call ${call.id}.`);
      await session.recreatePeer();
    } else {
      log.debug('Not recreating PeerConnection as mediaBrokerOnly is set to true in configuration.');
    }

    /**
     * If the offer SDP has a DTLS role of active (which is invalid), change it to
     *    actpass. This is a workaround for transfer scenarios where the offer SDP
     *    is the remote endpoint's answer SDP from them answering the call. This
     *    happens when slow-start is not done for the transfer.
     * The user being transferred will see the remote operation as an unhold even
     *    though it is a transfer.
     */
    if (params.sdp.includes('setup:active')) {
      log.debug(`Received offer SDP with active role for call ${call.id}. Changing.`);
      params.sdp = params.sdp.replace(/setup:active/g, 'setup:actpass');
    }

    // Handle the offer SDP to receive an answer SDP.
    let answer;
    try {
      answer = await CallstackWebrtc.handleOffer(params.sdp, call.webrtcSessionId, call.bandwidth);
    } catch (error) {
      log.debug('Failed to receive offer SDP.', error);

      // TODO: Notify the Gateway that negotiation has failed.
      // The call may now be in a bad state and needs to be fixed.

      throw error;
    }
    try {
      // Send answer sdp back to remote side
      await CallRequests.updateSessionResponse({
        wrtcsSessionId: call.wrtcsSessionId,
        answer: answer.answerSDP,
        isAnonymous: call.isAnonymous,
        account: call.account,
        customParameters: call.customParameters,
        customBodies: call.customBodies
      });
      log.info('Finished responding to remote update. Changing state based on the remote operation.');

      // Get the list of remote tracks that are changing (either added or removed) as
      //    part of the remote operation. This is done after `handleOffer` so the
      //    Transceivers are up-to-date with the changes being offered.
      let remoteTracks = [];
      if (!sameSession) {
        // If the PeerConnection was recreated, then ALL remote tracks will be new.
        remoteTracks = await (0, _remoteTracks.getAllRemoteTracks)(session);
      } else {
        remoteTracks = await (0, _remoteTracks.default)(_constants2.OPERATIONS.UNHOLD, opInfo.mediaDiff, session);
      }
      let affectedLocalTracks = [];
      if (!call.localHold) {
        // On remote unhold (that isn't a dual-hold), all local tracks on the Session
        //    become available.
        const sessionState = (0, _selectors2.getSessionById)(context.getState(), call.webrtcSessionId);
        affectedLocalTracks = sessionState.localTracks;
      }
      return {
        remoteTracks,
        localTracks: affectedLocalTracks
      };
    } catch (error) {
      // Scenario: The offer was processed, but failed to respond with the answer.
      // The remote side needs the answer SDP before the call is "connected".
      // TODO: Handle this scenario (retry request or fail/revert operation?)
      log.info('Failed to respond to remote offer with an answer.');
      throw error;
    }
  }
  return operation;
}

/***/ }),

/***/ 17436:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rollbackUnholdOperation;
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Other plugins.

/**
 * Bottle wrapper for "rollback Unhold" operation.
 * @return {Function}
 */
function rollbackUnholdOperation(container) {
  const {
    logManager,
    WebRTC
  } = container;

  /**
   * Performs the webRTC session functions associated rolling back the local portion
   *  of an "unhold" (full media) offer
   *
   * Responsibilities:
   *  1. Revert the direction of the local and remote transceivers to "inactive"
   *  2. Rollback the local description SDP offer
   * @method rollbackUnhold
   * @param {string} sessionId the local webRTC session id, used to lookup the session object
   * @return {Object} offer object containing a Session Description Protocol
   */
  async function rollbackUnhold(sessionId) {
    const log = logManager.getLogger('CALLSTACK');
    const session = await WebRTC.sessionManager.get(sessionId);
    if (!session) {
      const message = `WebRTC session ${sessionId} not found.`;
      throw new _errors.default({
        message
      });
    }

    // Set the direction of the transceivers back to 'inactive'
    try {
      await session.setTransceiversDirection({
        audio: 'inactive',
        video: 'inactive'
      });
    } catch (error) {
      // TODO: Handle this potential error
      // log.debug('Failed to restore local/remote tranceiver directions for audio/video to inactive:', error)
      // throw error
    }

    // Rollback the local offer
    let offer;
    try {
      offer = await session.rollbackLocalDescription();
    } catch (error) {
      log.debug('Failed to rollback local description offer SDP:', error);
      throw error;
    }
    return {
      offer
    };
  }
  return rollbackUnhold;
}

/***/ }),

/***/ 37398:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _updateCallState = _interopRequireDefault(__webpack_require__(74487));
function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.operations.updateCallState', () => (0, _updateCallState.default)(bottle.container));
}

/***/ }),

/***/ 74487:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = updateCallStateOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants2 = __webpack_require__(37409);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin

/**
 * Bottle wrapper for "update call state" operation.
 * @return {Function}
 */
function updateCallStateOperation(container) {
  const {
    context,
    CallRequests,
    logManager,
    emitEvent
  } = container;

  // eslint-disable-next-line no-warning-comments
  /**
   * Sends a GET session request and updates call if required.
   *
   * This operation performs the signaling operation to get the status of a call session on the server.
   *    There are no local webRTC operations involved.
   *
   * Assumptions:
   *    1. The server uses Kandy Link 4.7.1+
   * Responsibilities:
   *    2. Update the call state if the call is out of sync (call's status does not match response from server)
   * @method updateCallState
   * @param {Object}   activeCall        The call being acted on.
   */
  async function updateCallState(activeCall) {
    const {
      CallstackWebrtc
    } = container;
    const log = logManager.getLogger('CALL', activeCall.id);
    const callStateAfterConnect = activeCall.state;

    /*
     * TODO: This operation's logic is not safe. It assumes that an on-going operation will re-sync the call's state,
     *    but not all operations will do that (eg. some operations are local-only, getStats).
     * Reference: https://jira.rbbn.com/browse/KJS-1974
     */
    function hasNoOperation(call) {
      return call.currentOperations.length === 0;
    }

    // If there is an ongoing operation when the WS connects, the response to that operation will re-sync the state
    // Otherwise, we need to get the status of the session from the server
    if (hasNoOperation(activeCall)) {
      try {
        const sessionStatusResponse = await CallRequests.getSession({
          wrtcsSessionId: activeCall.wrtcsSessionId,
          id: activeCall.id
        });

        // Get state of the call again before evaluating the response as an operation request and response
        // could have been processed in between the request to get the session and the response received
        const currentCall = (0, _selectors.getCallById)(context.getState(), activeCall.id);

        // Do nothing if an operation was triggered in between the GET sessions request and response, and is ongoing
        if (hasNoOperation(currentCall)) {
          /*
           * If the current call state is ringing OR if the state of the call was connected/on hold before we
           * did the GET, look at the response of the GET request.
           * If call is ringing and GET session returns ringing, we don't need to do anything
           * Also, if we were previously connected, but GET returns ringing, this could be due to an operation that was resolved
           * between the GET request and response. In any case, no need to look at GET response for this scenario.
           */
          if (currentCall.state === _constants.CALL_STATES.RINGING || callStateAfterConnect !== _constants.CALL_STATES.RINGING) {
            if (sessionStatusResponse.state === 'ANSWERED' && currentCall.state !== _constants.CALL_STATES.CONNECTED && currentCall.state !== _constants.CALL_STATES.ON_HOLD) {
              // Report call as cancelled
              await CallstackWebrtc.closeCall(activeCall.webrtcSessionId);
              log.info(`Call re-sync found that call is cancelled. Changing to ${_constants.CALL_STATES.CANCELLED}.`);
              context.dispatch(_actions.callActions.callCancelled(activeCall.id));
              emitEvent(eventTypes.CALL_STATE_CHANGE, {
                callId: activeCall.id,
                previous: {
                  state: activeCall.state,
                  localHold: activeCall.localHold,
                  remoteHold: activeCall.remoteHold
                }
              });
            }
          }
        }
      } catch (error) {
        // Get state of the call again before evaluating the response as an operation request and response
        // could have been processed in between the request to get the session and the response received
        const currentCall = (0, _selectors.getCallById)(context.getState(), activeCall.id);

        // Do nothing if an operation was triggered in between the GET sessions request and response, and is ongoing
        if (hasNoOperation(currentCall)) {
          /*
           * If the current call state is ringing OR if the state of the call was connected/on hold before we
           * did the GET, look at the response of the GET request.
           * If call is ringing and GET session returns ringing, we don't need to do anything
           * Also, if we were previously connected, but GET returns ringing, this could be due to an operation that was resolved
           * between the GET request and response. In any case, no need to look at GET response for this scenario.
           */
          if (currentCall.state === _constants.CALL_STATES.RINGING || callStateAfterConnect !== _constants.CALL_STATES.RINGING) {
            // Call not found
            if (error.code === 47) {
              // End the call as the session does not exist on the server anymore (statusCode 47 response)
              await CallstackWebrtc.closeCall(activeCall.webrtcSessionId);
              log.info(`Call re-sync found that call is ended. Changing to ${_constants.CALL_STATES.ENDED}.`);
              context.dispatch(_actions.callActions.endCallFinish(activeCall.id, {
                isLocal: true,
                error
              }));

              // 1- 'call operation' event
              emitEvent(eventTypes.CALL_OPERATION, {
                callId: activeCall.id,
                isLocal: true,
                operation: _constants2.OPERATIONS.END,
                transition: _constants2.OP_TRANSITIONS.FINISH,
                previous: {},
                error
              });

              // Tell the application that no tracks are available any longer.
              emitEvent(eventTypes.CALL_TRACKS_REMOVED, {
                callId: activeCall.id,
                trackIds: [...activeCall.localTracks, ...activeCall.remoteTracks]
              });

              // 2- 'call state change' event, which updates the state.
              emitEvent(eventTypes.CALL_STATE_CHANGE, {
                callId: activeCall.id,
                previous: {
                  state: activeCall.state,
                  localHold: activeCall.localHold,
                  remoteHold: activeCall.remoteHold
                },
                error
              });

              // GET response errors other than session not found
            } else {
              log.debug(`Call re-sync failure (${error.code}).`, error);
            }
          }
        }
      }
    }
  }
  return updateCallState;
}

/***/ }),

/***/ 42750:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.REPORT_METRICS = exports.REPORT_EVENTS = exports.REPORTER_REQUESTS = exports.REPORTER_OPERATION_EVENTS_MAP = exports.ICE_COLLECTION_OPERATIONS = void 0;
/**
 * Events used in the SDK's call reports.
 *
 * As a call progresses, the operation(s)/function(s) being performed throughout
 *    the duration of a call are recorded as events in a call report.
 *    The call report can be retrieved via the {@link call.getReport} API.
 *    An application can use these event names to find the associated event(s)
 *    in the call report for more information on the event.
 *    See _Call Reports_ tutorial for more information on call reports and events.
 *
 * @public
 * @static
 * @name reportEvents
 * @memberof call
 * @requires callMe
 * @requires call
 * @type {Object}
 * @property {string} MAKE Starts when the make operation starts. Ends when the make operation finishes.
 * @property {string} SEND_RINGING_FEEDBACK Starts when the send ringing feedback operation starts. Ends when the ringing feedback operation finishes.
 * @property {string} RECEIVE_CALL Starts when the SDK receives a call and ends when the incoming call is setup.
 * @property {string} REMOTE_RINGING
 * @property {string} ANSWER Starts when the answer operation starts. Ends when the answer operation finishes.
 * @property {string} GET_USER_MEDIA Starts when user media is requested from the browser and ends when the media is created.
 * @property {string} PROCESS_MEDIA_LOCAL Starts when the local media begins processing, and ends when the offer is set and ice collection completes.
 * @property {string} PROCESS_MEDIA_REMOTE Starts when the remote response is received, and ends when the remote media is set.
 * @property {string} ICE_COLLECTION Starts when ice candidate collection starts and ends when collection is complete.
 * @property {string} RELAY_CANDIDATE_COLLECTED Starts and ends when a relay candidate is collected. Event data contains info on the candidate.
 * @property {string} IGNORE Starts when the ignore operation starts. Ends when the ignore operation finishes.
 * @property {string} REJECT Starts when the reject operation starts. Ends when the reject operation finishes.
 * @property {string} FORWARD_CALL Starts when the forward call operation starts. Ends when the forward operation finishes.
 * @property {string} END_LOCAL Starts when the end operation starts. Ends when the end operation finishes.
 * @property {string} END_REMOTE Starts when the call status update ended operation starts. Ends when the call status update ended operation finishes.
 * @property {string} ADD_BASIC_MEDIA Starts when the add basic media operation starts. Ends when the add basic media operation finishes.
 * @property {string} ADD_MEDIA_LOCAL Starts when the add media operation starts. Ends when the add media operation finishes.
 * @property {string} ADD_MEDIA_REMOTE Starts when a remote add media notification is received and ends when the operation is handled.
 * @property {string} REMOVE_BASIC_MEDIA Starts when the remove basic media operation starts. Ends when the remove basic operation finishes.
 * @property {string} REMOVE_MEDIA Starts when the remove media operation starts. Ends when the remove media operation finishes.
 * @property {string} REMOVE_MEDIA_REMOTE Starts when a remote remove media notification is received and ends when the operation is handled.
 * @property {string} MEDIA_RESTART Starts when the media restart operation starts. Ends when the media restart operation finishes.
 * @property {string} REPLACE_TRACK Starts when the replace track operation starts. Ends when the replace track operation finishes.
 * @property {string} HOLD_LOCAL Starts when the hold operation starts. Ends when the hold operation finishes.
 * @property {string} HOLD_REMOTE Starts when a remote hold notification is received and ends when the operation is handled.
 * @property {string} UNHOLD_LOCAL Starts when the unhold operation starts. Ends when the unhold operation finishes.
 * @property {string} UNHOLD_REMOTE Starts when a remote unhold notification is received and ends when the operation is handled.
 * @property {string} REST_REQUEST Starts when a REST request is to be made for an operation and ends when a response is received, or it times out.
 * @property {string} PLAY_AUDIO Starts when the play audio operation starts. Ends when the play audio operation finishes.
 * @property {string} START_MOH Starts when the start music on hold operation starts. Ends when the start music on hold operation finishes.
 * @property {string} STOP_MOH Starts when the stop music on hold operation starts. Ends when the stop music on hold operation finishes.
 * @property {string} SEND_CUSTOM_PARAMETERS Starts when the send custom parameters operation starts. Ends send custom parameters operation finishes.
 * @property {string} GET_STATS Starts when the get stats operation starts. Ends when the get stats operation finishes.
 * @property {string} SEND_DTMF Starts when the send DTMF operation starts. Ends when the DTMF operation finishes.
 * @property {string} RESYNC Starts when the resync operation starts. Ends when the resync operation finishes.
 * @property {string} DIRECT_TRANSFER Starts when the direct transfer operation starts. Ends when the direct transfer operation finishes.
 * @property {string} CONSULTATIVE_TRANSFER Starts when the consultative transfer operation starts. Ends when the consultative transfer operation finishes.
 * @property {string} JOIN Starts when the join operation starts. Ends when the join operation finishes.
 * @property {string} GET_AVAILABLE_CODECS Starts when the get available codecs operation starts. Ends when the get available codecs operation finishes.
 * @property {string} SLOW_START Starts when the slow start operation starts. Ends when the slow stop operation finishes.
 * @example
 * const report = client.call.getReport('callId')
 * const getAvailableCodecsEvent = report.timeline.find(event => event.type === client.call.reportEvents.GET_AVAILABLE_CODECS)
 * log(`Took ${getAvailableCodecsEvent.end - getAvailableCodecsEvent.start}ms to get available codecs.`)
 */
const REPORT_EVENTS = exports.REPORT_EVENTS = {
  MAKE: 'MAKE',
  SEND_RINGING_FEEDBACK: 'SEND_RINGING_FEEDBACK',
  ANSWER: 'ANSWER',
  GET_USER_MEDIA: 'GET_USER_MEDIA',
  PROCESS_MEDIA_LOCAL: 'PROCESS_MEDIA_LOCAL',
  PROCESS_MEDIA_REMOTE: 'PROCESS_MEDIA_REMOTE',
  ICE_COLLECTION: 'ICE_COLLECTION',
  RELAY_CANDIDATE_COLLECTED: 'RELAY_CANDIDATE_COLLECTED',
  IGNORE: 'IGNORE',
  REJECT: 'REJECT',
  FORWARD_CALL: 'FORWARD_CALL',
  END_LOCAL: 'END_LOCAL',
  END_REMOTE: 'END_REMOTE',
  ADD_BASIC_MEDIA: 'ADD_BASIC_MEDIA_LOCAL',
  ADD_MEDIA: 'ADD_MEDIA_LOCAL',
  ADD_MEDIA_REMOTE: 'ADD_MEDIA_REMOTE',
  ADD_TRACKS: 'ADD_TRACKS',
  REMOVE_BASIC_MEDIA: 'REMOVE_BASIC_MEDIA_LOCAL',
  REMOVE_MEDIA: 'REMOVE_MEDIA_LOCAL',
  REMOVE_MEDIA_REMOTE: 'REMOVE_MEDIA_REMOTE',
  MEDIA_RESTART: 'MEDIA_RESTART',
  REPLACE_TRACK: 'REPLACE_TRACK',
  HOLD_LOCAL: 'HOLD_LOCAL',
  HOLD_REMOTE: 'HOLD_REMOTE',
  UNHOLD_LOCAL: 'UNHOLD_LOCAL',
  UNHOLD_REMOTE: 'UNHOLD_REMOTE',
  PLAY_AUDIO: 'PLAY_AUDIO',
  START_MOH: 'START_MOH',
  STOP_MOH: 'START_MOH',
  SEND_CUSTOM_PARAMETERS: 'SEND_CUSTOM_PARAMETERS',
  GET_STATS: 'GET_STATS',
  SEND_DTMF: 'SEND_DTMF',
  RESYNC: 'RESYNC',
  DIRECT_TRANSFER: 'DIRECT_TRANSFER',
  CONSULTATIVE_TRANSFER: 'CONSULTATIVE_TRANSFER',
  JOIN: 'JOIN',
  GET_AVAILABLE_CODECS: 'GET_AVAILABLE_CODECS',
  SLOW_START: 'SLOW_START',
  RECEIVE_CALL: 'RECEIVE_CALL',
  REMOTE_RINGING: 'REMOTE_RINGING',
  REST_REQUEST: 'REST_REQUEST',
  AUDIT_CALL: 'AUDIT_CALL'
};

/*
 * Type of request event data for the REST_REQUEST report event.
 */
const REPORTER_REQUESTS = exports.REPORTER_REQUESTS = {
  CREATE_SESSION: 'CREATE_SESSION',
  ANSWER_SESSION: 'ANSWER_SESSION',
  REJECT_SESSION: 'REJECT_SESSION',
  FORWARD_SESSION: 'FORWARD_SESSION',
  UPDATE_SESSION: 'UPDATE_SESSION',
  GET_SESSION: 'GET_SESSION',
  CALL_RINGING_UPDATE_SESSION: 'CALL_RINGING_UPDATE_SESSION',
  UPDATE_CUSTOM_PARAMETERS_ON_SESSION: 'UPDATE_CUSTOM_PARAMETERS_ON_SESSION',
  END_SESSION: 'END_SESSION'
};

/**
 * List of metrics available as part of a Call Report.
 * Metrics are calculated only for the successful scenarios.
 *
 * As a call progresses, timings are calculated for the duration of operations and
 *    other events. They are recorded in a call report that can be retrieved via
 *    the {@link call.getReport} API.
 *
 * @public
 * @static
 * @name metrics
 * @memberof call
 * @requires callMe
 * @requires call
 * @type {Object}
 * @property {string} CALL_DURATION The duration of a completed call starting from the make call API call or incoming call notification until the call ends.
 * @property {string} MAKE_CALL_PRE_LOCAL_SETUP The amount of time it takes from when the `make call` operation starts up until right before we set local description.
 * @property {string} MAKE_CALL_LOCAL_SETUP The amount of time it takes from when a call is made until the call is setup locally. This does not include any remote session creation.
 * @property {string} MAKE_CALL_REMOTE_SETUP The amount of time it takes from when the create session request is sent until the SDK processes the response.
 * @property {string} TIME_TO_MAKE For outgoing calls, the time for the `make` operation to complete.
 * @property {string} ANSWER_CALL_LOCAL_SETUP The amount of time it takes from when the `answer call` operation starts until it is setup locally.
 *   (i.e. from the time an incoming call is answered until media is connected)
 * @property {string} ANSWER_CALL_PRE_LOCAL_SETUP The amount of time it takes from when the `answer call` operation starts up until right before we set local description.
 * @property {string} TIME_TO_ANSWER For incoming calls, the time for the `answer` operation to complete.
 * @property {string} TIME_FROM_RECEIVE_TO_ANSWER For incoming calls, the time from the call first being received until it has been answered. Includes call processing and setup, as well as time for the answer API to have been called.
 * @property {string} TIME_TO_CALL_SETUP_DURATION For incoming calls, the time from the call first being received until media is connected. Similar to `TIME_FROM_RECEIVE_TO_ANSWER`, but without the `answer` REST request.
 * @property {string} TIME_TO_RINGING The amount of time it takes from when a call is made until the SDK recieves the remote ringing notification.
 * @property {string} TIME_TO_IGNORE The amount of time it takes for the ignore call to complete.
 * @property {string} TIME_TO_REJECT The amount of time it takes for the reject call to complete.
 * @property {string} TIME_TO_ADD_MEDIA The amount of time it takes from when the local `add media` operation starts until it has finished.
 * @property {string} TIME_TO_ADD_MEDIA_REMOTE The amount of time it takes from when the SDK receives a remote `add media` notification until it is handled and operation completes.
 * @property {string} TIME_TO_REMOVE_MEDIA The amount of time it takes from when the local `remove media` operation starts until it has finished.
 * @property {string} TIME_TO_REMOVE_MEDIA_REMOTE The amount of time it takes from when the SDK receives a remote `remove media` notification until it is handled and operation completes.
 * @property {string} TIME_TO_RESTART_MEDIA The amount of time it takes from when the `restart media` operation starts until it has finished.
 * @property {string} TIME_TO_HOLD_LOCAL The amount of time it takes from when the local `hold` operation starts until it has finished.
 * @property {string} TIME_TO_HOLD_REMOTE The amount of time it takes from when the SDK receives a remote `hold` notification until it is handled and operation completes.
 * @property {string} TIME_TO_UNHOLD_LOCAL The amount of time it takes from when the local `unhold` operation starts until it has finished.
 * @property {string} TIME_TO_UNHOLD_REMOTE The amount of time it takes from when the SDK receives a remote `unhold` notification until it is handled and operation completes.
 * @property {string} TIME_TO_COLLECT_ICE_CANDIDATES The amount of time it takes from when the local description is set to when all ICE candidates have been collected.
 * @property {string} TIME_TO_RELAY_CANDIDATES The amount of time it takes from when the `ice collection` operation starts until each relay candidate has been recieved.
 * @property {string} TIME_TO_SEND_CUSTOM_PARAMETERS The amount of time it takes from when the `send custom parameters` operation starts until it has finished.
 * @property {string} TIME_TO_FORWARD The amount of time it takes from when the `forward call` operation starts until it has finished.
 * @property {string} TIME_TO_DIRECT_TRANSFER The amount of time it takes from when the `direct transfer` operation starts until it has finished.
 * @property {string} TIME_TO_CONSULTATIVE_TRANSFER The amount of time it takes from when the `consultative transfer` operation starts until it has finished.
 * @property {string} TIME_TO_JOIN The amount of time it takes from when the `join call` operation starts until it has finished.
 * @example
 * const report = client.call.getReport(callId)
 * const callDuration = report.metrics.find(metric => metric.type === client.call.metrics.CALL_DURATION)
 * log(`Call duration was ${callDuration.data}ms.`)
 */
const REPORT_METRICS = exports.REPORT_METRICS = {
  CALL_DURATION: 'CALL_DURATION',
  MAKE_CALL_PRE_LOCAL_SETUP: 'MAKE_CALL_PRE_LOCAL_SETUP',
  MAKE_CALL_LOCAL_SETUP: 'MAKE_CALL_LOCAL_SETUP',
  MAKE_CALL_REMOTE_SETUP: 'MAKE_CALL_REMOTE_SETUP',
  TIME_TO_MAKE: 'TIME_TO_MAKE',
  ANSWER_CALL_PRE_LOCAL_SETUP: 'ANSWER_CALL_PRE_LOCAL_SETUP',
  ANSWER_CALL_LOCAL_SETUP: 'ANSWER_CALL_LOCAL_SETUP',
  TIME_TO_ANSWER: 'TIME_TO_ANSWER',
  TIME_FROM_RECEIVE_TO_ANSWER: 'TIME_FROM_RECEIVE_TO_ANSWER',
  TIME_TO_CALL_SETUP_DURATION: 'TIME_TO_CALL_SETUP_DURATION',
  TIME_TO_RINGING: 'TIME_TO_RINGING',
  TIME_TO_IGNORE: 'TIME_TO_IGNORE',
  TIME_TO_REJECT: 'TIME_TO_REJECT',
  TIME_TO_ADD_MEDIA: 'TIME_TO_ADD_MEDIA',
  TIME_TO_ADD_MEDIA_REMOTE: 'TIME_TO_ADD_MEDIA_REMOTE',
  TIME_TO_REMOVE_MEDIA: 'TIME_TO_REMOVE_MEDIA',
  TIME_TO_REMOVE_MEDIA_REMOTE: 'TIME_TO_REMOVE_MEDIA_REMOTE',
  TIME_TO_RESTART_MEDIA: 'TIME_TO_RESTART_MEDIA',
  TIME_TO_HOLD_LOCAL: 'TIME_TO_HOLD_LOCAL',
  TIME_TO_HOLD_REMOTE: 'TIME_TO_HOLD_REMOTE',
  TIME_TO_UNHOLD_LOCAL: 'TIME_TO_UNHOLD_LOCAL',
  TIME_TO_UNHOLD_REMOTE: 'TIME_TO_UNHOLD_REMOTE',
  TIME_TO_COLLECT_ICE_CANDIDATES: 'TIME_TO_COLLECT_ICE_CANDIDATES',
  TIME_TO_RELAY_CANDIDATES: 'TIME_TO_RELAY_CANDIDATES',
  TIME_TO_SEND_CUSTOM_PARAMETERS: 'TIME_TO_SEND_CUSTOM_PARAMETERS',
  TIME_TO_FORWARD: 'TIME_TO_FORWARD',
  TIME_TO_DIRECT_TRANSFER: 'TIME_TO_DIRECT_TRANSFER',
  TIME_TO_CONSULTATIVE_TRANSFER: 'TIME_TO_CONSULTATIVE_TRANSFER',
  TIME_TO_JOIN: 'TIME_TO_JOIN'
};

/**
 * A mapping of call operations / notifications to events recorded by the call reporter.
 */
const REPORTER_OPERATION_EVENTS_MAP = exports.REPORTER_OPERATION_EVENTS_MAP = {
  // Establishment.
  MAKE: 'MAKE',
  MAKE_ANONYMOUS: 'MAKE',
  ANSWER: 'ANSWER',
  REJECT: 'REJECT',
  IGNORE: 'IGNORE',
  SEND_RINGING_FEEDBACK: 'SEND_RINGING_FEEDBACK',
  FORWARD_CALL: 'FORWARD_CALL',
  // Midcall.
  HOLD: 'HOLD_LOCAL',
  UNHOLD: 'UNHOLD_LOCAL',
  HOLD_REMOTE: 'HOLD_REMOTE',
  UNHOLD_REMOTE: 'UNHOLD_REMOTE',
  SEND_CUSTOM_PARAMETERS: 'SEND_CUSTOM_PARAMETERS',
  ADD_MEDIA: 'ADD_MEDIA_LOCAL',
  ADD_MEDIA_REMOTE: 'ADD_MEDIA_REMOTE',
  ADD_BASIC_MEDIA: 'ADD_BASIC_MEDIA_LOCAL',
  ADD_BASIC_MEDIA_REMOTE: 'ADD_BASIC_MEDIA_REMOTE',
  REMOVE_MEDIA: 'REMOVE_MEDIA_LOCAL',
  REMOVE_MEDIA_REMOTE: 'REMOVE_MEDIA_REMOTE',
  REMOVE_BASIC_MEDIA: 'REMOVE_BASIC_MEDIA_LOCAL',
  REMOVE_BASIC_MEDIA_REMOTE: 'REMOVE_BASIC_MEDIA_REMOTE',
  GET_STATS: 'GET_STATS',
  SEND_DTMF: 'SEND_DTMF',
  CONSULTATIVE_TRANSFER: 'CONSULTATIVE_TRANSFER',
  DIRECT_TRANSFER: 'DIRECT_TRANSFER',
  JOIN: 'JOIN',
  REPLACE_TRACK: 'REPLACE_TRACK',
  MEDIA_RESTART: 'MEDIA_RESTART',
  RESYNC: 'RESYNC',
  PLAY_AUDIO: 'PLAY_AUDIO',
  GET_AVAILABLE_CODECS: 'GET_AVAILABLE_CODECS',
  END: 'END_LOCAL',
  // Remote-only.
  START_MOH_REMOTE: 'START_MOH',
  STOP_MOH_REMOTE: 'STOP_MOH',
  SLOW_START_REMOTE: 'SLOW_START',
  UNKNOWN_REMOTE: 'UNKNOWN',
  GENERIC_REMOTE: 'UNKNOWN',
  NO_CHANGE_REMOTE: 'UNKNOWN',
  callStatusUpdateEnded: 'END_REMOTE'
};

/*
 * List of operations that trigger an ICE candidate collection.
 */
const ICE_COLLECTION_OPERATIONS = exports.ICE_COLLECTION_OPERATIONS = {
  MAKE: 'MAKE',
  ANSWER: 'ANSWER',
  JOIN: 'JOIN',
  HOLD: 'HOLD_LOCAL',
  UNHOLD: 'UNHOLD_LOCAL',
  UNHOLD_REMOTE: 'UNHOLD_REMOTE',
  ADD_MEDIA: 'ADD_MEDIA_LOCAL',
  ADD_BASIC_MEDIA: 'ADD_BASIC_MEDIA_LOCAL',
  ADD_MEDIA_REMOTE: 'ADD_MEDIA_REMOTE',
  REMOVE_MEDIA: 'REMOVE_MEDIA_LOCAL',
  REMOVE_BASIC_MEDIA: 'REMOVE_BASIC_MEDIA_LOCAL',
  MEDIA_RESTART: 'MEDIA_RESTART',
  START_MOH: 'START_MOH',
  STOP_MOH: 'STOP_MOH',
  SLOW_START: 'SLOW_START',
  UNKNOWN: 'UNKNOWN'
};

/***/ }),

/***/ 13840:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createComponent;
var _metricHandlers = _interopRequireDefault(__webpack_require__(81633));
var _webrtcReporter = _interopRequireDefault(__webpack_require__(27181));
// Call Report related.

function createComponent(bottle) {
  // Create a new Reporter to collect call report metrics
  const callReporter = reporter();
  bottle.value('CallReporter', callReporter);
}

/**
 * CallReporter component for the SDK, using the reporter tool.
 */
function reporter() {
  const reporter = (0, _webrtcReporter.default)();
  function createReport() {
    const report = reporter.createReport(...arguments);
    _metricHandlers.default.registerAllMetricHandlers(report);
    return report;
  }
  return {
    createReport,
    getReport: reporter.getReport,
    deleteReport: reporter.deleteReport
  };
}

/***/ }),

/***/ 81633:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _constants = __webpack_require__(42750);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @method durationHandler
 * @param {string} metric The metric type which will be added to report when handler function is executed.
 * @param {Array} startEvents The set of event types whose `start` timestamp will be used to calculate the metric value.
 * @param {boolean} autoUnregister Specifies wether to automatically unregister the event handler function after it executed once.
 *   By default (if not specified), it will unregister the handler once it executed.
 * @returns {undefined}
 */
function durationHandler(metric, startEvents) {
  let autoUnregister = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  /**
   * Handler function which executes when a certain registered event has ended.
   * @return {boolean} Returns true if handler was executed AND metric was saved. False otherwise.
   */
  return function (callReport, event) {
    // First search for the event in the timeline of the report (i.e. see if it's a top-level event).
    // Loop through the timeline backwards to find the last type of the specified start event in the case of
    // mutiple identical operations (i.e., multiple holds).
    let startEvent;
    for (let i = callReport.timeline.length - 1; i >= 0; i--) {
      const timelineEvent = callReport.timeline[i];
      if (startEvents.includes(timelineEvent.type)) {
        startEvent = timelineEvent;
        break;
      } else {
        // Check the sub-events for the start event (e.g., set local description is a common start event)
        for (let j = 0; j <= timelineEvent.timeline.length - 1; j++) {
          const timelineSubEvent = timelineEvent.timeline[j];
          if (startEvents.includes(timelineSubEvent.type)) {
            startEvent = timelineSubEvent;
            break;
          }
        }
        // If we found the start event in the sub-events break out of the loop
        if (startEvent) {
          break;
        }
      }
    }
    if (startEvent) {
      // PROCESS_MEDIA_REMOTE event is triggered as part of many SDK operations and on both sides of the call.
      // But we don't want to add a 'MAKE_CALL_REMOTE_SETUP' metric for the callee side,
      // because it only makes sense for caller side.
      if (event.type === _constants.REPORT_EVENTS.PROCESS_MEDIA_REMOTE && metric === 'MAKE_CALL_REMOTE_SETUP' && event.getData('operation') !== 'MAKE') {
        return false;
      }

      // Special-case: For ice collection time, add the operation that triggered the ice collection
      if (metric === _constants.REPORT_METRICS.TIME_TO_COLLECT_ICE_CANDIDATES) {
        callReport.addMetric(metric, {
          operation: startEvent.getData('operation'),
          // Get the operation from the set local desc event data
          duration: event.end - startEvent.start
        });
      } else {
        // We found the start event, so save its associated metric containing the measurement.
        callReport.addMetric(metric, event.end - startEvent.start);
        if (autoUnregister) {
          // We automatically unregister the handler once it was executed.
          callReport.unregisterMetricHandler(metric);
        }
      }
      return true;
    }
    return false;
  };
}

/**
 * @method callPreSDPHandler
 * @param {string} metric The metric type which will be added to report when handler function is executed.
 * @param {Array} startEvents The set of event types whose `start` timestamp will be used to calculate the metric value.
 * @returns {undefined}
 */
function callPreSDPHandler(metric, startEvents) {
  /**
   * Handler function which executes when a certain registered event has ended.
   * @return {boolean} Returns true if handler was executed AND metric was saved. False otherwise.
   */
  return function (callReport, event) {
    // Search for the event in the timeline of the report
    const startEvent = callReport.timeline.find(event => startEvents.includes(event.type));
    if (startEvent) {
      callReport.addMetric(metric, event.start - startEvent.start);
      callReport.unregisterMetricHandler(metric);
      return true;
    }
    return false;
  };
}

/**
 * @method joinedCallDurationHandler
 * @param {string} metric The metric type which will be added to report when handler function is executed.
 * @param {Array} startEvents The set of event types whose `start` timestamp will be used to calculate the metric value.
 * @returns {undefined}
 */
function joinedCallDurationHandler(metric, startEvents) {
  /**
   * Handler function which executes when a certain registered event has ended.
   * @return {boolean} Returns true if handler was executed AND metric was saved. False otherwise.
   */
  return function (callReport, event) {
    // Search for the event in the timeline of the report
    const startEvent = callReport.timeline.find(event => startEvents.includes(event.type));

    // startEvent !== event is for the special case join operation which is used as the end for the initial
    // two calls, but the starting event for the joined call.
    if (startEvent && startEvent !== event) {
      // We found the start event, so save its associated metric containing the measurement.
      callReport.addMetric(metric, event.end - startEvent.start);
      // We automatically unregister the handler once it was executed.
      callReport.unregisterMetricHandler(metric);
      return true;
    }
    return false;
  };
}

/**
 * A function that gathers the relay candidates as they are collected and then returns a handler function that will
 * create the metric for the relay candidates after collection is complete.
 *
 * Each time a relay candidate collected event is received it will create an object with that relay candidates data and
 * store it in an array. When the set local description event ends it will update all the collected candidates in the array
 * with the correct duration, and add a metric to the call report for them.
 * @method relayCandidatesHandler
 * @returns {Function} The metric handler function
 */
function relayCandidatesHandler() {
  const collectedCandidates = [];
  return (callReport, event) => {
    if (event.type === _constants.REPORT_EVENTS.RELAY_CANDIDATE_COLLECTED) {
      const eventData = event.getData();
      const collectedCandidateInformation = _objectSpread(_objectSpread({}, eventData), {}, {
        duration: event.start // The candidate was collected by the time this event was added
      });
      collectedCandidates.push(collectedCandidateInformation);
    } else if (event.type === _constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL) {
      // Update the duration of all the collected candidates
      collectedCandidates.map(candidateInfo => {
        candidateInfo.duration = candidateInfo.duration - event.start;
        return collectedCandidates;
      });
      // Only need to add metric if there will be any data...
      if (collectedCandidates.length) {
        callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_RELAY_CANDIDATES, {
          operation: event.getData('operation'),
          candidates: [...collectedCandidates]
        });
      }
      collectedCandidates.length = 0;
    }
  };
}

// Generic function to register all metric handlers to the call reporter
function registerAllMetricHandlers(callReport) {
  // Register the call duration handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.CALL_DURATION, [_constants.REPORT_EVENTS.END_LOCAL, _constants.REPORT_EVENTS.END_REMOTE, _constants.REPORT_EVENTS.JOIN, _constants.REPORT_EVENTS.DIRECT_TRANSFER, _constants.REPORT_EVENTS.CONSULTATIVE_TRANSFER], joinedCallDurationHandler(_constants.REPORT_METRICS.CALL_DURATION, [_constants.REPORT_EVENTS.MAKE, _constants.REPORT_EVENTS.RECEIVE_CALL, _constants.REPORT_EVENTS.JOIN]));

  // Register the local-setup handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.MAKE_CALL_LOCAL_SETUP, [_constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL], durationHandler(_constants.REPORT_METRICS.MAKE_CALL_LOCAL_SETUP, [_constants.REPORT_EVENTS.MAKE]));

  // Register the handler for collecting ice candidates during the local-setup.
  // The start event will be PROCESS_MEDIA_LOCAL and the metric will be saved when
  // its sub-event (i.e. ICE_COLLECTION) has ended.
  // Since PROCESS_MEDIA_LOCAL event occurs on both caller & callee, its sub-event: ICE_COLLECTION
  // will also be available for each party.
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_COLLECT_ICE_CANDIDATES, [_constants.REPORT_EVENTS.ICE_COLLECTION], durationHandler(_constants.REPORT_METRICS.TIME_TO_COLLECT_ICE_CANDIDATES, [_constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL], false));

  // Register the remote-setup handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.MAKE_CALL_REMOTE_SETUP, [_constants.REPORT_EVENTS.PROCESS_MEDIA_REMOTE], durationHandler(_constants.REPORT_METRICS.MAKE_CALL_REMOTE_SETUP, [_constants.REPORT_EVENTS.REST_REQUEST]));

  // Register the time-to-ringing handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_RINGING, [_constants.REPORT_EVENTS.REMOTE_RINGING], durationHandler(_constants.REPORT_METRICS.TIME_TO_RINGING, [_constants.REPORT_EVENTS.MAKE]));

  /*
   * TIME_FROM_RECEIVE_TO_ANSWER
   * Metric from when an incoming call is received until it has been answered.
   * Duration includes:
   *    - time for processing call notification,
   *    - time for application to call the `answer` API, and
   *    - time for `answer` operation to complete.
   * This metric is for the special-case of incoming calls being auto-answered.
   * This is the sum of TIME_TO_CALL_SETUP_DURATION and the answer REST request duration.
   */
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_FROM_RECEIVE_TO_ANSWER, _constants.REPORT_EVENTS.ANSWER, durationHandler(_constants.REPORT_METRICS.TIME_FROM_RECEIVE_TO_ANSWER, [_constants.REPORT_EVENTS.RECEIVE_CALL]));

  // Time to setup incoming call (incoming call notification until media is connected)
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_CALL_SETUP_DURATION, _constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL, durationHandler(_constants.REPORT_METRICS.TIME_TO_CALL_SETUP_DURATION, [_constants.REPORT_EVENTS.RECEIVE_CALL]));

  // Time to setup incoming call (answer call operation until media is connected)
  callReport.registerMetricHandler(_constants.REPORT_METRICS.ANSWER_CALL_LOCAL_SETUP, _constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL, durationHandler(_constants.REPORT_METRICS.ANSWER_CALL_LOCAL_SETUP, [_constants.REPORT_EVENTS.ANSWER]));

  // Register the time-to-relay-candidates handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_RELAY_CANDIDATES, [_constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL, _constants.REPORT_EVENTS.RELAY_CANDIDATE_COLLECTED], relayCandidatesHandler());

  // Register the answer-call-pre-local-setup handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.ANSWER_CALL_PRE_LOCAL_SETUP, _constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL, callPreSDPHandler(_constants.REPORT_METRICS.ANSWER_CALL_PRE_LOCAL_SETUP, [_constants.REPORT_EVENTS.ANSWER]));

  // Register the make-call-pre-local-setup handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.MAKE_CALL_PRE_LOCAL_SETUP, _constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL, callPreSDPHandler(_constants.REPORT_METRICS.MAKE_CALL_PRE_LOCAL_SETUP, [_constants.REPORT_EVENTS.MAKE]));

  /*
   * **************************
   * TIME-TO-OPERATION metrics.
   *  ie. metrics that are the duration of a single event.
   * **************************
   */

  // Time to reject incoming call
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_REJECT, [_constants.REPORT_EVENTS.REJECT], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_REJECT, event.end - event.start);
  });

  // Register the time-to-ignore handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_IGNORE, [_constants.REPORT_EVENTS.IGNORE], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_IGNORE, event.end - event.start);
  });

  // Register the time-to-add-media handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_ADD_MEDIA, [_constants.REPORT_EVENTS.ADD_MEDIA, _constants.REPORT_EVENTS.ADD_BASIC_MEDIA], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_ADD_MEDIA, event.end - event.start);
  });

  // Register the time-to-add-media-remote handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_ADD_MEDIA_REMOTE, [_constants.REPORT_EVENTS.ADD_MEDIA_REMOTE], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_ADD_MEDIA_REMOTE, event.end - event.start);
  });

  // Register the time-to-hold-local handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_HOLD_LOCAL, [_constants.REPORT_EVENTS.HOLD_LOCAL], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_HOLD_LOCAL, event.end - event.start);
  });

  // Register the time-to-hold-remote handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_HOLD_REMOTE, [_constants.REPORT_EVENTS.HOLD_REMOTE], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_HOLD_REMOTE, event.end - event.start);
  });

  // Register the time-to-unhold-local handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_UNHOLD_LOCAL, [_constants.REPORT_EVENTS.UNHOLD_LOCAL], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_UNHOLD_LOCAL, event.end - event.start);
  });

  // Register the time-to-unhold-remote handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_UNHOLD_REMOTE, [_constants.REPORT_EVENTS.UNHOLD_REMOTE], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_UNHOLD_REMOTE, event.end - event.start);
  });

  // Register the time-to-remove-media handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_REMOVE_MEDIA, [_constants.REPORT_EVENTS.REMOVE_MEDIA, _constants.REPORT_EVENTS.REMOVE_BASIC_MEDIA], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_REMOVE_MEDIA, event.end - event.start);
  });

  // Register the time-to-remove-media-remote handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_REMOVE_MEDIA_REMOTE, [_constants.REPORT_EVENTS.REMOVE_MEDIA_REMOTE], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_REMOVE_MEDIA_REMOTE, event.end - event.start);
  });

  // Register the time-to-restart-media handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_RESTART_MEDIA, _constants.REPORT_EVENTS.MEDIA_RESTART, (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_RESTART_MEDIA, event.end - event.start);
  });

  // Register the time-to-send-custom-paramters handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_SEND_CUSTOM_PARAMETERS, _constants.REPORT_EVENTS.SEND_CUSTOM_PARAMETERS, (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_SEND_CUSTOM_PARAMETERS, event.end - event.start);
  });

  // Time to forward incoming call
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_FORWARD, [_constants.REPORT_EVENTS.FORWARD_CALL], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_FORWARD, event.end - event.start);
  });

  // Register the time-to-direct-transfer handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_DIRECT_TRANSFER, [_constants.REPORT_EVENTS.DIRECT_TRANSFER], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_DIRECT_TRANSFER, event.end - event.start);
  });

  // Register the time-to-consultative-transfer handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_CONSULTATIVE_TRANSFER, [_constants.REPORT_EVENTS.CONSULTATIVE_TRANSFER], (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_CONSULTATIVE_TRANSFER, event.end - event.start);
  });

  // Register the time-to-join handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_JOIN, _constants.REPORT_EVENTS.JOIN, joinedCallDurationHandler(_constants.REPORT_METRICS.TIME_TO_JOIN, [_constants.REPORT_EVENTS.JOIN]));

  // Register the time-to-make-operation handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_MAKE, _constants.REPORT_EVENTS.MAKE, (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_MAKE, event.end - event.start);
  });

  // Register the time-to-answer-operation handler
  callReport.registerMetricHandler(_constants.REPORT_METRICS.TIME_TO_ANSWER, _constants.REPORT_EVENTS.ANSWER, (report, event) => {
    callReport.addMetric(_constants.REPORT_METRICS.TIME_TO_ANSWER, event.end - event.start);
  });
}
var _default = exports["default"] = {
  handlers: {
    durationHandler,
    joinedCallDurationHandler,
    relayCandidatesHandler
  },
  registerAllMetricHandlers
};

/***/ }),

/***/ 1813:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = changeDtlsRoleTo;
/**
 * Function generator for an SDP handler function that changes the DTLS role of the SDP.
 * @method changeDtlsRoleTo
 * @param  {string} role
 * @param  {Logger} log The Logger for this call.
 * @return {Function} SDP handler.
 */
function changeDtlsRoleTo(role, log) {
  return function changeDtlsRole(newSdp, info, originalSdp) {
    // Grab the original DTLS role for logging purposes.
    //    Assumed that the DTLS role is the same in every media section.
    const original = newSdp.media[0].setup;
    log.debug(`Changing SDP DTLS role from ${original} to ${role}.`);

    // Change the DTLS role in every media section.
    newSdp.media.map(media => {
      media.setup = role;
      return media;
    });
    return newSdp;
  };
}

/***/ }),

/***/ 46699:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.modifySdpBandwidth = modifySdpBandwidth;
/**
 * An SDP handler that adds bandwidth options to the SDP.
 * Supports Chrome & Firefox by generating 2 types of configs:
 *  - 'AS' for Chrome in kilobits per second
 *  - 'TIAS' for Firefox in bits per second
 * @method modifySdpBandwidth
 * @param {BandwidthControls} bandwidthControls
 * @return {Function} SDP handler.
 */
function modifySdpBandwidth(newSdp, info, originalSdp) {
  /**
   * Generates bandwidth configs that Chrome & Firefox can recognize.
   * @param {number} limit The bandwidth limit in kilobits per second.
   */
  function generateBandwidthConfigs(limit) {
    return [{
      type: 'AS',
      // Chrome supports this (in kilobits per second)
      limit
    }, {
      type: 'TIAS',
      // Firefox supports this (in bits per second)
      limit: limit * 1000
    }];
  }
  if (info.bandwidth) {
    // For more details on bandwidth controls, see here https://webrtchacks.com/limit-webrtc-bandwidth-sdp/.

    if (info.bandwidth.call) {
      // Set session level bandwidth limit
      newSdp.bandwidth = generateBandwidthConfigs(info.bandwidth.call);
    }
    if (info.bandwidth.audio) {
      // Set audio bandwidth limit
      newSdp.media.filter(media => media.type === 'audio').forEach(media => {
        media.bandwidth = generateBandwidthConfigs(info.bandwidth.audio);
      });
    }
    if (info.bandwidth.video) {
      // Set video bandwidth limit
      newSdp.media.filter(media => media.type === 'video').forEach(media => {
        media.bandwidth = generateBandwidthConfigs(info.bandwidth.video);
      });
    }
  }
  return newSdp;
}

/***/ }),

/***/ 22379:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sanitizeSdesFromSdp = sanitizeSdesFromSdp;
/**
 * SDP handler function that should be passed into session object's `processOffer` and `processAnswer` function.
 * This function disables old media encryption method SDES (Modifies sdp by removing crypto).
 * However, if only SDES is available, don't disable it.
 *
 * @method sanitizeSdesFromSdp
 * @param {Object} newSdp The SDP so far (could have been modified by previous handlers).
 * @param {Object} info Information about the session description.
 * @param {RTCSdpType} info.type The session description's type.
 * @param {string} info.step The step that will occur after the Pipeline is run.
 * @param {string} info.endpoint Which end of the connection created the SDP.
 * @param {Object} originalSdp The SDP in its initial state.
 * @return {Object} The sanitized SDP with crypto removed (if fingerprint exists)
 */
function sanitizeSdesFromSdp(newSdp, info, originalSdp) {
  for (const mLine of newSdp.media) {
    if (mLine.crypto && mLine.fingerprint) {
      delete mLine.crypto;
    }
  }
  return newSdp;
}

/***/ }),

/***/ 20590:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _compareMedia = _interopRequireDefault(__webpack_require__(43673));
var _pipeline = _interopRequireDefault(__webpack_require__(16582));
/*
 * SDP Helper Operations available in the Callstack.
 * This file is where the names for the operations are defined.
 */

function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('CallstackSDP.compareMedia', () => (0, _compareMedia.default)(bottle.container));
  bottle.factory('CallstackSDP.runPipeline', () => (0, _pipeline.default)(bottle.container));
}

/***/ }),

/***/ 43673:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createCompareMedia;
var _summarizeMedia = _interopRequireDefault(__webpack_require__(56078));
var _matchMedias = __webpack_require__(17706);
var _compareSummary = _interopRequireDefault(__webpack_require__(31725));
var _constants = __webpack_require__(64707);
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
// Libraries.

/**
 * Factory function for creating an instance of the compare media sdp function.
 * @method createCompareMedia
 * @param {Object} container
 * @param {Object} container.logManager The SDK's logManager.
 * @return {Function}
 */
function createCompareMedia(container) {
  const {
    logManager
  } = container;
  /**
   * Compare two SDPs to determine the differences in their media sections.
   * The SDPs need to have been created by the same source.
   * @method compareMedia
   * @param  {string}  logManager    The log manager.
   * @param  {string}  prevSdpString A previous SDP.
   * @param  {string}  sdpString     A new SDP.
   * @param  {boolean} [isNaive=false] Whether to match media sections naively.
   * @return {MediaDiff}
   */
  function compareMedia(prevSdpString, sdpString) {
    let isNaive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // Parse the SDP string into an SDP object for easier handling.
    const prevSdp = _sdpTransform.default.parse(prevSdpString);
    const sdp = _sdpTransform.default.parse(sdpString);

    // Take out only the parts of the SDP that we are interested in.
    //    Each "media" relates to a media section of the SDP.
    const prevMedia = (0, _summarizeMedia.default)(logManager, prevSdp);
    const currMedia = (0, _summarizeMedia.default)(logManager, sdp);
    let sortedMedia;
    if (isNaive) {
      // Match the medias naively, instead of guaranteeing they are
      //    the same media section.
      sortedMedia = (0, _matchMedias.matchMediasNaive)(prevMedia, currMedia);
    } else {
      sortedMedia = (0, _matchMedias.matchMedias)(prevMedia, currMedia);
    }

    // Media found in the previous SDP but not the latest SDP were removed.
    const removed = sortedMedia.prevUnmatched;
    // Media found in the latest SDP but not the previous SDP were added.
    const added = sortedMedia.currUnmatched;

    // Media found in both SDPs may have been changed.
    const changed = [];
    const unchanged = [];
    sortedMedia.matched.forEach(_ref => {
      let {
        previous,
        current
      } = _ref;
      const changes = (0, _compareSummary.default)(previous, current);
      if (changes.sending === _constants.MEDIA_TRANSITIONS.SAME && changes.receiving === _constants.MEDIA_TRANSITIONS.SAME) {
        // No changes.
        unchanged.push(previous);
      } else {
        // Changes. Include both the media summary and the changes found.
        /**
         * Description of how a media line changed, with the latest summary.
         * @typedef  {Object}       ChangedMedia
         * @property {MediaSummary} media        The new summary of the media section.
         * @property {MediaChanges} changes      The changes that occurred to the media.
         */
        changed.push({
          media: current,
          changes
        });
      }
    });

    /**
     * The computed differences of media sections between two SDPs.
     * @typedef  {Object}              MediaDiff
     * @property {Array<MediaSummary>} added     Media sections that are new in the latest SDP.
     * @property {Array<MediaSummary>} removed   Media sections that are missing in the latest SDP.
     * @property {Array<ChangedMedia>} changed   Media changes between the two SDPs.
     * @property {Array<MediaSummary>} unchanged Media sections that remained the same.
     */
    return {
      added,
      removed,
      changed,
      unchanged
    };
  }
  return compareMedia;
}

/***/ }),

/***/ 31725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = compareSummary;
var _constants = __webpack_require__(64707);
/**
 * Compare two summarized Media section objects to determine how it changed.
 * @method compareSummary
 * @param  {MediaSummary} prevMedia The previous media summary.
 * @param  {MediaSummary} currMedia The current media summary.
 * @return {MediaChanges} How the media directions changed from prevMedia to currMedia.
 */
function compareSummary(prevMedia, currMedia) {
  /**
   * Description of changes to a media line.
   * @typedef  {Object} MediaChanges
   * @property {MediaTransition} sending   The change in the media sending data.
   * @property {MediaTransition} receiving The change in the media receiving data.
   */
  const change = {
    sending: undefined,
    receiving: undefined
  };
  if (prevMedia.willSend !== currMedia.willSend) {
    if (currMedia.willSend) {
      // Started sending.
      change.sending = _constants.MEDIA_TRANSITIONS.START;
    } else {
      // Stopped sending.
      change.sending = _constants.MEDIA_TRANSITIONS.STOP;
    }
  } else {
    // No change.
    change.sending = _constants.MEDIA_TRANSITIONS.SAME;
  }
  if (prevMedia.willReceive !== currMedia.willReceive) {
    if (currMedia.willReceive) {
      // Started receiving.
      change.receiving = _constants.MEDIA_TRANSITIONS.START;
    } else {
      // Stopped receiving.
      change.receiving = _constants.MEDIA_TRANSITIONS.STOP;
    }
  } else {
    // No change.
    change.receiving = _constants.MEDIA_TRANSITIONS.SAME;
  }
  return change;
}

/***/ }),

/***/ 64707:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MEDIA_TRANSITIONS = void 0;
const MEDIA_TRANSITIONS = exports.MEDIA_TRANSITIONS = {
  START: 'START',
  STOP: 'STOP',
  SAME: 'SAME'
};

/***/ }),

/***/ 17706:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matchMedias = matchMedias;
exports.matchMediasNaive = matchMediasNaive;
/**
 * Matches MediaSummary objects between two lists of media.
 *    Finds matches between the lists based on the media's sectionId.
 *    If sectionId is undefined (rare cases), matches based on stream/track Ids.
 * Returns a list of matching medias, and a list of unmatched medias for both
 *    previous and current lists.
 * @method matchMedias
 * @param  {Array<MediaSummary>} prevList List of previous media summaries.
 * @param  {Array<MediaSummary>} currList List of current media summaries.
 * @return {Object} Three lists of matched, prevUnmmatched, and currUnmatched.
 */
function matchMedias(prevList, currList) {
  // Redeclare these lists so we don't modify the originals.
  const prev = [...prevList];
  const curr = [...currList];
  const prevUnmatched = [];
  let currUnmatched = [];
  const matched = [];

  // Function for matching a single media object to another object from a list.
  //    Matches by sectionId.
  const findMatchingSectionId = function (prevM, mediaList) {
    return mediaList.findIndex(media => media.sectionId === prevM.sectionId);
  };
  // Function for matching a single media object to another object from a list.
  //    Matches by media/track ID.
  const findMatchingMediaIds = function (prevM, mediaList) {
    return mediaList.findIndex(media => {
      return (
        // One or both of the sectionIds should be undefined, otherwise we shouldn't
        //    be matching with the media/track ID.
        (typeof prevM.sectionId === 'undefined' || typeof media.sectionId === 'undefined') && prevM.mediaId === media.mediaId && prevM.trackId === media.trackId
      );
    });
  };

  /*
   * Step 1:
   * Iterate over previous medias that have a defined sectionId.
   *    First try to find a matching current media with a sectionId.
   *    If none, try to find a matching current media with the same media IDs.
   *    If still none, then consider the prev media to be unmatched.
   */
  prev.filter(m => ['number', 'string'].includes(typeof m.sectionId)).forEach(prevM => {
    const currIndex = findMatchingSectionId(prevM, curr);
    if (currIndex >= 0) {
      // If there's a matching sectionId, add the two medias to the matched list.
      //    Remove currM from its list to ensure nothing else can match with it.
      const [currM] = curr.splice(currIndex, 1);
      matched.push({
        previous: prevM,
        current: currM
      });
    } else {
      const currIndex = findMatchingMediaIds(prevM, curr);
      if (currIndex >= 0) {
        // If there's a matching media IDs, add the two medias to the matched list.
        //    Remove currM from its list to ensure nothing else can match with it.
        const [currM] = curr.splice(currIndex, 1);
        matched.push({
          previous: prevM,
          current: currM
        });
      } else {
        // If a match still wasn't found, then consider prevM unmatched.
        prevUnmatched.push(prevM);
      }
    }
  });

  /*
   * Step 2:
   * Iterate over previous medias that do not have a defined sectionId.
   * Media with sectionIds were given priority since that should be 99% of scenarios.
   *    Try to find a matching current media with the same media IDs.
   *    If none, then consider the prev media to be unmatched.
   */
  prev.filter(m => typeof m.sectionId === 'undefined').forEach(prevM => {
    const currIndex = findMatchingMediaIds(prevM, curr);
    if (currIndex >= 0) {
      // If there's a matching media IDs, add the two medias to the matched list.
      //    Remove currM from its list to ensure nothing else can match with it.
      const [currM] = curr.splice(currIndex, 1);
      matched.push({
        previous: prevM,
        current: currM
      });
    } else {
      // If a match wasn't found, then consider prevM unmatched.
      prevUnmatched.push(prevM);
    }
  });

  /*
   * Step 3:
   * Consider all remaining medias in the current list to be unmatched.
   *    All matched currMedia should have been removed from the list when it was matched.
   */
  currUnmatched = curr;
  return {
    prevUnmatched,
    currUnmatched,
    matched
  };
}

/**
 * Matches MediaSummary objects between two lists of media.
 *
 * Matches them based on their index in the lists. That's it.
 * This works under the assumption that the order of the media sections
 *    will never change, which is generally true. This may not be true
 *    in "non-basic" media scenarios (ie. more than two media sections)
 *    if a PeerConnection needs to be recreated.
 * This will only work if only comparing SDPs, and not using the
 *    Transceivers that represent the media sections.
 * @method matchMediasNaive
 * @param  {Array<MediaSummary>} prevList List of previous media summaries.
 * @param  {Array<MediaSummary>} currList List of current media summaries.
 * @return {Object} Three lists of matched, prevUnmmatched, and currUnmatched.
 */
function matchMediasNaive(prevList, currList) {
  // Redeclare these lists so we don't modify the originals.
  const prev = [...prevList];
  const curr = [...currList];
  const prevUnmatched = [];
  const currUnmatched = [];
  const matched = [];
  const longerLength = prev.length <= curr.length ? curr.length : prev.length;

  // Loop enough times to cover which media list is longer.
  for (let i = 0; i < longerLength; i++) {
    if (prev[i] === undefined) {
      // If the prev media at this index is undefined, then the curr
      //    media at this index is currUnmatched.
      currUnmatched.push(curr[i]);
    } else if (curr[i] === undefined) {
      // Same thing other way around.
      prevUnmatched.push(prev[i]);
    } else {
      // Else both prev/curr have a media at this index. Match them.
      matched.push({
        previous: prev[i],
        current: curr[i]
      });
    }
  }
  return {
    prevUnmatched,
    currUnmatched,
    matched
  };
}

/***/ }),

/***/ 67251:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getOperation;
exports.hadMediaFlowing = hadMediaFlowing;
exports.hasMediaFlowing = hasMediaFlowing;
exports.was3xHold = was3xHold;
exports.was3xUnhold = was3xUnhold;
exports.wasAddMedia = wasAddMedia;
exports.wasHold = wasHold;
exports.wasNoChange = wasNoChange;
exports.wasRemoveMedia = wasRemoveMedia;
exports.wasStartMoh = wasStartMoh;
exports.wasStopMoh = wasStopMoh;
exports.wasUnhold = wasUnhold;
var _constants = __webpack_require__(64707);
var _constants2 = __webpack_require__(37409);
// Constants

/**
 * Based on a MediaDiff object, determine what the call operation was that
 *    caused the SDP/media change.
 * @method getOperation
 * @param  {MediaDiff} mediaDiff
 * @return {string}
 */
function getOperation(mediaDiff) {
  // Naively just check one operation after the other.
  // TODO: Make this more efficient?
  // TODO: These MoH checks should take into account current call state.
  //    Start/Stop MoH should only be possible in specific states.
  if (wasHold(mediaDiff) || was3xHold(mediaDiff)) {
    return _constants2.OPERATIONS.HOLD;
  } else if (wasUnhold(mediaDiff) || was3xUnhold(mediaDiff)) {
    return _constants2.OPERATIONS.UNHOLD;
  } else if (wasStartMoh(mediaDiff)) {
    // Check 'start MoH' before 'add media' because 'start MoH' is a special
    //    case of 'add media'.
    return _constants2.OPERATIONS.START_MOH;
  } else if (wasAddMedia(mediaDiff)) {
    return _constants2.OPERATIONS.ADD_MEDIA;
  } else if (wasStopMoh(mediaDiff)) {
    // Check 'stop MoH' before 'remove media' because 'stop MoH' is a special
    //    case of 'remove media'.
    return _constants2.OPERATIONS.STOP_MOH;
  } else if (wasRemoveMedia(mediaDiff)) {
    return _constants2.OPERATIONS.REMOVE_MEDIA;
  } else if (wasNoChange(mediaDiff)) {
    return 'NO_CHANGE';
  } else {
    return 'UNKNOWN';
  }
}

/**
 * A "hold" operation is when all media lines change to be "inactive".
 * Some media may have already been inactive. "Hold" is specifically when
 *    all active media becomes inactive, hence there is no longer any media
 *    flowing.
 *
 * This differs from a "stop MoH" operation by requiring at least one media to
 *    be "flowing" (both sending and receiving) before the operation. For
 *    "stop MoH", the media would only be sending (and not receiving) before.
 *
 * In terms of SDP changes, it is defined as:
 *    1) At least one media was 'flowing' before the SDP change.
 *    2) No media is 'flowing' after the SDP change.
 *    3) No active media was added.
 *    4) No media was removed.
 *    5) All media that changed was stopped.
 *        ie. is being "held".
 *    6) All media that is unchanged is not sending/receiving.
 *        ie. was already "held".
 * @method wasHold
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function wasHold(mediaDiff) {
  const {
    added,
    removed,
    changed,
    unchanged
  } = mediaDiff;

  /*
   * 1 & 2) Some media was flowing before the change, and no media is flowing
   *    after the change. This ensures "hold" is distinct from "stop MoH"
   *    scenarios.
   */
  const stoppedFlowing = hadMediaFlowing(mediaDiff) && !hasMediaFlowing(mediaDiff);

  /*
   * 3) No active media was added.
   * For any added media we need to check if it's inactive to determine if this was a hold
   */
  const noActiveMediaAdded = !added.some(media => media.willSend || media.willReceive);

  /*
   * 4) No media was removed
   */
  const noMediaRemoved = removed.length === 0;

  /*
   * 5a) Some media did change.
   */
  const didChange = changed.length > 0;

  /*
   * 5b) For all media that changed,
   *    all changes were either `stop` or `remain stopped`.
   */
  const allStopped = changed.every(_ref => {
    let {
      media,
      changes
    } = _ref;
    // This media is not sending.
    const notSending = changes.sending === _constants.MEDIA_TRANSITIONS.STOP || changes.sending === _constants.MEDIA_TRANSITIONS.SAME && !media.willSend;
    // This media is not receiving.
    const notReceiving = changes.receiving === _constants.MEDIA_TRANSITIONS.STOP || changes.receiving === _constants.MEDIA_TRANSITIONS.SAME && !media.willReceive;
    return notSending && notReceiving;
  });

  /*
   * 6) For all media that was not changed,
   *    no media is being sent/received.
   */
  const stillStopped = unchanged.every(media => {
    return !media.willSend && !media.willReceive;
  });
  return stoppedFlowing && noActiveMediaAdded && noMediaRemoved && didChange && allStopped && stillStopped;
}
function wasUnhold(mediaDiff) {
  const {
    added,
    removed,
    changed,
    unchanged
  } = mediaDiff;

  /*
   * 1 & 2) No media was flowing before the change, and some media is flowing
   *    after the change. This ensures "unhold" is distinct from "start MoH"
   *    scenarios.
   */
  const startedFlowing = !hadMediaFlowing(mediaDiff) && hasMediaFlowing(mediaDiff);

  /*
   * 3 & 4) No media was added or removed.
   */
  const sameMedia = added.length === 0 && removed.length === 0;

  /*
   * 6) For all media that was not changed,
   *    no media is being sent/received.
   */
  const noUnchangedSend = unchanged.every(media => {
    return !media.willSend && !media.willReceive;
  });

  /*
   * 5a) Some media did change.
   */
  const didChange = changed.length > 0;

  /*
   * 5b) For all media that was changed,
   *    all changes were either `start` or `remain stopped`.
   */
  const onlyStartChanges = changed.every(_ref2 => {
    let {
      media,
      changes
    } = _ref2;
    const onlyStartSending = changes.sending === _constants.MEDIA_TRANSITIONS.START || changes.sending === _constants.MEDIA_TRANSITIONS.SAME && !media.willSend;
    const onlyStartReceiving = changes.receiving === _constants.MEDIA_TRANSITIONS.START || changes.receiving === _constants.MEDIA_TRANSITIONS.SAME && !media.willReceive;
    return onlyStartSending && onlyStartReceiving;
  });
  return startedFlowing && sameMedia && noUnchangedSend && didChange && onlyStartChanges;
}

/**
 * A "3.X hold" operation is when a hold operation changes media to `sendonly`
 *    instead of `inactive`. This is what the 3.X SDK and Mobile SDK does. This
 *    is for interop with remote endpoints other than the 4.X SDK.
 *
 * In terms of SDP changes, it is defined as:
 *    1) At least one media was 'flowing' before the SDP change.
 *    2) All changed audio media is now 'sendonly'.
 *        ie. is being "v3.X held"
 *       All changed video media is not receiving.
 *    3) No active media was added.
 *    4) No media was removed.
 *    5) All media that is unchanged is not sending/receiving.
 *        ie. was already "held".
 *
 * @method was3xUnhold
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function was3xHold(mediaDiff) {
  const {
    added,
    removed,
    changed,
    unchanged
  } = mediaDiff;

  /*
   * 1) Handles when some media was flowing before the change.
   *  or a special case where media was flowing but assumes media wasn't flowing.
   * 2) All changed media is now "sendonly".
   *    All changed video media is not receiving.
   */
  const wasFlowing = hadMediaFlowing(mediaDiff);
  const allSendOnly = changed.every(_ref3 => {
    let {
      media,
      changes
    } = _ref3;
    /**
     * Possible scenarios:
     *
     *  1. Audio-only 3.X Hold:
     *    - A sendrecv --> A sendonly
     *
     *  2. Two way Audio-Video (eg. KAA-2639):
     *    - A/V sendrecv/sendrecv --> A/V sendonly/inactive
     *  3. Two way Audio-Video (eg. KAA-2463):
     *    - A/V sendrecv/sendrecv --> A/V sendonly/sendonly
     *
     *  4. Two way Audio, One way receive Video:
     *    - A/V sendrecv/recvonly --> A/V sendonly/inactive
     *  5. Two way Audio, One way receive Video:
     *    - A/V sendrecv/recvonly --> A/V sendonly/sendonly
     *
     *  6. Two way Audio, One way send Video:
     *    - A/V sendrecv/sendonly --> A/V sendonly/inactive
     *  7. Two way Audio, One way send Video:
     *    - A/V sendrecv/sendonly --> A/V sendonly/sendonly (video checked by 5) below)
     *
     * The summary of these scenarios are:
     *  - Audio always stops receiving.
     *  - Audio always continues sending.
     *  - Video is never receiving afterwards (stop, same).
     *  - Video sending can be anything (same, start, stop).
     */
    if (media.type === 'audio') {
      // Changed audio always stops being received by the remote endpoint.
      // Changed audio always continues being sent by the remote endpoint.
      return changes.receiving === _constants.MEDIA_TRANSITIONS.STOP && changes.sending === _constants.MEDIA_TRANSITIONS.SAME;
    } else {
      return (
        // Changed video is never received afterwards.
        //     Either stopped or stayed "not receiving".
        changes.receiving === _constants.MEDIA_TRANSITIONS.STOP || changes.receiving === _constants.MEDIA_TRANSITIONS.SAME && media.willReceive === false
      );
    }
  });

  /*
   * 3) No active media was added.
   * For any added media we need to check if it's inactive to determine if this was a hold
   */
  const noActiveMediaAdded = !added.some(media => media.willSend || media.willReceive);

  /*
   * 4) No media was removed
   */
  const noMediaRemoved = removed.length === 0;

  /*
   * 5) For all media that was not changed,
   *      no media is being sent/received,
   *      or video might still be sendonly.
   */
  const noUnchangedSend = unchanged.every(media => {
    return !media.willSend && !media.willReceive ||
    // Edge-case: One-way video was being received, and the hold did not
    //    change the direction but just stopped the video being sent.
    media.type === 'video' && media.willSend && !media.willReceive;
  });
  return wasFlowing && allSendOnly && noActiveMediaAdded && noMediaRemoved && noUnchangedSend;
}

/**
 * A "3.X unhold" operation is when a v3.X SDK performs unhold. This is for
 *    interop.
 *
 * This operation is the same as a "regular" unhold, except that media changes
 *    from sendonly instead of inactive.
 *
 * In terms of SDP changes, it is defined as:
 *    1) Some media is flowing afterwards.
 *    2) All media that changed was started receiving.
 *        ie. is being "3.X unheld"
 *    3) No media was added.
 *    4) No media was removed.
 *    5) All media that is unchanged is not sending/receiving.
 *        ie. was (and still is) "held"
 *
 * @method was3xUnhold
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function was3xUnhold(mediaDiff) {
  const {
    added,
    removed,
    changed,
    unchanged
  } = mediaDiff;

  /*
   * 1) Some media was flowing before the change.
   * 2) All changed media is now went from "sendonly" to "sendrecv".
   */
  const isFlowing = hasMediaFlowing(mediaDiff);
  const allSending = changed.every(_ref4 => {
    let {
      media,
      changes
    } = _ref4;
    return changes.sending === _constants.MEDIA_TRANSITIONS.SAME && changes.receiving === _constants.MEDIA_TRANSITIONS.START || (
    /*
     * Special-case: If the media is video, it's possible to go from "inactive" to "sendrecv".
     *    This can happen when the SDK is receiving MoH then is unheld immediately (without
     *    going through a stop MoH operation).
     * This behaviour was seen when the remote endpoint was a SIP device. See KAA-2593.
     */
    media.type === 'video' && changes.sending === _constants.MEDIA_TRANSITIONS.START && changes.receiving === _constants.MEDIA_TRANSITIONS.START);
  });

  /*
   * 3) & 4) No media was added or removed.
   */
  const sameMedia = added.length === 0 && removed.length === 0;

  /*
   * 5) For all media that was not changed,
   *    no media is being sent/received.
   */
  const noUnchangedSend = unchanged.every(media => {
    return !media.willSend && !media.willReceive;
  });
  return isFlowing && allSending && sameMedia && noUnchangedSend;
}

/**
 * An "add media" operation is when the latest SDP is sending tracks that the
 *    previous SDP was not sending. This can either be a new, sending media
 *    section or an existing media section that was changed to now send.
 *
 * The "start MoH" scenario is a special-case of "add media". When one audio
 *    track is added/started, with no media flowing beforehand, then that could
 *    either be a "start MoH" or "add media" operation. From a webrtc/SDP
 *    viewpoint, they are the same thing in that scenario, so there is no way
 *    to tell them apart using only a MediaDiff object.
 * If both ends of the Call are SDK clients, then "start MoH" can only be done
 *    when the Call is on hold (by definition), and "add media" can only be
 *    done when the Call is not on hold (requirement set by the API), but we
 *    can't make that assumption.
 *
 * In terms of SDP changes, it is defined as:
 *    1) No media [sections] was removed.
 *    2) Any media added is sending.
 *    3) Any media that changed started sending.
 * @method wasAddMedia
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function wasAddMedia(mediaDiff) {
  const {
    added,
    removed,
    changed
  } = mediaDiff;

  /*
   * 1) No media sections were removed.
   */
  const wasntRemoved = removed.length === 0;

  /*
   * 2a & 3a) Something was added or changed.
   */
  const somethingStarted = added.length > 0 || changed.length > 0;

  /*
   * 2b) Any media sections added are sending.
   */
  const addedSending = added.every(media => media.willSend);

  /*
   * 3b) Any media that changed was to start sending.
   */
  const changedSending = changed.every(_ref5 => {
    let {
      media,
      changes
    } = _ref5;
    // Should handle:
    //    reconly  --> sendrecv
    //    inactive --> sendonly
    //    inactive --> sendrecv
    return changes.sending === _constants.MEDIA_TRANSITIONS.START && (changes.receiving === _constants.MEDIA_TRANSITIONS.SAME || changes.receiving === _constants.MEDIA_TRANSITIONS.START);
  });

  /*
   * Unchanged media is not checked for.
   *    By definition, it is the same as before, and could be in any state.
   */

  return wasntRemoved && somethingStarted && addedSending && changedSending;
}

/**
 * A "remove media" operation is when some media sections stop sending (with no
 *    other changes).
 *
 * The "stop MoH" scenario is a special-case of "remove media". When one audio
 *    track is removed, leaving no media flowing afterwards, then that could
 *    either be a "stop MoH" or "remove media" operation. From a webrtc/SDP
 *    viewpoint, they are the same thing in that scenario, so there is no way
 *    to tell them apart using only a MediaDiff object.
 * If both ends of the Call are SDK clients, then "stop MoH" can only be done
 *    when the Call is on hold (by definition), and "remove media" can only be
 *    done when the Call is not on hold (requirement set by the API), but we
 *    can't make that assumption.
 *
 * In terms of SDP changes, it is defined as:
 *    1) No media was added.
 *    2) No media [sections] were removed.
 *    3) Some existing media stopped sending (ie. tracks were removed).
 * @method wasRemoveMedia
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function wasRemoveMedia(mediaDiff) {
  const {
    added,
    removed,
    changed
  } = mediaDiff;

  /*
   * 1 & 2) No media sections were added or removed.
   */
  const wasntAdded = added.length === 0;
  const wasntRemoved = removed.length === 0;

  /*
   * 3a) Some media sections changed.
   */
  const wasChanged = changed.length > 0;

  /*
   * 3b) For all media sections that changed,
   *      the only change was to stop sending.
   */
  const onlyStopSending = changed.every(_ref6 => {
    let {
      media,
      changes
    } = _ref6;
    return changes.sending === _constants.MEDIA_TRANSITIONS.STOP &&
    // Receiving may be SAME or START, depending if the previous media
    //    direction was sendrecv (SAME) or sendonly (START).
    // TODO: Update `ChangedMedia` to include the pre-change media summary?
    changes.receiving !== _constants.MEDIA_TRANSITIONS.STOP;
  });

  /*
   * Unchanged media is not checked for.
   *    By definition, it is the same as before, and could in any state.
   */

  return wasntAdded && wasntRemoved && wasChanged && onlyStopSending;
}

/**
 * A "start Music on Hold" operation is when media is currently held, and one
 *    audio media is changed to "send only".
 *
 * This checker does not guarantee that it was a "start MoH" scenario, and not
 *    a very specific "add media" scenario. It is an edge-case, but it is
 *    possible that both sides of the Call removed all media, then one side
 *    adds a single audio track. There is no way to tell the difference with
 *    only a MediaDiff object.
 *
 * In terms of SDP changes, it is defined as:
 *    0) A "add media" scenario where:
 *    1) One inactive audio section starts sending.
 *    2) All other media remains unchanged.
 *    3) Any unchanged media is inactive.
 * @method wasStartMoh
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function wasStartMoh(mediaDiff) {
  const {
    added,
    removed,
    changed,
    unchanged
  } = mediaDiff;

  // 0) "Start MoH" is a "add media" scenario that has extra requirements.
  if (!wasAddMedia(mediaDiff)) {
    return false;
  }

  /*
   * 1) Only one audio line should be changed, to send only.
   */
  const onlyAudioChange =
  // Only one audio line changed.
  changed.length === 1 && changed[0].media.type === 'audio' &&
  // The change was to start sending media.
  changed[0].changes.sending === _constants.MEDIA_TRANSITIONS.START &&
  // Receiving media remains unchanged; not receiving.
  changed[0].changes.receiving === _constants.MEDIA_TRANSITIONS.SAME && !changed[0].media.willReceive;

  /*
   * 2) No media was added or removed.
   */
  const sameMedia = added.length === 0 && removed.length === 0;

  /*
   * 3) For all media that is unchanged,
   *    they are not sending/receiving.
   */
  const inactiveUnchanged = unchanged.every(media => {
    return !media.willSend && !media.willReceive;
  });
  return sameMedia && inactiveUnchanged && onlyAudioChange;
}

/**
 * A "stop Music on Hold" operation is when media starts in a MoH state, then
 *    reverts back to an "on hold" state.
 *
 * This checker does not guarantee that it was a "stop MoH" scenario, and not
 *    a very specific "remove media" scenario. It is possible that a Call is
 *    established with one-way audio (and no video), then the audio is removed.
 *    There is no way to tell the difference with only a MediaDiff object.
 *
 * In terms of SDP changes, it is defined as:
 *    0) A "remove media" scenario where:
 *    1) One audio section changed stopped sending.
 *    2) All other media remains unchanged.
 *    3) Any unchanged media is inactive.
 * @method wasStopMoh
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function wasStopMoh(mediaDiff) {
  const {
    added,
    removed,
    changed,
    unchanged
  } = mediaDiff;

  // 0) "Stop MoH" is a "remove media" scenario that has extra requirements.
  if (!wasRemoveMedia(mediaDiff)) {
    return false;
  }

  /*
   * 1) Only one audio line should be changed, from send only to inactive.
   */
  const stopSendAudio =
  // Only one audio line changed.
  changed.length === 1 && changed[0].media.type === 'audio' &&
  // The change was to stop sending media.
  changed[0].changes.sending === _constants.MEDIA_TRANSITIONS.STOP &&
  // Receiving media remains unchanged; not receiving.
  changed[0].changes.receiving === _constants.MEDIA_TRANSITIONS.SAME && !changed[0].media.willReceive;

  /*
   * 2) No media was added or removed.
   */
  const sameMedia = added.length === 0 && removed.length === 0;

  /*
   * 3) For all media that is unchanged,
   *    they are not sending/receiving.
   */
  const inactiveUnchanged = unchanged.every(media => {
    return !media.willSend && !media.willReceive;
  });
  return sameMedia && inactiveUnchanged && stopSendAudio;
}

/**
 * A "no change" media operation is when all media sections remain the same.
 *    The remote operation was something other than changing media.
 *
 * In terms of SDP comparison, it is defined as:
 *    1) No media sections were added, removed, or changed.
 *    2) Some media remained unchanged.
 * @method wasNoChange
 * @param  {MediaDiff} mediaDiff Media differences described between two SDPs.
 * @return {boolean}
 */
function wasNoChange(mediaDiff) {
  const {
    added,
    removed,
    changed,
    unchanged
  } = mediaDiff;

  /*
   * No media did anything other than `unchanged`.
   */
  const noChange = added.length === 0 && removed.length === 0 && changed.length === 0;

  /*
   * ...but there is media in the SDP.
   */
  const hasUnchanged = unchanged.length > 0;
  return noChange && hasUnchanged;
}

/**
 * Determines whether a MediaDiff object describes the SDP as having had media
 *    flowing (a media both sending and receiving; flowing in both directions)
 *    _before_ the SDP changes.
 * @method hadMediaFlowing
 * @param  {MediaDiff} mediaDiff
 * @return {boolean}   Whether the MediaDiff has media flowing before the change.
 */
function hadMediaFlowing(mediaDiff) {
  const {
    removed,
    changed,
    unchanged
  } = mediaDiff;

  /*
   * If any unchanged media is sending and receiving, then media was (and still
   *    is) flowing before the SDP change.
   */
  const unchangedFlowing = unchanged.some(media => {
    return media.willSend && media.willReceive;
  });

  /*
   * If any changed media was sending and receiving, then media was flowing
   *    before the SDP change.
   */
  const changedFlowing = changed.some(_ref7 => {
    let {
      media,
      changes
    } = _ref7;
    /*
     * A changed media was sending before the change if
     *    1) the change was to stop sending, or
     *    2) sending didn't change, and is still sending.
     */
    const wasSending = changes.sending === _constants.MEDIA_TRANSITIONS.STOP || changes.sending === _constants.MEDIA_TRANSITIONS.SAME && media.willSend;

    /*
     * A changed media was receiving before the change if
     *    1) the change was to stop receiving, or
     *    2) receiving didn't change, and is still receiving.
     */
    const wasReceiving = changes.receiving === _constants.MEDIA_TRANSITIONS.STOP || changes.receiving === _constants.MEDIA_TRANSITIONS.SAME && media.willReceive;
    return wasSending && wasReceiving;
  });

  /*
   * If any removed media was sending and receiving, then media was flowing
   *    before the SDP change.
   */
  const removedFlowing = removed.some(media => {
    return media.willSend && media.willReceive;
  });

  /*
   * Ignore `added` media, since that tells us nothing about media before the
   *    SDP change.
   */

  return unchangedFlowing || changedFlowing || removedFlowing;
}

/**
 * Determines whether a MediaDiff object describes the SDP as having media
 *    flowing (a media both sending and receiving; flowing in both directions)
 *    _after_ the SDP changes.
 * @method hasMediaFlowing
 * @param  {MediaDiff} mediaDiff
 * @return {boolean}   Whether the MediaDiff has media flowing after the change.
 */
function hasMediaFlowing(mediaDiff) {
  const {
    added,
    changed,
    unchanged
  } = mediaDiff;

  /*
   * If any unchanged media is sending and receiving, then media is (and was)
   *    flowing after the SDP change.
   */
  const unchangedFlowing = unchanged.some(media => {
    return media.willSend && media.willReceive;
  });

  /*
   * If any changed media is sending and receiving, then media is flowing
   *    after the SDP change.
   */
  const changedFlowing = changed.some(_ref8 => {
    let {
      media,
      changes
    } = _ref8;
    return media.willSend && media.willReceive;
  });

  /*
   * If any added media is sending and receiving, then media is flowing
   *    after the SDP change.
   */
  const addedFlowing = added.some(media => {
    return media.willSend && media.willReceive;
  });

  /*
   * Ignore `removed` media, since that tells us nothing about media after the
   *    SDP change.
   */

  return unchangedFlowing || changedFlowing || addedFlowing;
}

/***/ }),

/***/ 45294:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getAffectedRemoteTracks;
exports.getAllRemoteTracks = getAllRemoteTracks;
exports.getIncomingRemoteTracks = getIncomingRemoteTracks;
var _operations = __webpack_require__(67251);
var _constants = __webpack_require__(37409);
// Callstack plugin.

// Call plugin.

/**
 * Get the remote tracks of a Session that are affected by a remote operation.
 * @param {string} operation The remote operation type.
 * @param {MediaDiff} mediaDiff The difference between the SDP's media sections before/after the operation.
 * @param {Sesison} session A WebRTC-stack Session object.
 * @return {Array<string>} List of track IDs.
 */
async function getAffectedRemoteTracks(operation, mediaDiff, session) {
  /*
   * If a media section was removed, then this is not a normal WebRTC negotiation. This
   *    is likely a complex operation where the PeerConnection was recreated. Calls are
   *    always on hold when a PeerConnection is recreated, so all remote tracks should
   *    be considered as "added".
   * The media sections of the SDP may not have IDs, which is another reason to simply
   *    "get all".
   */
  if (mediaDiff.removed.length > 0) {
    const affectedTracks = await getAllRemoteTracks(session);
    return affectedTracks;
  }
  let sectionIds;
  switch (operation) {
    case _constants.OPERATIONS.ADD_MEDIA:
    case _constants.OPERATIONS.START_MOH:
      sectionIds = getAddedSectionIds(mediaDiff);
      break;
    case _constants.OPERATIONS.REMOVE_MEDIA:
    case _constants.OPERATIONS.STOP_MOH:
      sectionIds = getRemovedSectionIds(mediaDiff);
      break;
    case _constants.OPERATIONS.HOLD:
      sectionIds = (0, _operations.was3xHold)(mediaDiff) ? get3xHeldSectionIds(mediaDiff) : getHeldSectionIds(mediaDiff);
      break;
    case _constants.OPERATIONS.UNHOLD:
      sectionIds = (0, _operations.was3xUnhold)(mediaDiff) ? get3xUnheldSectionIds(mediaDiff) : getUnheldSectionIds(mediaDiff);
      break;
    default:
      // What do?
      sectionIds = [];
  }
  const affectedTracks = await session.getRemoteTrackIdsFromTransceivers(sectionIds);
  return affectedTracks;
}

/**
 * Get the media sections of an SDP where media was remobed by a remote "hold"
 *    SDK operation.
 * @param {MediaDiff} mediaDiff
 * @return {Array<string>} List of media section IDs.
 */
function getHeldSectionIds(mediaDiff) {
  const heldSections = [];
  mediaDiff.changed.forEach(changedMedia => {
    const {
      media,
      changes
    } = changedMedia;
    // We know this was a hold operation, so we only need to check that the
    //    media section stopped sending media to know that a track was removed here.
    if (changes.sending === 'STOP') {
      const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
      heldSections.push(id);
    }
  });
  return heldSections;
}

/**
 * Get the media sections of an SDP where media was remobed by a remote "hold"
 *    SDK operation. This function covers the special cases for interop with 3.x/Mobile.
 *    Refer to `was3xHold` function for more details.
 * @param {MediaDiff} mediaDiff
 * @return {Array<string>} List of media section IDs.
 */
function get3xHeldSectionIds(mediaDiff) {
  const heldSections = [];
  mediaDiff.changed.forEach(changedMedia => {
    const {
      media,
      changes
    } = changedMedia;
    if (media.type === 'audio') {
      // Changed audio always stops being received by the remote endpoint.
      // Changed audio always continues being sent by the remote endpoint.
      if (changes.receiving === 'STOP' && changes.sending === 'SAME') {
        const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
        heldSections.push(id);
      }
    } else {
      // Changed video is never received afterwards.
      //     Either stopped or stayed "not receiving".
      if (changes.receiving === 'STOP' || changes.receiving === 'SAME' && media.willReceive === false) {
        const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
        heldSections.push(id);
      }
    }
  });

  // Edge-case: One-way video was being received, and the hold did not
  //    change the direction but just stopped the video being sent.
  mediaDiff.unchanged.forEach(media => {
    if (media.type === 'video' && media.willSend && !media.willReceive) {
      const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
      heldSections.push(id);
    }
  });
  return heldSections;
}

/**
 * Get the media sections of an SDP where media was added by a remote "unhold"
 *    SDK operation.
 * @param {MediaDiff} mediaDiff
 * @return {Array<string>} List of media section IDs.
 */
function getUnheldSectionIds(mediaDiff) {
  const unheldSections = [];
  mediaDiff.changed.forEach(changedMedia => {
    const {
      media,
      changes
    } = changedMedia;
    // We know this was an unhold operation, so we only need to check that the
    //    media section started sending media to know that a track was added here.
    if (changes.sending === 'START') {
      const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
      unheldSections.push(id);
    }
  });
  return unheldSections;
}

/**
 * Get the media sections of an SDP where media was added by a remote "unhold"
 *    SDK operation. This function covers the special cases for interop with 3.x/Mobile.
 *    Refer to `was3xUnhold` function for more details.
 * @param {MediaDiff} mediaDiff
 * @return {Array<string>} List of media section IDs.
 */
function get3xUnheldSectionIds(mediaDiff) {
  const unheldSections = [];
  // Special cases for 3.x/Mobile; refer to `was3xUnhold` function for more details.
  //    Summary: all changed media went from 'sendonly' to 'sendrecv'
  mediaDiff.changed.forEach(_ref => {
    let {
      media,
      changes
    } = _ref;
    if (changes.sending === 'SAME' && changes.receiving === 'START' || (
    /*
     * Special-case: If the media is video, it's possible to go from "inactive" to "sendrecv".
     *    This can happen when the SDK is receiving MoH then is unheld immediately (without
     *    going through a stop MoH operation).
     * This behaviour was seen when the remote endpoint was a SIP device. See KAA-2593.
     */
    media.type === 'video' && changes.sending === 'START' && changes.receiving === 'START')) {
      const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
      unheldSections.push(id);
    }
  });
  return unheldSections;
}

/**
 * Get the media sections of an SDP where media was added by a remote "add media"
 *    SDK operation.
 * @param {MediaDiff} mediaDiff
 * @return {Array<string>} List of media section IDs.
 */
function getAddedSectionIds(mediaDiff) {
  let addedMediaSections = [];
  mediaDiff.changed.forEach(changedMedia => {
    const {
      media,
      changes
    } = changedMedia;
    // This ChangedMedia object represents a "track added".
    if (changes.sending === 'START' && (changes.receiving === 'SAME' || changes.receiving === 'START')) {
      const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
      addedMediaSections.push(id);
    }
  });

  // For the Transceiver for newly added media sections to exist, the SDK has to
  //    have handled the remote offer at the WebRTC-layer already.
  const newSectionsWithTracks = mediaDiff.added.filter(mediaSummary => mediaSummary.willSend).map(mediaSummary => {
    // If the sectionId is undefined, return the index instead.
    // The order of media sections (their index) /should/ never change.
    return typeof mediaSummary.sectionId === 'undefined' ? mediaSummary.sectionIndex : mediaSummary.sectionId;
  });
  addedMediaSections = addedMediaSections.concat(newSectionsWithTracks);
  return addedMediaSections;
}

/**
 * Get the media sections of an SDP where media was removed by a remote "remove media"
 *    SDK operation.
 * @param {MediaDiff} mediaDiff
 * @return {Array<string>} List of media section IDs.
 */
function getRemovedSectionIds(mediaDiff) {
  // Get the list of media section Ids that media was removed from.
  const removedMediaSections = [];
  mediaDiff.changed.forEach(changedMedia => {
    const {
      media,
      changes
    } = changedMedia;
    // This ChangedMedia object represents a "track removed".
    if (changes.sending === 'STOP' && changes.receiving !== 'STOP') {
      const id = typeof media.sectionId === 'undefined' ? media.sectionIndex : media.sectionId;
      removedMediaSections.push(id);
    }
  });
  return removedMediaSections;
}

/**
 * Get the list of all remote tracks currently being received for a Session.
 * @param {Session} session A WebRTC-stack Session object.
 * @return {Array<string>} List of remote track IDs.
 */
async function getAllRemoteTracks(session) {
  const affectedTracks = await session.getActiveRemoteTrackIds();
  return affectedTracks;
}

/**
 * Get the list of all incoming remote tracks not yet being received for a Session.
 * @param {Session} session A WebRTC-stack Session object.
 * @return {Array<string>} List of remote track IDs.
 */
async function getIncomingRemoteTracks(session) {
  const incomingTracks = await session.getIncomingRemoteTrackIds();
  return incomingTracks;
}

/***/ }),

/***/ 56078:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = summarizeMedia;
/**
 * Reduce the media information in the SDP to only what we will use.
 * The SDP object provided as input is assumed to use standard values.
 *
 * Only supports SDPs where there is only one track per media section.
 *    eg. Unified-Plan (?).
 *
 * @method summarizeMedia
 * @param  {Object} sdp The full SDP object.
 * @param  {Object} logManager The log manager.
 * @return {Array<MediaSummary>} Summarized media sections from the SDP.
 */
function summarizeMedia(logManager, sdp) {
  const log = logManager.getLogger('SDP');
  const sdpMedia = [];
  sdp.media.forEach((media, index) => {
    /*
     * Generate/Find a unique ID for this media section. This will be used to
     *    compare against another SDP's media sections to find matching
     *    sections.
     */
    const sectionId = media.mid;
    // In case the sectionId is undefined, take note of the index of the media section.
    const sectionIndex = index;
    if (media.ssrcGroups && media.ssrcGroups.length > 1) {
      /*
       * All of the logic in this file assumes that a media section only has 1
       *    track. If there are more than one, it means that we are using
       *    a plan other then Unified-Plan (e.g. A plan with more than 1 track of the same media type), which is not
       *    something that we want to support.
       */
      log.debug(`Media section contains multiple ssrc groups. Summary for ${sectionId} will be wrong.`);
    }

    // If the media section doesn't have a direction, then use the session-level direction.
    const mediaDirection = media.direction || sdp.direction;

    // Whether this media section is sending and/or receiving.
    let willSend;
    let willReceive;
    if (mediaDirection) {
      willSend = mediaDirection.includes('send');
      willReceive = mediaDirection.includes('recv');
    } else {
      // If there is no media direction attribute at both the media-level and
      //    session-level, then it is to be assumed the direction is "sendrecv".
      // Ref: RFC 4566, page 26: https://tools.ietf.org/html/rfc4566
      willSend = true;
      willReceive = true;
    }
    let mediaId, trackId;
    /*
     * If the media section is sending, then it has information about the track
     *    that it is sending.
     *
     * Note: The media section will never have information about a track it is
     *    receiving (ie. willReceive), because the SDP only describes the
     *    "local" PeerConnection's situation.
     */
    if (willSend) {
      /**
       * The SDP should either have a `msid` property (a=msid line) or `ssrc`
       *    lines with the same information (`a=ssrc:... label:...` and
       *    `a=ssrc:... mslabel:...`).
       * If it has nethier, then the SDP says it wants to send a track, but it
       *    has no track to send.
       */
      if (media.msid) {
        ;
        [mediaId, trackId] = media.msid.split(' ');
      } else if (media.ssrcs) {
        mediaId = media.ssrcs.find(ssrc => ssrc.attribute === 'mslabel').value;
        trackId = media.ssrcs.find(ssrc => ssrc.attribute === 'label').value;
      }
    } else {
      // This media section is not sending a track, so there is no information.
      mediaId = undefined;
      trackId = undefined;
    }

    /**
     * Summarized information about a media section from an SDP.
     * @typedef  {Object}  MediaSummary
     * @property {string}  sectionId    A unique identifier for the media section.
     * @property {string}  sectionIndex The index of the media section in the SDP.
     * @property {string}  type         The type of media line.
     * @property {boolean} willSend     Whether the media will send data.
     * @property {boolean} willReceive  Whether the media will receive data.
     * @property {string}  mediaId      The MediaStream ID of the media.
     * @property {string}  trackId      The MediaStreamTrack ID of the media.
     */
    const summary = {
      sectionId,
      sectionIndex,
      type: media.type,
      willSend,
      willReceive,
      mediaId,
      trackId
    };
    sdpMedia.push(summary);
  });
  return sdpMedia;
}

/***/ }),

/***/ 16582:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createPipeline;
var _runDefault = _interopRequireDefault(__webpack_require__(84749));
var _runYaml = _interopRequireDefault(__webpack_require__(16203));
var _kandyLogger = __webpack_require__(17070);
// Pipeline modes.

// Libraries.

/**
 * Factory function for creating an instance of the SDP Pipeline.
 * @param {Object} container
 * @param {Object} container.logManager The SDK's logManager.
 * @return {Function}
 */
function createPipeline(container) {
  const {
    logManager
  } = container;
  const log = logManager.getLogger('SDP');

  /**
   * Basic SDP pipeline runner. Decides how to log the output based on log level.
   * @method runPipeline
   * @param  {Array}      handlers       List of functions that transform the SDP.
   * @param  {string}     sdp            The session description.
   * @param  {Object}     info           Information about the session description.
   * @param  {string}     info.callId    The id corresponding to the call on which this pipeline is being run.
   * @param  {RTCSdpType} info.type      The session description's type.
   * @param  {string}     info.step      The step that will occur after the Pipeline is run.
   *    Will be either 'set' (the SDP will be set locally) or 'send' (the SDP will be sent
   *    to the remote endpoint).
   * @param  {string}     info.endpoint  Which end of the connection created the SDP.
   * @param  {BandwidthControls} [info.bandwidth] Information about bandwidth controls.
   * @return {string}     The modified session description.
   */
  function runPipeline(handlers, sdp, info) {
    const logLevel = log.getLevel();
    const isDebug = logLevel === _kandyLogger.logLevels.DEBUG || logLevel === _kandyLogger.logLevels.TRACE;
    const pipelineFunc = isDebug ? _runYaml.default : _runDefault.default;
    return pipelineFunc(handlers, sdp, info, log);
  }
  return runPipeline;
}

/***/ }),

/***/ 84749:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = runPipelineDefault;
var _isFunction2 = _interopRequireDefault(__webpack_require__(62064));
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _utils = __webpack_require__(54312);
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
// Utils.

// Libraries.

/**
 * Basic SDP pipeline runner.
 * See parameters for runPipeline in index for full description of them.
 * @method runPipelineYaml
 * @param  {Array}  handlers List of functions that transform the SDP.
 * @param  {string} sdp      The session description.
 * @param  {Object} info     Information about the session description.
 * @param  {Logger} log      The logger to use.
 * @return {string}          The modified session description.
 */
function runPipelineDefault(handlers, sdp, info, log) {
  const objectSdp = _sdpTransform.default.parse(sdp);
  const originalSdp = Object.freeze(objectSdp);
  let newSdp = (0, _cloneDeep2.default)(originalSdp);
  if ((0, _isArray2.default)(handlers)) {
    handlers.forEach(handler => {
      const name = (0, _utils.formattedFunctionName)(handler);
      if ((0, _isFunction2.default)(handler)) {
        try {
          newSdp = handler(newSdp, info, originalSdp);
        } catch (error) {
          log.info(`Currently running pipeline to ${info.step} ${info.endpoint} ${info.type} for callId: ${info.callId}`);
          log.error(`Error running SDP handler: ${name}`, error);
        }
      } else {
        log.error('SDP handler not a function; skipping.');
      }
    });
  }
  return _sdpTransform.default.write(newSdp);
}

/***/ }),

/***/ 16203:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = runPipelineYaml;
var _isFunction2 = _interopRequireDefault(__webpack_require__(62064));
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _utils = __webpack_require__(54312);
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
var _variableDiff = _interopRequireDefault(__webpack_require__(10765));
// Utils.

// Libraries.

/**
 * Basic SDP pipeline runner that logs the functions in Yaml.
 * See parameters for runPipeline in index for full description of them.
 * @method runPipelineYaml
 * @param  {Array}  handlers List of functions that transform the SDP.
 * @param  {string} sdp      The session description.
 * @param  {Object} info     Information about the session description.
 * @param  {Logger} log      The logger to use.
 * @return {string}          The modified session description.
 */
function runPipelineYaml(handlers, sdp, info, log) {
  const objectSdp = _sdpTransform.default.parse(sdp);
  if (!(0, _isArray2.default)(handlers)) {
    return _sdpTransform.default.write(objectSdp);
  }
  const originalSdp = Object.freeze(objectSdp);
  let newSdp = (0, _cloneDeep2.default)(originalSdp);

  /**
   * For each sdpHandler function we want to log the changes
   * it makes to the SDP and present a yaml report of the diffs.
   * So that each diff doesn't contain all previous changes
   * we need to diff the sdp at it's current stage of transformation.
   * Only perform this work if we're in debug logging mode.
   */
  let diffed;
  let oldNewSdp;
  const results = [];
  handlers.forEach(handler => {
    const name = (0, _utils.formattedFunctionName)(handler);
    if ((0, _isFunction2.default)(handler)) {
      log.debug(`Running SDP handler ${name}.`);
      try {
        oldNewSdp = (0, _cloneDeep2.default)(newSdp);
        newSdp = handler(newSdp, info, originalSdp);
        diffed = (0, _variableDiff.default)(oldNewSdp, newSdp);
        results.push({
          name,
          diff: diffed.text
        });
      } catch (error) {
        log.info(`Currently running pipeline to ${info.step} ${info.endpoint} ${info.type} for callId: ${info.callId}`);
        log.error(`Error running SDP handler: ${name}`, error);
      }
    } else {
      log.error('SDP handler not a function; skipping.');
      results.push({
        name,
        diff: 'No diff, not a function.'
      });
    }
  });
  diffed = (0, _variableDiff.default)(originalSdp, newSdp);
  const yamlFormat = (0, _utils.sdpToYaml)(info)(originalSdp)(newSdp)(results)(diffed);
  log.debug(`SDP Handler changes: ${yamlFormat}`);
  return _sdpTransform.default.write(newSdp);
}

/***/ }),

/***/ 54312:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sdpToYaml = exports.formattedFunctionName = void 0;
var _trimEnd2 = _interopRequireDefault(__webpack_require__(91056));
var _trimCharsStart2 = _interopRequireDefault(__webpack_require__(78202));
var _map2 = _interopRequireDefault(__webpack_require__(65159));
var _join2 = _interopRequireDefault(__webpack_require__(85569));
var _compose2 = _interopRequireDefault(__webpack_require__(52602));
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
// Library.

// Refers to functions in src/callstack/sdp/pipeline.js
const sdpToYaml = info => originalSdp => newSdp => results => finalDiffObject => `
---
sdp-pipeline-run:
  info:
    callId: ${info.callId}
    type: ${info.type}
    step: ${info.step}
    endpoint: ${info.endpoint}
    bandwidth: ${displayBandwidth(info.bandwidth)}
  sdp: |
    ${displaySdp(fourSpaces)(originalSdp)}
  handlers:
    ${displayHandlers(results)}
  final:
    diff: |
      ${displayDiffs(sixSpaces)(finalDiffObject.text)}
    sdp: |
      ${finalDiffObject.changed ? displaySdp(sixSpaces)(newSdp) : 'No changes to the SDP'}
...
`;

// If the function is anonymous give the function body as the 'name'
exports.sdpToYaml = sdpToYaml;
const formattedFunctionName = handler => handler.name || handler.toString().slice(0, 120).replace(/\n/g, '');

// Display helper functions
exports.formattedFunctionName = formattedFunctionName;
const displayBandwidth = bandwidth => bandwidth && JSON.stringify(bandwidth, null, ' ').replace(/\n/g, ' ').replace(/ {2}/g, ' ');
const displaySdp = indentation => sdp => _sdpTransform.default.write(sdp).replace(/\n/g, `\n${indentation}`).trimEnd();
const handlerToYaml = _ref => {
  let {
    name,
    diff
  } = _ref;
  return (
    // replacing newlines in case the name is the function.
    `${fourSpaces}- name: ${name.replace(/\n/g, '')}
      diff: |
        ${displayDiffs(eightSpaces)(diff)}
`
  );
};
const displayHandlers = (0, _compose2.default)([_trimEnd2.default, (0, _trimCharsStart2.default)(' \n'), (0, _join2.default)(''), (0, _map2.default)(handlerToYaml)]);
const displayDiffs = indentation => diffed => diffed ? diffed.replace(/\n/g, `\n${indentation}`) : 'No changes found';

// Space constants
const fourSpaces = '    ';
const sixSpaces = '      ';
const eightSpaces = '        ';

/***/ }),

/***/ 43393:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = hasMediaFlowing;
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
// Libraries

/**
 * Helper function that returns a boolean if media is active or not.
 * @method hasMediaFlowing
 * @param  {string} sdp String representation of a calls sdp.
 */
function hasMediaFlowing(sdp) {
  const objectSdp = _sdpTransform.default.parse(sdp);

  // Check that video directions (if there are any) indicate a "hold" scenario.
  const isVideoInactive = objectSdp.media.filter(item => item.type === 'video').every(media => media && media.direction === 'inactive');

  // Check that audio directions (if there are any) indicate a "hold" scenario.
  const isAudioInactive = objectSdp.media.filter(item => item.type === 'audio')
  // Special case: In music on hold scenarios, audio may be `sendonly`
  //    so that the held user can still receive the "hold music".
  .every(media => media && ['inactive', 'sendonly'].includes(media.direction));
  return !isVideoInactive || !isAudioInactive;
}

/***/ }),

/***/ 78692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = hasTelephoneEvent;
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
// Libraries.

/**
 * Checks whether an SDP has at least one telephone-event codec.
 *
 * TODO: If there isn't a telephone-event, then the PeerConnection won't have
 *    a "dtmf sender" (RTCRtpSender.dtmf). Should preferably check for that
 *    rather than looking through the SDP.
 * This isn't being done because the Session/Peer models wrap "send dtmf" in a
 *    way that makes it inconvenient to use.
 *
 * @method hasTelephoneEvent
 * @param  {string}  stringSdp An SDP.
 * @return {boolean}
 */
function hasTelephoneEvent(stringSdp) {
  const sdp = _sdpTransform.default.parse(stringSdp);
  const hasCodec = sdp.media.filter(media => media.type === 'audio').some(media => {
    return media.rtp.some(rtp => rtp.codec === 'telephone-event');
  });
  return hasCodec;
}

/***/ }),

/***/ 23180:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = setMediaInactive;
function setMediaInactive(sdp) {
  const regex = /sendrecv|sendonly|recvonly/gi;
  if (!sdp || typeof sdp !== 'string') {
    return;
  }
  return sdp.replace(regex, 'inactive');
}

/***/ }),

/***/ 12442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.checkBandwidthControls = checkBandwidthControls;
exports.generateEndParams = generateEndParams;
exports.getCallAction = getCallAction;
exports.getLocalOpTrackEvents = getLocalOpTrackEvents;
exports.getLocalTracks = getLocalTracks;
exports.getTrackDscpMapping = getTrackDscpMapping;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _without2 = _interopRequireDefault(__webpack_require__(43214));
var _selectors = __webpack_require__(11430);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(37409);
var _selectors2 = __webpack_require__(30105);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins
// Libraries

/**
 * Helper function to get all local tracks of a certain type
 *
 * @param {Object} context The bottle context object.
 * @param {string} id The id of the call
 * @param {string} [kind] Kind must be of type 'audio' or 'video'
 * @return {Array<Object>} returns an array of tracks of the given type
 */
function getLocalTracks(context, id, kind) {
  // TODO: Why is `context` passed-in if only state is needed?
  const call = (0, _selectors.getCallById)(context.getState(), id);
  const localTracks = call ? call.localTracks : [];
  const tracks = localTracks.map(id => (0, _selectors2.getTrackById)(context.getState(), id));
  return kind ? tracks.filter(track => track.kind === kind) : tracks;
}
function getNewRemoteTracks(action, prevState, currentState) {
  // Get the list of remote tracks previously on the call.
  const prevCall = (0, _selectors.getCallById)(prevState, action.payload.id);
  const {
    remoteTracks: prevRemote
  } = prevCall;

  // Get the list of NEW remote tracks actually added to the Call by the operation.
  // In early media scenarios, there will be a duplicate remote track.
  const {
    localTracks = [],
    remoteTracks = []
  } = action.payload;
  const newRemote = (0, _without2.default)(prevRemote, remoteTracks);
  const trackIds = [...localTracks, ...newRemote];

  // Don't emit the event if no tracks were actually added.
  // For example, when entering dual hold.
  if (!trackIds || trackIds.length === 0) {
    return undefined;
  }
  return trackIds;
}

/**
 * @typedef {Object} ActionEventMap
 * @property {function} callAction A redux action creator
 * @property {Array} eventFns An array of event creator functions
 */
/**
 * Helper function that returns a call action function and events based on the
 * remote operation being requested
 * TODO: Move this somewhere better.
 * TODO: Do this differently / better.
 * @method getCallAction
 * @param (string) remoteOp Remote operation being requested
 * @returns {ActionEventMap} Action and event creator functions.
 */
function getCallAction(remoteOp) {
  // Determine what redux action the operation represents.
  switch (remoteOp) {
    case _constants.OPERATIONS.SLOW_START:
      return {
        callAction: _actions.callActions.remoteSlowStart,
        eventFns: []
      };
  }
  return {
    // The "generic remote" operation has been split-out. To be removed.
    callAction: _actions.callActions.updateCall,
    eventFns: []
  };
}
function getLocalOpTrackEvents(callId, operation, action, prevState, currState) {
  switch (operation) {
    case _constants.OPERATIONS.HOLD:
    case _constants.OPERATIONS.REMOVE_MEDIA:
    case _constants.OPERATIONS.REMOVE_BASIC_MEDIA:
      {
        const trackIds = [];
        if (action.payload.localTracks) {
          trackIds.push(...action.payload.localTracks);
        }
        if (action.payload.remoteTracks) {
          trackIds.push(...action.payload.remoteTracks);
        }
        if (trackIds.length) {
          return {
            type: eventTypes.CALL_TRACKS_REMOVED,
            args: {
              callId,
              trackIds
            }
          };
        }
        return;
      }
    case _constants.OPERATIONS.UNHOLD:
    case _constants.OPERATIONS.ADD_MEDIA:
    case _constants.OPERATIONS.ADD_BASIC_MEDIA:
      {
        const trackIds = getNewRemoteTracks(action, prevState, currState);
        if (trackIds) {
          return {
            type: eventTypes.CALL_TRACKS_ADDED,
            args: {
              callId,
              trackIds
            }
          };
        }
        return;
      }
    case _constants.OPERATIONS.MEDIA_RESTART:
      {
        return {
          type: eventTypes.MEDIA_RESTART,
          args: {
            callId
          }
        };
      }
  }
}

/**
 * Generates extra informational parameters for ending a call.
 *
 * @method generateEndParams
 * @param {string}  currentCallState The state of the current call, before it was ended.
 * @param {boolean} isLocal Specifies if end operation was caused by the local side.
 * @param {Object}  params Extra context information related to the call.
 * @param {string}  [params.reasonText]  Human-readable explanation for the call change.
 * @param {string}  [params.statusCode] Code representing the reason for the call change.
 * @param {string}  params.remoteName   Name of the remote participant.
 * @param {string}  params.remoteNumber Number of the remote participant.
 */
function generateEndParams(currentCallState, isLocal, params) {
  const endParams = {
    isLocal,
    remoteParticipant: {
      displayNumber: params.remoteNumber,
      displayName: params.remoteName
    },
    transition: {
      prevState: currentCallState
    }
  };
  if (params.statusCode) {
    endParams.transition.statusCode = params.statusCode;
  }
  if (params.reasonText) {
    endParams.transition.reasonText = params.reasonText;
  }
  return endParams;
}

/**
 * Maps media tracks with the dscpControls provided to ensure the correct senders are set up with the
 * proper networkPriority
 * @param {Object} trackLists
 * @param {Array<Track>} trackLists.audio The list of audio tracks
 * @param {Array<Track>} trackLists.video The list of video tracks
 * @param {Array<Track>} trackLists.screen The list of screen tracks
 * @param {Object} dscpControls The DSCP controls provided
 * @return {Object} An object map of track: dscpSetting for all applicable tracks
 */
function getTrackDscpMapping(trackLists, dscpControls) {
  const {
    audio: audioTracks,
    video: videoTracks,
    screen: screenTracks
  } = trackLists;
  const dscpTrackMapping = {};
  if (dscpControls) {
    if (dscpControls.screenNetworkPriority) {
      for (const screenTrack of screenTracks) {
        dscpTrackMapping[screenTrack.id] = dscpControls.screenNetworkPriority;
      }
    }
    if (dscpControls.audioNetworkPriority) {
      for (const audioTrack of audioTracks) {
        dscpTrackMapping[audioTrack.id] = dscpControls.audioNetworkPriority;
      }
    }
    if (dscpControls.videoNetworkPriority) {
      for (const videoTrack of videoTracks) {
        dscpTrackMapping[videoTrack.id] = dscpControls.videoNetworkPriority;
      }
    }
  }
  return dscpTrackMapping;
}

/**
 * Checks whether the bandwidth controls provided exist and are numbers.
 * @param {BandwidthControls} bandwidthControls The bandwidth controls to check.
 */
function checkBandwidthControls(bandwidthControls) {
  // TODO: Is this function needed for anything other than ensuring
  //    the bandwidth object has the "right" format? Is that even needed?
  const finalBandwidthControls = _objectSpread({}, bandwidthControls);

  // If there are no bandwidth limits set or the bandwidth limits provided are not numbers, set them to undefined
  if (!bandwidthControls || !(bandwidthControls.audio && typeof bandwidthControls.audio === 'number')) {
    finalBandwidthControls.audio = null;
  }
  if (!bandwidthControls || !(bandwidthControls.video && typeof bandwidthControls.video === 'number')) {
    finalBandwidthControls.video = null;
  }
  return finalBandwidthControls;
}

/***/ }),

/***/ 70504:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _remoteOperation = _interopRequireDefault(__webpack_require__(71146));
/*
 * Utility helpers available in the Callstack.
 * This file is where the names for the operations are defined.
 */

function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('Callstack.utils.getRemoteOperationInfo', () => (0, _remoteOperation.default)(bottle.container));
}

/***/ }),

/***/ 50654:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.organizeTracks = organizeTracks;
/**
 * Organize the return value of `mediaOps.createLocal` into lists of Tracks for
 *    each media kind.
 *
 * TODO: Simplify `mediaOps.createLocal` so we don't need a helper for it...
 * @method organizeTracks
 * @async
 * @param {Array<Object>} mediaObj
 * @param {string} mediaObj[].type The kind of media.
 * @param {Object} mediaObj[].media A Webrtc-Stack Media object.
 * @return {Object} tracks
 * @return {Array<Track>} tracks.audio The list of all audio Track objects.
 * @return {Array<Track>} tracks.video The list of all video Track objects.
 * @return {Array<Track>} tracks.screen The list of all screen Track objects.
 * @return {Array<Track>} tracks.all The list of all Track objects.
 * @example
 * const medias = [{ type: 'audio', media: media1 }, { type: 'video', media: media2 }]
 * const tracks = await organizeTracks(medias)
 * // tracks = {
 * //   audio: [<tracks of media1>],
 * //   video: [<tracks of media2>],
 * //   screen: [],
 * //   all: [<tracks of media1 and media2>]
 * // }
 */
async function organizeTracks() {
  let medias = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  const trackLists = {
    audio: [],
    video: [],
    screen: [],
    all: []
  };
  await Promise.all(medias.map(async obj => {
    if (['audio', 'video', 'screen'].includes(obj.type)) {
      // This is async when in Proxy mode, so use await (and the Promise.all).
      const tracks = await obj.media.getTracks();
      // Add the tracks of the Media object into the appropriate track list.
      trackLists[obj.type] = trackLists[obj.type].concat(tracks);
      // Also add the tracks to the "all" list.
      trackLists.all = trackLists.all.concat(tracks);
    } else {
      // Invalid media kind was provided; ignore it.
    }
  }));
  return trackLists;
}

/***/ }),

/***/ 71146:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = factory;
var _operations = _interopRequireDefault(__webpack_require__(67251));
var _hasMediaFlowing = _interopRequireDefault(__webpack_require__(43393));
var _state = __webpack_require__(65794);
var _constants = __webpack_require__(60683);
var _constants2 = __webpack_require__(37409);
function factory(container) {
  const {
    CallstackSDP,
    logManager,
    WebRTC
  } = container;

  /**
   * Utility method to analyze the remote operation.
   *    Compares the previous remote SDP with the newly received remote SDP to
   *    determine the operation type.
   *
   * @method getRemoteOperationInfo
   * @param {Object} call The call being acted on.
   * @param {string} sdp A remote offer SDP.
   * @return {Object} info
   * @return {string} info.remoteOp The interpreted remote operation type.
   * @return {Object} info.mediaDiff The change between last media state versus new state.
   * @return {Object} info.remoteDesc The previous remote SDP object.
   */
  async function getRemoteOperationInfo(call, sdp) {
    const log = logManager.getLogger('CALL', call.id);
    const session = await WebRTC.sessionManager.get(call.webrtcSessionId);
    const mediaState = (0, _state.getMediaState)(call);
    log.debug(`Current call info; State: ${call.state}, MediaState: ${mediaState}.`);

    /*
     * Use the currently set remote SDP and the newly-received remote SDP to
     *    determine what the remote operation was.
     */
    const remoteDesc = await session.getLatestRemoteDesc();
    let mediaDiff = CallstackSDP.compareMedia(remoteDesc.sdp, sdp);
    let remoteOp = (0, _operations.default)(mediaDiff);
    log.debug(`Interpreted update request as a ${remoteOp} operation.`);

    /**
     * Check for remoteOp special-cases.
     *  This is needed for complex operations, where a few renegotiations occur
     *      as a single remote operation. Some of those renegotiations are
     *      special-cases (ie. not actual SDK operations).
     *  If the remoteOp is not "standard", then try to fit it to a "standard"
     *    operation that "fits best".
     */
    const isMediaFlowing = (0, _hasMediaFlowing.default)(sdp);
    if (remoteOp === 'UNKNOWN') {
      /*
       * If the media state is remotely held but the latest renegotiation has
       *    media flowing, then handle it as an unhold.
       * This occurs:
       *  - As part of a remote direct transfer operation (when this user is being
       *      transferred to another user). When the transferee accepts the call,
       *      a renegotiation occurs that changes from 'MoH' to 'media flowing'
       *      state. This needs to be handled as an unhold by the SDK so that
       *      the call state is updated to reflect the media state.
       *  - As part of a remote consultative transfer operation (when this user was
       *      the first call specified in the transfer operation, but not for the
       *      second user). Same 'MoH' to 'media flowing' scenario as direct
       *      transfer.
       */
      if (mediaState === _constants.CALL_MEDIA_STATES.REMOTE_HOLD && isMediaFlowing) {
        remoteOp = _constants2.OPERATIONS.UNHOLD;
      } else {
        // Try it again, but this time match medias naively.
        mediaDiff = CallstackSDP.compareMedia(remoteDesc.sdp, sdp, true);
        remoteOp = (0, _operations.default)(mediaDiff);
        log.debug(`Re-interpreted update request as a ${remoteOp} operation.`);
      }
    } else if (remoteOp === 'NO_CHANGE') {
      /*
       * Renegotiation did not change anything media related. This renegotiation
       *    may have been for a different purpose, such as changing the remote
       *    endpoint during a transfer.
       *
       * Let this remoteOp default to the generic "update call" operation except when we're on locally hold.
       */

      /**
       * Special case: Assume the remote operation was actually a Hold.
       * The operation was interpreted as "no change" because the remote media did
       *    not change in the remote operation. But all media is inactive and we are
       *    in a Local Hold state. This means that the previous media was inactive
       *    because of our local hold. So the new media being inactive is a change
       *    that was done on the remote side, ie. it was actually a remote hold.
       */
      if (!isMediaFlowing && mediaState === _constants.CALL_MEDIA_STATES.LOCAL_HOLD) {
        remoteOp = _constants2.OPERATIONS.HOLD;
        log.debug(`Interpreting NO_CHANGE operation as ${remoteOp} due to ${mediaState} state.`);
      }
    }
    return {
      remoteOp,
      mediaDiff,
      remoteDesc
    };
  }
  return getRemoteOperationInfo;
}

/***/ }),

/***/ 82332:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getSdpSessionId = getSdpSessionId;
exports.hasSameSessionId = hasSameSessionId;
exports.isSameSdpSessionId = isSameSdpSessionId;
/**
 * Compares whether a new remote SDP for a Session has the same SDP session ID
 *    of the previous remote SDP.
 * @method isSameSdpSessionId
 * @param  {Object}  WebRTC    The webRTC stack.
 * @param  {string}  sessionId ID of the Session under question.
 * @param  {string}  sdp       New remote SDP to compare the current one with.
 * @return {boolean}
 */
async function isSameSdpSessionId(WebRTC, sessionId, sdp) {
  const session = await WebRTC.sessionManager.get(sessionId);
  const currentDesc = await session.getRemoteDescription();

  // TODO: How to act when there isn't a remote SDP set?
  // Currently: Return falsy to cause a recreate. If there isn't a remote SDP
  //    set, it's possible we're in an error scenario.
  if (currentDesc && currentDesc.sdp) {
    const sameId = hasSameSessionId(currentDesc.sdp, sdp);
    return sameId;
  }
}

/**
 * Checks whether two SDPs have the same session ID.
 * @method hasSameSessionId
 * @param  {string}  sdp    A valid SDP string.
 * @param  {string}  newSdp A valid SDP string.
 * @return {boolean} Whether the two SDPs have the same session ID.
 */
function hasSameSessionId(sdp, newSdp) {
  const firstSdpSessionId = getSdpSessionId(sdp);
  const secondSdpSessionId = getSdpSessionId(newSdp);
  if (firstSdpSessionId && secondSdpSessionId) {
    return firstSdpSessionId === secondSdpSessionId;
  }
}

/**
 * Extracts the session ID from the SDP.
 * Session ID is located in the o= line.
 * Ref: https://tools.ietf.org/html/rfc4566#section-5.2
 * @method getSdpSessionId
 * @param  {string} sdp A valid SDP string.
 * @return {string} The SDP's session ID.
 */
function getSdpSessionId(sdp) {
  const oLine = sdp.match(/o=.*/gm);
  if (oLine && oLine[0]) {
    return oLine[0].split(' ')[1];
  }
}

/***/ }),

/***/ 15380:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = closeCallOperation;
/**
 * Bottle wrapper for "close call" operation.
 * @return {Function}
 */
function closeCallOperation(container) {
  const {
    logManager,
    WebRTC
  } = container;

  /**
   * Performs the webRTC session functions associated with closing a call.
   * @method closeCall
   * @param {string} sessionId the local webRTC session id, used to lookup the session object
   * @return {undefined}
   */
  async function closeCall(sessionId) {
    const log = logManager.getLogger('CALLSTACK');
    const session = await WebRTC.sessionManager.get(sessionId);
    if (!session) {
      log.debug(`webRTC session ${sessionId} not found.`);
      return;
    }
    await Promise.all(session.localTracks.map(async track => {
      const detached = await track.isDetached();
      if (!detached) {
        await track.stop();
      }
    }));
    await session.end();
  }
  return closeCall;
}

/***/ }),

/***/ 68358:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initOperation;
var _closeCall = _interopRequireDefault(__webpack_require__(15380));
var _createLocal = _interopRequireDefault(__webpack_require__(78982));
var _generateOffer = _interopRequireDefault(__webpack_require__(52849));
var _handleOffer = _interopRequireDefault(__webpack_require__(70710));
var _receivedAnswer = _interopRequireDefault(__webpack_require__(49923));
/*
 * Webrtc Helper Operations available in the Callstack.
 * This file is where the names for the operations are defined.
 */

function initOperation(bottle) {
  // Provide the top-level container to the factory functions.
  //    Otherwise they would get the `operations` sub-container.
  bottle.factory('CallstackWebrtc.closeCall', () => (0, _closeCall.default)(bottle.container));
  bottle.factory('CallstackWebrtc.createLocal', () => (0, _createLocal.default)(bottle.container));
  bottle.factory('CallstackWebrtc.generateOffer', () => (0, _generateOffer.default)(bottle.container));
  bottle.factory('CallstackWebrtc.handleOffer', () => (0, _handleOffer.default)(bottle.container));
  bottle.factory('CallstackWebrtc.receivedAnswer', () => (0, _receivedAnswer.default)(bottle.container));
}

/***/ }),

/***/ 78982:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createLocalOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
// Call Plugin.

// Other plugins.

/**
 * Bottle wrapper for "create local media" operation.
 * @return {Function}
 */
function createLocalOperation(container) {
  const {
    context,
    CallReporter,
    WebRTCMediaOperations
  } = container;

  /**
   * Use the WebRTC stack to create local Media object(s).
   * The underlying WebRTC APIs used are getUserMedia and getDisplayMedia.
   * See https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
   *    for more information.
   * @method createLocal
   * @async
   * @param  {Object} mediaConstraints Collection of constraints for each media type.
   * @param  {MediaStreamConstraints} mediaConstraints.audio Native media contraints for audio.
   * @param  {MediaStreamConstraints} mediaConstraints.video Native media constraints for video.
   * @param  {MediaStreamConstraints} mediaConstraints.screen Native media constraints for display (screen).
   * @return {Array<Object>} List of objects containing the media type and the media itself.
   * @throws {BasicError} Throws a USER_MEDIA_ERROR error if provided constraints cannot be fulfilled.
   * @throws {BasicError} Throws a USER_MEDIA_ERROR error if it fails to get media for other reasons.
   */
  async function createLocal(mediaConstraints, callId) {
    // Add the get user media sub event to the current operation event in the call report
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    const callReport = CallReporter.getReport(callId);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.status === _constants.OP_STATUS.ONGOING;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const getUserMediaEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.GET_USER_MEDIA);
    getUserMediaEvent.addData('mediaConstraints', mediaConstraints);
    let medias = [];
    try {
      medias = await WebRTCMediaOperations.createLocal(mediaConstraints);
    } catch (err) {
      getUserMediaEvent.setError(err);
      getUserMediaEvent.endEvent();
      throw err;
    }
    getUserMediaEvent.endEvent();
    return medias;
  }
  return createLocal;
}

/***/ }),

/***/ 52849:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = generateOfferOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _constants2 = __webpack_require__(42750);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins
/**
 * Bottle wrapper for "generate offer" operation.
 * @return {Function}
 */
function generateOfferOperation(container) {
  const {
    context,
    logManager,
    CallstackSDP,
    WebRTC,
    CallReporter
  } = container;

  /**
   * Performs the webRTC session functions associated with creating an SDP offer
   *
   * @method generateOffer
   * @param {string} sessionId the local webRTC session id, used to lookup the session object
   * @param {Object} mediaDirections
   * @param {string} mediaDirections.audio mode of audio add to the sdp offer
   * @param {string} mediaDirections.video mode of video add to the sdp offer
   * @param {BandwidthControls} [bandwidth] bandwidth configurations to use
   * @param {Object} otherOptions Other options to pass to createOffer
   * @return {Object} offer object containing a Session Description Protocol
   */
  async function generateOffer(sessionId, mediaDirections, bandwidth) {
    let otherOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const log = logManager.getLogger('CALLSTACK');
    const session = await WebRTC.sessionManager.get(sessionId);
    if (!session) {
      const sessionNotFoundMsg = `WebRTC session ${sessionId} not found.`;
      log.debug(sessionNotFoundMsg);
      throw new _errors.default({
        message: sessionNotFoundMsg,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }
    const call = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), sessionId);
    const callReport = CallReporter.getReport(call.id);

    // The operation is either a local negotiation or a remote slow-start.
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.status === _constants.OP_STATUS.ONGOING || !op.isLocal && op.type === _constants.OPERATIONS.SLOW_START;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const setLocalDescriptionEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.PROCESS_MEDIA_LOCAL);
    setLocalDescriptionEvent.addData('operation', operationEvent.type);
    /*
     * Create the local SDP offer, run it through any provided SDP handlers,
     *    then set it as the Session's local description.
     */
    // TODO: Make sure the session is in the correct signaling state to start a
    //    renegotiation operation.
    let offer, callConfigOptions;
    try {
      offer = await session.createOffer(_objectSpread({
        mediaDirections
      }, otherOptions));
      callConfigOptions = (0, _selectors.getOptions)(context.getState());
      // This is the "pre set local" stage.
      offer.sdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer.sdp, {
        callId: call.id,
        type: offer.type,
        step: 'set',
        endpoint: 'local',
        bandwidth
      }, log);
      offer = await session.setLocalDescription(offer);
    } catch (e) {
      const error = new _errors.default({
        message: e.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
      setLocalDescriptionEvent.setError(error);
      setLocalDescriptionEvent.endEvent();
      // TODO: Throw an error here and have it handled.
      //  For now, backwards-compatibility means to just return the error and proceed.
      return {
        error,
        type: null,
        sdp: null
      };
    }
    // This is the "pre send local" stage.
    // Assign it to a new variable because some browsers enforce the read-only
    //    properties of a RTCSessionDescription object. The object from
    //    setLocalDescription is enforced read-only, but the `offer` before that
    //    is not enforced.
    const newSdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer.sdp, {
      callId: call.id,
      type: offer.type,
      step: 'send',
      endpoint: 'local',
      bandwidth
    }, log);

    // TODO: May want to save extra data for this event, maybe ICE candidates
    setLocalDescriptionEvent.endEvent();
    return {
      type: offer.type,
      sdp: newSdp
    };
  }
  return generateOffer;
}

/***/ }),

/***/ 70710:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = handleOfferOperation;
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(42750);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other Plugins

/**
 * Bottle wrapper for "handle offer" operation.
 * @return {Function}
 */
function handleOfferOperation(container) {
  const {
    context,
    logManager,
    CallstackSDP,
    WebRTC,
    CallReporter
  } = container;
  /**
   * Performs webRTC portions of receiving an "offer" Session Description Protocol
   *
   * @method handleOffer
   * @param  {string} offer Session Description protocol offer
   * @param  {string} webrtcSessionId local webrtc session id
   * @param {BandwidthControls} bandwidth bandwidth configurations to use
   * @returns {Object}
   */
  async function handleOffer(offer, webrtcSessionId, bandwidth) {
    const log = logManager.getLogger('CALLSTACK');
    const session = await WebRTC.sessionManager.get(webrtcSessionId);
    if (!session) {
      log.debug(`webRTC session ${webrtcSessionId} not found.`);
      return;
    }
    const {
      id: callId
    } = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), webrtcSessionId);

    /*
     * Run the remote SDP offer through any SDP handlers provided, then set it
     *    as the Session's remote description.
     * This is the "pre set remote" stage.
     */
    const callConfigOptions = (0, _selectors.getOptions)(context.getState());
    offer = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, offer, {
      callId,
      type: 'offer',
      step: 'set',
      endpoint: 'remote'
    }, log);
    const targetCall = (0, _selectors.getCallById)(context.getState(), callId);
    const callReport = CallReporter.getReport(targetCall.id);
    const operation = targetCall.currentOperations.find(op => {
      return !op.isLocal;
    });
    const operationEvent = callReport.getEvent(operation.eventId);
    const setRemoteDescriptionEvent = operationEvent.addEvent(_constants.REPORT_EVENTS.PROCESS_MEDIA_REMOTE);
    let answer;
    let setLocalDescriptionEvent;
    try {
      // TODO: Make sure the session is in the correct signaling state to process an offer.
      const error = await session.processOffer({
        type: 'offer',
        sdp: offer
      });
      if (error) {
        setRemoteDescriptionEvent.endEvent(error);
        return {
          error
        };
      }
      setRemoteDescriptionEvent.endEvent();
      setLocalDescriptionEvent = operationEvent.addEvent(_constants.REPORT_EVENTS.PROCESS_MEDIA_LOCAL);
      setLocalDescriptionEvent.addData('operation', operationEvent.type);

      /*
       * Create the local SDP answer, run it through any provided SDP handlers,
       *    then set it as the Session's local description.
       */
      answer = await session.createAnswer();

      // This is the "pre set local" stage.
      answer.sdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, answer.sdp, {
        callId,
        type: answer.type,
        step: 'set',
        endpoint: 'local',
        bandwidth
      }, log);
      answer = await session.setLocalDescription(answer);
    } catch (e) {
      const error = new _errors.default({
        message: e.message,
        code: _errors.callCodes.GENERIC_ERROR
      });
      if (setLocalDescriptionEvent) {
        setLocalDescriptionEvent.setError(error);
        setLocalDescriptionEvent.endEvent();
      }
      throw error;
    }

    // Run the SDP through the Pipeline again before we send it to the remote side.
    //    This is the "pre send local" stage.
    // Assign it to a new variable because some browsers enforce the read-only
    //    properties of a RTCSessionDescription object. The object from
    //    setLocalDescription is enforced read-only, but the `offer` before that
    //    is not enforced.
    const newSdp = CallstackSDP.runPipeline(callConfigOptions.sdpHandlers, answer.sdp, {
      callId,
      type: answer.type,
      step: 'send',
      endpoint: 'local',
      bandwidth
    }, log);
    if (setLocalDescriptionEvent) {
      setLocalDescriptionEvent.endEvent();
    }
    return {
      answerSDP: newSdp
    };
  }
  return handleOffer;
}

/***/ }),

/***/ 49923:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = receivedAnswerOperation;
var _selectors = __webpack_require__(11430);
var _changeDtlsRoleTo = _interopRequireDefault(__webpack_require__(1813));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Helpers.

/**
 * Bottle wrapper for "received answer" operation.
 * @return {Function}
 */
function receivedAnswerOperation(container) {
  const {
    context,
    logManager,
    CallstackSDP,
    WebRTC
  } = container;

  /**
   * An answer SDP has been received and should be applied to the Session.
   *
   * This operation is intended to handle all webRTC scenarios where a remote answer
   *    SDP has been received and needs to be added to the Session. At this point
   *    in negotiation, a Session should have been created and a local offer SDP
   *    set. This can be for initial negotiation or for midcall renegotiation, so
   *    the Session may or may not have a "current remote SDP" already.
   * This saga will complete the negotiation process, as both ends will have both
   *    an offer and answer SDP set.
   * Responsibilities:
   *    1. Ensure this is a valid operation.
   *        - Session exists, Session is in correct signaling state.
   *    2. Check the answer SDP for abnormal scenarios.
   *        - DTLS role issue.
   *    3. Process the answer SDP via Session's APIs.
   * @method receivedAnswer
   * @param {Object} sessionInfo
   * @param {string} sessionInfo.sessionId
   * @param {string} sessionInfo.answerSdp
   * @param {Object} targetCall
   * @param {string} targetCall.id
   * @param {boolean} targetCall.isCaller
   * @returns {undefined}
   * @throws {BasicError} Throws INVALID_PARAM if the WebRTC session does not exist.
   * @throws {BasicError} Throws GENERIC_ERROR if the SDP pipeline encounters an error.
   * @throws {BasicError} Throws SESSION_MISMATCH if negotiation m-line error occurs.
   * @throws {BasicError} Throws GENERIC_ERROR if other negotiation error occurs.
   */
  async function receivedAnswer(sessionInfo, targetCall) {
    const log = logManager.getLogger('CALL', targetCall.id);
    log.debug(`Processing SDP answer for session ${sessionInfo.sessionId}.`);
    const session = await WebRTC.sessionManager.get(sessionInfo.sessionId);
    if (!session) {
      log.debug(`webRTC session ${sessionInfo.sessionId} not found.`);
      throw new _errors.default({
        code: _errors.callCodes.INVALID_PARAM,
        message: `WebRTC session for Call ${targetCall.id} does not exist.`
      });
    }
    let sdpHandlers = (0, _selectors.getOptions)(context.getState()).sdpHandlers;
    let answerSdp = sessionInfo.answerSdp;

    /*
     * If the answer we received has DTLS role of 'actpass', then this is not a
     *    normal webRTC scenario. An answer SDP cannot have 'actpass' as the role.
     * It is assumed that the reason for this is a slow start call.
     */
    if (answerSdp.includes('a=setup:actpass')) {
      /*
       * Change the DTLS role depending on which side of the call the user is.
       * Change the caller to passive and the callee to active roles, because
       *    this is how it would be set for a regular call.
       */
      const newRole = targetCall.isCaller ? 'passive' : 'active';
      log.debug(`Received answer SDP has role of actpass. Changing to ${newRole}.`);
      sdpHandlers = [...sdpHandlers, (0, _changeDtlsRoleTo.default)(newRole, log)];
    }

    /*
     * Provide the answer SDP to the Session for "processing".
     * If successful, the webRTC negotiation process is considered complete.
     */
    try {
      /*
       * Run the remote SDP answer through any SDP handlers provided, then set it
       *    as the Session's remote description.
       * This is the "pre set remote" stage.
       */
      answerSdp = CallstackSDP.runPipeline(sdpHandlers, answerSdp, {
        callId: targetCall.id,
        type: 'answer',
        step: 'set',
        endpoint: 'remote'
      });
      await session.processAnswer({
        type: 'answer',
        sdp: answerSdp
      });
    } catch (err) {
      // TODO: Better error handling.
      log.debug(`Failed to process answer: ${err.message}`);
      let errorInfo;
      if (err.message.includes('The order of m-lines')) {
        errorInfo = {
          code: _errors.callCodes.SESSION_MISMATCH,
          message: 'Failed to receive answer due to media negotiation mismatch.'
        };
      } else {
        errorInfo = {
          code: _errors.callCodes.GENERIC_ERROR,
          message: `Failed to receive answer: ${err.message}`
        };
      }
      throw new _errors.default(errorInfo);
    }
  }
  return receivedAnswer;
}

/***/ }),

/***/ 87878:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = parseConfigs;
exports.fixIceServerUrls = fixIceServerUrls;
exports.mergeDefaults = mergeDefaults;
var _logs = __webpack_require__(43862);
var _utils = __webpack_require__(25189);
var _version = __webpack_require__(10825);
var _defaults = __webpack_require__(27241);
var _validation = __webpack_require__(42850);
// Other plugins.

// Helpers.

// Parse and/or Validate

const log = _logs.logManager.getLogger('CALL');

/*
 * JsDoc documentation for call configs are found in the Call plugin indexes.
 */
const defaultOptions = {
  // Native Peer configs.
  defaultPeerConfig: {
    sdpSemantics: 'unified-plan',
    iceServers: []
  },
  // ICE collection configs.
  iceCollectionIdealTimeout: 1000,
  iceCollectionMaxTimeout: 3000,
  serverTurnCredentials: true,
  // SDP manipulation configs.
  sdpHandlers: [],
  removeBundling: false,
  // Other.
  earlyMedia: false,
  resyncOnConnect: false,
  mediaBrokerOnly: false,
  trickleIceMode: 'NONE',
  skipIceCollection: false,
  normalizeDestination: true,
  ringingFeedbackMode: 'auto',
  callAuditTimer: 25000,
  mediaConnectionRetryDelay: 3000
};

// config validation
const v8nValidation = _validation.validation.schema({
  // Native Peer configs.
  defaultPeerConfig: _validation.validation.schema({
    sdpSemantics: (0, _validation.enums)(['unified-plan']),
    // Validation for currently supported properties of an RTCPeerConfiguration,
    // as specified at: https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection
    // If more params are supported in the future, then we need to extend this validation.
    iceServers: _validation.validation.array(),
    iceCandidatePoolSize: _validation.validation.optional(_validation.validation.positive()),
    iceTransportPolicy: _validation.validation.optional((0, _validation.enums)(['all', 'public', 'relay'])),
    bundlePolicy: _validation.validation.optional((0, _validation.enums)(['balanced', 'max-compat', 'max-bundle'])),
    certificates: _validation.validation.optional(_validation.validation.array().every.schema({
      expires: _validation.validation.string()
    })),
    peerIdentity: _validation.validation.optional(_validation.validation.string()),
    rtcpMuxPolicy: _validation.validation.optional((0, _validation.enums)(['negotiate', 'require']))
  }),
  // ICE collection configs.
  iceCollectionIdealTimeout: _validation.validation.positive(),
  iceCollectionMaxTimeout: _validation.validation.positive(),
  iceCollectionCheckFunction: _validation.validation.optional(_validation.validation.function()),
  serverTurnCredentials: _validation.validation.boolean(),
  // SDP manipulation configs.
  sdpHandlers: _validation.validation.array(),
  removeBundling: _validation.validation.boolean(),
  // Other
  earlyMedia: _validation.validation.boolean(),
  resyncOnConnect: _validation.validation.boolean(),
  mediaBrokerOnly: _validation.validation.boolean(),
  trickleIceMode: _validation.validation.string(),
  skipIceCollection: _validation.validation.boolean(),
  normalizeDestination: _validation.validation.boolean(),
  ringingFeedbackMode: (0, _validation.enums)(['auto', 'manual']),
  callAuditTimer: _validation.validation.positive(),
  mediaConnectionRetryDelay: _validation.validation.positive()
});
const parseOptions = (0, _validation.parse)('call', v8nValidation);

/**
 * A helper function to validate and fix STUN/TURN server urls according to RFC Spec.
 *
 * @method fixIceServerUrls
 * @param {string} url The URL of the ice server
 * @return The updated URL
 */
function fixIceServerUrls(url) {
  let serverUrl;
  try {
    serverUrl = new URL(url);
  } catch (error) {
    log.warn(`Invalid URL specified for ice server: ${url}`);
    return url;
  }
  const protocol = serverUrl.protocol;
  const query = serverUrl.search;
  if (!query) {
    return url;
  }
  let queryFilterFunc;
  if (protocol && protocol.toLowerCase().startsWith('turn')) {
    // Remove all query parameters other than "transport" for TURN URLs.
    queryFilterFunc = key => key !== 'transport';
  } else {
    // Remove all query parameters for STUN URLs
    queryFilterFunc = () => true;
  }
  const serverQueryParams = new URLSearchParams(query);
  Array.from(serverQueryParams.keys()).filter(queryFilterFunc).forEach(key => serverQueryParams.delete(key));
  const newQuery = serverQueryParams.toString();
  serverUrl.search = newQuery;
  if (serverUrl.search.length !== query.length) {
    log.warn(`Invalid STUN/TURN server URL provided: ${url}`);
  }
  return serverUrl.toString();
}

/**
 * Helper function to format the Call configs as the plugins expect it to be.
 * @method parseConfigs
 * @param {Object} options Call configs provided by application.
 * @returns {Object} Call configs re-formatted as needed.
 */
function parseConfigs() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // Only parse the configs for v4+.
  const majorVersion = (0, _version.getVersion)()[0];
  if (majorVersion < 4) {
    return options;
  }
  if (options.ringingFeedbackMode && !['auto', 'manual'].includes(options.ringingFeedbackMode)) {
    log.warn('Call configuration `ringingFeedbackMode` invalid. Switching to `auto`.');
    options.ringingFeedbackMode = 'auto';
  }

  // For backwards compatiblilty, if `iceCollectionDelay` and `maxIceTimeout` were provided, and `iceCollectionIdealTimeout`
  //  and `iceCollectionMaxTimeout` were not, we will use the `iceCollectionDelay` as the ideal timeout, and `maxIceTimeout`
  //  as the max.
  if (options.iceCollectionDelay) {
    if (!options.iceCollectionIdealTimeout) {
      options.iceCollectionIdealTimeout = options.iceCollectionDelay;
    }
    delete options.iceCollectionDelay;
  }
  if (options.maxIceTimeout && !options.iceCollectionMaxTimeout) {
    if (!options.iceCollectionMaxTimeout) {
      options.iceCollectionMaxTimeout = options.maxIceTimeout;
    }
    delete options.maxIceTimeout;
  }

  // TODO: Remove this once trickle ICE is fully supported.
  if (options.skipIceCollection) {
    // Prevent conflicting skipIceCollection and trickleIceMode specifications.
    if (options.trickleIceMode && ['NONE', 'HALF'].includes(options.trickleIceMode)) {
      log.warn('Conflicting `skipIceCollection` and `trickleIceMode` options specified. Proceeding with `skipIceCollection: true` only.');
      delete options.trickleIceMode;
    }
    // "skipIceCollection: true" is equivalent to "trickleIceMode: 'FULL'", i.e., current trickleIceMode "FULL" implementation
    //   proceeds to negotiation without waiting for ICE candidate collection to process/complete.
    options.trickleIceMode = 'FULL';
  }
  return options;
}

/**
 * Helper function to merge the default Call configs into the application-provided
 *   configs and validate them.
 * @param  {Object} options Call configs with expected formatting.
 * @return {Object} Call configs with defaults included.
 */
function mergeDefaults() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = (0, _utils.mergeValues)(defaultOptions, options);
  // If no ice collection check function was provided, get the default one.
  if (!options.iceCollectionCheckFunction) {
    options.iceCollectionCheckFunction = _defaults.iceCollectionCheckFunction;
  }
  parseOptions(options);
  return options;
}

/***/ }),

/***/ 60683:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.WEBRTC_DEVICE_KINDS = exports.STATUS_CODES = exports.OPERATIONS = exports.ICE_COLLECTION_RESULT_TYPES = exports.COMPLEX_OPERATION_MESSAGES = exports.COMPLEX_OPERATIONS = exports.CALL_STATES = exports.CALL_MEDIA_STATES = exports.CALL_MEDIA_CONNECTION_STATES = exports.CALL_DIRECTION = void 0;
/**
 * Call states
 * Call states used in the link call plugin
 * @name CALL_STATES
 */
const CALL_STATES = exports.CALL_STATES = {
  INITIATING: 'Initiating',
  INITIATED: 'Initiated',
  EARLY_MEDIA: 'Early Media',
  RINGING: 'Ringing',
  CANCELLED: 'Cancelled',
  CONNECTED: 'Connected',
  ON_HOLD: 'On Hold',
  ENDED: 'Ended'
};

/**
 * Possible states a call's media can be in.
 * Describes whether media is flowing or if an endpoint is preventing media flow.
 * @name CALL_MEDIA_STATES
 * @type {Object}
 * @property {string} CONNECTED Both call endpoints allow for media to flow.
 * @property {string} LOCAL_HOLD Local endpoint disallows media from flowing.
 * @property {string} REMOTE_HOLD Remote endpoint disallows media from flowing.
 * @property {string} DUAL_HOLD Both endpoints disallow media from flowing.
 */
const CALL_MEDIA_STATES = exports.CALL_MEDIA_STATES = {
  CONNECTED: 'Connected',
  LOCAL_HOLD: 'Local Hold',
  REMOTE_HOLD: 'Remote Hold',
  DUAL_HOLD: 'Dual Hold'
};

/**
 * Possible states for a Call's media connection.
 * @name CALL_MEDIA_CONNECTION_STATES
 */
const CALL_MEDIA_CONNECTION_STATES = exports.CALL_MEDIA_CONNECTION_STATES = {
  NEW: 'new',
  CHECKING: 'checking',
  CONNECTED: 'connected',
  COMPLETED: 'completed',
  FAILED: 'failed',
  DISCONNECTED: 'disconnected',
  CLOSED: 'closed'
};

/**
 * Call operations that require negotiation.
 * @name OPERATIONS
 * @type {Object}
 * @property {string} CHANGE_MEDIA Media flow remains the same, includes non-flow related media changes.
 * @property {string} HOLD_MEDIA   Media flow stops. May include non-flow related media changes.
 * @property {string} UNHOLD_MEDIA Media flow restarts. May include non-flow related media changes.
 * @property {string} MUSIC_ON_HOLD Media flow changes to sendonly.
 */
const OPERATIONS = exports.OPERATIONS = {
  CHANGE_MEDIA: 'Change Media',
  HOLD_MEDIA: 'Hold Media',
  UNHOLD_MEDIA: 'Unhold Media',
  MUSIC_ON_HOLD: 'Music on hold'
};

/**
 * Complex call operations.
 * @name COMPLEX_OPERATIONS
 * @type {Object}
 * @property {string} DIRECT_TRANSFER
 * @property {string} CONSULTATIVE_TRANSFER
 * @property {string} JOIN
 */
const COMPLEX_OPERATIONS = exports.COMPLEX_OPERATIONS = {
  DIRECT_TRANSFER: 'Direct Transfer',
  CONSULTATIVE_TRANSFER: 'Consultative Transfer',
  JOIN: 'Join'
};

/**
 * Complex call operation messages.
 * @name COMPLEX_OPERATION_MESSAGES
 * @type {Object}
 * @property {string} DIRECT_TRANSFER_SUCCESS Success message for direct transfer.
 * @property {string} CONSULTATIVE_TRANSFER_SUCCESS Success message for consultative transfer (matches reasonText from notification).
 * @property {string} JOIN_SUCCESS Success message for join.
 * @property {string} DIRECT_TRANSFER_FAILURE Failure message for direct transfer.
 * @property {string} CONSULTATIVE_TRANSFER_FAILURE Failure message for consultative transfer.
 * @property {string} JOIN_FAILURE Failure message for join.
 */
const COMPLEX_OPERATION_MESSAGES = exports.COMPLEX_OPERATION_MESSAGES = {
  DIRECT_TRANSFER_SUCCESS: 'Direct Transfer Successful',
  CONSULTATIVE_TRANSFER_SUCCESS: 'Transfer Successful',
  JOIN_SUCCESS: 'Join Successful',
  DIRECT_TRANSFER_FAILURE: 'Direct Transfer Failed',
  CONSULTATIVE_TRANSFER_FAILURE: 'Transfer Failed',
  JOIN_FAILURE: 'Join Failed'
};

/**
 * Status codes that match success messages.
 * @name STATUS_CODES
 * @type {Object}
 * @property {number} DIRECT_TRANSFER_SUCCESS Status code for successful direct transfer.
 * @property {number} CONSULTATIVE_TRANSFER_SUCCESS Status code for successful consultative transfer.
 * @property {number} JOIN_SUCCESS Status code for successful join.
 * @property {number} DIRECT_TRANSFER_FAILURE Status code for failed direct transfer.
 * @property {number} CONSULTATIVE_TRANSFER_FAILURE Status code for failed consultative transfer.
 * @property {number} JOIN_FAILURE Status code for failed join.
 */
const STATUS_CODES = exports.STATUS_CODES = {
  DIRECT_TRANSFER_SUCCESS: 9905,
  CONSULTATIVE_TRANSFER_SUCCESS: 9905,
  JOIN_SUCCESS: 9906,
  DIRECT_TRANSFER_FAILURE: -1,
  CONSULTATIVE_TRANSFER_FAILURE: -1,
  JOIN_FAILURE: -2
};

/**
 * Call direction
 * Indication of which direction the call is going
 * @name CALL_DIRECTION
 */
const CALL_DIRECTION = exports.CALL_DIRECTION = {
  INCOMING: 'incoming',
  OUTGOING: 'outgoing'
};

/*
 * A conversion from MediaDeviceInfo.kind values to their more common terms.
 * See: https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/kind
 */
const WEBRTC_DEVICE_KINDS = exports.WEBRTC_DEVICE_KINDS = {
  audioinput: 'microphone',
  videoinput: 'camera',
  audiooutput: 'speaker'
};

/**
 * Result types for the Ice Collection Check Function.
 * @name ICE_COLLECTION_RESULT_TYPES
 */
const ICE_COLLECTION_RESULT_TYPES = exports.ICE_COLLECTION_RESULT_TYPES = {
  START_CALL: 'StartCall',
  WAIT: 'Wait',
  ERROR: 'Error'
};

/***/ }),

/***/ 39100:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UPDATE_CALL = exports.TURN_CHANGED = exports.TRACK_REMOVED = exports.TRACK_ADDED = exports.SET_CUSTOM_PARAMETERS = exports.SESSION_PROGRESS = exports.SESSION_CREATED = exports.SEND_RINGING_FEEDBACK_FINISH = exports.SEND_RINGING_FEEDBACK = exports.SEND_DTMF_FINISH = exports.SEND_DTMF = exports.SEND_CUSTOM_PARAMETERS_FINISH = exports.SEND_CUSTOM_PARAMETERS = exports.RESYNC_FINISH = exports.RESYNC = exports.REPLACE_TRACK_FINISH = exports.REPLACE_TRACK = exports.REMOVE_MEDIA_FINISH = exports.REMOVE_MEDIA = exports.REMOVE_BASIC_MEDIA = exports.REMOTE_STOP_MOH_FINISH = exports.REMOTE_START_MOH_FINISH = exports.REMOTE_SLOW_START = exports.REMOTE_REMOVE_MEDIA_FINISH = exports.REMOTE_ADD_MEDIA_FINISH = exports.REJECT_CALL_FINISH = exports.REJECT_CALL = exports.PLAY_AUDIO_FINISH = exports.PLAY_AUDIO = exports.PENDING_PLAY_AUDIO = exports.PENDING_OPERATION = exports.PENDING_MAKE_CALL = exports.PENDING_JOIN = exports.PENDING_CONSULTATIVE_TRANSFER = exports.OPERATION_UPDATE = exports.MUSIC_ON_HOLD = exports.MEDIA_RESTART_FINISH = exports.MEDIA_RESTART = exports.MAKE_CALL_FINISH = exports.MAKE_CALL = exports.MAKE_ANONYMOUS_CALL_FINISH = exports.MAKE_ANONYMOUS_CALL = exports.JOIN_START = exports.JOIN_FINISH = exports.JOIN = exports.IGNORE_CALL_FINISH = exports.IGNORE_CALL = exports.GET_STATS_FINISH = exports.GET_STATS = exports.GET_AVAILABLE_CODECS = exports.FORWARD_CALL_FINISH = exports.FORWARD_CALL = exports.END_CALL_FINISH = exports.END_CALL = exports.DIRECT_TRANSFER_FINISH = exports.DIRECT_TRANSFER = exports.CUSTOM_PARAMETERS_RECEIVED = exports.CONSULTATIVE_TRANSFER_FINISH = exports.CONSULTATIVE_TRANSFER = exports.CALL_UNHOLD_FINISH = exports.CALL_UNHOLD = exports.CALL_RINGING = exports.CALL_REMOTE_UNHOLD_FINISH = exports.CALL_REMOTE_HOLD_FINISH = exports.CALL_INCOMING = exports.CALL_HOLD_FINISH = exports.CALL_HOLD = exports.CALL_CANCELLED = exports.CALL_ACCEPTED = exports.AVAILABLE_CODECS_RETRIEVED = exports.ANSWER_CALL_FINISH = exports.ANSWER_CALL = exports.ADD_MEDIA_FINISH = exports.ADD_MEDIA = exports.ADD_BASIC_MEDIA = void 0;
const callPrefix = '@@KANDY/CALL/';

/**
 * Basic call operation actions.
 */
const MAKE_CALL = exports.MAKE_CALL = callPrefix + 'MAKE';
const PENDING_MAKE_CALL = exports.PENDING_MAKE_CALL = callPrefix + 'PENDING_MAKE';
const SESSION_CREATED = exports.SESSION_CREATED = callPrefix + 'SESSION_CREATED';
const MAKE_CALL_FINISH = exports.MAKE_CALL_FINISH = callPrefix + 'MAKE_FINISH';
const MAKE_ANONYMOUS_CALL = exports.MAKE_ANONYMOUS_CALL = callPrefix + 'MAKE_ANONYMOUS_CALL';
const MAKE_ANONYMOUS_CALL_FINISH = exports.MAKE_ANONYMOUS_CALL_FINISH = callPrefix + 'MAKE_ANONYMOUS_CALL_FINISH';
const CALL_INCOMING = exports.CALL_INCOMING = callPrefix + 'INCOMING';
const SEND_RINGING_FEEDBACK = exports.SEND_RINGING_FEEDBACK = callPrefix + 'SEND_RINGING_FEEDBACK';
const SEND_RINGING_FEEDBACK_FINISH = exports.SEND_RINGING_FEEDBACK_FINISH = callPrefix + 'SEND_RINGING_FEEDBACK_FINISH';
const CALL_RINGING = exports.CALL_RINGING = callPrefix + 'RINGING';
const SESSION_PROGRESS = exports.SESSION_PROGRESS = callPrefix + 'SESSION_PROGRESS';
const CALL_CANCELLED = exports.CALL_CANCELLED = callPrefix + 'CANCELLED';
const ANSWER_CALL = exports.ANSWER_CALL = callPrefix + 'ANSWER';
const ANSWER_CALL_FINISH = exports.ANSWER_CALL_FINISH = callPrefix + 'ANSWER_FINISH';
const REJECT_CALL = exports.REJECT_CALL = callPrefix + 'REJECT';
const REJECT_CALL_FINISH = exports.REJECT_CALL_FINISH = callPrefix + 'REJECT_FINISH';
const IGNORE_CALL = exports.IGNORE_CALL = callPrefix + 'IGNORE';
const IGNORE_CALL_FINISH = exports.IGNORE_CALL_FINISH = callPrefix + 'IGNORE_FINISH';
const CALL_ACCEPTED = exports.CALL_ACCEPTED = callPrefix + 'ACCEPTED';
const END_CALL = exports.END_CALL = callPrefix + 'END';
const END_CALL_FINISH = exports.END_CALL_FINISH = callPrefix + 'END_FINISH';
const FORWARD_CALL = exports.FORWARD_CALL = callPrefix + 'FORWARD_CALL';
const FORWARD_CALL_FINISH = exports.FORWARD_CALL_FINISH = callPrefix + 'FORWARD_CALL_FINISH';
const PENDING_OPERATION = exports.PENDING_OPERATION = callPrefix + 'PENDING_OPERATION';

/**
 * Mid-call operation actions.
 */

const UPDATE_CALL = exports.UPDATE_CALL = callPrefix + 'UPDATE_CALL';
const CALL_HOLD = exports.CALL_HOLD = callPrefix + 'HOLD';
const CALL_HOLD_FINISH = exports.CALL_HOLD_FINISH = callPrefix + 'HOLD_FINISH';
const CALL_UNHOLD = exports.CALL_UNHOLD = callPrefix + 'UNHOLD';
const CALL_UNHOLD_FINISH = exports.CALL_UNHOLD_FINISH = callPrefix + 'UNHOLD_FINISH';
const SET_CUSTOM_PARAMETERS = exports.SET_CUSTOM_PARAMETERS = callPrefix + 'SET_CUSTOM_PARAMETERS';
const SEND_CUSTOM_PARAMETERS = exports.SEND_CUSTOM_PARAMETERS = callPrefix + 'SEND_CUSTOM_PARAMETERS';
const SEND_CUSTOM_PARAMETERS_FINISH = exports.SEND_CUSTOM_PARAMETERS_FINISH = callPrefix + 'SEND_CUSTOM_PARAMETERS_FINISH';
const ADD_MEDIA = exports.ADD_MEDIA = callPrefix + 'ADD_MEDIA';
const ADD_MEDIA_FINISH = exports.ADD_MEDIA_FINISH = callPrefix + 'ADD_MEDIA_FINISH';
const ADD_BASIC_MEDIA = exports.ADD_BASIC_MEDIA = callPrefix + 'ADD_BASIC_MEDIA';
const REMOVE_MEDIA = exports.REMOVE_MEDIA = callPrefix + 'REMOVE_MEDIA';
const REMOVE_MEDIA_FINISH = exports.REMOVE_MEDIA_FINISH = callPrefix + 'REMOVE_MEDIA_FINISH';
const REMOVE_BASIC_MEDIA = exports.REMOVE_BASIC_MEDIA = callPrefix + 'REMOVE_BASIC_MEDIA';
const MUSIC_ON_HOLD = exports.MUSIC_ON_HOLD = callPrefix + 'MUSIC_ON_HOLD';
const SEND_DTMF = exports.SEND_DTMF = callPrefix + 'SEND_DTMF';
const SEND_DTMF_FINISH = exports.SEND_DTMF_FINISH = callPrefix + 'SEND_DTMF_FINISH';
const GET_STATS = exports.GET_STATS = callPrefix + 'GET_STATS';
const GET_STATS_FINISH = exports.GET_STATS_FINISH = callPrefix + 'GET_STATS_FINISH';
const CONSULTATIVE_TRANSFER = exports.CONSULTATIVE_TRANSFER = callPrefix + 'CONSULTATIVE_TRANSFER';
const PENDING_CONSULTATIVE_TRANSFER = exports.PENDING_CONSULTATIVE_TRANSFER = callPrefix + 'PENDING_CONSULTATIVE_TRANSFER';
const CONSULTATIVE_TRANSFER_FINISH = exports.CONSULTATIVE_TRANSFER_FINISH = callPrefix + 'CONSULTATIVE_TRANSFER_FINISH';
const DIRECT_TRANSFER = exports.DIRECT_TRANSFER = callPrefix + 'DIRECT_TRANSFER';
const DIRECT_TRANSFER_FINISH = exports.DIRECT_TRANSFER_FINISH = callPrefix + 'DIRECT_TRANSFER_FINISH';
const JOIN = exports.JOIN = callPrefix + 'JOIN';
const JOIN_START = exports.JOIN_START = callPrefix + 'JOIN_START';
const PENDING_JOIN = exports.PENDING_JOIN = callPrefix + 'PENDING_JOIN';
const JOIN_FINISH = exports.JOIN_FINISH = callPrefix + 'JOIN_FINISH';
const REPLACE_TRACK = exports.REPLACE_TRACK = callPrefix + 'REPLACE_TRACK';
const REPLACE_TRACK_FINISH = exports.REPLACE_TRACK_FINISH = callPrefix + 'REPLACE_TRACK_FINISH';
const MEDIA_RESTART = exports.MEDIA_RESTART = callPrefix + 'MEDIA_RESTART';
const MEDIA_RESTART_FINISH = exports.MEDIA_RESTART_FINISH = callPrefix + 'MEDIA_RESTART_FINISH';
const RESYNC = exports.RESYNC = callPrefix + 'RESYNC';
const RESYNC_FINISH = exports.RESYNC_FINISH = callPrefix + 'RESYNC_FINISH';
const PLAY_AUDIO = exports.PLAY_AUDIO = callPrefix + 'PLAY_AUDIO';
const PENDING_PLAY_AUDIO = exports.PENDING_PLAY_AUDIO = callPrefix + 'PENDING_PLAY_AUDIO';
const PLAY_AUDIO_FINISH = exports.PLAY_AUDIO_FINISH = callPrefix + 'PLAY_AUDIO_FINISH';

/**
 * Miscellaneous call actions
 */
const CUSTOM_PARAMETERS_RECEIVED = exports.CUSTOM_PARAMETERS_RECEIVED = callPrefix + 'CUSTOM_PARAMETERS_RECEIVED';
const GET_AVAILABLE_CODECS = exports.GET_AVAILABLE_CODECS = callPrefix + 'GET_AVAILABLE_CODECS';
const AVAILABLE_CODECS_RETRIEVED = exports.AVAILABLE_CODECS_RETRIEVED = callPrefix + 'AVAILABLE_CODECS_RETRIEVED';
const OPERATION_UPDATE = exports.OPERATION_UPDATE = callPrefix + 'OPERATION_UPDATE';

/**
 * Remote operation actions.
 */
const CALL_REMOTE_HOLD_FINISH = exports.CALL_REMOTE_HOLD_FINISH = callPrefix + 'REMOTE_HOLD_FINISH';
const CALL_REMOTE_UNHOLD_FINISH = exports.CALL_REMOTE_UNHOLD_FINISH = callPrefix + 'REMOTE_UNHOLD_FINISH';
const REMOTE_ADD_MEDIA_FINISH = exports.REMOTE_ADD_MEDIA_FINISH = callPrefix + 'REMOTE_ADD_MEDIA_FINISH';
const REMOTE_REMOVE_MEDIA_FINISH = exports.REMOTE_REMOVE_MEDIA_FINISH = callPrefix + 'REMOTE_REMOVE_MEDIA_FINISH';
const REMOTE_START_MOH_FINISH = exports.REMOTE_START_MOH_FINISH = callPrefix + 'REMOTE_START_MOH_FINISH';
const REMOTE_STOP_MOH_FINISH = exports.REMOTE_STOP_MOH_FINISH = callPrefix + 'REMOTE_STOP_MOH_FINISH';
const REMOTE_SLOW_START = exports.REMOTE_SLOW_START = callPrefix + 'REMOTE_SLOW_START';

/**
 * Turn action types.
 */
const turnPrefix = callPrefix + 'TURN/';
const TURN_CHANGED = exports.TURN_CHANGED = turnPrefix + 'CHANGED';

/**
 * Track action types.
 */
const trackPrefix = callPrefix + 'TRACK/';
const TRACK_ADDED = exports.TRACK_ADDED = trackPrefix + 'ADDED';
const TRACK_REMOVED = exports.TRACK_REMOVED = trackPrefix + 'REMOVED';

/***/ }),

/***/ 77202:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addBasicMedia = addBasicMedia;
exports.addMedia = addMedia;
exports.addMediaFinish = addMediaFinish;
exports.answerCall = answerCall;
exports.answerCallFinish = answerCallFinish;
exports.availableCodecsRetrieved = availableCodecsRetrieved;
exports.callAccepted = callAccepted;
exports.callActionHelper = callActionHelper;
exports.callCancelled = callCancelled;
exports.callIncoming = callIncoming;
exports.callRinging = callRinging;
exports.consultativeTransfer = consultativeTransfer;
exports.consultativeTransferFinish = consultativeTransferFinish;
exports.customParametersReceived = customParametersReceived;
exports.directTransfer = directTransfer;
exports.directTransferFinish = directTransferFinish;
exports.endCall = endCall;
exports.endCallFinish = endCallFinish;
exports.forwardCall = forwardCall;
exports.forwardCallFinish = forwardCallFinish;
exports.getAvailableCodecs = getAvailableCodecs;
exports.getStats = getStats;
exports.getStatsFinish = getStatsFinish;
exports.holdCall = holdCall;
exports.holdCallFinish = holdCallFinish;
exports.ignoreCall = ignoreCall;
exports.ignoreCallFinish = ignoreCallFinish;
exports.join = join;
exports.joinFinish = joinFinish;
exports.joinStart = joinStart;
exports.makeAnonymousCall = makeAnonymousCall;
exports.makeAnonymousCallFinish = makeAnonymousCallFinish;
exports.makeCall = makeCall;
exports.makeCallFinish = makeCallFinish;
exports.operationUpdate = operationUpdate;
exports.pendingConsultativeTransfer = pendingConsultativeTransfer;
exports.pendingJoin = pendingJoin;
exports.pendingMakeCall = pendingMakeCall;
exports.pendingOperation = pendingOperation;
exports.playAudio = playAudio;
exports.playAudioFinish = playAudioFinish;
exports.playAudioPending = playAudioPending;
exports.rejectCall = rejectCall;
exports.rejectCallFinish = rejectCallFinish;
exports.remoteAddMediaFinish = remoteAddMediaFinish;
exports.remoteHoldFinish = remoteHoldFinish;
exports.remoteRemoveMediaFinish = remoteRemoveMediaFinish;
exports.remoteSlowStart = remoteSlowStart;
exports.remoteStartMohFinish = remoteStartMohFinish;
exports.remoteStopMohFinish = remoteStopMohFinish;
exports.remoteUnholdFinish = remoteUnholdFinish;
exports.removeBasicMedia = removeBasicMedia;
exports.removeMedia = removeMedia;
exports.removeMediaFinish = removeMediaFinish;
exports.replaceTrack = replaceTrack;
exports.replaceTrackFinish = replaceTrackFinish;
exports.restartMedia = restartMedia;
exports.restartMediaFinish = restartMediaFinish;
exports.resync = resync;
exports.resyncFinish = resyncFinish;
exports.sendCustomParameters = sendCustomParameters;
exports.sendCustomParametersFinish = sendCustomParametersFinish;
exports.sendDTMF = sendDTMF;
exports.sendDTMFFinish = sendDTMFFinish;
exports.sendRingingFeedback = sendRingingFeedback;
exports.sendRingingFeedbackFinish = sendRingingFeedbackFinish;
exports.sessionCreated = sessionCreated;
exports.sessionProgress = sessionProgress;
exports.setCustomParameters = setCustomParameters;
exports.unholdCall = unholdCall;
exports.unholdCallFinish = unholdCallFinish;
exports.updateCall = updateCall;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isPlainObject2 = _interopRequireDefault(__webpack_require__(1449));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var actionTypes = _interopRequireWildcard(__webpack_require__(39100));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Libraries.

/**
 * Helper function for formatting call actions.
 * @method callActionHelper
 * @param  {string} type Action type.
 * @param  {string} id Id of the call being acted on.
 * @param  {Object} [payload={}]
 * @param  {BasicError} [payload.error]
 * @param  {Object} [meta={}]
 * @return {Object} An action.
 */
function callActionHelper(type, id) {
  let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  /**
   * Call action format.
   * Call actions are not FSA-compliant because there are cases where we need
   *    to provide useful info (for the SDK) and an error object (for the app).
   *    FSA would require the error object to be the entirety of the payload.
   * @type {Object}
   * {
   *   type,
   *   payload: {
   *    ...usefulInfo,
   *    errorObject
   *   },
   *   error,
   *   meta
   * }
   */
  const action = {
    type,
    payload: _objectSpread(_objectSpread({}, payload), {}, {
      id
    })
  };
  // Only have meta and error properties on the action if they're needed.
  if (!(0, _isEmpty2.default)(meta)) {
    action.meta = meta;
  }
  if (payload.error) {
    action.error = true;
  }
  return action;
}
function makeCall(id, options) {
  return callActionHelper(actionTypes.MAKE_CALL, id, options);
}
function sessionCreated(id, params) {
  return callActionHelper(actionTypes.SESSION_CREATED, id, params);
}
function pendingMakeCall(id, options) {
  return callActionHelper(actionTypes.PENDING_MAKE_CALL, id, options);
}
function makeCallFinish(id, params) {
  return callActionHelper(actionTypes.MAKE_CALL_FINISH, id, params);
}
function makeAnonymousCall(id, params) {
  return {
    type: actionTypes.MAKE_ANONYMOUS_CALL,
    payload: {
      id,
      callee: params.callee,
      credentials: params.credentials,
      mediaConstraints: params.mediaConstraints,
      callOptions: params.callOptions
    }
  };
}
function makeAnonymousCallFinish(id, params) {
  return callActionHelper(actionTypes.MAKE_ANONYMOUS_CALL_FINISH, id, params);
}
function callIncoming(id, params) {
  return callActionHelper(actionTypes.CALL_INCOMING, id, params);
}
function sendRingingFeedback(id) {
  return callActionHelper(actionTypes.SEND_RINGING_FEEDBACK, id);
}
function sendRingingFeedbackFinish(id, params) {
  return callActionHelper(actionTypes.SEND_RINGING_FEEDBACK_FINISH, id, params);
}
function callRinging(id, params) {
  return callActionHelper(actionTypes.CALL_RINGING, id, params);
}
function sessionProgress(id, params) {
  return callActionHelper(actionTypes.SESSION_PROGRESS, id, params);
}
function callCancelled(id, params) {
  return callActionHelper(actionTypes.CALL_CANCELLED, id, params);
}
function answerCall(id, options) {
  return callActionHelper(actionTypes.ANSWER_CALL, id, options);
}
function answerCallFinish(id, params, meta) {
  return callActionHelper(actionTypes.ANSWER_CALL_FINISH, id, params, meta);
}
function rejectCall(id, options) {
  return callActionHelper(actionTypes.REJECT_CALL, id, options);
}
function rejectCallFinish(id, params) {
  return callActionHelper(actionTypes.REJECT_CALL_FINISH, id, params);
}
function callAccepted(id, params) {
  return callActionHelper(actionTypes.CALL_ACCEPTED, id, params);
}
function ignoreCall(id, params) {
  return callActionHelper(actionTypes.IGNORE_CALL, id, params);
}
function ignoreCallFinish(id, params) {
  return callActionHelper(actionTypes.IGNORE_CALL_FINISH, id, params);
}
function endCall(id, params) {
  return callActionHelper(actionTypes.END_CALL, id, params);
}
function endCallFinish(id, params) {
  return callActionHelper(actionTypes.END_CALL_FINISH, id, params);
}
function holdCall(id, options) {
  return callActionHelper(actionTypes.CALL_HOLD, id, options);
}
function holdCallFinish(id, params) {
  return callActionHelper(actionTypes.CALL_HOLD_FINISH, id, params);
}
function unholdCall(id, options) {
  return callActionHelper(actionTypes.CALL_UNHOLD, id, options);
}
function unholdCallFinish(id, params) {
  return callActionHelper(actionTypes.CALL_UNHOLD_FINISH, id, params);
}
function setCustomParameters(id, customOptions) {
  const action = {
    type: actionTypes.SET_CUSTOM_PARAMETERS,
    payload: {
      id,
      // customOptions can either be an array (i.e., just the headers) or an object (i.e., headers and body)
      customParameters: (0, _isPlainObject2.default)(customOptions) ? customOptions.customParameters : customOptions,
      customBodies: (0, _isPlainObject2.default)(customOptions) ? customOptions.customBodies : undefined
    }
  };
  return action;
}
function sendCustomParameters(id, options) {
  return callActionHelper(actionTypes.SEND_CUSTOM_PARAMETERS, id, options);
}
function sendCustomParametersFinish(id, params) {
  return callActionHelper(actionTypes.SEND_CUSTOM_PARAMETERS_FINISH, id, params);
}
function customParametersReceived(id, params) {
  return callActionHelper(actionTypes.CUSTOM_PARAMETERS_RECEIVED, id, params);
}
function addMedia(id, params) {
  return callActionHelper(actionTypes.ADD_MEDIA, id, params);
}
function addMediaFinish(id, params) {
  return callActionHelper(actionTypes.ADD_MEDIA_FINISH, id, params);
}
function addBasicMedia(id, params) {
  return callActionHelper(actionTypes.ADD_BASIC_MEDIA, id, params);
}
function removeMedia(id, params) {
  return callActionHelper(actionTypes.REMOVE_MEDIA, id, params);
}
function removeMediaFinish(id, params) {
  return callActionHelper(actionTypes.REMOVE_MEDIA_FINISH, id, params);
}
function removeBasicMedia(id, params) {
  return callActionHelper(actionTypes.REMOVE_BASIC_MEDIA, id, params);
}
function sendDTMF(id, params) {
  return callActionHelper(actionTypes.SEND_DTMF, id, params);
}
function sendDTMFFinish(id, params) {
  return callActionHelper(actionTypes.SEND_DTMF_FINISH, id, params);
}
function getStats(id, params, deferred) {
  const action = {
    type: actionTypes.GET_STATS,
    payload: _objectSpread(_objectSpread({}, params), {}, {
      id
    }),
    meta: {
      deferred
    }
  };
  return action;
}
function getStatsFinish(id, params) {
  return callActionHelper(actionTypes.GET_STATS_FINISH, id, params);
}
function forwardCall(id, params) {
  return callActionHelper(actionTypes.FORWARD_CALL, id, params);
}
function forwardCallFinish(id, params) {
  return callActionHelper(actionTypes.FORWARD_CALL_FINISH, id, params);
}
function consultativeTransfer(id, params) {
  return callActionHelper(actionTypes.CONSULTATIVE_TRANSFER, id, params);
}
function pendingConsultativeTransfer(id, params) {
  return callActionHelper(actionTypes.PENDING_CONSULTATIVE_TRANSFER, id, params);
}
function consultativeTransferFinish(id, params) {
  return callActionHelper(actionTypes.CONSULTATIVE_TRANSFER_FINISH, id, params);
}
function directTransfer(id, params) {
  return callActionHelper(actionTypes.DIRECT_TRANSFER, id, params);
}
function directTransferFinish(id, params) {
  return callActionHelper(actionTypes.DIRECT_TRANSFER_FINISH, id, params);
}
function join(id, params) {
  return callActionHelper(actionTypes.JOIN, id, params);
}
function joinStart(id, params) {
  return callActionHelper(actionTypes.JOIN_START, id, params);
}
function pendingJoin(id, params) {
  return callActionHelper(actionTypes.PENDING_JOIN, id, params);
}
function joinFinish(id, params) {
  return callActionHelper(actionTypes.JOIN_FINISH, id, params);
}
function replaceTrack(id, params) {
  return callActionHelper(actionTypes.REPLACE_TRACK, id, params);
}
function replaceTrackFinish(id, params) {
  return callActionHelper(actionTypes.REPLACE_TRACK_FINISH, id, params);
}
function pendingOperation(id, params) {
  return callActionHelper(actionTypes.PENDING_OPERATION, id, params);
}
function getAvailableCodecs(params, deferred) {
  const action = {
    type: actionTypes.GET_AVAILABLE_CODECS,
    payload: _objectSpread({}, params),
    meta: {
      deferred
    }
  };
  return action;
}
function availableCodecsRetrieved(params) {
  const action = {
    type: actionTypes.AVAILABLE_CODECS_RETRIEVED,
    payload: _objectSpread({}, params)
  };
  if (params.error) {
    action.error = true;
  }
  return action;
}

/*
 * Remote operations.
 */

function remoteHoldFinish(id, params) {
  return callActionHelper(actionTypes.CALL_REMOTE_HOLD_FINISH, id, params);
}
function remoteUnholdFinish(id, params) {
  return callActionHelper(actionTypes.CALL_REMOTE_UNHOLD_FINISH, id, params);
}
function remoteAddMediaFinish(id, params) {
  return callActionHelper(actionTypes.REMOTE_ADD_MEDIA_FINISH, id, params);
}
function remoteRemoveMediaFinish(id, params) {
  return callActionHelper(actionTypes.REMOTE_REMOVE_MEDIA_FINISH, id, params);
}
function remoteStartMohFinish(id, params) {
  return callActionHelper(actionTypes.REMOTE_START_MOH_FINISH, id, params);
}
function remoteStopMohFinish(id, params) {
  return callActionHelper(actionTypes.REMOTE_STOP_MOH_FINISH, id, params);
}
function remoteSlowStart(id, params) {
  return callActionHelper(actionTypes.REMOTE_SLOW_START, id, params);
}
function restartMedia(id, params) {
  return callActionHelper(actionTypes.MEDIA_RESTART, id, params);
}
function restartMediaFinish(id, params) {
  return callActionHelper(actionTypes.MEDIA_RESTART_FINISH, id, params);
}
function resync(id, params) {
  return callActionHelper(actionTypes.RESYNC, id, params);
}
function resyncFinish(id, params) {
  return callActionHelper(actionTypes.RESYNC_FINISH, id, params);
}

/**
 * API action to trigger the "play audio" saga.
 * @method playAudio
 * @param {string} id Call ID.
 * @param {string} filePath
 */
function playAudio(id, filePath) {
  return {
    type: actionTypes.PLAY_AUDIO,
    payload: {
      id,
      filePath
    }
  };
}

/**
 * Saga action to signify the "playAudioFile" operation is midway through.
 * @method playAudioPending
 * @param {string} id Call ID.
 */
function playAudioPending(id) {
  return {
    type: actionTypes.PENDING_PLAY_AUDIO,
    payload: {
      id
    }
  };
}

/**
 * Saga action to signify "saga complete".
 * @method playAudioFinish
 * @param {string} id Call ID.
 * @param {BasicError} [error] If the operation failed, the error.
 */
function playAudioFinish(id, error) {
  return {
    type: actionTypes.PLAY_AUDIO_FINISH,
    payload: {
      id,
      error
    },
    error: error !== undefined
  };
}

// Generic action.
function updateCall(id, params) {
  return callActionHelper(actionTypes.UPDATE_CALL, id, params);
}

/**
 * Action to signify the state of an operation has changed.
 * @method operationUpdate
 * @param {string} id
 * @param {string} operation Type of operation.
 * @param {boolean} isLocal
 * @param {Object} state
 * @param {string} transition
 * @param {Object} operationData
 * @param {string} [eventId]
 * @param {boolean} isBlocking Whether this operation would blocked, or be blocked by, other blocking operations.
 * @param {string} operationId
 */
function operationUpdate(id, operation, isLocal, _ref) {
  let {
    transition,
    operationData,
    eventId,
    isBlocking,
    operationId
  } = _ref;
  return {
    type: actionTypes.OPERATION_UPDATE,
    payload: {
      id,
      operation,
      operationId,
      transition,
      operationData,
      eventId,
      isLocal,
      isBlocking
    }
  };
}

/***/ }),

/***/ 6313:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.turnActions = exports.callActions = void 0;
var callActionsImport = _interopRequireWildcard(__webpack_require__(77202));
var turnActionsImport = _interopRequireWildcard(__webpack_require__(21371));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Apparently the following doesn't work:
//      export * as newName from './place';
// So import everything from each file, then re-export.
const callActions = exports.callActions = callActionsImport;
const turnActions = exports.turnActions = turnActionsImport;

/***/ }),

/***/ 21371:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.turnChanged = turnChanged;
var actionTypes = _interopRequireWildcard(__webpack_require__(39100));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

/**
 * Represents that TURN information has changed.
 * @method turnChanged
 * @return {Object}
 */
function turnChanged(_ref) {
  let {
    credentials
  } = _ref;
  return {
    type: actionTypes.TURN_CHANGED,
    payload: {
      credentials
    }
  };
}

/***/ }),

/***/ 10094:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _selectors2 = __webpack_require__(46942);
var _normalization = __webpack_require__(54395);
var _uuid = __webpack_require__(60130);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call Plugin

// Other plugins.

// Helpers

/**
 * Call Complex APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} Complex API.
 */
function createAPI(container) {
  const {
    CallManager,
    context,
    logManager,
    API_LOG_TAG,
    emitEvent
  } = container;
  const log = logManager.getLogger('CALL');

  /**
   * Performs a "direct" transfer on a call (also known as an unannounced or
   *    blind transfer). This allows the current user to transfer the remote
   *    participant of a call to another user, similar to a "forward"
   *    operation.
   *
   * The specified call must be locally held. After the operation, this call
   *    will be ended, as indicated by a
   *    {@link call.event:call:stateChange call:stateChange} event.
   *
   * The "destination" user will receive an incoming call, and when answered,
   *    they will be connected with the remote participant of the specified
   *    call.
   *
   * The progression of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event. The remote
   *    participant being transferred will receive it as if it were a "remote
   *    unhold" operation.
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @method directTransfer
   * @param {string} callId ID of the call being acted on.
   * @param {call.SIP_URI|call.TEL_URI} destination The destination to transfer the call to.
   */
  async function directTransfer(callId, destination) {
    log.debug(API_LOG_TAG + 'call.directTransfer: ', callId, destination);
    const config = (0, _selectors.getOptions)(context.getState());
    if (config.normalizeDestination) {
      // Normalize callee addresses
      destination = (0, _normalization.normalizeSipUri)(destination, (0, _selectors2.getDomain)(context.getState()));
      log.info('Address normalized to: ', destination);
    }
    context.dispatch(_actions.callActions.directTransfer(callId, {
      destination
    }));
    try {
      await CallManager.directTransfer(callId, destination);
    } catch (error) {
      context.dispatch(_actions.callActions.directTransferFinish(callId, {
        error
      }));
      const call = (0, _selectors.getCallById)(context.getState(), callId);
      // Emit error event for operation.
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: call ? call.state : undefined,
          localHold: call ? call.localHold : undefined,
          remoteHold: call ? call.remoteHold : undefined
        },
        error
      });
    }
  }

  /**
   * Performs a "consultative" transfer between two ongoing calls (also known
   *    as an announced or warm transfer). This allows the current user to
   *    transfer the remote participant of a call to another user, after
   *    having spoken to both users.
   *
   * Both calls used for the transfer must be locally held. After the
   *    operation, these calls will be ended, as indicated by a
   *    {@link call.event:call:stateChange call:stateChange} event.
   *
   * Both remote participants will see their call be unheld by the operation,
   *    as indicated by a
   *    {@link call.event:call:stateChange call:stateChange} event, and will
   *    be connected to one another afterwards.
   *
   * The progression of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event. Both local
   *    calls will receive this event, since it is an operation on both calls,
   *    and the remote calls will receive it as if it were a "remote unhold"
   *    operation.
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @method consultativeTransfer
   * @param {string} callId ID of the call being acted on.
   * @param {string} otherCallId ID of the other call being acted on.
   */
  async function consultativeTransfer(callId, otherCallId) {
    log.debug(API_LOG_TAG + 'call.consultativeTransfer: ', callId, otherCallId);
    context.dispatch(_actions.callActions.consultativeTransfer(callId, {
      otherCallId
    }));
    let error;
    try {
      await CallManager.consultativeTransfer(callId, otherCallId);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.consultativeTransferFinish(callId, {
        otherCallId,
        error
      }));
      const call = (0, _selectors.getCallById)(context.getState(), callId);
      // Emit error event for operation.
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: call ? call.state : undefined,
          localHold: call ? call.localHold : undefined,
          remoteHold: call ? call.remoteHold : undefined
        },
        error
      });
    }
  }

  /**
   * Performs a "join" on two ongoing calls.
   * This allows the current user to establish a call with audio with two
   *    remote users.
   *
   * Both specified calls must be locally held. The new, "joined" call will be
   *    audio-only, even if either previous call had video. Video cannot be
   *    added to the "joined" call. Both remote participants will see their
   *    call taken off hold, and will receive additional audio from other
   *    participants after the operation. Both previous calls for the current
   *    user will be ended after the operation, as indicated by a
   *    {@link call.event:call:stateChange call:stateChange} event.
   *
   * If the first call specified has custom parameters set, these parameters will be carried over to the new call.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event. Both remote
   *    participants will also receive this event as if it were a "remote
   *    unhold" operation.
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @method join
   * @param {string} callId ID of the call being acted on.
   * @param {string} otherCallId ID of the other call being acted on.
   */
  async function join(callId, otherCallId) {
    log.debug(API_LOG_TAG + 'call.join: ', callId, otherCallId);
    const newCallId = (0, _uuid.v4)();
    const from = (0, _selectors2.getUserInfo)(context.getState()).username;
    context.dispatch(_actions.callActions.join(callId, {
      otherCallId,
      newCallId,
      from
    }));

    // Start the operation
    let error;
    try {
      await CallManager.join(callId, otherCallId, newCallId, from);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.joinFinish(callId, {
        usedCallIds: [callId, otherCallId],
        error
      }));
      const primaryCall = (0, _selectors.getCallById)(context.getState(), callId);
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: primaryCall ? primaryCall.state : undefined,
          localHold: primaryCall ? primaryCall.localHold : undefined,
          remoteHold: primaryCall ? primaryCall.remoteHold : undefined
        },
        error
      });
    }
  }
  return {
    directTransfer,
    consultativeTransfer,
    join
  };
}

/***/ }),

/***/ 56465:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _constants = __webpack_require__(42750);
var _constants2 = __webpack_require__(60683);
// Call plugin.

/**
 * Call Constant APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @return {Object} Constants API.
 */
function createAPI() {
  /**
   * Possible states that a Call can be in.
   *
   * A Call's state describes the current status of the Call. An application
   *    should use the state to understand how the Call, and any media
   *    associated with the Call, should be handled. Which state the Call is
   *    in defines how it can be interacted with, as certain operations can
   *    only be performed while in specific states, and tells an application
   *    whether the Call currently has media flowing between users.
   * Unless stated otherwise, the Call's state pertains to both caller & callee.
   *
   * The Call's state is a property of the {@link call.CallObject CallObject},
   *    which can be retrieved using the {@link call.getById} or
   *    {@link call.getAll} APIs.
   *
   * The SDK emits a {@link call.event:call:stateChange call:stateChange}
   *    event when a Call's state changes from one state to another.
   *
   * @public
   * @static
   * @memberof call
   * @requires callMe
   * @requires call
   * @type {Object}
   * @property {string} INITIATING The (outgoing) call is being started. While in this state, no Call operations can be performed until Call gets into Initiated state.
   * @property {string} INITIATED A call has been started and both the callee and caller may now perform further operations on the call object.
   * @property {string} RINGING The call has been received by both parties, and is waiting to be answered.
   * @property {string} EARLY_MEDIA The call has not been answered, but media
   *    is already being received. This may be network-ringing media, IVR
   *    system media, or other pre-answer medias. When early media is
   *    supported, this state may replace the Ringing state. This is a state valid only for caller's side.
   * @property {string} CANCELLED The call was disconnected before it could be answered. This is a state valid only for callee's side.
   * @property {string} CONNECTED Both parties are connected and media is flowing.
   * @property {string} ON_HOLD Both parties are connected but no media is flowing.
   * @property {string} ENDED The call has ended.
   * @example
   * // Use the call states to know how to handle a change in the call.
   * client.on('call:stateChange', function (params) {
   *    const call = client.call.getById(params.callId)
   *    // Check if the call now has media flowing.
   *    if (call.state === client.call.states.CONNECTED) {
   *      // The call is now active, and can perform midcall operations.
   *    }
   * })
   */
  const states = _constants2.CALL_STATES;

  /**
   * Possible states that a Call's media connection can be in.
   *
   * A Call's media connection state describes the current status of media within the call.
   *  An application should use this state to understand whether the Call participants are
   *  able to see/hear each other or may be experiencing connection issues. The media connection
   *  state can be used alongside the {@link call.states Call state} to determine if media issues
   *  are occurring while the participants are expecting to be connected.
   *
   * An important state to check for is the `FAILED` state. This state signifies that there is no
   *    media connection between the call participants and an action must be taken to resolve the
   *    problem. Using the {@link call.restartMedia} API will attempt to reconnect the media. See
   *    the {@link call.restartMedia} API description for more information.
   *
   * These states are direct reflections of the possible
   *  [RTCPeerConnection.iceConnectionState](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState) values.
   *
   * The Call's media connection state is a property of the {@link call.CallObject CallObject},
   *    which can be retrieved using the {@link call.getById} or
   *    {@link call.getAll} APIs.
   *
   * The SDK emits a {@link call.event:call:mediaConnectionChange call:mediaConnectionChange}
   *    event when a Call's media connection state changes from one state to another.
   *
   * @public
   * @static
   * @memberof call
   * @requires callMe
   * @requires call
   * @type {Object}
   * @property {string} NEW The Call is initializing the local side of the connection and waiting on information from the remote side.
   *  When the information is received, the state will transition into `checking` as the Call automatically begins the connection process.
   * @property {string} CHECKING The Call has received information from the remote endpoint and is working to establish the media connection.
   *  When finished, the state will transition to either `connected` or `failed`.
   * @property {string} CONNECTED A usable connection has been made and the Call will now have media.
   *  The connection may not be optimal, though, so the Call will continue establishment to improve the connection before going into the `completed` state.
   * @property {string} COMPLETED The media connection process has fully completed and the optimal connection has been established. While in this state,
   *  the Call endpoints will receive each other's media.
   * @property {string} DISCONNECTED Media has become disconnected and the Call endpoints have stopped receiving each other's media.
   *  The Call will automatically attempt to reconnect, transitioning back to `completed` if successful or to `failed` if not.
   * @property {string} FAILED The connection has failed and cannot be recovered automatically. A full media connection refresh is required to reestablish a connection. See the {@link call.restartMedia} API.
   * @property {string} CLOSED The connection has been shut down and is no longer in use.
   * @example
   * // Use the media connection states to check the status of the media connection of the Call.
   * client.on('call:mediaConnectionChange', function (params) {
   *   // Retrieve the state of the Call this event is for.
   *   const call = client.call.getById(params.callId)
   *   const mediaConnectionStates = client.call.mediaConnectionStates
   *
   *   // Check the mediaConnectionState to determine which scenario the call is in.
   *   switch (call.mediaConnectionState) {
   *     case mediaConnectionStates.CONNECTED:
   *     case mediaConnectionStates.COMPLETED:
   *       // Media established: The Call's media is connected. The Call's participants
   *       //    are able to see/hear each other.
   *       // These states will occur after Call establishment.
   *       ...
   *       break
   *     case mediaConnectionStates.NEW:
   *     case mediaConnectionStates.CHECKING:
   *     case mediaConnectionStates.DISCONNECTED:
   *       // Media pending: The Call's media is not connected. The Call is working
   *       //    to connect media automatically.
   *       // These states will occur during Call establishment and may occur midcall if there are
   *       //    connection issues (eg. poor network quality) or a Call participant has changed (eg. transfer).
   *       ...
   *       break
   *     case mediaConnectionStates.FAILED:
   *      // Media has failed. The call requires a media refresh to reestablish.
   *      // This state will occur after the `DISCONNECTED` state is encountered.
   *      ...
   *       break
   *     case mediaConnectionStates.CLOSED:
   *       // Media ended due to the Call being ended.
   *       // This state will occur after Call establishment.
   *       ...
   *       break
   *   }
   * }
   */
  const mediaConnectionStates = _constants2.CALL_MEDIA_CONNECTION_STATES;

  /* Documentation attached to the constant definitions. */
  const reportEvents = _constants.REPORT_EVENTS;

  /* Documentation attached to the constant definitions. */
  const metrics = _constants.REPORT_METRICS;
  return {
    states,
    mediaConnectionStates,
    reportEvents,
    metrics
  };
}

/***/ }),

/***/ 38330:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _constants = __webpack_require__(60683);
var _selectors2 = __webpack_require__(46942);
var _utils = __webpack_require__(27842);
var _normalization = __webpack_require__(54395);
var _uuid = __webpack_require__(60130);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Other plugins.
// Helpers.
// Libraries.
/**
 * Call Establish APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} Establish API.
 */
function createAPI(container) {
  const {
    CallManager,
    context,
    logManager,
    API_LOG_TAG,
    emitEvent
  } = container;
  const log = logManager.getLogger('CALL');

  /**
   * Starts an outgoing call to a {@link call.SIP_URI SIP_URI} or a
   *    {@link call.TEL_URI TEL_URI}.
   *
   * The call will be tracked by a unique ID that is returned by the API. The
   *    application will use this ID to identify and control the call after it
   *    has been initiated.
   *
   * The {@link call.getById} API can be used to retrieve
   *    the current information about the call.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:start call:start} event
   *    locally when the operation completes. When the remote participant
   *    receives the call, a {@link call.event:call:receive call:receive}
   *    event will be emitted remotely for them.
   *
   * The SDK requires access to the machine's media devices (eg. microphone)
   *    in order to make a call. If it does not already have permissions to
   *    use the devices, the user may be prompted by the browser to give
   *    permissions.
   *
   * Detached media can be used when starting a call. Detached media is created
   *    locally outside of a call and must be managed by the application. It can
   *    be used when making a call by passing an array of detached track ids in
   *    the media object. You can start a call with a mixture of detached
   *    and requested media, however, you can only use one of each type (audio, video,
   *    screen). For example, you could include a detached track id for video, and set
   *    MediaConstraint.audio: true, but you can't set MediaConstraint.video: true
   *    if you have passed in a detached track id of kind video.
   *
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @method make
   * @param {call.SIP_URI|call.TEL_URI} destination The desired destination.
   * @param {Object} media The media options the call should be initialized with.
   * @param {boolean} [media.audio=false] Whether the call should have audio on start. Currently, audio-less calls are not supported.
   * @param {Object} [media.audioOptions] Options for configuring the call's audio.
   * @param {call.MediaConstraint} [media.audioOptions.deviceId] ID of the microphone to receive audio from.
   * @param {boolean} [media.video=false] Whether the call should have video on start.
   * @param {Object} [media.videoOptions] Options for configuring the call's video.
   * @param {call.MediaConstraint} [media.videoOptions.deviceId] ID of the camera to receive video from.
   * @param {call.MediaConstraint} [media.videoOptions.height] The height of the video.
   * @param {call.MediaConstraint} [media.videoOptions.width] The width of the video.
   * @param {call.MediaConstraint} [media.videoOptions.frameRate] The frame rate of the video.
   * @param {boolean} [media.screen=false] Whether the call should have screenshare on start. (Note: Screensharing is not supported on iOS Safari.)
   * @param {Object} [media.screenOptions] Options for configuring the call's screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.height] The height of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.width] The width of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.frameRate] The frame rate of the screenShare.
   * @param {Array} [media.medias] List of medias containing tracks to be attached to this call.
   * @param {Object} [options]
   * @param {call.BandwidthControls} [options.bandwidth] Options for configuring media's bandwidth.
   * @param {string} [options.displayName] Custom display name to be provided to the destination. Not supported in all environments and may use default display name.
   * @param {Array<call.CustomParameter>} [options.customParameters] Custom SIP header parameters for the SIP backend.
   * @param {call.DSCPControls} [options.dscpControls] Options for configuring DSCP markings on the media traffic
   * @throws {BasicError} Throws an error if mediaConstraints.medias is not an array.
   * @throws {BasicError} Throws an error if mediaConstraints.medias Objects are missing `media` and `type` properties.
   * @throws {BasicError} Throws an error if mediaConstraints contains duplicate media kinds.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not detached.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not local.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are already in use by a session.
   * @throws {BasicError} Throws an error if mediaConstraints.medias contains any type other than Object containing `media` and `type` properties.
   * @returns {string} The generated ID of the newly created call.
   * @example
   * // Listen for the event emitted after making a call.
   * client.on('call:start', function (params) {
   *   const { callId, error } = params
   *   if (error) {
   *     // Call failed to initialize.
   *   } else {
   *     // Call was initialized, and the recipient user will be notified.
   *   }
   * })
   * // Make an audio-only call.
   * const newCallId = client.call.make(destination, { audio: true })
   */

  /**
   * @private
   * @static
   * @memberof call
   * @requires link_call
   * @requires callMe
   * @method make
   * @param {Object} [options]
   * @param {Array<call.CustomBody>} [options.customBodies] Custom SIP bodies for the SIP backend.
   */
  function make(destination, media) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    log.debug(API_LOG_TAG + 'call.make: ', destination, media, options);

    // Validate mediaConstraints
    (0, _utils.validateMediaConstraints)(media);
    const callId = (0, _uuid.v4)();
    const participants = {
      to: destination,
      from: (0, _selectors2.getUserInfo)(context.getState()).username
    };
    const mediaConstraints = (0, _utils.formatMediaConstraints)(media);
    const config = (0, _selectors.getOptions)(context.getState());
    if (config.normalizeDestination) {
      // Normalize callee addresses
      participants.to = (0, _normalization.normalizeSipUri)(participants.to, (0, _selectors2.getDomain)(context.getState()));
      log.info(`Address normalized to: ${participants.to}`);
    }

    // Dispatch the "make call" action so the call is in state before the operation
    //    and/or the application goes to look for it there.
    context.dispatch(_actions.callActions.makeCall(callId, _objectSpread({
      participantAddress: participants.to,
      from: participants.from,
      mediaConstraints
    }, options)));

    /*
     * Timeout is needed to be backwards-compatible with saga-style API. The API
     *    needs to return the callId before the operation occurs and any events
     *    are emitted by the SDK.
     */
    setTimeout(async () => {
      /*
       * Events emitted pre-operation are:
       *    - "call start": To indicate the call is in state and is Initiating.
       */
      emitEvent(eventTypes.CALL_STARTED, {
        callId
      });
      try {
        // Validating detached media before attempting to start a call.
        // This verifies that the detached media being provided is, detached, local
        // and not already in use by a session.
        if (media.medias) {
          await (0, _utils.validateDetachedMedia)(media.medias);
        }
        await CallManager.make(callId, participants, mediaConstraints, options);

        // Tell the application that the call has finished "initiating".
        emitEvent(eventTypes.CALL_STATE_CHANGE, {
          callId,
          previous: {
            state: _constants.CALL_STATES.INITIATING,
            localHold: false,
            remoteHold: false
          }
        });
      } catch (err) {
        // Update call state.
        context.dispatch(_actions.callActions.makeCallFinish(callId, {
          state: _constants.CALL_STATES.ENDED,
          error: err
        }));

        // Inform the application with an error event.
        emitEvent(eventTypes.CALL_STATE_CHANGE, {
          callId,
          previous: {
            state: _constants.CALL_STATES.INITIATING,
            localHold: false,
            remoteHold: false
          },
          error: err
        });
      }
      // Use a minimal timeout value to help make sure the operation does happen
      //     "immediately" after the return.
    }, 0);
    return callId;
  }

  /**
   * Answers an incoming call.
   *
   * The specified call to answer must be in a ringing state with an incoming
   *    direction. The call will become connected as a result of the operation.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event locally when the operation completes. This indicates that the
   *    call has connected with the remote participant. The
   *    {@link call.getById} API can be used to retrieve the latest call state
   *    after the change. Further events will be emitted to indicate that the
   *    call has received media from the remote participant. See the
   *    {@link call.event:call:newTrack call:newTrack} event for more
   *    information about this.
   *
   * The SDK requires access to the system's media devices (eg. microphone)
   *    in order to answer a call. If it does not already have permissions to
   *    use the devices, the user may be prompted by the browser to give
   *    permissions.
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @method answer
   * @param {string} callId The ID of the call to answer.
   * @param {Object} media The media options the call should be initialized with.
   * @param {boolean} [media.audio=false] Whether the call should have audio on start. Currently, audio-less calls are not supported.
   * @param {Object} [media.audioOptions] Options for configuring the call's audio.
   * @param {call.MediaConstraint} [media.audioOptions.deviceId] ID of the microphone to receive audio from.
   * @param {boolean} [media.video=false] Whether the call should have video on start.
   * @param {Object} [media.videoOptions] Options for configuring the call's video.
   * @param {call.MediaConstraint} [media.videoOptions.deviceId] ID of the camera to receive video from.
   * @param {call.MediaConstraint} [media.videoOptions.height] The height of the video.
   * @param {call.MediaConstraint} [media.videoOptions.width] The width of the video.
   * @param {call.MediaConstraint} [media.videoOptions.frameRate] The frame rate of the video.
   * @param {boolean} [media.screen=false] Whether the call should have screenshare on start. (Note: Screensharing is not supported on iOS Safari.)
   * @param {Object} [media.screenOptions] Options for configuring the call's screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.height] The height of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.width] The width of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.frameRate] The frame rate of the screenShare.
   * @param {Array} [media.medias] List of medias containing tracks to be attached to this call.
   * @param {Object} [options]
   * @param {call.BandwidthControls} [options.bandwidth] Options for configuring media's bandwidth.
   * @param {Array<call.CustomParameter>} [options.customParameters] Custom SIP header parameters for the SIP backend.
   * @param {call.DSCPControls} [options.dscpControls] Options for configuring DSCP markings on the media traffic
   */

  /**
   * @private
   * @static
   * @memberof call
   * @requires link_call
   * @requires callMe
   * @method answer
   * @param {Object} [options]
   * @param {Array<call.CustomBody>} [options.customBodies] Custom SIP bodies for the SIP backend.
   */

  async function answer(callId, media) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    log.debug(API_LOG_TAG + 'call.answer: ', callId, media, options);

    // Validate mediaConstraints
    (0, _utils.validateMediaConstraints)(media);
    const mediaConstraints = (0, _utils.formatMediaConstraints)(media);

    // Dispatch the "answer call" action so the call is updated in state
    // before the operation and/or the application goes to look for it there.
    context.dispatch(_actions.callActions.answerCall(callId, _objectSpread({
      mediaConstraints
    }, options)));
    try {
      // Validating detached media before attempting to start a call.
      // This verifies that the detached media being provided is, detached, local
      // and not already in use by a session.
      if (media.medias) {
        await (0, _utils.validateDetachedMedia)(media.medias);
      }
      const call = (0, _selectors.getCallById)(context.getState(), callId);
      if (call && call.isSlowStart) {
        await CallManager.answerSlow(callId, mediaConstraints, options);
      } else {
        await CallManager.answer(callId, mediaConstraints, options);
      }
    } catch (error) {
      context.dispatch(_actions.callActions.answerCallFinish(callId, {
        error
      }));
      const call = (0, _selectors.getCallById)(context.getState(), callId);
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: call ? call.state : undefined,
          localHold: call ? call.localHold : undefined,
          remoteHold: call ? call.remoteHold : undefined
        },
        error
      });
    }
  }

  /**
   * Rejects an incoming call.
   *
   * The specified call to reject must be in a ringing or initiated state with an incoming
   *    direction. The call will be ended as a result of the operation.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event locally when the operation completes. The remote participant
   *    will be notified, through their own {@link call.event:call:stateChange call:stateChange}
   *    event, that the call was rejected.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @method reject
   * @param {string} callId The ID of the call to reject.
   */
  async function reject(callId) {
    log.debug(API_LOG_TAG + 'call.reject: ', callId);

    // Dispatch the "reject call" action so the operation is updated in state before
    //   emitting the call operation event
    context.dispatch(_actions.callActions.rejectCall(callId));
    let error;
    try {
      await CallManager.reject(callId);
    } catch (err) {
      error = err;
    }

    // Update call state.
    context.dispatch(_actions.callActions.rejectCallFinish(callId, {
      error
    }));
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    // Inform application of operation complete.
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId,
      previous: {
        state: call ? call.state : undefined,
        localHold: call ? call.localHold : undefined,
        remoteHold: call ? call.remoteHold : undefined
      },
      error
    });
  }

  /**
   * Ignores an incoming call.
   *
   * The specified call to ignore must be in a ringing state with an incoming
   *    direction. The call will be ended as a result of the operation.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event locally when the operation completes. The remote participant
   *    will not be notified that the call was ignored.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @method ignore
   * @param {string} callId The ID of the call to ignore.
   */
  async function ignore(callId) {
    log.debug(API_LOG_TAG + 'call.ignore: ', callId);

    // Dispatch the "ignore call" action so the call is updated in state
    // before the operation and/or the application goes to look for it there.
    context.dispatch(_actions.callActions.ignoreCall(callId));
    let error;
    try {
      await CallManager.ignore(callId);
    } catch (err) {
      error = err;
    }
    // Update call state.
    context.dispatch(_actions.callActions.ignoreCallFinish(callId, {
      error
    }));
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    // Inform application of operation complete.
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId,
      previous: {
        state: call ? call.state : undefined,
        localHold: call ? call.localHold : undefined,
        remoteHold: call ? call.remoteHold : undefined
      },
      error
    });
  }

  /**
   * Forwards an incoming call to another user.
   *
   * The specified destination will receive the Call instead of the current
   *    user.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event after the operation completes.
   *
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @method forward
   * @param {string} callId ID of the call being acted on.
   * @param {call.SIP_URI|call.TEL_URI} destination The destination to forward the call to.
   */
  async function forward(callId, destination) {
    log.debug(API_LOG_TAG + 'call.forward: ', destination);
    const config = (0, _selectors.getOptions)(context.getState());
    if (config.normalizeDestination) {
      // Normalize callee addresses
      destination = (0, _normalization.normalizeSipUri)(destination, (0, _selectors2.getDomain)(context.getState()));
      log.info('Address normalized to: ', destination);
    }

    // Dispatch the action so the operation is updated in state before
    //   emitting the call operation event
    context.dispatch(_actions.callActions.forwardCall(callId, {
      destination
    }));
    let error;
    try {
      await CallManager.forward(callId, destination);
    } catch (err) {
      error = err;
    }
    context.dispatch(_actions.callActions.forwardCallFinish(callId, {
      error
    }));
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId,
      previous: {
        state: call ? call.state : undefined,
        localHold: call ? call.localHold : undefined,
        remoteHold: call ? call.remoteHold : undefined
      },
      error
    });
  }

  /**
   * Ends an ongoing call.
   *
   * The SDK will stop any/all local media associated with the call. Events
   *    will be emitted to indicate which media tracks were stopped. See the
   *    {@link call.event:call:trackEnded call:trackEnded} event for more
   *    information.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event locally when the operation completes. The remote participant
   *    will be notified, through their own
   *    {@link call.event:call:stateChange call:stateChange} event, that the
   *    call was ended.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @method end
   * @param {string} callId The ID of the call to end.
   */
  async function end(callId) {
    log.debug(API_LOG_TAG + 'call.end: ', callId);

    // trigger an action for backwards compatibility
    context.dispatch(_actions.callActions.endCall(callId));
    let error;
    try {
      await CallManager.end(callId);
    } catch (err) {
      error = err;
      log.info(`call.end error: ${error.message}`);
    } finally {
      const call = (0, _selectors.getCallById)(context.getState(), callId);
      context.dispatch(_actions.callActions.endCallFinish(callId, {
        isLocal: true,
        error
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: call ? call.state : undefined,
          localHold: call ? call.localHold : undefined,
          remoteHold: call ? call.remoteHold : undefined
        },
        error
      });
    }
  }
  return {
    make,
    answer,
    reject,
    ignore,
    forward,
    end
  };
}

/***/ }),

/***/ 25535:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _establish = _interopRequireDefault(__webpack_require__(38330));
var _midcall = _interopRequireDefault(__webpack_require__(1594));
var _complex = _interopRequireDefault(__webpack_require__(10094));
var _misc = _interopRequireDefault(__webpack_require__(39992));
var _constants = _interopRequireDefault(__webpack_require__(56465));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * The 'call' namespace (within the 'api' type) is used to make audio and video calls to and from
 * SIP users and PSTN phones.
 *
 * Call functions are all part of the 'call' namespace.
 *
 * @public
 * @namespace call
 */

/**
 * Information about a Call.
 *
 * Can be retrieved using the {@link call.getAll} or {@link call.getById} APIs.
 *
 * @public
 * @static
 * @module CallObject
 * @typedef {Object} CallObject
 * @memberof call
 * @requires link_call
 * @requires callMe
 * @property {string} id The ID of the call.
 * @property {user.UserID} from A unique identifier (uri) of the person who made the call.
 * @property {user.UserID} to A unique identifier (uri) of the person who receives the call.
 * @property {string} direction The direction in which the call was created. Can be 'outgoing' or 'incoming'.
 * @property {string} state The current state of the call. See {@link call.states} for possible states.
 * @property {string} mediaConnectionState The current status of the call's media connection. See {@link call.mediaConnectionStates} for possible states.
 * @property {boolean} localHold Indicates whether this call is currently being held locally.
 * @property {boolean} remoteHold Indicates whether this call is currently being held remotely.
 * @property {Array<string>} localTracks A list of Track IDs that the call is sending to the remote participant.
 * @property {Array<string>} remoteTracks A list of Track IDs that the call is receiving from the remote participant.
 * @property {call.MediaOffered} [mediaOffered] Information about what media was offered by the person who made the call.
 * @property {Object} remoteParticipant Information about the other call participant.
 * @property {string} [remoteParticipant.displayNumber] The User ID of the remote participant in the form "username@domain".
 * @property {string} [remoteParticipant.displayName] The display name of the remote participant.
 * @property {call.BandwidthControls} bandwidth The bandwidth limitations set for the call.
 * @property {Array<call.CustomParameter>} customParameters The locally set Custom Parameters for the call.
 * @property {number} startTime The start time of the call in milliseconds since the epoch.
 * @property {number} [endTime] The end time of the call in milliseconds since the epoch.
 * @property {Array<Object>} currentOperations The list of operations curently on-going for the call.
 */

/**
 * The 'media' namespace provides an interface for interacting with Media that the
 *    SDK has access to. Media is used in conjunction with the {@link call Calls}
 *    feature to manipulate and render the Tracks sent and received from a Call.
 *
 * Media and Track objects are not created directly, but are created as part of
 *    Call operations. Media and Tracks will either be marked as "local" or
 *    "remote" depending on whether their source is the local user's machine
 *    or a remote user's machine.
 *
 * The Media feature also keeps track of media devices that the user's machine
 *    can access. Any media device (eg. USB headset) connected to the machine
 *    can be used as a source for media. Available devices can be found using
 *    the {@link media.getDevices} API.
 *
 * @public
 * @namespace media
 */

/**
 * The MediaConstraint type defines the format for configuring media options.
 * Either the `exact` or `ideal` property should be provided. If both are present, the
 *    `exact` value will be used.
 *
 * When the `exact` value is provided, it will be the only value considered for the option.
 *    If it cannot be used, the constraint will be considered an error.
 *
 * When the `ideal` value is provided, it will be considered as the optimal value for the option.
 *    If it cannot be used, the closest acceptable value will be used instead.
 *
 * A string value can be provided directly instead of using the MediaConstraint format.
 *    Using a string directly is not recommended, since behaviour may differ depending
 *    on browser and media property. For most properties, a direct string value will be
 *    handled as `ideal` behaviour, but some properties may follow the `exact` behaviour
 *    (eg. `deviceId`).
 *
 * @public
 * @static
 * @typedef {Object} MediaConstraint
 * @memberof call
 * @property {string} [exact] The required value for the constraint. Other values will not be accepted.
 * @property {string} [ideal] The ideal value for the constraint. Other values will be considered if necessary.
 * @example
 * // Specify video resolution when making a call.
 * client.call.make(destination, {
 *    audio: true,
 *    video: true,
 *    videoOptions: {
 *      // Set height and width constraints to ideally be 1280x720.
 *      height: { ideal: 720 },
 *      width: { ideal: 1280 }
 *    }
 * })
 */

/**
 * The MediaOffered type defines what media capabilities are offered by the person making a call.
 * This is an optional property and therefore may be null if it is not known or if it's associated with caller's side of the call.
 *
 * @public
 * @static
 * @typedef {Object} MediaOffered
 * @memberof call
 * @property {boolean} audio Specifies if any audio capability has been offered by the caller. If set to true, then the caller is capable of supporting at least one audio stream in the current call.
 * @property {boolean} video Specifies if any video capability has been offered by the caller. If set to true, then the caller is capable of supporting at least one video stream in the current call.
 */

/**
 * The BandwidthControls type defines the format for configuring media and/or track bandwidth options.
 * BandwidthControls only affect received remote tracks of the specified type.
 *
 * @public
 * @static
 * @typedef {Object} BandwidthControls
 * @memberof call
 * @property {number} [call] The desired combined bandwidth bitrate in kilobits per second for all media in the call.
 * @property {number} [audio] The desired bandwidth bitrate in kilobits per second for received remote audio.
 * @property {number} [video] The desired bandwidth bitrate in kilobits per second for received remote video.
 * @example
 * // Specify received remote video bandwidth limits when making a call.
 * client.call.make(destination, mediaConstraints,
 *  {
 *    bandwidth: {
 *      video: 5
 *    }
 *  }
 * )
 */

/**
 * The DSCPControls type defines the format for configuring network priorities (DSCP marking) for the media traffic.
 *
 * If DSCPControls are not configured for a call the network priority of the traffic for all media kinds will be the default (i.e., "low").
 *
 * @public
 * @static
 * @typedef {Object} DSCPControls
 * @memberof call
 * @property {RTCPriorityType} [audioNetworkPriority='low'] The desired network priority for audio traffic (see {@link https://www.w3.org/TR/webrtc-priority/#rtc-priority-type RTCPriorityType Enum} for the list of possible values).
 * @property {RTCPriorityType} [videoNetworkPriority='low'] The desired network priority for video traffic (see {@link https://www.w3.org/TR/webrtc-priority/#rtc-priority-type RTCPriorityType Enum} for the list of possible values).
 * @property {RTCPriorityType} [screenNetworkPriority='low'] The desired network priority for screen share traffic (see {@link https://www.w3.org/TR/webrtc-priority/#rtc-priority-type RTCPriorityType Enum} for the list of possible values).
 */

/**
 * Configuration options for an RTCPeerConnection.
 * It represents an RTCPeerConfiguration dictionary, whose parameters are documented {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#parameters here}.
 * @public
 * @static
 * @typedef {Object} RTCPeerConnectionConfig
 * @memberof call
 * @param {Array<RTCIceServer>} [iceServers] The list of ICE servers to be used for calls.
 *   The full set of properties defined for an RTCIceServer, are mentioned
 *   {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer#properties here}.
 * @param {string} [sdpSemantics='unified-plan'] The sdpSemantics to use (`'unified-plan'` or `'plan-b'`).
 *   As 'plan-b' has become a deprecated option, it will therefore be removed in the future.
 * @param {number} [iceCandidatePoolSize] An unsigned 16-bit integer value which specifies
 *   the size of the prefetched ICE candidate pool. The default value is 0 (meaning no candidate prefetching will occur).
 * @param {string} [iceTransportPolicy] The current ICE transport policy; if the policy isn't specified,
 *   'all' is assumed by default. Possible values are: 'all', 'public', 'relay'.
 * @param {string} [bundlePolicy] For further description on this and other properties,
 *   see {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#parameters RTCPeerConnection's configuration parameters}.
 */

/**
 * @public
 * @static
 * @typedef {Object} IceServer
 * @memberof call
 * @property {Array<string>|string} urls Either an array of URLs for reaching out several ICE servers or a single URL for reaching one ICE server. See {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/urls RTCIceServers.urls documentation} to learn more about the actual url format.
 * Starting with Chromium 110, TURN(S) urls must only contain a transport
 * parameter in the query section and STUN urls must not specify any query section.
 * @property {string} [credential] The credential needed by the ICE server.
 * @property {string} [username] The credential needed by the ICE server.
 */

/**
 * This object is provided to the {@link call.IceCollectionCheckFunction IceCollectionCheckFunction}, and contains the
 *  necessary information about the call (i.e., call ID, current call operation), and information about the ongoing ICE collection,
 *  such as the list of all ICE candidates collected so far and the ICE gathering state.
 *
 * @public
 * @static
 * @typedef {Object} IceCollectionInfo
 * @memberof call
 * @property {string} callId The ID of the call.
 * @property {string} callOperation The current operation of the call.
 * @property {string} reason The reason the check function was called. Three possible values:
 *  'NewCandidate' - A new ICE candidate was collected. Note: there may be multiple new ICE candidates collected.
 *  'IceGatheringStateChanged' - The ICE gathering state changed.
 *  'Scheduled' - A scheduled call (for first invocation, and subsequent invocations based on `wait` value returned by {@link call.IceCollectionCheckFunction IceCollectionCheckFunction}.)
 * @property {Array<RTCIceCandidate>} iceCandidates An array of all ICE candidates collected so far.
 * @property {number} iceCollectionDuration The time elapsed since the start of the ICE collection process.
 * @property {string} iceGatheringState The current ICE gathering state.
 *    See {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState RTCPeerConnection.iceGatheringState}.
 * @property {Object} rtcPeerConnectionConfig The current configration for the RTCPeerConnection.
 * @property {string} rtcLocalSessionDescription The current local session description set on the peer.
 */

/**
 * The form of the ICE collection check function, the arguments that it receives, and the outputs expected.
 *
 * This function is provided the necessary details of the current WebRTC session and ICE collection
 * ({@link call.IceCollectionInfo IceCollectionInfo}), which it can use to dictate how to proceed with a call.
 *  The function can be invoked for three different reasons:
 *  a new ICE candidate was collected, the ICE gathering state changed, or a scheduled call based on the `wait` time set after
 *  an initial invocation of the function.
 *
 * The function must then return an appropriate result object in the format of {@link call.IceCollectionCheckResult IceCollectionCheckResult}
 *  which will dictate how the call will proceed. An incorrect return object, or result `type`, will cause the call to end with an error.
 *
 * [Default]
 * The default IceCollectionCheckFunction uses the following algorithm to determine if the call can proceed to negotiation:
 * 1. If the `iceGatheringState` is "complete" at any stage, then:
 *    - Proceed with the negotiation if any ICE candidates are collected.
 *    - Or, end the call if there are no ICE candidates collected.
 * 2. Otherwise, if before the ideal ICE collection timeout:
 *    - If every media has a relay ICE candidate for every configured TURN server, proceed with negotiation.
 *    - Else, wait until the ideal timeout, or when invoked for another reason.
 * 3. Otherwise, if before the max ICE collection timeout, but after the ideal ICE collection timeout:
 *    - If every media has atleast one relay ICE candidate, proceed with negotiation.
 *    - Else, wait until max timeout, or when invoked for another reason.
 * 4. Otherwise, if we are at, or past, the max ICE collection timeout:
 *    - If there are any ICE candidates collected, proceed with negotiation.
 *    - Else, end the call with an error.
 *
 * The ideal and max timeouts can be configured with the `idealIceCollectionTimeout` and `maxIceCollectionTimeout` properties of
 *  the call config.
 * @public
 * @static
 * @typedef {Function} IceCollectionCheckFunction
 * @memberof call
 * @param {call.IceCollectionInfo} iceCollectionInfo Information about the current status of the ICE candidate collection.
 * @param {Object} iceTimeouts Configurations provided to the SDK for ICE collection timeout boundaries.
 * @param {number} iceTimeouts.iceCollectionIdealTimeout The amount of time to wait for ideal candidates, in
 *      milliseconds.  See {@link config#config.call config.call} for more information.
 * @param {number} iceTimeouts.iceCollectionMaxTimeout The maximum amount of time to wait for ICE collection,
 *      in milliseconds. See {@link config#config.call config.call} for more information.
 * @returns {call.IceCollectionCheckResult} Information on how to proceed with the call and/or ICE collection.
 * @example
 * function isRelayCandidate (candidate) {
 * // NOTE: This would need to be different for Firefox since the `.type` property doesn't exist
 * // and we would need to parse it ourselves in the `.candidate` property.
 *   return candidate.type === 'relay'
 * }
 *
 * function myIceCollectionCheck ({ iceGatheringState, iceCandidates }, iceTimeouts) {
 *   if (iceGatheringState === 'complete') {
 *     if (iceCandidates.some(isRelayCandidate)) {
 *       return { type: 'StartCall' }
 *     } else {
 *       return { type: 'Error', error: new Error('Failed to start call because there is no relay candidates.') }
 *     }
 *   } else {
 *     return { type: 'Wait' }
 *   }
 * }
 */

/**
 * @public
 * @static
 * @typedef {Object} IceCollectionCheckResult
 * @memberof call
 * @property {string} type Indicates how the system should proceed with the call operation / ICE collection. The possible values are:
 *    'StartCall' - instruct the system to start the call with the currently gathered ICE candidates and other information.
 *    'Error' - instruct the system to fail the call with an error. The error to communicate to the user should be specified in the `error` property.
 *    'Wait' - instruct the system to wait for the specified amount of time before triggering a new ICE collection check. The amount
 *        of wait time should be specified in the `wait` property.
 * @property {string} error An error to be sent the user when the `type` of the result is `IceCollectionCheckResultType.Error`
 * @property {number} wait The amount of time (in milliseconds) to wait before triggering a new ICE collection check. This is only
 *    valid if the `type` of result is `IceCollectionCheckResultType.Wait`. If a value is not provided, the ICE collection check function
 *    will only be triggered for new candidates or when the ICE gathering state changes.
 */

/**
 * @public
 * @static
 * @typedef {Object} SdpHandlerInfo
 * @memberof call
 * @property {string} callId The id corresponding to the call for which the handler is being run.
 * @property {RTCSdpType} type The session description's type.
 * @property {string} step The step that will occur after the SDP Handlers are run.
 *    Will be either 'set' (the SDP will be set locally) or 'send' (the SDP will
 *    be sent to the remote endpoint).
 * @property {string} endpoint Which end of the connection created the SDP.
 */

/**
 * The form of an SDP handler function and the expected arguments that it receives.
 * @public
 * @static
 * @typedef {Function} SdpHandlerFunction
 * @memberof call
 * @param {Object} newSdp The SDP so far (could have been modified by previous handlers).
 * @param {call.SdpHandlerInfo} info Additional information that might be useful when making SDP modifications.
 * @param {Object} originalSdp The SDP in its initial state.
 * @returns {Object} The resulting modified SDP based on the changes made by this function.
 */

/**
 * The state representation of a Media object.
 * Media is a collection of Track objects.
 *
 * @public
 * @static
 * @typedef {Object} MediaObject
 * @memberof call
 * @property {string} id The ID of the Media object.
 * @property {boolean} local Indicator on whether this media is local or remote.
 * @property {boolean} detached Indicator on whether this media contains detached tracks.
 * @property {Array<call.TrackObject>} tracks A list of Track objects that are contained in this Media object.
 */

/**
 * A Track is a stream of audio or video media from a single source.
 * Tracks can be retrieved using the Media module's `getTrackById` API and manipulated with other functions of the Media module.
 *
 * @public
 * @static
 * @typedef {Object} TrackObject
 * @memberof call
 * @property {Array<string>} containers The list of CSS selectors that were used to render this Track.
 * @property {boolean} disabled Indicator of whether this Track is disabled or not. If disabled, it cannot be re-enabled.
 * @property {boolean} isLocal Indicator of whether this Track is a locally created one or is a remote one.
 * @property {string} id The ID of the Track.
 * @property {string} kind The kind of Track this is (audio, video).
 * @property {string} label The label of the device this Track uses.
 * @property {boolean} muted Indicator on whether this Track is muted or not.
 * @property {boolean} sourceMuted Indicator on whether this Track is receiving media from its source or not.
 *    When true, the Track can be considered removed. This indicator is affected by actions outside the
 *    control of the SDK, such as the remote endpoint of a Call stopping to send media for a remote Track,
 *    or the browser temporarily disabling the SDK's access to a local Track's source.
 * @property {string} state The state of this Track. Can be 'live' or 'ended'.
 * @property {string} streamId The ID of the Media Stream that includes this Track.
 */

/**
 * A collection of media devices and their information.
 *
 * @public
 * @static
 * @typedef {Object} DevicesObject
 * @memberof call
 * @property {Array<call.DeviceInfo>} camera A list of camera device information.
 * @property {Array<call.DeviceInfo>} microphone A list of microphone device information.
 * @property {Array<call.DeviceInfo>} speaker A list of speaker device information.
 */

/**
 * Contains information about a device.
 *
 * @public
 * @static
 * @typedef {Object} DeviceInfo
 * @memberof call
 * @property {string} deviceId The ID of the device.
 * @property {string} groupId The group ID of the device. Devices that share a `groupId` belong to the same physical device.
 * @property {string} kind The type of the device (audioinput, audiooutput, videoinput).
 * @property {string} label The name of the device.
 */

/**
 * Custom SIP headers can be used to convey additional information to a SIP endpoint.
 *
 * These parameters must be configured on the server prior to making a request, otherwise the request will fail when trying to include the parameters.
 *
 * These parameters can be specified with the {@link call.make} and {@link call.answer} APIs.
 * They can also be set after a Call is established using the {@link call.setCustomParameters} API, and sent using the {@link call.sendCustomParameters} API.
 *
 * Custom headers may be received anytime throughout the duration a call. A remote endpoint may send custom headers when starting a call,
 *  answering a call, or during call updates such as hold/unhold and addition/removal of media in the call.
 *  When these custom headers are received, the SDK will emit a {@link call.event:call:customParameters call:customParameters} event
 *  which will contain the custom parameters that were received.
 *
 * A Call's custom parameters are stored on the Call's {@link call.CallObject CallObject},
 *  which can be retrieved using the {@link call.getById} or
 *  {@link call.getAll} APIs. These are the parameters that will be sent to the remote
 *  endpoint of the Call. Parameters received from a Call are not stored as
 *  part of the CallObject and are only provided via the {@link call.event:call:customParameters call:customParameters} event.
 *
 * @public
 * @static
 * @module CustomParameter
 * @typedef {Object} CustomParameter
 * @memberof call
 * @requires link_call
 * @requires callMe
 * @property {string} name - The name of the custom parameter
 * @property {string} value - The value of the custom parameter
 * @example
 * // Specify custom parameters when making a call.
 * client.call.make(destination, mediaConstraints,
 *  {
 *    customParameters: [
 *      {
 *        name: 'X-GPS',
 *        value: '42.686032,23.344565'
 *      }
 *    ]
 *  }
 * )
 */

/**
 * Custom SIP bodies can be used to convey additional information to a SIP endpoint.
 *
 * The appropriate configuration for sending custom bodies must be enabled on the server prior to making call requests,
 *  otherwise the requests will fail when trying to include the bodies.
 *
 * The `contentType` of the custom body should be compliant with RFC 2045, RFC 3261 (and their updated versions),
 *  and the `contentDisposition` should be compliant with RFC 2183, RFC 3204, and RFC 3261 (and their updated versions).
 *
 * These custom bodies can be specified with the {@link call.make} and {@link call.answer} APIs.
 *  They can also be set after a Call is established using the {@link call.setCustomParameters} API.
 *
 * A Call's custom bodies are stored on the Call's {@link call.CallObject CallObject},
 *  which can be retrieved using the {@link call.getById} or
 *  {@link call.getAll} APIs. These custom bodies will be sent to the remote endpoint of the Call for all subsequent
 *  basic midcall operations, such as hold/unhold and add/remove media.
 *
 * @private
 * @static
 * @module CustomBody
 * @typedef {Object} CustomBody
 * @memberof call
 * @requires link_call
 * @requires callMe
 * @property {string} contentType - The media type of the message body.
 * @property {string} contentDisposition - How the message body is to be interpreted.
 * @property {string} body - The message body.
 * @example
 * // Specify custom bodies when making a call.
 * client.call.make(destination, mediaConstraints,
 *  {
 *    customBodies: [
 *      {
 *        contentType: 'text/plain;charset=UTF-8',
 *        contentDisposition: 'render;HANDLING=OPTIONAL',
 *        body: 'Geo location information is sent.'
 *      }
 *    ]
 *  }
 * )
 */

/**
 * Top-level Call API factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @return {Object} API.
 */
function createAPI(container) {
  const api = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, (0, _establish.default)(container)), (0, _midcall.default)(container)), (0, _complex.default)(container)), (0, _misc.default)(container)), (0, _constants.default)(container));
  return {
    call: api
  };
}

/***/ }),

/***/ 1594:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _selectors = __webpack_require__(11430);
var _utils = __webpack_require__(27842);
var _call = __webpack_require__(12442);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Helpers.
// Libraries.

/**
 * Call Midcall APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} Midcall API.
 */
function createAPI(container) {
  const {
    CallManager,
    context,
    logManager,
    API_LOG_TAG,
    emitEvent
  } = container;
  const log = logManager.getLogger('CALL');

  /**
   * Puts a call on hold.
   *
   * The specified call to hold must not already be locally held. Any/all
   *    media received from the remote participant will stop being received,
   *    and any/all media being sent to the remote participant will stop
   *    being sent.
   *
   * Some call operations cannot be performed while the call is on hold. The
   *    call can be taken off hold with the {@link call.unhold} API.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event locally when the operation completes. The remote participant
   *    will be notified of the operation through a
   *    {@link call.event:call:stateChange call:stateChange} event as well.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @method hold
   * @param {string} callId The ID of the call to hold.
   */
  async function hold(callId) {
    log.debug(API_LOG_TAG + 'call.hold: ', callId);
    context.dispatch(_actions.callActions.holdCall(callId));

    // Call state before the operation (but after holdCall action).
    const call = (0, _selectors.getCallById)(context.getState(), callId);

    // Start the operation
    let error;
    try {
      await CallManager.hold(callId);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.holdCallFinish(callId, {
        local: true,
        error
      }));

      // call:stateChange error event.
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: call ? call.state : undefined,
          localHold: call ? call.localHold : undefined,
          remoteHold: call ? call.remoteHold : undefined
        },
        error
      });
    }
  }

  /**
   * Takes a call off hold.
   *
   * The specified call to unhold must be locally held. If the call is not
   *    also remotely held, call media will be reconnected as it was before
   *    the call was held.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event locally when the operation completes. The remote participant
   *    will be notified of the operation through a
   *    {@link call.event:call:stateChange call:stateChange} event as well.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @method unhold
   * @param {string} callId The ID of the call to unhold.
   */
  async function unhold(callId) {
    log.debug(API_LOG_TAG + 'call.unhold: ', callId);
    context.dispatch(_actions.callActions.unholdCall(callId));

    // Call state before the operation (but after unholdCall action).
    const call = (0, _selectors.getCallById)(context.getState(), callId);

    // Start the operation
    let error;
    try {
      await CallManager.unhold(callId);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.unholdCallFinish(callId, {
        local: true,
        error
      }));
      emitEvent(eventTypes.CALL_STATE_CHANGE, {
        callId,
        previous: {
          state: call ? call.state : undefined,
          localHold: call ? call.localHold : undefined,
          remoteHold: call ? call.remoteHold : undefined
        },
        error
      });
    }
  }

  /**
   * Add new media tracks to an ongoing call.
   * Will get new media tracks from the specific sources to add to the call.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:newTrack call:newTrack} event
   *    both for the local and remote users to indicate a track has been
   *    added to the Call.
   *
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string}  callId The ID of the call to add media to.
   * @param {Object}  [media={}] The media options to add to the call.
   * @param {boolean} [media.audio=false] Whether to add audio to the call.
   * @param {boolean} [media.video=false] Whether to add video to the call.
   * @param {boolean} [media.screen=false] Whether to add the screenshare to the call. (Note: Screensharing is not supported on iOS Safari.)
   * @param {Array}   [media.medias] List of medias containing tracks to be attached to this call.
   * @param {Object}  [media.audioOptions] Options for configuring the call's audio.
   * @param {Object}  [media.videoOptions] Options for configuring the call's video.
   * @param {Object}  [media.screenOptions] Options for configuring the call's screenShare.
   * @param {call.MediaConstraint} [media.audioOptions.deviceId] ID of the microphone to receive audio from.
   * @param {call.MediaConstraint} [media.videoOptions.deviceId] ID of the camera to receive video from.
   * @param {call.MediaConstraint} [media.videoOptions.height] The height of the video.
   * @param {call.MediaConstraint} [media.videoOptions.width] The width of the video.
   * @param {call.MediaConstraint} [media.videoOptions.frameRate] The frame rate of the video.
   * @param {call.MediaConstraint} [media.screenOptions.height] The height of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.width] The width of the screenShare.
   * @param {call.MediaConstraint} [media.screenOptions.frameRate] The frame rate of the screenShare.
   * @param {Object} [options]
   * @param {call.BandwidthControls} [options.bandwidth] Options for configuring media's bandwidth.
   * @param {call.DSCPControls} [options.dscpControls] Options for configuring DSCP markings on the media traffic
   * @throws {BasicError} Throws an error if mediaConstraints.medias is not an array.
   * @throws {BasicError} Throws an error if mediaConstraints.medias Objects are missing `media` and `type` properties.
   * @throws {BasicError} Throws an error if mediaConstraints contains duplicate media kinds.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not detached.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not local.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are already in use by a session.
   * @throws {BasicError} Throws an error if mediaConstraints.medias contains any type other than Object containing `media` and `type` properties.
   */
  async function addMedia(callId) {
    let media = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    log.debug(API_LOG_TAG + 'call.addMedia: ', callId, media, options);

    // Validate mediaConstraints
    (0, _utils.validateMediaConstraints)(media);

    // Validating detached media before attempting to start a call.
    // This verifies that the detached media being provided is, detached, local
    // and not already in use by a session.
    if (media.medias) {
      await (0, _utils.validateDetachedMedia)(media.medias);
    }
    const mediaConstraints = (0, _utils.formatMediaConstraints)(media);
    context.dispatch(_actions.callActions.addMedia(callId, _objectSpread({
      mediaConstraints
    }, options)));

    // Start the operation
    let error;
    try {
      await CallManager.addMedia(callId, mediaConstraints, options);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.addMediaFinish(callId, {
        local: true,
        error
      }));

      // call:newMedia error event.
      emitEvent(eventTypes.CALL_ADDED_MEDIA, {
        callId,
        local: true,
        error
      });
    }
  }

  /**
   * Remove tracks from an ongoing call.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:trackEnded call:trackEnded}
   *    event for both the local and remote users to indicate that a track
   *    has been removed.
   *
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string} callId The ID of the call to remove media from.
   * @param {Array} tracks A list of track IDs to remove.
   * @param {Object} [options]
   * @param {call.BandwidthControls} [options.bandwidth] Options for configuring media's bandwidth.
   */
  async function removeMedia(callId, tracks) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    log.debug(API_LOG_TAG + 'call.removeMedia: ', callId, tracks);
    context.dispatch(_actions.callActions.removeMedia(callId, _objectSpread({
      tracks
    }, options)));

    // Start the operation
    let error;
    try {
      await CallManager.removeMedia(callId, tracks, options);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.removeMediaFinish(callId, {
        local: true,
        error
      }));

      // call:removedMedia error event
      emitEvent(eventTypes.CALL_REMOVED_MEDIA, {
        callId,
        local: true,
        error
      });
    }
  }

  /**
   * Adds local video to an ongoing Call, to start sending to the remote
   *    participant.
   *
   * Can only be used in a basic media scenario, where the Call does not
   *    already have video. For more advanced scenarios, the
   *    {@link call.addMedia} API can be used.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:tracksAdded call:tracksAdded}
   *    event both for the local and remote users to indicate a track has been
   *    added to the Call.
   *
   * @public
   * @static
   * @method startVideo
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string}                 callId              ID of the call being acted on.
   * @param {Object}                 [videoOptions]           Options for configuring the call's video.
   * @param {call.MediaConstraint}   [videoOptions.deviceId]  ID of the camera to receive video from.
   * @param {call.MediaConstraint}   [videoOptions.height]    The height of the video.
   * @param {call.MediaConstraint}   [videoOptions.width]     The width of the video.
   * @param {call.MediaConstraint}   [videoOptions.frameRate] The frame rate of the video.
   * @param {Object}                 [options]
   * @param {call.BandwidthControls} [options.bandwidth] Options for configuring media's bandwidth.
   * @param {call.DSCPControls}      [options.dscpControls] Options for configuring DSCP markings on the media traffic.
   */
  async function startVideo(callId) {
    let videoOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    log.debug(API_LOG_TAG + 'call.startVideo: ', callId, options);
    const mediaConstraints = {
      audio: false,
      video: !(0, _isEmpty2.default)(videoOptions) ? videoOptions : true,
      screen: false
    };
    const action = _actions.callActions.addBasicMedia(callId, _objectSpread({
      mediaConstraints,
      kind: 'video'
    }, options));
    context.dispatch(action);

    // Start the operation
    let error;
    try {
      await CallManager.addBasicMedia(callId, mediaConstraints, options);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.addMediaFinish(callId, {
        local: true,
        error
      }));

      // call:newMedia error event.
      emitEvent(eventTypes.CALL_ADDED_MEDIA, {
        callId,
        local: true,
        error
      });
    }
  }

  /**
   * Removes local video from an ongoing Call, stopping it from being sent
   *    to the remote participant.
   *
   * Can only be used in a basic media scenario, where the Call has only one
   *    video track. For more advanced scenarios, the
   *    {@link call.removeMedia} API can be used.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a {@link call.event:call:tracksRemoved call:tracksRemoved}
   *    event for both the local and remote users to indicate that a track
   *    has been removed.
   *
   * @public
   * @static
   * @method stopVideo
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string} callId ID of the call being acted on.
   */
  async function stopVideo(callId) {
    log.debug(API_LOG_TAG + 'call.stopVideo: ', callId);
    context.dispatch(_actions.callActions.removeBasicMedia(callId, {
      kind: 'video'
    }));
    const tracks = (0, _call.getLocalTracks)(context, callId, 'video');
    const trackIds = tracks.map(trackObj => trackObj.trackId);

    // Start the operation
    let error;
    try {
      await CallManager.removeBasicMedia(callId, trackIds);
    } catch (err) {
      error = err;
      context.dispatch(_actions.callActions.removeMediaFinish(callId, {
        local: true,
        error
      }));

      // call:removedMedia error event
      emitEvent(eventTypes.CALL_REMOVED_MEDIA, {
        callId,
        local: true,
        error
      });
    }
  }

  /**
   * Adds local screenshare to an ongoing Call, to start sending to the remote
   *    participant.
   *
   * The latest SDK release (v4.X+) has not yet implemented this API in the
   *    same way that it was available in previous releases (v3.X). In place
   *    of this API, the SDK has a more general API that can be used for this
   *    same behaviour.
   *
   * The {@link call.addMedia} API can be used to perform the same behaviour
   *    as `startScreenshare`. {@link call.addMedia} is a general-purpose API
   *    for adding media to a call, which covers the same functionality as
   *    `startScreenshare`. Selecting only screen options when using
   *    {@link call.addMedia} will perform the same behaviour as using
   *    `startScreenshare`.
   *
   * @public
   * @static
   * @method startScreenshare
   * @memberof call
   * @requires call
   * @requires callMe
   * @example
   * // Select media options for adding only screenshare.
   * const media = {
   *    audio: false,
   *    video: false,
   *    screen: true,
   *    screenOptions: { ... }
   * }
   *
   * // Add the selected media to the call.
   * client.call.addMedia(callId, media)
   */

  /**
   * Removes local screenshare from an ongoing Call, stopping it from being
   *    sent to the remote participant.
   *
   * The latest SDK release (v4.X+) has not yet implemented this API in the
   *    same way that it was available in previous releases (v3.X). In place
   *    of this API, the SDK has a more general API that can be used for this
   *    same behaviour.
   *
   * The {@link call.removeMedia} API can be used to perform the same
   *    behaviour as `stopScreenshare`. {@link call.removeMedia} is a
   *    general-purpose API for removing media from a call, which covers the
   *    same functionality as `stopScreenshare`. Specifying only the screen
   *    track when using {@link call.removeMedia} will perform the same
   *    behaviour as using `stopScreenshare`.
   *
   * There is a caveat that if a Call has multiple video tracks (for example,
   *    both a video and a screen track), the SDK itself cannot yet
   *    differentiate one from the other. The application will need to know
   *    which track was the screen track in this scenario.
   * @public
   * @static
   * @method stopScreenshare
   * @memberof call
   * @requires call
   * @requires callMe
   * @example
   * const call = client.call.getById(callId)
   * // Get the ID of any/all video tracks on the call.
   * const videoTracks = call.localTracks.filter(trackId => {
   *    const track = call.media.getTrackById(trackId)
   *    // Both video and screen tracks have kind of 'video'.
   *    return track.kind === 'video'
   * })
   *
   * // Pick out the screen track.
   * const screenTrack = videoTracks[0]
   *
   * // Remove screen from the call.
   * client.call.removeMedia(callId, [ screenTrack ])
   */

  /**
   * Replace a call's track with a new track of the same media type.
   *
   * The operation will remove the old track from the call and add a
   *    new track to the call. This effectively allows for changing the
   *    track constraints (eg. device used) for an ongoing call.
   *
   * Because it completely replaces an old track with a new one,
   * the old track's state characteristics are not carried over in the new track's state.
   * (e.g. if an old track's state was 'muted' and replacement of this track has occured,
   * the new track's state will be 'unmuted', as this is its default state)
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a
   *    {@link call.event:call:trackReplaced call:trackReplaced} event
   *    locally when the operation completes. The newly added track will need
   *    to be handled by the local application. The track will be replaced
   *    seamlessly for the remote application, which will not receive an event.
   *
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string} callId The ID of the call to replace the track of.
   * @param {string} trackId The ID of the track to replace.
   * @param {Object} [media={}] The media options.
   * @param {boolean} [media.audio=false] Whether to create an audio track.
   * @param {Object} [media.audioOptions] Options for configuring the audio track.
   * @param {call.MediaConstraint} [media.audioOptions.deviceId] ID of the microphone to receive audio from.
   * @param {boolean} [media.video=false] Whether to create a video track.
   * @param {Object} [media.videoOptions] Options for configuring the video track.
   * @param {call.MediaConstraint} [media.videoOptions.deviceId] ID of the camera to receive video from.
   * @param {call.MediaConstraint} [media.videoOptions.height] The height of the video.
   * @param {call.MediaConstraint} [media.videoOptions.width] The width of the video.
   * @param {call.MediaConstraint} [media.videoOptions.frameRate] The frame rate of the video.
   * @param {Array} [media.medias] List of medias containing tracks to be attached to this call.
   * @throws {BasicError} Throws an error if mediaConstraints.medias is not an array.
   * @throws {BasicError} Throws an error if mediaConstraints.medias Objects are missing `media` and `type` properties.
   * @throws {BasicError} Throws an error if mediaConstraints contains duplicate media kinds.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not detached.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not local.
   * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are already in use by a session.
   * @throws {BasicError} Throws an error if mediaConstraints.medias contains any type other than Object containing `media` and `type` properties.
   * @example
   * const callId = ...
   * // Get the video track used by the call.
   * const videoTrack = ...
   *
   * // Replace the specified video track of the call with a new
   * //    video track.
   * client.call.replaceTrack(callId, videoTrack.id, {
   *   // The track should be replaced with a video track using
   *   //    a specific device. This effectively changes the input
   *   //    device for an ongoing call.
   *   video: true,
   *   videoOptions: {
   *     deviceId: cameraId
   *   }
   * })
   *
   * @example
   * const callId = ...
   * // Get the video track used by the call.
   * const videoTrack = ...
   *
   * // Can also replace the specified video track of the call with a new
   * // screen sharing track because screen sharing is delivered as a video stream to remote peer.
   * // User will then be prompted to pick a specific screen to share and thus the device id will be selected.
   * client.call.replaceTrack(callId, videoTrack.id, {
   *   // The track should be replaced with a screen sharing track.
   *   // Note that 'screenOptions' property is not mandatory, as API will use default values
   *   // for properties like: width, height, frameRate.
   *   screen: true
   * })
   */
  async function replaceTrack(callId, trackId, media) {
    log.debug(API_LOG_TAG + 'call.replaceTrack: ', callId, trackId, media);

    // Validate mediaConstraints
    (0, _utils.validateMediaConstraints)(media);

    // Validating detached media before attempting to start a call.
    // This verifies that the detached media being provided is, detached, local
    // and not already in use by a session.
    if (media.medias) {
      await (0, _utils.validateDetachedMedia)(media.medias);
    }
    const mediaConstraints = (0, _utils.formatMediaConstraints)(media);
    context.dispatch(_actions.callActions.replaceTrack(callId, {
      trackId,
      mediaConstraints
    }));

    // Start the operation
    let error;
    let result = {};
    try {
      result = await CallManager.replaceTrack(callId, trackId, mediaConstraints);
    } catch (err) {
      error = err;
    }
    context.dispatch(_actions.callActions.replaceTrackFinish(callId, _objectSpread(_objectSpread({}, result), {}, {
      error
    })));

    // Both events are issued for either success of failure path
    emitEvent(eventTypes.CALL_TRACK_REPLACED, {
      callId,
      newTrackId: error ? undefined : result.newTrackId,
      oldTrack: error ? undefined : result.oldTrackState,
      error
    });
  }

  /**
   * Attempt to re-establish a media connection for a call.
   *
   * This API will perform a "refresh" operation on the call with the intention
   *    of resolving media issues that may have been encountered. This API is only
   *    necessary after the Call's {@link call.mediaConnectionStates mediaConnectionState}
   *    has entered the `failed` state, but may be used in other scenarios.
   *
   * After the operation completes successfully, the Call will be re-establishing
   *    its media connection. By this time, or shortly after, the Call's
   *    {@link call.mediaConnectionStates mediaConnectionState} should have
   *    transitioned to `checking` (via a
   *    {@link call.event:call:mediaConnectionChange call:mediaConnectionChange}
   *    event) to signify the re-establishment. It will then transition to either
   *    `connected` or `failed` state, similar to during the initial Call establishment.
   *
   * If this operation fails, then the Call will not attempt the re-establishment
   *    and will remain in the `failed` {@link call.mediaConnectionStates mediaConnectionState}.
   *
   * Behaviour during the operation may differ slightly based on the browser.
   *    Notably, Firefox will always transition to the `checking`
   *    {@link call.mediaConnectionStates mediaConnectionState} no matter what
   *    the previous state was. Whereas Chrome will skip the `checking` state,
   *    transitioning directly to either `connected` or `failed`. This has the
   *    implication for Chrome that if the state does not change (for example,
   *    the Call is in the `failed` state before the media restart operation,
   *    and media re-establishment fails), then there will be no
   *    {@link call.event:call:mediaConnectionChange call:mediaConnectionChange}
   *    event emitted. For this reason, Chrome-based applications may need a
   *    short delay after receiving the {@link call.event:call:mediaRestart call:mediaRestart}
   *    event before checking the Call's updated
   *    {@link call.mediaConnectionStates mediaConnectionState} to ensure the
   *    application is acting on the "latest" state.
   *
   * The SDK will emit a {@link call.event:call:mediaRestart call:mediaRestart}
   *    event when the operation completes.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   * @public
   * @static
   * @memberof call
   * @method restartMedia
   * @param {string} callId The ID of the call to act on.
   */
  async function restartMedia(callId) {
    log.debug(`${API_LOG_TAG}call.restartMedia, callId: ${callId}`);
    context.dispatch(_actions.callActions.restartMedia(callId));
    try {
      await CallManager.iceRestart(callId);
    } catch (error) {
      context.dispatch(_actions.callActions.restartMediaFinish(callId, {
        local: true,
        error: error
      }));
      emitEvent(eventTypes.MEDIA_RESTART, {
        callId,
        error
      });
    }
  }

  /**
   * Re-sync a Call with the server by fetching the status of the Call on the server.
   *
   * This may be useful to get and update a call's state after processing incoming notifications
   *    some time after they were received (e.g., waiting to process incoming call push notifications
   *    till a connection is established).
   *
   * The progress of the `RESYNC` operation will be tracked via the
   *    {@link call.event:call:operation call:operation} events.
   *
   * The SDK may emit a {@link call.event:call:operation call:operation} event after the `RESYNC` operation is
   *    complete if the call was ended do to the resync.
   * @private
   * @static
   * @memberof call
   * @requires call
   * @requires link_call
   * @method resync
   * @param {string} callId The ID of the call to re-sync.
   */
  async function resync(callId) {
    log.debug(`${API_LOG_TAG}call.resync, callId: ${callId}`);
    context.dispatch(_actions.callActions.resync(callId));
    let error;
    try {
      await CallManager.resyncCallState(callId);
    } catch (err) {
      error = err;
    }
    context.dispatch(_actions.callActions.resyncFinish(callId, {
      error
    }));
  }

  /**
   * Plays an audio file to the remote side of the Call. This API will temporarily
   *    replace the Call's local audio track with an audio file for the duration
   *    of the audio file.
   *
   * The Call must be in `Connected` state and have a local audio track for this operation.
   *
   * This API will not affect media other than the local audio track. Other media on
   *    the Call, such as local video or remote audio, can be {@link media.muteTracks muted}
   *    or {@link media.removeTracks unrendered} during this operation if desired.
   *
   * This operation will use the browser's
   *    [Audio constructor](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/Audio)
   *    to read in the audio file. The `filePath` parameter will be used directly with `Audio`, so
   *    can be either a relative file path to your audio file or a URL pointing to a file.
   *
   * This API returns a promise that can be used to track the progress of the operation.
   *    The promise will resolve after the operation completes or reject if an error is
   *    encountered. Additionally, an extra `onPlaying` callback is provided on the Promise
   *    to indicate when the audio file actually begins to play. See the code example below
   *    for a sample.
   *
   * The SDK will emit {@link call.event:call:operation call:operation} events locally
   *    as the operation progresses. The remote endpoint will not receive an event for
   *    this operation.
   *
   * If an error is encountered during the operation and the SDK is unable to replace
   *    the original local audio track, then that track will be forcibly ended and an
   *    {@link media.event:media:trackEnded media:trackEnded} event will be emitted
   *    for it. This will release the microphone and avoid losing access to the track
   *    while it is active, allowing the application to resolve the scenario by using
   *    the {@link call.replaceTrack} API to revert the local audio track.
   *
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @method playAudioFile
   * @param {string} callId The ID of the Call to act on.
   * @param {string} filePath The path to the audio file.
   * @return {Promise} Promise that resolves when the operation is complete.
   * @example
   * // The API returns a promise which will provide feedback about the operation.
   * client.call.playAudioFile(callId, filePath)
   *    .then(() => {
   *      // Audio file has finished playing; call has reverted to previous audio.
   *    })
   *    .catch(err => {
   *      // An error has occurred during the operation.
   *    })
   *
   * // The returned promise can optionally provide feedback midway through the
   * //   operation. A chainable `onPlaying` method denotes when the audio file has
   * //   started to play and the Call's audio has been replaced.
   * client.call.playAudioFile(callId, filePath)
   *    .onPlaying(({ duration }) => {
   *      // Audio file has started playing; call audio is now the file.
   *      // Note: Calling `onPlaying` must be done before `then` and `catch` for it
   *      //    to be chainable.
   *    })
   *    .then(() => { ... })
   *    .catch(err => { ... })
   */
  function playAudioFile(callId, filePath) {
    log.debug(`${API_LOG_TAG}call.playAudioFile`, filePath);
    let onPlayingCallback;
    const operation = new Promise((resolve, reject) => {
      // Internal callback for when audio starts playing. Calls the app-callback
      //    if one was provided.
      function onPlaying(val) {
        if (onPlayingCallback && typeof onPlayingCallback === 'function') {
          onPlayingCallback(val);
        }
      }

      // Dispatch action to update call operation state.
      context.dispatch(_actions.callActions.playAudio(callId, filePath));
      CallManager.playAudioFile(callId, filePath, onPlaying).then(() => {
        // Dispatch action to update call operation state.
        context.dispatch(_actions.callActions.playAudioFinish(callId));
        resolve();
      }).catch(error => {
        // Dispatch action to update call operation state.
        context.dispatch(_actions.callActions.playAudioFinish(callId, error));
        reject(error);
      });
    });

    /*
     * Add a function to the Promise so the application can provide a callback
     *    function for when the audio starts playing.
     */
    operation.onPlaying = callback => {
      onPlayingCallback = callback;
      // Return the `operation` so this can be chained.
      return operation;
    };
    return operation;
  }
  return {
    hold,
    unhold,
    addMedia,
    removeMedia,
    startVideo,
    stopVideo,
    replaceTrack,
    restartMedia,
    resync,
    playAudioFile
  };
}

/***/ }),

/***/ 39992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _selectors = __webpack_require__(11430);
var _actions = __webpack_require__(6313);
var eventTypes = _interopRequireWildcard(__webpack_require__(55166));
var _actions2 = __webpack_require__(43424);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins

/**
 * Call Misc APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} Misc API.
 */
function createAPI(container) {
  const {
    context,
    CallManager,
    Callstack,
    CallReporter,
    emitEvent,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('CALL');

  /**
   * Retrieves the information of all calls made during the current session.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @method getAll
   * @return {Array<call.CallObject>} Call objects.
   * @example
   * let calls = client.call.getAll()
   * let currentCalls = calls.filter(call => {
   *     return call.state === client.call.states.CONNECTED
   * })
   */
  function getAll() {
    log.debug(API_LOG_TAG + 'call.getAll');
    return (0, _selectors.getCalls)(context.getState());
  }

  /**
   * Retrieves the information of a single call with a specific call ID.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @static
   * @method getById
   * @param {string} callId The ID of the call to retrieve.
   * @return {call.CallObject} A call object.
   */
  function getById(callId) {
    log.debug(API_LOG_TAG + 'call.getById: ', callId);
    return (0, _selectors.getCallById)(context.getState(), callId);
  }

  /**
   * Sends the "ringing feedback" notification to the remote participant of a call.
   *
   * When using the 'manual' `ringingFeedbackMode` configuration, the application
   *    is responsible for transitioning the call into the `Ringing` state. This
   *    API will notify both ends of the call to enter `Ringing` state at the same
   *    time. The application may decide not to send the "ringing feedback"
   *    notification by not using this API. The `ringingFeedbackMode` configuration
   *    must be set to 'manual' to use this API.
   *
   * The specified call must be an incoming call in `Initiated` state. The call
   *    will enter `Ringing` state as a result of the operation.
   *
   * The SDK will emit a {@link call.event:call:stateChange call:stateChange}
   *    event locally when the operation completes. The remote participant will
   *    be notified of the operation through a
   *    {@link call.event:call:stateChange call:stateChange} event as well.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @method sendRingingFeedback
   * @param {string} callId The ID of the call.
   */
  async function sendRingingFeedback(callId) {
    log.debug(API_LOG_TAG + 'call.sendRingingFeedback: ', callId);

    // Dispatch this action for backwards compatibility
    context.dispatch(_actions.callActions.sendRingingFeedback(callId));
    // Get the call state now for the call state change event previous state
    const call = (0, _selectors.getCallById)(context.getState(), callId);
    let error;
    try {
      await CallManager.sendRingingFeedback(callId);
    } catch (err) {
      error = err;
    }
    context.dispatch(_actions.callActions.sendRingingFeedbackFinish(callId, {
      error
    }));
    emitEvent(eventTypes.CALL_STATE_CHANGE, {
      callId,
      previous: {
        state: call ? call.state : undefined,
        localHold: call ? call.localHold : undefined,
        remoteHold: call ? call.remoteHold : undefined
      },
      error
    });
  }

  /**
   * Set the {@link call.CustomParameter Custom Parameters} of a Call, to be provided to the remote endpoint.
   *
   * The specified parameters will be saved as part of the call's information throughout the duration of the call.
   * All subsequent call operations will include these custom parameters.
   * Therefore, invalid parameters, or parameters not previously configured on the server, will cause subsequent call operations to fail.
   *
   * A Call's custom parameters are a property of the Call's {@link call.CallObject CallObject},
   *    which can be retrieved using the {@link call.getById} or
   *    {@link call.getAll} APIs.
   *
   * The custom parameters set on a call can be sent directly with the {@link call.sendCustomParameters} API.
   *
   * Custom parameters can be removed from a call's information by setting them as undefined (e.g., `call.setCustomParameters(callId)`).
   * Subsequent call operations will no longer send custom parameters.
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @requires callMe
   * @method setCustomParameters
   * @param {string} callId The ID of the call.
   * @param {Array<call.CustomParameter>} customParameters The custom parameters to set.
   */

  /**
   * Set custom SIP headers and bodies for a call, to be provided to the remote endpoint.
   *
   * This API takes either an array of {@link call.CustomParameter Custom Parameters}, or if custom bodies
   *  also need to be set, an object consisting of either {@link call.CustomParameter Custom Parameters} or
   *  {@link call.CustomBody Custom Bodies} or both.
   *
   * Note that usage of the `setCustomParameters` API will completely overwrite any previously set headers and bodies.
   *  Therefore, if either parameters or headers are omitted during subsequent API calls, they will
   *  be overwritten to undefined.
   * @private
   * @static
   * @memberof call
   * @requires link_call
   * @method setCustomParameters
   * @param {Array<call.CustomParameter> | Object} customParameters The custom parameters to set.
   * @param {Array<call.CustomParameter>} [customParameters.customParameters] Custom SIP headers for the SIP backend.
   * @param {Array<call.CustomBody>} [customParameters.customBodies] Custom SIP bodies for the SIP backend.
   */
  async function setCustomParameters(callId, customParameters) {
    log.debug(API_LOG_TAG + 'call.setCustomParameters: ', callId, customParameters);
    context.dispatch(_actions.callActions.setCustomParameters(callId, customParameters));
  }

  /**
   * Send the custom parameters on an ongoing call to the server. The server may either consume the headers or relay them
   * to another endpoint, depending on how the server is configured.
   *
   * A Call's custom parameters are a property of the Call's {@link call.CallObject CallObject},
   *    which can be retrieved using the {@link call.getById} or
   *    {@link call.getAll} APIs.
   *
   * Before sending custom parameters, they need to be first set on the existing Call.
   * To set, change or remove the custom parameters on a call, use the {@link call.setCustomParameters} API.
   * @public
   * @static
   * @memberof call
   * @requires link_call
   * @requires callMe
   * @method sendCustomParameters
   * @param {string} callId The ID of the call being acted on.
   */
  async function sendCustomParameters(callId) {
    log.debug(API_LOG_TAG + 'call.sendCustomParameters: ', callId);
    context.dispatch(_actions.callActions.sendCustomParameters(callId));
    let error;
    try {
      await CallManager.sendCustomParameters(callId);
    } catch (err) {
      error = err;
    }
    context.dispatch(_actions.callActions.sendCustomParametersFinish(callId, {
      error
    }));
  }

  /**
   * Send DTMF tones to a call's audio.
   *
   * The provided tone can either be a single DTMF tone (eg. '1') or a
   *    sequence of DTMF tones (eg. '123') which will be played one after the
   *    other.
   *
   * The specified call must be either in Connected, Ringing, or Early Media
   *    state, otherwise invoking this API will have no effect.
   *
   * The tones will be sent as out-of-band tones if supported by the call,
   *    otherwise they will be added in-band to the call's audio.
   *
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @method sendDTMF
   * @param {string} callId ID of the call being acted on.
   * @param {string} tone DTMF tone(s) to send. Valid characters are ['0','1','2','3','4','5','6','7','8','9','#','*' and ','].
   * @param {number} [duration=100] The amount of time, in milliseconds, that each DTMF tone should last.
   * @param {number} [intertoneGap=70] The length of time, in milliseconds, to wait between tones.
   *
   */
  async function sendDTMF(callId, tone) {
    let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
    let intertoneGap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 70;
    log.debug(API_LOG_TAG + 'call.sendDTMF: ', callId, tone, duration, intertoneGap);
    if (typeof tone === 'number') {
      // Convert the tone into a string if it is a number.
      tone = tone + '';
    }

    // Dispatch this action for backwards compatibility.
    context.dispatch(_actions.callActions.sendDTMF(callId, {
      tone,
      duration,
      intertoneGap
    }));
    let error;
    try {
      await CallManager.sendDtmf(callId, tone, {
        duration,
        intertoneGap
      });
    } catch (err) {
      error = err;
    }

    // Dispatch this action for backwards compatibility.
    context.dispatch(_actions.callActions.sendDTMFFinish(callId, {
      error
    }));
  }

  /**
   * Retrieve a snapshot of the low-level information of the Call through statistical
   *    report.
   *
   * The data retrieved is a [RTCStatsReport](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport)
   *    object, which contains many individual
   *    [RTCStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCStats).
   *    These are advanced statistics gathered by the browser providing insights
   *    into the Call at a certain point in time. Aggregating reports over a
   *    period of time would allow a low-level analysis of the Call for that
   *    period. As an example, this could be done to determine the media quality
   *    during the Call.
   *
   * A Track ID can optionally be provided to get a report for a specific local
   *    Track of the Call.
   *
   * This API will return a promise which, when resolved, will contain the report of the particular call.
   * The progress of the operation will be tracked via the
   *    {@link call.event:call:operation call:operation} event.
   *
   * The SDK will emit a
   *    {@link call.event:call:statsReceived call:statsReceived} event, after
   *    the operation completes, that has the report.
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string} callId The ID of the Call to retrieve the report.
   * @param {string} [trackId] ID of a local Track being used by the Call. If not
   *    provided, RTCStatsReport is generated for the Call itself.
   * @return {Promise} A promise that will resolve with the stats report or an error if it fails.
   * @example
   * // Get a snapshot of the Call's stats.
   * //   This may be done on a regular interval to collect data over time.
   * try {
   *    // The API will return a promise that resolves with the stats.
   *    const result = await client.call.getStats(callId)
   *    result.forEach(stats => {
   *        // Handle the data on its own or collate with previously gathered stats
   *        //    for analysis.
   *        ...
   *    })
   * } catch (err) {
   *    // Handle the error.
   *    const { code, message } = err
   *    ...
   * }
   */
  async function getStats(callId, trackId) {
    log.debug(API_LOG_TAG + 'call.getStats: ', callId, trackId);
    context.dispatch(_actions.callActions.getStats(callId, {
      trackId
    }));
    let result, error;
    try {
      result = await CallManager.getStats(callId, trackId);
    } catch (err) {
      error = err;
      throw error;
    } finally {
      // Handle the success and failure paths together; with either one of
      //    result/error being defined and the other not.
      context.dispatch(_actions.callActions.getStatsFinish(callId, {
        error,
        result,
        trackId
      }));
      emitEvent(eventTypes.STATS_RECEIVED, {
        callId,
        result,
        trackId,
        error
      });
    }

    // Resolve the API's promise with the results.
    return result;
  }

  /**
   * Retrieve the list of available and supported codecs based on the browser's capabilities for sending media.
   *
   * This API will return a promise which, when resolved, it will contain the list of available and supported codecs.
   * In addition, the SDK emits a {@link call.event:call:availableCodecs call:availableCodecs} event
   *  upon retrieving that list of codecs.
   *
   * This API is a wrapper for the static method {@link https://w3c.github.io/webrtc-pc/#dom-rtcrtpsender-getcapabilities RTCRtpSender.getCapabilities()}.
   *
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string} kind The kind of media, i.e., 'audio' or 'video', to get the list of available codecs of.
   * @return {Promise} A promise that will resolve with an object containing the available codecs, along with the `kind` parameter, that was supplied in the first place.
   *         If there was an error, it will return undefined.
   * @example
   * try {
   *    // The API will return a promise that resolves with the codecs.
   *    const result = await client.call.getAvailableCodecs('audio')
   *    result.forEach(codec => {
   *        // Inspect the codec supported by browser by looking at its properties.
   *        ...
   *    })
   * } catch (err) {
   *    // Handle the error.
   *    const { code, message } = err
   *    ...
   * }
   */
  async function getAvailableCodecs(kind) {
    log.debug(`${API_LOG_TAG}call.getAvailableCodecs, kind: ${kind}`);

    // Dispatch this action for backwards compatibility
    context.dispatch(_actions.callActions.getAvailableCodecs({
      kind
    }, {
      promise: {}
    }));
    let codecs;
    try {
      codecs = await Callstack.operations.getAvailableCodecs(kind);

      // Final action dispatched, for backwards compatibility
      context.dispatch(_actions.callActions.availableCodecsRetrieved({
        kind,
        codecs
      }));
      emitEvent(eventTypes.AVAILABLE_CODECS, {
        kind,
        codecs
      });
    } catch (err) {
      log.debug('Failed to retrieve codecs: ', err.message);
      // Return a rejected Promise instance, in order to keep backwards compatibility
      // Operation may throw a BasicError but for backwards compatibility, we use Error instance
      return await Promise.reject(new Error(err.message));
      // If there is an error, no further actions (or events) dispatched
    }

    // Return a resolved Promise instance, in order to keep backwards compatibility
    return await Promise.resolve(codecs);
  }

  /**
   * Retrieve the call metrics report for a call.
   *
   * The object returned from this API will be in JSON format. The top level object is the report and will include
   * a timeline of events that were recorded during a call as well as a map object containing computed metrics.
   *
   * Any event in a timeline will have it's own timeline that may have recorded events. Events in a timeline are scoped
   * to that timelines event or report.
   *
   * The report and some events may have additional data included in a data property.
   *
   * See event documentation {@link call.reportEvents here}.
   * See metrics documentation {@link call.metrics here}.
   *
   * @method getReport
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {string} callId The id of the call to retrieve the report on.
   * @return {Object} An object containing all metrics and data tracked against this call.
   */
  function getReport(callId) {
    log.debug(API_LOG_TAG + 'call.getReport: ', callId);
    const report = CallReporter.getReport(callId);
    return report ? report.getSerializable() : report;
  }

  /**
   * Set {@link call.SdpHandlerFunction SDP Handler Functions} that will be run as part of a pipeline for all future calls.
   *  This will replace any SDP Handlers that were previously set.
   *
   * SDP handlers can be used to make modifications to the SDP (e.g., removing certain codecs)
   *  before they are processed or sent to the other side.
   *
   * This is an advanced feature, changing the SDP handlers mid-call may cause
   *  unexpected behaviour in future call operations for that call.
   *
   * @method setSdpHandlers
   * @public
   * @static
   * @memberof call
   * @requires call
   * @requires callMe
   * @param {Array<call.SdpHandlerFunction>} sdpHandlers The list of SDP handler functions to modify SDP.
   * @return {undefined}
   */
  function setSdpHandlers(sdpHandlers) {
    log.debug(`${API_LOG_TAG}call.setSdpHandlers, sdpHandlers:`, sdpHandlers);
    context.dispatch((0, _actions2.setSdpHandlers)(sdpHandlers));
  }

  /**
   * Changes the camera and/or microphone used for a Call's media input.
   *
   * The latest SDK release (v4.X+) has not yet implemented this API in the
   *    same way that it was available in previous releases (v3.X). In place
   *    of this API, the SDK has a more general API that can be used for this
   *    same behaviour.
   *
   * The same behaviour as the `changeInputDevices` API can be implemented
   *    using the general-purpose {@link call.replaceTrack} API. This API can
   *    be used to replace an existing media track with a new track of the
   *    same type, allowing an application to change certain aspects of the
   *    media, such as input device.
   * @public
   * @static
   * @method changeInputDevices
   * @memberof call
   * @requires call
   * @requires callMe
   * @example
   * const call = client.call.getById(callId)
   * // Get the ID of the Call's video track.
   * const videoTrack = call.localTracks.find(trackId => {
   *    const track = client.media.getTrackById(trackId)
   *    return track.kind === 'video'
   * })
   *
   * // Select the new video options.
   * const media = {
   *    video: true,
   *    videoOptions: {
   *        deviceId: 'cameraId'
   *    }
   * }
   *
   * // Change the call's camera by replacing the video track.
   * client.call.replaceTrack(callId, videoTrack, media)
   */

  /**
   * Changes the speaker used for a Call's audio output. Supported on
   *    browser's that support HTMLMediaElement.setSinkId().
   *
   * The latest SDK release (v4.X+) has not yet implemented this API in the
   *    same way that it was available in previous releases (v3.X). In place
   *    of this API, the SDK has a more general API that can be used for this
   *    same behaviour.
   *
   * The same behaviour as the `changeSpeaker` API can be implemented by
   *    re-rendering the Call's audio track.  A speaker can be selected when
   *    rendering an audio track, so changing a speaker can be simulated
   *    by unrendering the track with {@link media.removeTracks}, then
   *    re-rendering it with a new speaker with {@link media.renderTracks}.
   * @public
   * @static
   * @method changeSpeaker
   * @memberof call
   * @requires call
   * @requires callMe
   * @example
   * const call = client.call.getById(callId)
   * // Get the ID of the Call's audio track.
   * const audioTrack = call.localTracks.find(trackId => {
   *    const track = client.media.getTrackById(trackId)
   *    return track.kind === 'audio'
   * })
   *
   * // Where the audio track was previously rendered.
   * const audioContainer = ...
   *
   * // Unrender the audio track we want to change speaker for.
   * client.media.removeTrack([ audioTrack ], audioContainer)
   * // Re-render the audio track with a new speaker.
   * client.media.renderTrack([ audioTrack ], audioContainer, {
   *    speakerId: 'speakerId'
   * })
   */

  return {
    getAll,
    getById,
    sendRingingFeedback,
    setCustomParameters,
    sendCustomParameters,
    sendDTMF,
    getStats,
    getReport,
    getAvailableCodecs,
    setSdpHandlers
  };
}

/***/ }),

/***/ 37409:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.OP_TRANSITIONS = exports.OP_STATUS = exports.OPERATIONS = exports.NO_FINISH_OPS = exports.ENDPOINTS = void 0;
/**
 * Blocking operations that can be performed on a call.
 * ie. no two of these operations, either local or remote,
 *    can be performed at the same time.
 * TODO: Should all operations just be listed here? Probably.
 */
const OPERATIONS = exports.OPERATIONS = {
  // Establishment.
  MAKE: 'MAKE',
  MAKE_ANONYMOUS: 'MAKE_ANONYMOUS',
  ANSWER: 'ANSWER',
  SLOW_ANSWER: 'SLOW_ANSWER',
  REJECT: 'REJECT',
  IGNORE: 'IGNORE',
  END: 'END',
  SEND_RINGING_FEEDBACK: 'SEND_RINGING_FEEDBACK',
  // TODO: Make sure these constants and actionTypes are in-sync with each
  //    other. Use one to build the other.
  FORWARD_CALL: 'FORWARD_CALL',
  // Midcall.
  HOLD: 'HOLD',
  UNHOLD: 'UNHOLD',
  SEND_CUSTOM_PARAMETERS: 'SEND_CUSTOM_PARAMETERS',
  ADD_MEDIA: 'ADD_MEDIA',
  ADD_BASIC_MEDIA: 'ADD_BASIC_MEDIA',
  REMOVE_MEDIA: 'REMOVE_MEDIA',
  REMOVE_BASIC_MEDIA: 'REMOVE_BASIC_MEDIA',
  GET_STATS: 'GET_STATS',
  SEND_DTMF: 'SEND_DTMF',
  CONSULTATIVE_TRANSFER: 'CONSULTATIVE_TRANSFER',
  DIRECT_TRANSFER: 'DIRECT_TRANSFER',
  JOIN: 'JOIN',
  REPLACE_TRACK: 'REPLACE_TRACK',
  MEDIA_RESTART: 'MEDIA_RESTART',
  RESYNC: 'RESYNC',
  PLAY_AUDIO: 'PLAY_AUDIO',
  GET_AVAILABLE_CODECS: 'GET_AVAILABLE_CODECS',
  // Remote-only.
  START_MOH: 'START_MOH',
  STOP_MOH: 'STOP_MOH',
  SLOW_START: 'SLOW_START',
  GENERIC_REMOTE: 'GENERIC_REMOTE'
};

/*
 * Endpoints that can perform operations.
 */
const ENDPOINTS = exports.ENDPOINTS = {
  LOCAL: 'LOCAL',
  REMOTE: 'REMOTE'
  // SERVER: 'SERVER' ?
};

/*
 * Statuses of an operation.
 */
const OP_STATUS = exports.OP_STATUS = {
  NOT_STARTED: 'NOT_STARTED',
  ONGOING: 'ONGOING',
  // The operation is ongoing locally.
  PENDING: 'PENDING',
  // The operation is pending remotely.
  FINISHED: 'FINISHED'
};

/*
 * Transitions of an operation.
 */
const OP_TRANSITIONS = exports.OP_TRANSITIONS = {
  START: 'START',
  // The operation is starting.
  UPDATE: 'UPDATE',
  // The operation is ongoing.
  FINISH: 'FINISH' // The operation has finished.
};

/*
 * Operations that don't have a corresponding finish operation
 */
const NO_FINISH_OPS = exports.NO_FINISH_OPS = [OPERATIONS.ADD_BASIC_MEDIA, OPERATIONS.REMOVE_BASIC_MEDIA, OPERATIONS.GET_AVAILABLE_CODECS, OPERATIONS.MAKE_ANONYMOUS];

/***/ }),

/***/ 55166:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.STATS_RECEIVED = exports.MEDIA_RESTART = exports.MEDIA_CONNECTION_CHANGE = exports.CUSTOM_PARAMETERS = exports.CALL_TRACK_REPLACED = exports.CALL_TRACKS_REMOVED = exports.CALL_TRACKS_ADDED = exports.CALL_STATE_CHANGE = exports.CALL_STARTED = exports.CALL_REMOVED_MEDIA = exports.CALL_OPERATION = exports.CALL_JOIN = exports.CALL_INCOMING = exports.CALL_ADDED_MEDIA = exports.AVAILABLE_CODECS = void 0;
/**
 * A call operation has either started, been updated, or finished.
 *
 * Information about ongoing call operations are stored on the
 *    {@link call.CallObject CallObject}. This event indicates that an operation's
 *    information has changed.
 *
 * The status of an operation indicates whether the local or remote side of the
 *    call is currently processing it, with values being 'ONGOING' or 'PENDING',
 *    respectively. All operations will begin as 'ONGOING' status with an event
 *    indicating the 'START' transition. Operations that require a response from
 *    the remote side will have an 'UPDATE' transition to the 'PENDING' status once
 *    it starts to wait for the response. Once complete, an event will indicate
 *    a 'FINISH' transition and the operation will be removed from the call state.
 * @public
 * @memberof call
 * @event call:operation
 * @param {Object} params
 * @param {string} params.callId The ID for the call being operated on.
 * @param {string} params.operation The type of operation causing this event.
 * @param {string} params.operationId The unique ID of the call operation.
 * @param {string} params.transition The transition reason for the operation change.
 * @param {boolean} params.isLocal Flag indicating whether the operation was local or not.
 * @param {Object} [params.previous] The operation information before this change.
 *    If the transition is to "start" the operation, there will be no previous information.
 * @param {string} [params.previous.operation] The operation that was ongoing.
 * @param {string} [params.previous.status] The operation status before this change.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 * @example
 * client.on('call:operation', (params) => {
 *    const { callId, operationId } = params
 *
 *    // Get the operation from the call's state that this event is about.
 *    const call = client.call.getById(callId)
 *    const operation = call.currentOperations.find(op => op.id === operationId)
 *    log(`${operation.type} operation is now ${operation.status} for call ${callId}.`)
 * })
 */
const CALL_OPERATION = exports.CALL_OPERATION = 'call:operation';

/**
 * An outgoing call has been started.
 *
 * Information about the Call can be retrieved using the {@link call.getById}
 *    API.
 *
 * @public
 * @memberof call
 * @event call:start
 * @param {Object} params
 * @param {string} params.callId The ID of the call.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 */
const CALL_STARTED = exports.CALL_STARTED = 'call:start';

/**
 * A new joined call has been started.
 *
 * Information about the Call can be retrieved using the {@link call.getById}
 *    API.
 *
 * @public
 * @memberof call
 * @requires link_call
 * @event call:join
 * @param {Object} params
 * @param {string} params.callId The ID of the call.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 */
const CALL_JOIN = exports.CALL_JOIN = 'call:join';

/**
 * A new incoming call has been received.
 *
 * Information about the Call can be retrieved using the {@link call.getById}
 *    API.
 *
 * NOTE: Upon receiving this notification the call is in "Initiating" state. In order
 *    to answer calls, they must be in either "Ringing" or "Initiated" states. Therefore,
 *    this event should not be used to prompt the user to respond. Instead, the
 *    {@link #calleventcallstatechange call:stateChange} event should be used for this purpose.
 *
 * @public
 * @memberof call
 * @event call:receive
 * @param {Object} params
 * @param {string} params.callId The ID of the call.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 * @example
 * client.on('call:receive', function(params) {
 *     // We have received a call
 *     promptUser(client.call.getById(params.callId));
 * });
 */
const CALL_INCOMING = exports.CALL_INCOMING = 'call:receive';

/**
 * A Call's state has changed.
 *
 * See {@link call.states} for information about call states.
 * @public
 * @memberof call
 * @event call:stateChange
 * @param {Object} params
 * @param {string} params.callId The ID of the Media object that was operated on.
 * @param {Object} params.previous The call's properties before the operation changed it.
 * @param {string} params.previous.state The previous state of the call.
 * @param {Object} [params.transition] Contains more detailed information about the state change.
 * @param {number} [params.transition.statusCode] The status code associated with the particular state change's reason.
 * @param {string} [params.transition.reasonText] The reason for the state change.
 * @param {boolean} [params.previous.localHold] The previous local hold state. Present when the state change was a hold/unhold operation.
 * @param {boolean} [params.previous.remoteHold] The previous remote hold state. Present when the state change was a hold/unhold operation.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 * @example
 * client.on('call:stateChange', function (params) {
 *     const call = client.call.getById(params.callId)
 *     const prevState = params.previous.state
 *     log(`Call changed from ${prevState} to ${call.state} state.`)
 *
 *     // Handle the event depending on the new call state.
 *     switch (call.state) {
 *         case client.call.states.CONNECTED:
 *             // Handle being on call with media.
 *             break
 *         case client.call.states.ENDED:
 *             // Handle call ending.
 *             break
 *         ...
 *     }
 * })
 */
const CALL_STATE_CHANGE = exports.CALL_STATE_CHANGE = 'call:stateChange';

/**
 * New media has been added to the call.
 * @public
 * @memberof call
 * @event call:newMedia
 * @param {Object} params
 * @param {string} params.callId The ID of the call.
 * @param {boolean} params.local Whether the new media is local or not.
 * @param {Array} params.tracks The list of new Tracks.
 * @param {string} params.mediaId The ID of the Media object the Tracks belong to.
 */
const CALL_ADDED_MEDIA = exports.CALL_ADDED_MEDIA = 'call:newMedia';

/**
 * Media has been removed from the call.
 * @public
 * @memberof call
 * @event call:removedMedia
 * @param {Object} params
 * @param {string} params.callId The ID of the call.
 * @param {boolean} params.local Whether the removed Media was local or not.
 * @param {Array} params.tracks The list of removed Tracks.
 */
const CALL_REMOVED_MEDIA = exports.CALL_REMOVED_MEDIA = 'call:removedMedia';

/**
 * Tracks have been added to the Call after an SDK operation. Both sides of the Call
 *    are now able to render these tracks.
 *
 * Tracks are added to a Call when either the local or remote user adds new media
 *    to the Call, using the {@link call.addMedia} API for example, or when the
 *    Call is unheld with the {@link call.unhold} API.
 *
 * Remote tracks are similarly added to a Call when new tracks are added by the
 *    remote user or either user unholds the call.
 *
 * This event can indicate that multiple tracks have been removed by the same
 *    operation. For example, if the remote user added video to the call, this
 *    event would indicate a single, remote video track was added. If the local
 *    user unheld the call, this event would indicate that any tracks previously
 *    on the call have been re-added, both local and remote.
 *
 * Information about a Track can be retrieved using the {@link media.getTrackById} API.
 * @public
 * @memberof call
 * @event call:tracksAdded
 * @param {Object} params
 * @param {string} params.callId The ID of the Call the tracks were added to.
 * @param {Array<string>} params.trackIds List of track IDs that have been added to the Call.
 * @example
 * client.on('call:tracksAdded', function (params) {
 *    // Get the information for each track.
 *    const tracks = params.trackIds.map(client.media.getTrackById)
 *    tracks.forEach(track => {
 *      const { id, kind, isLocal } = track
 *      // Handle the track depending whether it is audio vs. video and local vs. remote.
 *      ...
 *    })
 * })
 */
const CALL_TRACKS_ADDED = exports.CALL_TRACKS_ADDED = 'call:tracksAdded';

/**
 * Tracks have been removed from the Call after an SDK operation. The tracks may still
 *    exist, but the media is not available to both sides of the Call any longer.
 *
 * Tracks are removed from a Call when either the local or remote user stops the
 *    tracks, by using the {@link call.removeMedia} API for example, or when the
 *    Call is held with the {@link call.hold} API.
 *
 * This event can indicate that multiple tracks have been removed by the same
 *    operation. For example, if the remote user removed video from the call, this
 *    event would indicate a single, remote video track was removed. If the local
 *    user held the call, this event would indicate that all tracks on the call
 *    have been removed, both local and remote.
 *
 * Information about a Track can be retrieved using the {@link media.getTrackById} API.
 * @public
 * @memberof call
 * @event call:tracksRemoved
 * @param {Object} params
 * @param {string} params.callId The ID of the Call the tracks were removed from.
 * @param {Array<string>} params.trackIds List of track IDs that have been removed from the Call.
 * @example
 * client.on('call:tracksRemoved', function (params) {
 *    // Get the information for each track.
 *    const tracks = params.trackIds.map(client.media.getTrackById)
 *    tracks.forEach(track => {
 *      const { id, kind, isLocal } = track
 *      // Handle the track depending whether it is audio vs. video and local vs. remote.
 *      ...
 *    })
 * })
 */
const CALL_TRACKS_REMOVED = exports.CALL_TRACKS_REMOVED = 'call:tracksRemoved';

/**
 * Stats have been retrieved for a Call or specific Track of a Call.
 *
 * See the {@link call.getStats} API for more information.
 *
 * @public
 * @memberof call
 * @event call:statsReceived
 * @param {Object} params
 * @param {string} params.callId The ID of the Call to retrieve stats for.
 * @param {string} [params.trackId] The ID of the Track to retrieve stats for.
 * @param {Map} [params.result] The RTCStatsReport.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 * @example
 * client.on('call:statsReceived', function (params) {
 *    if (params.error) {
 *      // Handle the error from the operation.
 *      const { code, message } = params.error
 *      ...
 *    } else {
 *      // Iterate over each individual statistic inside the RTCPStatsReport Map.
 *      // Handle the data on its own or collate with previously gathered stats
 *      //    for analysis.
 *      params.result.forEach(stat => {
 *        ...
 *      })
 *    }
 * })
 */
const STATS_RECEIVED = exports.STATS_RECEIVED = 'call:statsReceived';

/**
 * A local Track has been replaced by the {@link call.replaceTrack} API.
 *
 * This event is a combination of a track being removed from the Call and a new
 *    track being added to the Call. The previous Track's media is no longer
 *    available, similar to the {@link call.event:call:tracksRemoved call:tracksRemoved}
 *    event, and the new Track is available in its place, similar to the
 *    {@link call.event:call:tracksAdded call:tracksAdded} event. The event
 *    includes information about the Track that was replaced to help an application
 *    replace it seamlessly.
 * @public
 * @memberof call
 * @event call:trackReplaced
 * @param {Object} params
 * @param {string} params.callId The ID of the call where a track was replaced.
 * @param {string} [params.newTrackId] The ID of the new track that replaced the old track.
 * @param {call.TrackObject} [params.oldTrack] State of the replaced track.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 * @example
 * client.on('call:trackReplaced', function (params) {
 *   const { callId, oldTrack, newTrackId } = params
 *
 *   // Unrender the removed track.
 *   handleTrackGone(oldTrack, callId)
 *
 *   // Render the added track.
 *   const track = client.media.getTrackById(newTrackId)
 *   handleTrackAdded(track, callId)
 * })
 */
const CALL_TRACK_REPLACED = exports.CALL_TRACK_REPLACED = 'call:trackReplaced';

/**
 * Custom Parameters have been received for a Call.
 *
 * These are parameters set by the remote endpoint of the Call. Please refer to
 *    {@link call.CustomParameter CustomParameter} for more information.
 * @public
 * @memberof call
 * @requires link_call
 * @event call:customParameters
 * @param {Object} params
 * @param {string} params.callId The ID of the Call in which custom parameters were received.
 * @param {Array<call.CustomParameter>} params.customParameters The custom parameters received.
 */
const CUSTOM_PARAMETERS = exports.CUSTOM_PARAMETERS = 'call:customParameters';

/**
 * The list of available and supported codecs by the browser have been retrieved.
 *
 * This event is emitted as a result of the {@link call.getAvailableCodecs} API. Please refer to the API for more
 *  information.
 * @public
 * @memberof call
 * @event call:availableCodecs
 * @param {Object} params
 * @param {string} params.kind The kind of media the codecs are for.
 * @param {Array<Object>} params.codecs The list of codecs.
 * @example
 * client.on('call:availableCodecs', function (codecs) {
 *    // Iterate over each codec.
 *    codecs.forEach(codec => {
 *        // Handle the data by analysing its properties.
 *        // Some codec instances may have the same name, but different characteristics.
 *        // (i.e. for a given audio codec, the number of suported channels may differ (e.g. mono versus stereo))
 *        ...
 *    })
 * })
 */
const AVAILABLE_CODECS = exports.AVAILABLE_CODECS = 'call:availableCodecs';

/**
 * A Call's media connection state has been changed.
 *
 * This event is emitted as a result of changes to the media connection of the Call.
 * These state changes occur during call establishment, connection loss/re-establishment, call completion, etc.
 *
 * To check the media connection state of a call, retrieve the call's information using the  {@link call.getById} API,
 *  and check the `mediaConnectionState` property of the call.
 * See {@link call.mediaConnectionStates} for the list of possible values and descriptions.
 * @public
 * @memberof call
 * @event call:mediaConnectionChange
 * @param {Object} params
 * @param {string} params.callId The ID of the Call whose media connection state was changed.
 * @param {Object} params.previous The call's media connection properties before the operation changed it.
 * @param {string} params.previous.state The previous state of the media connection.
 */
const MEDIA_CONNECTION_CHANGE = exports.MEDIA_CONNECTION_CHANGE = 'call:mediaConnectionChange';

/**
 * A media restart operation for a Call has been attempted.
 *
 * This event is emitted as a result of the {@link call.restartMedia} API being called.
 *    See the description for {@link call.restartMedia} for information about its
 *    usage.
 *
 * The {@link call.event:call:mediaConnectionChange call:mediaConnectionChange} event
 *    will also be emitted alongside this event when the media restart operation is
 *    successful.
 * @public
 * @static
 * @memberof call
 * @event call:mediaRestart
 * @param {Object} params
 * @param {string} params.callId The ID of the Call that was acted on.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 * @example
 * client.on('call:mediaRestart', function (params) {
 *    if (params.error) {
 *      // The operation failed. May want to determine whether to re-attempt the
 *      //    operation (if the failure was simply a connectivity issue) or to
 *      //    consider the call's media irrecoverable.
 *      ...
 *    } else {
 *      // The call should be re-establishing media, with the call's
 *      //    `mediaConnectionState` being updated.
 *      const mediaState = client.call.getById(params.callId).mediaConnectionState
 *      ...
 *    }
 * })
 */
const MEDIA_RESTART = exports.MEDIA_RESTART = 'call:mediaRestart';

/***/ }),

/***/ 74066:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _index = _interopRequireDefault(__webpack_require__(25535));
var _reducers = _interopRequireDefault(__webpack_require__(1103));
// Import the components of the interface.

/**
 * This interface is for a call plugin.
 * @type {string}
 */
const name = 'call';

// Export the interface as a single object.
var _default = exports["default"] = {
  name,
  createAPI: _index.default,
  reducer: _reducers.default
};

/***/ }),

/***/ 47608:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(24923));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _union2 = _interopRequireDefault(__webpack_require__(38959));
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var actionTypes = _interopRequireWildcard(__webpack_require__(39100));
var webrtcActionTypes = _interopRequireWildcard(__webpack_require__(1371));
var _constants = __webpack_require__(60683);
var _constants2 = __webpack_require__(37409);
var _operations = _interopRequireDefault(__webpack_require__(87156));
var _reduxActions = __webpack_require__(68305);
const _excluded = ["transition", "localTracks", "remoteTracks"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Libraries.
/**
 * A no-op reducer.
 * Some reducers don't need to change state, but need to exist so their actions
 *    can be handled the same way as other actions (eg. wrapped to update local
 *    operation).
 * @method noop
 */
const noop = (state, action) => state;

/**
 * The reducer logic used for finish operations that end a call.
 * @method callEnder
 */
const callEnder = (state, action) => {
  const now = Date.now();
  return _objectSpread(_objectSpread({}, state), {}, {
    state: _constants.CALL_STATES.ENDED,
    // If there isn't a start time, then the call was never completed.
    //    Meaning it's duration was 0, so set the start time appropriately.
    startTime: state.startTime || now,
    endTime: now,
    remoteParticipant: _objectSpread(_objectSpread({}, state.remoteParticipant), action.payload.remoteParticipant),
    // Closing the peer doesn't trigger an oniceconnectionstatechange event
    // although it does change the iceConnectionState property to closed
    mediaConnectionState: 'closed',
    // TODO: Remove this later.
    isPending: undefined,
    localTracks: [],
    remoteTracks: []
  });
};

// Top-tier reducers: Handles the whole call state.
const reducers = {};
// Call-tier reducers: Handles only a specific call's state.
const callReducers = {};

/*
 * Top-tier reducers.
 * Receives the entire call substate as state.
 */

// Add the new call to state.
reducers[actionTypes.MAKE_CALL] = {
  next(state, action) {
    // TODO: Call model? (with defaults for call state)
    const newCall = {
      id: action.payload.id,
      remoteParticipant: {
        displayNumber: action.payload.participantAddress,
        displayName: action.payload.participantName
      },
      // Number of the remote participant when the call was established.
      to: action.payload.participantAddress,
      from: action.payload.from,
      mediaConstraints: action.payload.mediaConstraints,
      dscpControls: action.payload.dscpControls,
      // TODO: Proper constants.
      state: _constants.CALL_STATES.INITIATING,
      direction: _constants.CALL_DIRECTION.OUTGOING,
      // Hold status.
      localHold: false,
      remoteHold: false,
      isCaller: true,
      // Flag indicating whether the call is anonymous or not
      isAnonymous: action.payload.isAnonymous,
      // The account token used to make the anonymous call
      account: action.payload.account,
      localTracks: [],
      remoteTracks: [],
      currentOperations: []
    };
    return (0, _concat2.default)(state, newCall);
  }
};

// Add the new call to state.
reducers[actionTypes.CALL_INCOMING] = {
  next(state, action) {
    return (0, _concat2.default)(state, _objectSpread(_objectSpread({}, action.payload), {}, {
      // Constants for a new incoming call.
      direction: 'incoming',
      isCaller: false,
      // Initial call state.
      state: _constants.CALL_STATES.INITIATING,
      localHold: false,
      remoteHold: false,
      // No tracks available to render at first.
      localTracks: [],
      remoteTracks: [],
      currentOperations: []
    }));
  }
};

/*
 * Call-tier reducers.
 * Receive a single call's state as state.
 */

callReducers[actionTypes.SEND_RINGING_FEEDBACK_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      state: _constants.CALL_STATES.RINGING
    });
  }
};
callReducers[actionTypes.CALL_RINGING] = {
  next(state, action) {
    if (action.payload.remoteParticipant) {
      return _objectSpread(_objectSpread({}, state), {}, {
        state: _constants.CALL_STATES.RINGING,
        remoteParticipant: action.payload.remoteParticipant
      });
    } else {
      return _objectSpread(_objectSpread({}, state), {}, {
        state: _constants.CALL_STATES.RINGING
      });
    }
  }
};

// Handle Early Media the same as Ringing, just with a different state.
callReducers[actionTypes.SESSION_PROGRESS] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      state: _constants.CALL_STATES.EARLY_MEDIA,
      remoteParticipant: action.payload.remoteParticipant,
      remoteTracks: action.payload.remoteTracks
    });
  }
};

/*
 * Call-tier reducers.
 * Receive a single call's state as state.
 */

/*
 * Some reducers don't need to change state directly, but need to exist.
 * Call-specific reducers are wrapped to keep information about on-going
 *    operations up-to-date.
 */
callReducers[actionTypes.PENDING_OPERATION] = noop;
callReducers[actionTypes.REMOTE_SLOW_START] = noop;

/*
 * When answering, rejecting, or forwarding a call, update state to say that we
 *    are handling it.
 * This is needed for the WebRTC JS SDK because WebRTC Gateway will send a "call cancel" notification
 *    to _ALL_ of the user's subscriptions. The intention is to stop the call from
 *    ringing on other subscribed devices, and for the handling device to ignore
 *    the notification. This flag is used to know when to ignore the call cancel.
 */
const setHandling = (state, action) => {
  return _objectSpread(_objectSpread({}, state), {}, {
    isHandling: true
  });
};
callReducers[actionTypes.ANSWER_CALL] = setHandling;
callReducers[actionTypes.REJECT_CALL] = setHandling;
callReducers[actionTypes.FORWARD_CALL] = setHandling;
callReducers[actionTypes.CALL_CANCELLED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      state: _constants.CALL_STATES.CANCELLED
    });
  }
};

// End the call if the ignore operation was successful, otherwise ignore this request.
callReducers[actionTypes.IGNORE_CALL_FINISH] = {
  next: (state, action) => {
    // The call being ignored means it was not completed. Ensure there are times
    //    in state, and they reflect that the call was not completed.
    // TODO: Better call times.
    const now = Date.now();
    return _objectSpread(_objectSpread({}, state), {}, {
      startTime: now,
      endTime: now,
      state: _constants.CALL_STATES.ENDED
    });
  },
  throw: (state, action) => {
    return state;
  }
};

// End the call if the reject operation was successful, otherwise ignore this request.
callReducers[actionTypes.REJECT_CALL_FINISH] = {
  next: (state, action) => {
    // The call being rejected means it was not completed. Ensure there are
    //    times in state, and they reflect that the call was not completed.
    // TODO: Better call times.
    const now = Date.now();
    const newState = _objectSpread(_objectSpread({}, state), {}, {
      startTime: now,
      endTime: now,
      state: _constants.CALL_STATES.ENDED
    });

    // After the reject operation finishes, remove the flag that indicates we
    //    were handling the call.
    delete newState.isHandling;
    return newState;
  },
  throw: (state, action) => {
    return state;
  }
};
callReducers[actionTypes.SESSION_CREATED] = {
  next(state, action) {
    // When we get SESSION_CREATED action, the call object already exists as part of reducers state
    // so we only add the webrtc session id. This way we can find the call object
    // by searching for this associated webrtcSessionId.
    return _objectSpread(_objectSpread({}, state), {}, {
      webrtcSessionId: action.payload.webrtcSessionId
    });
  }
};
callReducers[actionTypes.PENDING_MAKE_CALL] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      state: _constants.CALL_STATES.INITIATED,
      wrtcsSessionId: action.payload.wrtcsSessionId,
      webrtcSessionId: action.payload.webrtcSessionId,
      bandwidth: action.payload.bandwidth,
      displayName: action.payload.displayName,
      customParameters: action.payload.customParameters,
      customBodies: action.payload.customBodies,
      localTracks: action.payload.localTracks
    });
  }
};

// Update the new call state based on the outcome.
callReducers[actionTypes.MAKE_CALL_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), action.payload);
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), action.payload);
  }
};

// Update the new call state based on the outcome.
callReducers[actionTypes.MAKE_ANONYMOUS_CALL_FINISH] = {
  next(state, action) {
    // Change nothing.
    return state;
  },
  // End the call.
  throw: callEnder
};

// Update the call state based on the outcome.
callReducers[actionTypes.ANSWER_CALL_FINISH] = {
  next(state, action) {
    // If the action has a Session ID, store it as the ID.
    // In some scenarios (slow start), the we only get an ID
    //    at the answer step.
    const webrtcId = action.payload.webrtcSessionId || state.webrtcSessionId;
    const newState = _objectSpread(_objectSpread({}, state), {}, {
      state: action.payload.state,
      mediaConstraints: action.payload.mediaConstraints,
      dscpControls: action.payload.dscpControls,
      webrtcSessionId: webrtcId,
      localHold: false,
      remoteHold: false,
      bandwidth: action.payload.bandwidth,
      customParameters: action.payload.customParameters,
      customBodies: action.payload.customBodies,
      localTracks: action.payload.localTracks,
      remoteTracks: action.payload.remoteTracks
    });

    // Add start time to the call's state here if the call is not a slowstart call
    if (action.meta && !action.meta.isSlowStart) {
      newState.startTime = action.payload.startTime;
    }

    // If answering the Call puts us in Connected state (ie. not slow-start),
    //    then we can remove this flag since we know not to cancel a connected call.
    if (newState.state === _constants.CALL_STATES.CONNECTED) {
      delete newState.isHandling;
    }
    return newState;
  },
  throw(state, action) {
    const newState = _objectSpread(_objectSpread({}, state), action.payload);

    // If we failed to answer the call, then we're not actually handling the
    //    call, so remove the flag.
    delete newState.isHandling;
    return newState;
  }
};
callReducers[actionTypes.CALL_ACCEPTED] = {
  next(state, action) {
    const newState = _objectSpread(_objectSpread({}, state), action.payload);

    // If we were answering, but it's the remote accept that puts us in the
    //    Connected state (ie. slow-start), then we can remove this flag since
    //    we know not to cancel a connected call.
    if (newState.isHandling && newState.state === _constants.CALL_STATES.CONNECTED) {
      delete newState.isHandling;
    }
    return newState;
  },
  throw(state, action) {
    const newState = action.payload.state || state.state;
    return _objectSpread(_objectSpread({}, state), {}, {
      state: newState
    });
  }
};

// Handles both success and failure actions the same way.
// Instead of an object with `next` & `throw` properties, pass in a function.
// https://redux-actions.js.org/api/handleaction#handleactiontype-reducer-defaultstate
callReducers[actionTypes.END_CALL_FINISH] = callEnder;
callReducers[actionTypes.UPDATE_CALL] = {
  next(state, action) {
    /*
     * Separate the action properties that should not be directly added to state.
     *  - transition: Data for an event; not call state.
     *  - localTracks: UPDATE_CALL should not affect local tracks.
     */
    const _action$payload = action.payload,
      {
        transition,
        localTracks,
        remoteTracks
      } = _action$payload,
      stateProperties = (0, _objectWithoutProperties2.default)(_action$payload, _excluded);
    const newState = _objectSpread(_objectSpread({}, state), stateProperties);
    if (remoteTracks && remoteTracks.length > 0) {
      newState.remoteTracks = remoteTracks;
    }

    /*
     * Edge-case workaround.
     * If the current operation is an on-going remote slow-start, then this remote
     *   update call action is intended to be the "finish" for it. The "update call"
     *   action being used here is an edge-case when the remote operation wasn't
     *   something we can identify.
     * This is being done manually because the "update call" action does not work
     *   with the SDK's "operation tracking" logic in the reducers.
     * See function `handleSlowUpdateResponse` in `/call/negotiation.js` for more info.
     * Reference: KJS-542, KJS-571
     */
    if (action.meta && action.meta.isRemote === true) {
      const remoteSlow = newState.currentOperations.find(op => {
        return !op.isLocal && op.type === _constants2.OPERATIONS.SLOW_START && op.status === _constants2.OP_STATUS.ONGOING;
      });
      if (remoteSlow) {
        // Remove the remoteSlow operation from call state.
        newState.currentOperations = newState.currentOperations.filter(op => op.id !== remoteSlow.id);
      }
    }
    return newState;
  }
};
callReducers[actionTypes.CALL_HOLD_FINISH] = {
  next(state, action) {
    // Filter out the affected tracks from the list of remote tracks.
    //    `trackLeft` _should_ be an empty array at this point...
    const removedTracks = action.payload.remoteTracks;
    const tracksLeft = state.remoteTracks.filter(trackId => !removedTracks.includes(trackId));

    // Filter out local tracks. It _should_ be an emptyy array at this point.
    // But only remove the tracks in the action since those are the tracks that
    //    will be in the "tracks removed" event.
    const {
      localTracks
    } = action.payload;
    const localTracksLeft = state.localTracks.filter(trackId => !localTracks.includes(trackId));
    return _objectSpread(_objectSpread({}, state), {}, {
      localHold: true,
      state: _constants.CALL_STATES.ON_HOLD,
      localTracks: localTracksLeft,
      remoteTracks: tracksLeft
    });
  }
};
callReducers[actionTypes.CALL_UNHOLD_FINISH] = {
  next(state, action) {
    // Add the affected tracks to the list of remote tracks.
    //    `state.remoteTracks` _should_ have been empty before this...
    const addedTracks = action.payload.remoteTracks;
    const tracks = (0, _union2.default)(state.remoteTracks, addedTracks);
    const {
      localTracks
    } = action.payload;
    const localAdded = (0, _union2.default)(state.localTracks, localTracks);
    const callState = state.remoteHold ? _constants.CALL_STATES.ON_HOLD : _constants.CALL_STATES.CONNECTED;
    return _objectSpread(_objectSpread({}, state), {}, {
      localHold: false,
      state: callState,
      localTracks: localAdded,
      remoteTracks: tracks
    });
  }
};
callReducers[actionTypes.SET_CUSTOM_PARAMETERS] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      customParameters: action.payload.customParameters,
      customBodies: action.payload.customBodies
    });
  }
};
callReducers[actionTypes.SEND_CUSTOM_PARAMETERS_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), action.payload);
  }
};
callReducers[actionTypes.CALL_REMOTE_HOLD_FINISH] = {
  next(state, action) {
    // Filter out the affected tracks from the list of remote tracks.
    //    `trackLeft` _should_ be an empty array at this point...
    const removedRemote = action.payload.remoteTracks;
    const tracksLeft = state.remoteTracks.filter(trackId => !removedRemote.includes(trackId));
    const removedLocal = action.payload.localTracks;
    const localLeft = state.localTracks.filter(trackId => !removedLocal.includes(trackId));
    return _objectSpread(_objectSpread({}, state), {}, {
      remoteHold: true,
      state: _constants.CALL_STATES.ON_HOLD,
      remoteParticipant: _objectSpread(_objectSpread({}, state.remoteParticipant), action.payload.remoteParticipant),
      localTracks: localLeft,
      remoteTracks: tracksLeft
    });
  }
};
callReducers[actionTypes.CALL_REMOTE_UNHOLD_FINISH] = {
  next(state, action) {
    // Replace the remoteTracks with the remoteTracks affected by the unhold.
    const tracks = action.payload.remoteTracks;
    const addedLocal = action.payload.localTracks;
    const localTracks = (0, _union2.default)(state.localTracks, addedLocal);
    const callState = state.localHold ? _constants.CALL_STATES.ON_HOLD : _constants.CALL_STATES.CONNECTED;
    const newCall = _objectSpread(_objectSpread({}, state), {}, {
      remoteHold: false,
      state: callState,
      remoteParticipant: _objectSpread(_objectSpread({}, state.remoteParticipant), action.payload.remoteParticipant),
      localTracks,
      remoteTracks: tracks
    });

    // If `hasMOH` was explicitly set to true, set it to false as part of unhold.
    // This will happen when there is an explicit "start MOH" negotiation but
    //    "stop MOH" is done as part of unhold.
    if (newCall.hasMOH === true) {
      newCall.hasMOH = false;
    }
    return newCall;
  }
};
callReducers[actionTypes.REMOTE_ADD_MEDIA_FINISH] = {
  next(state, action) {
    // Added the affected tracks to the list of remote tracks.
    const addedTracks = action.payload.remoteTracks;
    const tracks = (0, _union2.default)(state.remoteTracks, addedTracks);
    return _objectSpread(_objectSpread({}, state), {}, {
      remoteTracks: tracks
    });
  }
};
callReducers[actionTypes.REMOTE_REMOVE_MEDIA_FINISH] = {
  next(state, action) {
    // Filter out the affected tracks from the list of remote tracks.
    const removedTracks = action.payload.remoteTracks;
    const tracksLeft = state.remoteTracks.filter(trackId => !removedTracks.includes(trackId));
    return _objectSpread(_objectSpread({}, state), {}, {
      remoteTracks: tracksLeft
    });
  }
};
callReducers[actionTypes.REMOTE_START_MOH_FINISH] = {
  next(state, action) {
    // Added the affected tracks to the list of remote tracks.
    const addedTracks = action.payload.remoteTracks;
    const tracks = (0, _union2.default)(state.remoteTracks, addedTracks);
    return _objectSpread(_objectSpread({}, state), {}, {
      hasMOH: true,
      remoteTracks: tracks
    });
  }
};
callReducers[actionTypes.REMOTE_STOP_MOH_FINISH] = {
  next(state, action) {
    // Filter out the affected tracks from the list of remote tracks.
    const removedTracks = action.payload.remoteTracks;
    const tracksLeft = state.remoteTracks.filter(trackId => !removedTracks.includes(trackId));
    return _objectSpread(_objectSpread({}, state), {}, {
      hasMOH: false,
      remoteTracks: tracksLeft
    });
  }
};
callReducers[actionTypes.FORWARD_CALL_FINISH] = {
  next(state, action) {
    const newState = _objectSpread(_objectSpread({}, state), {}, {
      state: _constants.CALL_STATES.ENDED
    });

    // After the forward operation finishes, remove the flag that indicates we
    //    were handling the call.
    delete newState.isHandling;
    return newState;
  }
};
callReducers[actionTypes.DIRECT_TRANSFER_FINISH] = {
  next: callEnder
};
reducers[actionTypes.CONSULTATIVE_TRANSFER_FINISH] = {
  next: (state, action) => {
    // On success, end both calls used in the consultative transfer.
    return state.map(call => {
      if (call.id === action.payload.id || call.id === action.payload.otherCallId) {
        return callEnder(call, action);
      } else {
        return call;
      }
    });
  },
  throw: (state, action) => {
    // On failure, don't update state.
    return state;
  }
};
reducers[actionTypes.JOIN_START] = {
  next(state, action) {
    // Create the new joined
    const newCall = {
      id: action.payload.id,
      remoteParticipant: {
        displayNumber: action.payload.participantAddress,
        displayName: action.payload.participantName
      },
      // TODO: Have better names for `to` & `from`
      to: action.payload.participantAddress,
      from: action.payload.from,
      mediaConstraints: action.payload.mediaConstraints,
      state: _constants.CALL_STATES.INITIATING,
      direction: _constants.CALL_DIRECTION.OUTGOING,
      // Hold status.
      localHold: false,
      remoteHold: false,
      isCaller: true,
      isJoinedCall: true,
      customParameters: action.payload.customParameters,
      bandwidth: action.payload.bandwidth,
      dscpControls: action.payload.dscpControls,
      localTracks: [],
      remoteTracks: [],
      currentOperations: [{
        isLocal: true,
        id: action.payload.operationId,
        type: _constants2.OPERATIONS.JOIN,
        status: _constants2.OP_STATUS.ONGOING,
        eventId: action.payload.eventId
      }]
    };
    return (0, _concat2.default)(state, newCall);
  }
};
reducers[actionTypes.PENDING_JOIN] = {
  next(state, action) {
    return state.map(call => {
      if (call.id === action.payload.id) {
        // Update the joined call with the new payload
        return _objectSpread(_objectSpread({}, call), {}, {
          wrtcsSessionId: action.payload.wrtcsSessionId,
          webrtcSessionId: action.payload.webrtcSessionId,
          localTracks: action.payload.localTracks,
          state: action.payload.state
        });
      } else {
        return call;
      }
    });
  }
};
reducers[actionTypes.JOIN_FINISH] = {
  /*
   * JOIN_FINISH for a success scenario is triggered by receiving "sessionComplete" notifications
   * for the two initial calls that are joining (the action is dispatched with the initial calls' ids).
   * For this scenario, end these calls since the new joined call is made.
   */
  next: (state, action) => {
    return state.map(call => {
      if (call.id === action.payload.id || action.payload.usedCallIds && action.payload.usedCallIds.includes(call.id)) {
        return callEnder(call, action);
      } else {
        return call;
      }
    });
  },
  throw: (state, action) => {
    return state.map(call => {
      // If this action was dispatched with the new call id, end the call
      // How to determine if it was dispatched with new call id:
      //  - The ID in the action is not in the `usedCallIds` of the action's payload
      // If there is no `usedCallIds`, then likely this action is dispatched with the unjoined call ID's
      // due to receiving a "sessionFailed" notification from the backend
      if (call.id === action.payload.id && action.payload.usedCallIds && !action.payload.usedCallIds.includes(call.id)) {
        return callEnder(call, action);
      } else {
        return call;
      }
    });
  }
};
callReducers[actionTypes.ADD_MEDIA_FINISH] = {
  next(state, action) {
    const localAdded = action.payload.localTracks;
    return _objectSpread(_objectSpread({}, state), {}, {
      bandwidth: action.payload.bandwidth,
      localTracks: state.localTracks.concat(localAdded)
    });
  }
};
callReducers[actionTypes.REMOVE_MEDIA_FINISH] = {
  next(state, action) {
    const localRemoved = action.payload.localTracks;
    const tracksLeft = state.localTracks.filter(trackId => !localRemoved.includes(trackId));
    return _objectSpread(_objectSpread({}, state), {}, {
      bandwidth: action.payload.bandwidth,
      localTracks: tracksLeft
    });
  }
};
callReducers[actionTypes.REPLACE_TRACK_FINISH] = {
  next(state, action) {
    const oldTrackId = action.payload.oldTrackState.id;
    const newTrackId = action.payload.newTrackId;

    // Remove the old ID and add the new ID to localTracks state.
    const tracks = state.localTracks.filter(trackId => trackId !== oldTrackId).concat(newTrackId);
    return _objectSpread(_objectSpread({}, state), {}, {
      localTracks: tracks
    });
  }
};
callReducers[webrtcActionTypes.SESSION_ICE_CONNECTION_STATE_CHANGE] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      mediaConnectionState: action.payload.iceConnectionState
    });
  }
};
/*
 * Combine all of the call-tier reducers into a single reducer,
 *      each with a default state of empty object.
 */
const callReducer = (0, _reduxActions.handleActions)(callReducers, {});

// Actions routed to call-tier reducers.
const specificCallActions = (0, _reduxActions.combineActions)(actionTypes.PENDING_OPERATION, actionTypes.PENDING_MAKE_CALL, actionTypes.MAKE_CALL_FINISH, actionTypes.MAKE_ANONYMOUS_CALL_FINISH, actionTypes.ANSWER_CALL, actionTypes.ANSWER_CALL_FINISH, actionTypes.REJECT_CALL, actionTypes.REJECT_CALL_FINISH, actionTypes.CALL_ACCEPTED, actionTypes.SEND_RINGING_FEEDBACK_FINISH, actionTypes.CALL_RINGING, actionTypes.SESSION_PROGRESS, actionTypes.CALL_CANCELLED, actionTypes.IGNORE_CALL_FINISH, actionTypes.END_CALL_FINISH, actionTypes.CALL_HOLD_FINISH, actionTypes.CALL_UNHOLD_FINISH, actionTypes.SET_CUSTOM_PARAMETERS, actionTypes.SEND_CUSTOM_PARAMETERS_FINISH, actionTypes.CALL_REMOTE_HOLD_FINISH, actionTypes.CALL_REMOTE_UNHOLD_FINISH, actionTypes.REMOTE_ADD_MEDIA_FINISH, actionTypes.REMOTE_REMOVE_MEDIA_FINISH, actionTypes.ADD_MEDIA_FINISH, actionTypes.REMOVE_MEDIA_FINISH, actionTypes.UPDATE_CALL, actionTypes.FORWARD_CALL, actionTypes.FORWARD_CALL_FINISH, actionTypes.DIRECT_TRANSFER_FINISH, actionTypes.REPLACE_TRACK_FINISH, actionTypes.MEDIA_RESTART, actionTypes.MEDIA_RESTART_FINISH, actionTypes.REMOTE_SLOW_START, actionTypes.REMOTE_START_MOH_FINISH, actionTypes.REMOTE_STOP_MOH_FINISH, actionTypes.SESSION_CREATED, actionTypes.OPERATION_UPDATE);
const specificWebrtcSessionActions = (0, _reduxActions.combineActions)(webrtcActionTypes.SESSION_ICE_CONNECTION_STATE_CHANGE);

/*
 * Reducer to handle specific call actions.
 * Routes the actions to the call-tier reducers.
 */
reducers[specificCallActions] = (state, action) => {
  return state.map(function (call) {
    // Only update the call related to the action.
    if (call.id === action.payload.id) {
      // Update call state as per the reducer.
      let updatedCall = callReducer(call, action);

      // Update the operation portion of the call state.
      updatedCall = (0, _operations.default)(updatedCall, action);
      return updatedCall;
    } else {
      return call;
    }
  });
};

/**
 * Reducer to handle specific webrtc actions.
 * Routes the actions to the call-tier reducers.
 */
reducers[specificWebrtcSessionActions] = (state, action) => {
  return state.map(function (call) {
    if (call.webrtcSessionId === action.payload.id) {
      return callReducer(call, action);
    } else {
      return call;
    }
  });
};

/*
 * Combine all of top-tier reducers into a single reducer,
 *      each with a default state of an empty array.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, []);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 1103:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
var _call = _interopRequireDefault(__webpack_require__(47608));
var _turn = _interopRequireDefault(__webpack_require__(46404));
/**
 * Combine subreducers into a single call reducer.
 */
function _default() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;
  return {
    calls: (0, _call.default)(state.calls, action),
    turn: (0, _turn.default)(state.turn, action)
  };
}

/***/ }),

/***/ 87156:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isNil2 = _interopRequireDefault(__webpack_require__(91543));
var _contains2 = _interopRequireDefault(__webpack_require__(54665));
var actionTypes = _interopRequireWildcard(__webpack_require__(39100));
var _constants = __webpack_require__(37409);
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Libraries.
const reducers = {};

/**
 * `call.currentOperations` property reducer.
 * @param {Array<Operation>} state
 * @param {Object} action
 * @return {Array<Operation>} The updated list of on-going operations for this call.
 */
function currentOperations() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let action = arguments.length > 1 ? arguments[1] : undefined;
  const {
    transition,
    operationId
  } = action.payload;
  if (transition === _constants.OP_TRANSITIONS.START) {
    const operation = {
      type: action.payload.operation,
      id: operationId,
      status: _constants.OP_STATUS.ONGOING,
      eventId: action.payload.eventId,
      isLocal: action.payload.isLocal,
      isBlocking: action.payload.isBlocking
    };
    const newState = state.concat(operation);
    return newState;
  } else if (transition === _constants.OP_TRANSITIONS.UPDATE) {
    return state.map(op => {
      if (op.id === operationId) {
        return _objectSpread(_objectSpread({}, op), {}, {
          status: _constants.OP_STATUS.PENDING,
          operationData: action.payload.operationData
        });
      } else {
        return op;
      }
    });
  } else if (transition === _constants.OP_TRANSITIONS.FINISH) {
    // Remove the operation from state.
    return state.filter(op => op.id !== operationId);
  } else {
    return state;
  }
}

/*
 * TODO: The `call.localOp` and `call.remoteOp` properties should be deprecated
 *    and replaced in any documentation with the `call.currentOperations`
 *    property.
 */
reducers[actionTypes.OPERATION_UPDATE] = {
  next(state, action) {
    // Hook into OPERATION_UPDATE reducer for `call.currentOperations` updates.
    state.currentOperations = currentOperations(state.currentOperations, action);
    const stateProp = action.payload.isLocal ? 'localOp' : 'remoteOp';
    if (action.payload.transition === _constants.OP_TRANSITIONS.START) {
      // A new operation is starting...
      if (state[stateProp]) {
        // ...but there is still an on-going op.
        // The new operation should be rejected, so state should not change.
        return state;
      } else {
        // ...and there is no current operation on-going.
        // Set the new operation in state.
        return _objectSpread(_objectSpread({}, state), {}, {
          [stateProp]: {
            operation: action.payload.operation,
            status: _constants.OP_STATUS.ONGOING,
            eventId: action.payload.eventId
          }
        });
      }
    } else if (action.payload.transition === _constants.OP_TRANSITIONS.UPDATE) {
      // Existing operation is now waiting on remote side.
      return _objectSpread(_objectSpread({}, state), {}, {
        [stateProp]: _objectSpread(_objectSpread({}, state[stateProp]), {}, {
          status: _constants.OP_STATUS.PENDING,
          operationData: action.payload.operationData
        })
      });
    } else if (action.payload.transition === _constants.OP_TRANSITIONS.FINISH) {
      // Existing operation is finishing.
      const isRemote = !action.payload.isLocal;
      const unsetOperation = _objectSpread(_objectSpread({}, state), {}, {
        [stateProp]: undefined
      });
      const currentOp = state[stateProp] && state[stateProp].operation;
      if ((0, _isNil2.default)(currentOp)) {
        // Should be considered an error scenario.
        return state;
      }

      // An on-going operation is finishing...
      if (currentOp === action.payload.operation) {
        // The operation matches the current on-going operation.
        //    Unset it in state.
        return unsetOperation;
      } else if (isRemote && currentOp === _constants.OPERATIONS.SLOW_START) {
        // Special case: If the current operation was a remote slow start,
        //    then the 'finish' won't match. Allow any 'finish' to unset it.
        return unsetOperation;
      } else if ((0, _contains2.default)(currentOp)(_constants.NO_FINISH_OPS)) {
        // Special case: If the current operation is one that doesn't have a finish
        //    operation, allow any 'finish' to unset it.
        return unsetOperation;
      } else if (action.payload.operation === _constants.OPERATIONS.END) {
        // Special-case: If the operation is an "end call" (but the on-going operation
        //    doesn't match), then unset the current operation.
        return unsetOperation;
      } else {
        // ...but it wasn't tracked in state?
        // Should be considered an error scenario.
        return state;
      }
    }
    return state;
  }
};
reducers[actionTypes.UPDATE_CALL] = {
  next(state, action) {
    // Special-case for slow-start...
    // See https://github.com/RibbonCommunications/webrtc.js/pull/3454/files#diff-0aef3ee33c1007fada1c90a5da252ae4046de14d63fbea8d87faa6a69fbd1cd6R380
    return state;
  }
};

/*
 * Combine all of top-tier reducers into a single reducer,
 *      each with a default state of undefined on-going operations.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 46404:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(39100));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Libraries.
const reducers = {};

// Replace any previous information with the new information.
reducers[actionTypes.TURN_CHANGED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), action.payload.credentials);
  }
};

/*
 * Combine all of top-tier reducers into a single reducer.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 11430:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getActiveCalls = getActiveCalls;
exports.getCallById = getCallById;
exports.getCallByWebrtcSessionId = getCallByWebrtcSessionId;
exports.getCallByWrtcsSessionId = getCallByWrtcsSessionId;
exports.getCalls = getCalls;
exports.getOptions = getOptions;
exports.getTurnInfo = getTurnInfo;
var _constants = __webpack_require__(60683);
// Call plugin.

/**
 * Call selectors.
 * Handles retrieving data from the `state.call.calls` substate.
 */

/**
 * Get the list of all calls this session.
 * @method getCalls
 * @param  {Object} state Redux state.
 * @return {Array} A list of all call objects.
 */
function getCalls(state) {
  // TODO: cloneDeep?
  return state.call.calls;
}

/**
 * Retrieves the list of all on-going calls.
 * @method getActiveCalls
 * @param {Object} state Redux state.
 * @return {Array} A list of call objects.
 */
function getActiveCalls(state) {
  const endedStates = [_constants.CALL_STATES.ENDED, _constants.CALL_STATES.CANCELLED];
  return getCalls(state).filter(call => !endedStates.includes(call.state));
}

/**
 * Get the call object of a specific call.
 * @method getCallById
 * @param  {Object} state Redux state.
 * @param  {string} callId The call to retrieve.
 * @return {Object} A call object.
 */
function getCallById(state, callId) {
  return getCalls(state).find(call => call.id === callId);
}

/**
 * Get the call object with a specific wrtcsSessionId (backend ID).
 * @method getCallByWrtcsSessionId
 * @param  {Object} state Redux state.
 * @param  {string} wrtcsSessionId The call to retrieve.
 * @return {Object} A call object.
 */
function getCallByWrtcsSessionId(state, wrtcsSessionId) {
  return getCalls(state).find(call => call.wrtcsSessionId === wrtcsSessionId);
}

/**
 * Get the call object with a specific webrtcSessionId.
 * @method getCallByWebrtcSessionId
 * @param  {Object} state Redux state.
 * @param  {string} webrtcSessionId The call to retrieve.
 * @return {Object} A call object.
 */
function getCallByWebrtcSessionId(state, webrtcSessionId) {
  return getCalls(state).find(call => call.webrtcSessionId === webrtcSessionId);
}

/**
 * Retrieve the call plugin's options.
 * @method getOptions
 * @param  {Object} state Redux state.
 * @return {Object}
 */
function getOptions(state) {
  return state.config.call;
}

/**
 * Retrieve TURN server/credential information.
 */
function getTurnInfo(state) {
  return state.call.turn;
}

/***/ }),

/***/ 27842:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.formatMediaConstraints = formatMediaConstraints;
exports.validateDetachedMedia = validateDetachedMedia;
exports.validateMediaConstraints = validateMediaConstraints;
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Lodash FP

/**
 * Helper function for Call APIs.
 * Reduces media constraints provided to an API to a consistent format.
 *
 * Converts the kind properties from "SDK MediaConstraints" object to an WebRTC-spec
 *    MediaConstraints properties.
 * @method formatMediaConstraints
 * @param {Object} media
 * @param {booleant} media.audio
 * @param {Object} media.audioOptions
 * @param {boolean} media.video
 * @param {Object} media.videoOptions
 * @param {boolean} media.screen
 * @param {Object} media.screenOptions
 * @param {Array} media.medias
 * @returns {Object}
 */
function formatMediaConstraints(media) {
  const mediaConstraints = {
    audio: media.audio && !(0, _isEmpty2.default)(media.audioOptions) ? media.audioOptions : media.audio,
    video: media.video && !(0, _isEmpty2.default)(media.videoOptions) ? media.videoOptions : media.video,
    screen: media.screen && !(0, _isEmpty2.default)(media.screenOptions) ? media.screenOptions : media.screen,
    medias: media.medias
  };
  return mediaConstraints;
}

/**
 * Helper function to validate mediaConstraints for Call APIs.
 *
 * This function will validate the following scenarios:
 *   1. Duplicate media types are passed as detached media and requested media.
 *   2. Invalid type is passed as `medias`. Should be an array of media objects.
 *   3. Any tracks in the `medias` are not detached.
 *   4. Any tracks in the `medias` are not local.
 *   5. Any track is already in use by a session (including the one in context).
 *
 * @method validateMediaConstraints
 * @param {Object} media The mediaConstraints being validated.
 * @throws {BasicError} Throws an error if mediaConstraints.medias is not an array.
 * @throws {BasicError} Throws an error if mediaConstraints.medias Objects are missing `media` and `type` properties.
 * @throws {BasicError} Throws an error if mediaConstraints contains duplicate media kinds.
 */
function validateMediaConstraints(media) {
  // If no media objects are passed in, no need to validate.
  if (!media.medias) {
    return;
  }
  // Validate correct media objects
  if (!Array.isArray(media.medias)) {
    throw new _errors.default({
      message: `Incorrect type for mediaConstraints.medias. Must be an array of media objects.`,
      code: _errors.callCodes.GENERIC_ERROR
    });
  }
  media.medias.forEach(media => {
    if (!media.type || !media.media) {
      throw new _errors.default({
        message: `Incorrect media objects.`,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }
  });

  // Validate duplicate media kinds
  if (media.medias) {
    const requestedMedia = [];
    if (media.audio) {
      requestedMedia.push('audio');
    }
    if (media.video) {
      requestedMedia.push('video');
    }
    if (media.screen) {
      requestedMedia.push('screen');
    }

    // Get tracks for each media and check if kind equals any of the requested media and throw if it does.
    const trackKinds = [];
    media.medias.forEach(media => {
      trackKinds.push(media.type);
    });
    const duplicateKinds = requestedMedia.filter(mediaKind => trackKinds.includes(mediaKind));
    // Throw an error if requested media kind has also been passed in as detached media
    if (duplicateKinds.length > 0) {
      throw new _errors.default({
        message: `Both detached media tracks and media constraints provided for ${duplicateKinds}`,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }
  }
}

/**
 * Helper function to validate detached media for Call APIs.
 * @method validateDetachedMedia
 * @param {Object} medias The detached media being validated.
 * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not detached.
 * @throws {BasicError} Throws an error if any tracks in mediaConstraints.medias are not local.
 */
async function validateDetachedMedia(medias) {
  // Validate that all tracks are detached, local and not in use by an existing session.
  for (const media of medias) {
    if (!media.media.detached) {
      throw new _errors.default({
        message: `Media: ${media.media.id} is not detached.`,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }
    if (!media.media.local) {
      throw new _errors.default({
        message: `Media: ${media.media.id} is not local. Only local media may be used when adding media to a call.`,
        code: _errors.callCodes.GENERIC_ERROR
      });
    }
  }
}

/***/ }),

/***/ 56498:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = linkCallFactory;
var _interface = _interopRequireDefault(__webpack_require__(74066));
var _middleware = _interopRequireDefault(__webpack_require__(56337));
var _requests = _interopRequireDefault(__webpack_require__(84410));
var _configs = _interopRequireWildcard(__webpack_require__(87878));
var operationFactories = _interopRequireWildcard(__webpack_require__(81298));
var _callstack = _interopRequireDefault(__webpack_require__(25974));
var _actions = __webpack_require__(43424);
var _kandyWebrtc = __webpack_require__(15203);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Other plugins.

// Libraries.

/**
 * Configuration options for the call feature.
 * @public
 * @name config.call
 * @memberof config
 * @instance
 * @param {Object} call The call configuration object.
 * @param {call.RTCPeerConnectionConfig} [call.defaultPeerConfig] A key-value dictionary that corresponds
 *    to the available RTCPeerConfiguration which is normally passed when creating an RTCPeerConnection.
 *    See {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#parameters RTCPeerConnection's configuration parameters} for more information.
 *    This is the recommended way of setting ICE servers and other RTCPeerConnection-related configuration.
 * @param {number} [call.iceCollectionIdealTimeout=1000] The amount of time to wait for an ideal candidate in milliseconds.
 *    The default is 1000ms. An ideal list of candidates is a complete list of candidates considering the RTCPeerConnection configuration.
 *    Note that this values will not be considered if a custom function is passed through the `iceCollectionCheckFunction`, and
 *    any timeouts must be handled by the custom function.
 * @param {number} [call.iceCollectionMaxTimeout=3000] The maximum amount of time to wait for ICE collection in milliseconds.
 *    The default is 3000ms. After this time has been reached, the call will proceed with the currently gathered candidates.
 *    Note that this values will not be considered if a custom function is passed through the `iceCollectionCheckFunction`, and
 *    any timeouts must be handled by the custom function.
 * @param {Function} [call.iceCollectionCheckFunction] Override the default IceCollectionCheckFunction to manually decide when
 *    to proceed with operations, error out, or wait for the appropriate states and candidates. The function will receive an object containing
 *    the ice collection info. See {@link call.IceCollectionInfo IceCollectionInfo} for more details. The function must return
 *    a results object with details on how to proceed with the ICE collection check or operatiaon. See {@link call.IceCollectionCheckResult IceCollectionResult}
 *    object for details on the format of the return object. See {@link call.IceCollectionCheckFunction IceCollectionCheckFunction} for
 *    more information on the form of the function, as well as information about the default IceCollectionCheckFunction that is used if nothing is provided.
 * @param {boolean} [call.serverTurnCredentials=true] Whether server-provided TURN credentials should be used.
 * @param {Array<call.SdpHandlerFunction>} [call.sdpHandlers] List of SDP handler functions to modify SDP. Advanced usage.
 * @param {boolean} [call.earlyMedia=false] Whether early media should be supported for calls. Not supported on Firefox.
 * @param {boolean} [call.resyncOnConnect=false] Whether the SDK should re-sync all call states after connecting (requires WebRTC Gateway 4.7.1+).
 * @param {boolean} [call.mediaBrokerOnly=false] Whether all Calls will be anchored on the MediaBroker instead of being peer-to-peer. Set to true if the backend is configured for broker only mode.
 * @param {boolean} [call.removeBundling=false] Whether to remove a=group attributes to stop media bundling from incoming and outgoing SDP messages.
 * @param {string} [call.ringingFeedbackMode='auto'] The mode for sending ringing feedback to the Caller ('auto', 'manual').
 *    By default, feedback will be automatically sent when a call has been received. In 'manual' mode, the application
 *    must initiate the feedback being sent. See the `call.sendRingingFeedback` API for more info.
 * @param {number} [call.callAuditTimer=25000] Time interval, in milliseconds between call audits.
 * @param {number} [call.mediaConnectionRetryDelay=3000] Delay, in milliseconds for the passive side of a call to wait before trying a media reconnection.
 * @param {boolean} [call.normalizeDestination=true] Specifies whether or not SIP address normalization will be applied.
 */

/**
 * @private
 * @name config.call
 * @memberof config
 * @instance
 * @param {string} [trickleIceMode='NONE'] The Trickle ICE method to use for calls. Currently, no mode is supported.
 * @param {boolean} [skipIceCollection=true] Whether to skip the ICE collection process and proceed with negotiation, or not.
 */

/**
 * Call plugin factory for Link platform.
 * @method linkCallFactory
 */
function linkCallFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  /*
   * Init function to setup the Call plugin after the all plugins have been
   *    created and redux set-up.
   * Handles configuration provided by the application and puts it into state.
   */
  function initPlugin(container) {
    const {
      context,
      logManager
    } = container;
    const log = logManager.getLogger('CALL');
    const {
      mediaDevices,
      peerConnection
    } = (0, _kandyWebrtc.getWebRTCSupportCapabilities)();
    if (!mediaDevices || !peerConnection) {
      log.warn('Calls are not supported on this platform due to lack of WebRTC support. Call APIs will not be available.');
    }

    // Parse the options provided by the application and make any adjustments needed
    //    (for backwards-compatibility reasons).
    options = (0, _configs.default)(options);
    // Then merge the defaults into them and validate the values.
    options = (0, _configs.mergeDefaults)(options);
    const browserDetails = (0, _kandyWebrtc.getBrowserDetails)();

    // Change sdpSemantics to always be for Unified-Plan
    if (options.defaultPeerConfig.sdpSemantics !== 'unified-plan') {
      log.warn('Only `unified-plan` is supported as sdpSemantics. Switching to `unified-plan`.');
      options.defaultPeerConfig.sdpSemantics = 'unified-plan';
    }

    /*
     * Firefox does not support pranswer, so it can't receive early media.
     * Ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1004510
     */
    if (browserDetails.browser === 'firefox' && options.earlyMedia === true) {
      log.warn('Firefox does not support pranswer for Early Media. Disabling early media configuration.');
      options.earlyMedia = false;
    }

    /*
     * Chrome 110+ will enforce STUN/TURN URL according to RFC Spec.
     * Ref: https://groups.google.com/g/discuss-webrtc/c/L0qDWipd7VE?pli=1
     */
    if (browserDetails.browser === 'chrome' && browserDetails.version >= 110 && options.defaultPeerConfig.iceServers) {
      options.defaultPeerConfig.iceServers.forEach(iceServer => {
        if (Array.isArray(iceServer.urls)) {
          iceServer.urls = iceServer.urls.map(_configs.fixIceServerUrls);
        } else if (iceServer.urls) {
          iceServer.urls = (0, _configs.fixIceServerUrls)(iceServer.urls);
        }
      });
    }
    context.dispatch((0, _actions.update)(options, _interface.default.name));

    // `call.removeH264Codecs` was removed in v6.0, in faviour of createCodecRemover.
    if (typeof options.removeH264Codecs !== 'undefined') {
      log.warn('The `call.removeH264Codecs` configuration has been removed. Please see the documentation for the `sdpHandlers` configuration for how to implement similar behaviour.');
    }

    // Update the SDP handlers in the config (user provided + some of our own)
    context.dispatch((0, _actions.setSdpHandlers)(options.sdpHandlers));
  }

  // Initialize the Callstack in the bottle's scope.
  (0, _callstack.default)(bottle);
  // Initialize the Link-specific operations in the bottle's scope.
  for (const name in operationFactories) {
    operationFactories[name](bottle);
  }

  // Register the component factory functions to the bottle.
  bottle.factory('CallAPI', _interface.default.createAPI);
  bottle.factory('CallRequests', _requests.default);
  bottle.defer(initPlugin);
  return {
    name: _interface.default.name,
    reducer: _interface.default.reducer,
    middleware: _middleware.default,
    capabilities: ['call', 'link_call', 'link_user_id', 'link_pstn']
  };
}

/***/ }),

/***/ 84236:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _actionTypes = __webpack_require__(9148);
var _constants = __webpack_require__(60683);
var _selectors = __webpack_require__(11430);
function createMiddleware(context) {
  const {
    CallManager,
    logManager
  } = context.container;
  async function callCancelledNotification(action) {
    if (!shouldHandlePattern(action)) {
      return;
    }
    const message = action.payload.notificationMessage;
    const {
      sessionData: wrtcsSessionId
    } = message.sessionParams;
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', targetCall ? targetCall.id : undefined);
    if (!targetCall) {
      log.info('A remote operation is being requested on a call that no longer exists.');
    }

    /*
     * The backend sends a "callCancel" notification immediately after answering
     *    (and rejecting, forwarding) a call. The backend's intention for this
     *    is to notify other user subscriptions (eg. same user on another
     *    device) that the call has been handled, so the call is "cancelled" for
     *    this subscription. But they send it as a broadcast notification to all
     *    subscriptions, even the one that handled the call.
     *
     * We need to ignore this notification for the subscription that handled the
     *    call, but process it for any other subscriptions. We do this in two
     *    ways:
     *      1) If the Call state indicates we are obviously the device that
     *        answered it (eg. the Call is connected), ignore it.
     *      2) If a flag is set on the Call that indicates we are in-progress
     *        to handle it, ignore it.
     *    This handles receiving the callCancel before and after the in-progress
     *        operation has finished for both regular and slow-start calls.
     */
    if (targetCall && targetCall.state !== _constants.CALL_STATES.RINGING && targetCall.state !== _constants.CALL_STATES.EARLY_MEDIA && targetCall.state !== _constants.CALL_STATES.INITIATED) {
      // Don't process the notification if the call isn't "ringing".
      log.info(`Received call cancel notification when state is ${targetCall.state}. Ignoring.`);
      return;
    }
    if (targetCall && targetCall.isHandling) {
      // Don't process the notification if we are currently handling the call.
      log.info('Received call cancel notification while handling is in-progress. Ignoring.');
      return;
    }

    // Handle it.
    await CallManager.callCancelled(wrtcsSessionId);
  }
  return callCancelledNotification;
}

// The `incomingCallPattern` function.
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'callCancel';
}

/***/ }),

/***/ 94006:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _utils = __webpack_require__(32100);
var _actionTypes = __webpack_require__(9148);
var _selectors2 = __webpack_require__(46942);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins
function createMiddleware(context) {
  const {
    CallManager,
    logManager
  } = context.container;
  async function callStatusUpdateEndedNotification(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }
    const message = action.payload.notificationMessage;
    const {
      sessionData: wrtcsSessionId,
      reasonText,
      statusCode
    } = message.sessionParams;
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', targetCall ? targetCall.id : undefined);
    if (!targetCall) {
      log.info('A remote operation is being requested on a call that no longer exists.');
      return;
    }
    const domain = (0, _selectors2.getDomain)(context.getState());
    const remoteInfo = (0, _utils.getRemoteParticipant)(targetCall, message, domain);
    const params = _objectSpread({
      reasonText,
      statusCode
    }, remoteInfo);
    await CallManager.callStatusUpdateEnded(wrtcsSessionId, params);
  }
  return callStatusUpdateEndedNotification;
}
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'callEnd';
}

/***/ }),

/***/ 83826:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _utils = __webpack_require__(32100);
var _actionTypes = __webpack_require__(9148);
var _selectors2 = __webpack_require__(46942);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins
function createMiddleware(context) {
  const {
    CallManager,
    logManager
  } = context.container;
  async function callStatusUpdateFailedNotification(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }
    const message = action.payload.notificationMessage;
    const {
      sessionData: wrtcsSessionId,
      reasonText,
      statusCode
    } = message.sessionParams;
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', targetCall ? targetCall.id : undefined);
    if (!targetCall) {
      log.info('A remote operation is being requested on a call that no longer exists.');
    }
    const domain = (0, _selectors2.getDomain)(context.getState());
    const remoteInfo = (0, _utils.getRemoteParticipant)(targetCall, message, domain);
    const params = _objectSpread({
      reasonText,
      statusCode
    }, remoteInfo);
    await CallManager.callStatusUpdateFailed(wrtcsSessionId, params);
  }
  return callStatusUpdateFailedNotification;
}
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'sessionFail';
}

/***/ }),

/***/ 74717:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _utils = __webpack_require__(32100);
var _actionTypes = __webpack_require__(9148);
var _selectors2 = __webpack_require__(46942);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins
function createMiddleware(context) {
  const {
    CallManager,
    logManager
  } = context.container;
  async function callStatusUpdateRingingNotification(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }
    const message = action.payload.notificationMessage;
    const {
      sessionData: wrtcsSessionId
    } = message.sessionParams;
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', targetCall ? targetCall.id : undefined);
    if (!targetCall) {
      log.info('A remote operation is being requested on a call that no longer exists.');
    }
    const domain = (0, _selectors2.getDomain)(context.getState());
    const remoteInfo = (0, _utils.getRemoteParticipant)(targetCall, message, domain);
    const params = _objectSpread(_objectSpread({}, remoteInfo), {}, {
      customParameters: message.customParameters
    });
    CallManager.callStatusUpdateRinging(wrtcsSessionId, params);
  }
  return callStatusUpdateRingingNotification;
}
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'ringing';
}

/***/ }),

/***/ 72856:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _actionTypes = __webpack_require__(9148);
// Other plugins

function createMiddleware(context) {
  const CallManager = context.container.CallManager;
  async function incomingCallNotification(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }
    const message = action.payload.notificationMessage;
    const notificationParams = message.callNotificationParams || {};
    // ID that the server uses to identify the session.
    const wrtcsSessionId = message.sessionParams.sessionData;

    // Massage data into a generic format, instead of Link-specific.
    const params = {
      // The remote SDP offer included with the notification (if any).
      sdp: message.sessionParams.sdp,
      // Remote participant information.
      remoteName: notificationParams.callerName,
      remoteNumber: notificationParams.callerDisplayNumber,
      // Where the call was sent
      calleeNumber: notificationParams.calleeDisplayNumber,
      // Custom Parameters
      customParameters: message.customParameters
    };

    // Pass the incoming call parameters to the Callstack for handling.
    await CallManager.establishOffer(wrtcsSessionId, params, action.meta.channel);
  }
  return incomingCallNotification;
}

// The `incomingCallPattern` function.
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'call';
}

/***/ }),

/***/ 56337:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
var _callCancelledNotification = _interopRequireDefault(__webpack_require__(84236));
var _callStatusUpdateEndedNotification = _interopRequireDefault(__webpack_require__(94006));
var _callStatusUpdateFailedNotification = _interopRequireDefault(__webpack_require__(83826));
var _callStatusUpdateRingingNotification = _interopRequireDefault(__webpack_require__(74717));
var _sessionStatusUpdateEndedNotification = _interopRequireDefault(__webpack_require__(46813));
var _incomingCallNotification = _interopRequireDefault(__webpack_require__(72856));
var _remoteAnswerNotification = _interopRequireDefault(__webpack_require__(12387));
var _remoteOfferNotification = _interopRequireDefault(__webpack_require__(14742));
var _resyncSessionStatuses = _interopRequireDefault(__webpack_require__(85296));
var _sessionProgressNotification = _interopRequireDefault(__webpack_require__(1189));
var _setTurnCredentials = _interopRequireDefault(__webpack_require__(72391));
var _middleware = _interopRequireDefault(__webpack_require__(56390));
// Link-specific middlewares.

// Callstack middlewares.

const factories = [_callCancelledNotification.default, _callStatusUpdateEndedNotification.default, _callStatusUpdateFailedNotification.default, _callStatusUpdateRingingNotification.default, _sessionStatusUpdateEndedNotification.default, _incomingCallNotification.default, _remoteAnswerNotification.default, _remoteOfferNotification.default, _resyncSessionStatuses.default, _sessionProgressNotification.default, _setTurnCredentials.default, ..._middleware.default];

/**
 * Link Call middleware factory function.
 * @method createMiddleware
 * @param  {Object} context The factory context.
 * @return {Function} A redux middleware.
 */
function createMiddleware(context) {
  // Create the middlewares scoped with the `context` object.
  const middlewares = factories.map(factory => factory(context));

  /*
   * Redux middleware: Watch for specific actions and trigger operations
   *    when we see them.
   */
  return next => action => {
    // TODO: Do we care about return values? ...no?
    middlewares.forEach(middleware => middleware(action));
    return next(action);
  };
}

/***/ }),

/***/ 12387:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _actionTypes = __webpack_require__(9148);
var _selectors = __webpack_require__(11430);
var _utils = __webpack_require__(32100);
var _selectors2 = __webpack_require__(46942);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Other plugins
function createMiddleware(context) {
  const CallManager = context.container.CallManager;
  const logManager = context.container.logManager;
  const log = logManager.getLogger('CALL');

  /**
   * Handle receiving remote answer notifications in a Link format.
   * Uses properties in the notification to create a standardized data object to
   *    be used by the Callstack.
   * @method remoteAnswerNotification
   * @param {Object} action  An incoming action which must follow a certain pattern to be accepted by this middleware.
   */
  async function remoteAnswerNotification(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }

    // Handle it.
    const message = action.payload.notificationMessage;
    const {
      sessionData: wrtcsSessionId
    } = message.sessionParams;
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    if (!targetCall) {
      log.info('A remote operation is being requested on a call that no longer exists.');
      return;
    }
    const domain = (0, _selectors2.getDomain)(context.getState());
    const remoteInfo = (0, _utils.getRemoteParticipant)(targetCall, message, domain);

    // Pull-out the parameters into a standard format for the Callstack.
    const params = _objectSpread(_objectSpread({
      wrtcsSessionId: message.sessionParams.sessionData,
      sdp: message.sessionParams.sdp,
      retryAfter: message.sessionParams.retryAfter,
      message: message.sessionParams.reasonText,
      code: message.statusCode
    }, remoteInfo), {}, {
      customParameters: message.customParameters
    });
    // Pass the call parameters to the Callstack for handling.
    await CallManager.negotiationAnswer(wrtcsSessionId, params);
  }
  return remoteAnswerNotification;
}

// The `receiveAnswerPattern` function.
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'respondCallUpdate';
}

/***/ }),

/***/ 14742:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _actionTypes = __webpack_require__(9148);
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(60683);
var _utils = __webpack_require__(32100);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function createMiddleware(context) {
  const {
    CallManager,
    logManager
  } = context.container;
  const log = logManager.getLogger('CALL');

  /**
   * Handle receiving remote offer notifications in a Link format.
   * Uses properties in the notification to create a standardized data object to
   *    be used by the Callstack.
   * @method receiveRemoteOffer
   * @param {Object} action A flux standard action
   */
  async function remoteOfferNotification(action) {
    if (!shouldHandlePattern(action)) {
      return;
    }
    const message = action.payload.notificationMessage;
    const {
      sessionData: wrtcsSessionId
    } = message.sessionParams;
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    if (!targetCall) {
      log.info('A remote operation is being requested on a call that no longer exists.');
      return;
    }

    // If the call isn't in the correct state to handle this remote operation, ignore it.
    if (![_constants.CALL_STATES.CONNECTED, _constants.CALL_STATES.ON_HOLD].includes(targetCall.state)) {
      log.debug(`Call not in correct state to perform a midcall operation: ${targetCall.state}.`);
      return;
    }
    const remoteInfo = (0, _utils.getRemoteParticipant)(targetCall, message);

    // Pull-out the parameters into a standard format for the Callstack.
    const params = _objectSpread(_objectSpread({
      wrtcsSessionId: message.sessionParams.sessionData,
      sdp: message.sessionParams.sdp
    }, remoteInfo), {}, {
      customParameters: message.customParameters
    });
    try {
      await CallManager.negotiationOffer(wrtcsSessionId, params);
    } catch (error) {
      log.warn(`Cannot handle remote operation. Error: ${error.message}`);
    }
  }
  return remoteOfferNotification;
}

// The `incomingCallPattern` function.
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && Boolean(action.payload.notificationMessage.eventType === 'startCallUpdate');
}

/***/ }),

/***/ 85296:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _actionTypes = __webpack_require__(39100);
// Call plugin

function createMiddleware(context) {
  const {
    CallManager
  } = context.container;
  async function resyncSessionStatuses(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }

    // Handle it.
    const callId = action.payload.id;
    await CallManager.resyncCallState(callId);
  }
  return resyncSessionStatuses;
}

// The `incomingCallPattern` function.
function shouldHandlePattern(action) {
  return action.type === _actionTypes.RESYNC;
}

/***/ }),

/***/ 1189:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _actionTypes = __webpack_require__(9148);
// Other plugins

function createMiddleware(context) {
  const {
    CallManager
  } = context.container;

  /**
   * Handle a Link "session progress" notification.
   * @method sessionProgressNotification
   */
  async function sessionProgressNotification(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }
    const message = action.payload.notificationMessage;
    const notificationParams = message.callNotificationParams || {};
    const wrtcsSessionId = message.sessionParams.sessionData;
    // Massage data into a generic format, instead of Link-specific.
    const params = {
      sdp: message.sessionParams.sdp,
      remoteName: notificationParams.remoteName,
      remoteNumber: notificationParams.remoteDisplayNumber,
      customParameters: message.customParameters
    };
    await CallManager.receiveEarlyMedia(wrtcsSessionId, params);
  }
  return sessionProgressNotification;
}

// The `incomingCallPattern` function.
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'sessionProgress';
}

/***/ }),

/***/ 46813:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _utils = __webpack_require__(32100);
var _actionTypes = __webpack_require__(9148);
var _selectors2 = __webpack_require__(46942);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins
function createMiddleware(context) {
  const {
    CallManager,
    logManager
  } = context.container;
  async function sessionStatusUpdateEndedNotification(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }
    const message = action.payload.notificationMessage;
    const {
      sessionData: wrtcsSessionId,
      reasonText,
      statusCode
    } = message.sessionParams;
    const targetCall = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), wrtcsSessionId);
    const log = logManager.getLogger('CALL', targetCall ? targetCall.id : undefined);
    if (!targetCall) {
      log.info('A remote operation is being requested on a call that no longer exists.');
    }
    const domain = (0, _selectors2.getDomain)(context.getState());
    const remoteInfo = (0, _utils.getRemoteParticipant)(targetCall, message, domain);
    const params = _objectSpread({
      reasonText,
      statusCode
    }, remoteInfo);
    await CallManager.sessionStatusUpdateEnded(wrtcsSessionId, params);
  }
  return sessionStatusUpdateEndedNotification;
}
function shouldHandlePattern(action) {
  return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.eventType === 'sessionComplete';
}

/***/ }),

/***/ 72391:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
exports.shouldHandlePattern = shouldHandlePattern;
var _actionTypes = __webpack_require__(27190);
var _actionTypes2 = __webpack_require__(10530);
// Other plugins

// src/call/sagaLink/sagas/index.js
function createMiddleware(context) {
  const operations = context.container.CallOperations;
  function setTurnCredentials(action) {
    if (!shouldHandlePattern(action)) {
      // Don't handle it.
      return;
    }

    // Call the set turn credentials operation and forward the action to the operation
    operations.setTurnCredentials(action);
  }
  return setTurnCredentials;
}

// The `incomingCallPattern` function.
function shouldHandlePattern(action) {
  return !!(!action.error && (action.type === _actionTypes2.CONNECT_FINISHED && action.payload.subscription && action.payload.subscription.turnCredentials || action.type === _actionTypes.SUBSCRIBE_FINISHED && action.payload.subscriptions && action.payload.subscriptions.length && action.payload.subscriptions[0].turnCredentials));
}

/***/ }),

/***/ 81298:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "setTurnCredentials", ({
  enumerable: true,
  get: function () {
    return _setTurnCredentials.default;
  }
}));
var _setTurnCredentials = _interopRequireDefault(__webpack_require__(96345));

/***/ }),

/***/ 96345:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerOperation;
var _setTurnCredentials = _interopRequireDefault(__webpack_require__(43566));
/*
 * Register the operation with the bottle. This will make it available on the
 *    top-level container under its namespace.
 */
function registerOperation(bottle) {
  bottle.factory('CallOperations.setTurnCredentials', () => {
    // Provide the top-level bottle container to the factory function.
    //    This ensures everything is accessible, instead of only items in the
    //    nested `CallOperations` container.
    return (0, _setTurnCredentials.default)(bottle.container);
  });
}

/***/ }),

/***/ 43566:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _actions = __webpack_require__(6313);
var _selectors = __webpack_require__(11430);
var _actionTypes = __webpack_require__(10530);
// Call plugin.

// Other plugins.

/**
 * Link-specific "set turn credentials" operation factory.
 * @method createOperation
 * @param  {Object} container The bottle container.
 */
function createOperation(container) {
  const {
    context,
    logManager
  } = container;
  const log = logManager.getLogger('CALL');
  /**
   * Handles setting turn/stun information that has been
   *    received from the server.
   * @method setTurnCredentials
   * @param {Object} action A "connect finished" action.
   */
  function setTurnCredentials(action) {
    const {
      serverTurnCredentials,
      defaultPeerConfig
    } = (0, _selectors.getOptions)(context.getState());

    // Must have ICE servers configured. Check the new way of configuring them...
    if (defaultPeerConfig.iceServers.length === 0) {
      log.debug('No ICE servers provided during setup; not using TURN/STUN for calls.');
      return;
    }
    if (!serverTurnCredentials) {
      log.debug('Using application provided TURN credentials.');
      return;
    }

    // TURN credentials received from the server.
    const turnCredentials = action.type === _actionTypes.CONNECT_FINISHED ? action.payload.subscription.turnCredentials : action.payload.subscriptions[0].turnCredentials;
    context.dispatch(_actions.turnActions.turnChanged({
      credentials: turnCredentials
    }));
  }
  return setTurnCredentials;
}

/***/ }),

/***/ 47630:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = complexRequests;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var _selectors2 = __webpack_require__(46942);
var requestUtils = _interopRequireWildcard(__webpack_require__(39790));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins.
// Helpers.
/**
 * Bottle wrapper for Link "complex" call requests.
 * @return {Object}
 */
function complexRequests(container) {
  const {
    context,
    sendRequest,
    CallReporter
  } = container;

  /**
   * Direct Transfers an incoming session to another destination address.
   * Link-specific signaling function.
   *
   * This function "direct transfers" the server session to a specified destination address.
   * Assumptions:
   *    1. The current user is authenticated.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method directTransferSession
   * @param  {Object} callInfo
   * @param  {string} callInfo.id The ID of the call.
   * @param  {string} callInfo.wrtcsSessionId The ID the backend uses to track the session.
   * @param  {string} callInfo.address The address to forward the session to.
   * @return {undefined}
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function directTransferSession(callInfo) {
    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    options.body = JSON.stringify({
      callControlRequest: {
        type: 'transfer',
        address: callInfo.address
      }
    });

    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.id);
    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), callInfo.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.DIRECT_TRANSFER;
    });
    const operationEvent = report.getEvent(operation.eventId);

    // Create main event representing the request we're about to make
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    }
    // No need to add any extra metadata since `response` only contains status code
    // Just end sub-event.
    requestEvent.endEvent();
  }

  /**
   * Transfers ongoing sessions into one another.
   * Link-specific signaling function.
   *
   * This function "transfers" the server sessions.
   * Assumptions:
   *    1. The current user is authenticated.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method consultativeTransferSessions
   * @param  {Object} callInfo
   * @param  {string} callInfo.id The ID of the call.
   * @param  {string} callInfo.wrtcsSessionId The ID the backend uses to track the session.
   * @param  {string} callInfo.otherWrtcsSessionId The ID the backend uses to track the other session.
   * @param  {string} callInfo.destination The address of the other session to transfer to.
   * @return {undefined} response object from the server.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function consultativeTransferSessions(callInfo) {
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    options.body = JSON.stringify({
      callControlRequest: {
        type: 'transfer',
        sessionData: callInfo.otherWrtcsSessionId,
        address: callInfo.destination
      }
    });
    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.id);
    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), callInfo.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.CONSULTATIVE_TRANSFER;
    });
    const operationEvent = report.getEvent(operation.eventId);

    // Create main event representing the request we're about to make
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    }
    requestEvent.endEvent();
  }

  /**
   * Joins ongoing sessions into a new session.
   * Link-specific signaling function.
   *
   * This request "joins" the server sessions.
   * Assumptions:
   *    1. The current user is authenticated.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method joinSessions
   * @param  {Object} callInfo
   * @param  {string} callInfo.id The ID of the call.
   * @param  {string} callInfo.wrtcsSessionId The ID the backend uses to track the session.
   * @param  {string} callInfo.otherWrtcsSessionId
   * @param  {string} callInfo.sdp The new sdp to use.
   * @param  {Array<CustomParameter>} callInfo.customParameters The custom parameters of the current call.
   * @param  {Array<CustomBody>} callInfo.customBodies The custom bodies of the call.
   * @return {string} newWrtcsSessionId The back-end session id, if signalling succeeded.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function joinSessions(callInfo) {
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'POST'
    };
    options.body = JSON.stringify({
      callControlRequest: {
        type: 'join',
        firstSessionData: callInfo.wrtcsSessionId,
        secondSessionData: callInfo.otherWrtcsSessionId,
        sdp: callInfo.sdp,
        customParameters: callInfo.customParameters
        // TODO: Pass the Custom Bodies as well if supported
      }
    });

    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.id);
    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), callInfo.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.JOIN;
    });
    const operationEvent = report.getEvent(operation.eventId);

    // Create main event representing the request we're about to make
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, options);
    if (response.error) {
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    }
    requestEvent.endEvent();
    return response.callControlResponse.sessionData;
  }
  return {
    directTransferSession,
    consultativeTransferSessions,
    joinSessions
  };
}

/***/ }),

/***/ 7554:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = establishRequests;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var _selectors2 = __webpack_require__(46942);
var _selectors3 = __webpack_require__(48944);
var _normalization = __webpack_require__(54395);
var requestUtils = _interopRequireWildcard(__webpack_require__(39790));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Other plugins.
// Helpers.
/**
 * Bottle wrapper for Link "establish" call requests.
 * @return {Object}
 */
function establishRequests(container) {
  const {
    context,
    logManager,
    sendRequest,
    CallReporter
  } = container;

  /**
   * Creates a Call session on the KandyLink server.
   *
   * @method createSession
   * @param {Object} info Information the backend needs to create the call.
   * @param {string} info.id The ID the SDK uses to identify this call.
   * @param {string} info.to The user to receive the call.
   * @param {string} info.offer The local SDP offer to begin negotiation.
   * @param {boolean} info.isAnonymous Whether the local user is anonymous or not.
   * @param {string} info.account If anonymous, the user account used to authenticate the request.
   * @param {string} info.from If anonymous, the username for the call to be "from".
   * @param {Object} [options={}] Additional details for the call / request.
   * @param {string} [options.displayName] A custom display name to use. Not supported in
   *    all environments and may use default display name.
   * @param {Array} [options.customParameters] Custom SIP header parameters for the SIP backend.
   * @param {Array} [options.customBodies] Custom SIP bodies for the SIP backend.
   * @return {string} The ID that the server uses to identify this call.
   * @throws {BasicError} Throws a GENERIC_ERROR if an anonymous user has no call subscription.
   * @throws {BasicError} Throws an if the REST request fails.
   */
  async function createSession(info, options) {
    const log = logManager.getLogger('CALL', info.id);
    log.info('Creating call session on server-side.');

    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const callOptions = (0, _selectors.getOptions)(context.getState());

    // Get the report for this call id
    const report = CallReporter.getReport(info.id);

    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), info.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && (op.type === _constants.OPERATIONS.MAKE || op.type === _constants.OPERATIONS.MAKE_ANONYMOUS);
    });
    const operationEvent = report.getEvent(operation.eventId);

    /*
     * For an anonymous call, the "from" user is provided by the application.
     * For a regular call, the "from" user is always the local user.
     */
    let originator;
    if (info.isAnonymous) {
      originator = info.from;
    } else {
      originator = (0, _normalization.normalizeSipUri)(requestInfo.username, (0, _selectors2.getDomain)(context.getState()));
      log.debug('Caller address normalized to: ' + originator);
    }

    // If a custom display name was provided, update the "from" address to include it.
    if (options.displayName) {
      originator = `${options.displayName}<${originator}>`;
    }
    const requestBody = {
      type: 'callStart',
      to: info.to,
      from: originator,
      sdp: info.offer
    };

    /*
     * For optional parameters, only add them to the request body if they are defined.
     */
    if (callOptions.earlyMedia) {
      /*
       * Also, if there are no supported items, `supported` should not be left as
       *    an empty array because SPiDR will reject the body when it is left empty
       *    (for anonymous calls).
       */
      requestBody.supported = ['earlymedia'];
    }
    if (options.customParameters) {
      requestBody.customParameters = options.customParameters;
    }
    if (options.customBodies) {
      requestBody.customBodies = options.customBodies;
    }

    // The information to be passed to `fetch`.
    const fetchInfo = _objectSpread(_objectSpread({}, info), {}, {
      method: 'POST'
    });
    let responseType;
    if (info.isAnonymous) {
      responseType = 'callMeResponse';

      // Get the ID of the notification channel (ie. websocket) being used for
      //    the call subscription.
      const websocketId = (0, _selectors3.getWebsocketId)(context.getState(), 'callMe');
      if (!websocketId) {
        throw new _errors.default({
          code: _errors.callCodes.GENERIC_ERROR,
          message: 'Cannot start call without call service subscription.'
        });
      }
      fetchInfo.body = JSON.stringify({
        callMeRequest: _objectSpread(_objectSpread({}, requestBody), {}, {
          notifyChannelId: websocketId
        })
      });
    } else {
      responseType = 'callControlResponse';
      fetchInfo.body = JSON.stringify({
        callControlRequest: requestBody
      });
    }

    // Before sending the REST request, mark it's start by creating a sub-event
    // within the timeline of its parent operational event
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.CREATE_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, fetchInfo);
    if (response.error) {
      log.debug('Failed to create Call session server-side.', response.error);
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    } else {
      const wrtcsSessionId = response[responseType].sessionData;
      log.debug('Call session created server-side.', {
        wrtcsSessionId
      });
      requestEvent.addData('wrtcsSessionId', wrtcsSessionId);
      requestEvent.endEvent();
      return wrtcsSessionId;
    }
  }
  async function answerSession(info) {
    const log = logManager.getLogger('CALL', info.id);
    log.info('Answering call session on server-side.');

    // Get the report for this call id
    const report = CallReporter.getReport(info.id);

    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), info.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.ANSWER;
    });
    const operationEvent = report.getEvent(operation.eventId);

    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    options.body = JSON.stringify({
      callControlRequest: {
        type: 'callAnswer',
        sdp: info.answer,
        customParameters: info.customParameters,
        customBodies: info.customBodies
      }
    });
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.ANSWER_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), info));
    if (response.error) {
      log.debug('Failed to answer Call session server-side.', response.error);
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    } else {
      log.debug('Call session answered server-side.', {
        wrtcsSessionId: info.wrtcsSessionId
      });
      requestEvent.endEvent();
    }
  }

  /**
   * Rejects an incoming session.
   * Link-specific signaling function.
   *
   * This request "rejects" the server session.
   * Assumptions:
   *    1. The current user is authenticated.
   *    2. There is an incoming session.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * REST request to reject a webRTC session.
   * @method rejectSession
   * @param  {Object} callInfo
   * @param  {Object} callInfo.id The ID of the Call.
   * @param  {string} callInfo.wrtcsSessionId The ID the backend uses to track the session.
   * @return {Object} response object from the server.
   * @return {Object} [response.error] An error object, if signalling failed.
   */
  async function rejectSession(info) {
    const log = logManager.getLogger('CALL', info.id);
    log.info('Rejecting call session on server-side.');

    // Get the report for this call id
    const report = CallReporter.getReport(info.id);

    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), info.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.REJECT;
    });
    const operationEvent = report.getEvent(operation.eventId);

    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'POST'
    };
    options.endUrl = 'calldisposition';
    options.body = JSON.stringify({
      callDispositionRequest: {
        action: 'reject',
        sessionData: info.wrtcsSessionId
      }
    });
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.REJECT_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, options);
    if (response.error) {
      log.debug('Failed to reject Call session server-side.', {
        wrtcsSessionId: info.wrtcsSessionId
      }, response.error);
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    } else {
      log.debug('Call session rejected server-side.', {
        wrtcsSessionId: info.wrtcsSessionId
      });
      requestEvent.endEvent();
    }
  }

  /**
   * Forwards an incoming session to another destination address.
   * Link-specific signaling function.
   *
   * This function "forwards" the server session to a specified destination address.
   * Assumptions:
   *    1. The current user is authenticated.
   *    2. There is an incoming session.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method forwardSession
   * @param  {Object} callInfo
   * @param  {string} callInfo.wrtcsSessionId The ID the backend uses to track the session.
   * @param  {string} callInfo.address The address to forward the session to.
   * @return {undefined}
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function forwardSession(callInfo) {
    const call = (0, _selectors.getCallByWrtcsSessionId)(context.getState(), callInfo.wrtcsSessionId);
    const log = logManager.getLogger('CALL', call.id);
    log.info('Forwarding call session on server-side.');

    // Get the report for this call id
    const report = CallReporter.getReport(call.id);

    // Get the main operational event that is ongoing
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.FORWARD_CALL;
    });
    const operationEvent = report.getEvent(operation.eventId);
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'POST'
    };
    options.endUrl = 'calldisposition';
    options.body = JSON.stringify({
      callDispositionRequest: {
        action: 'forward',
        sessionData: callInfo.wrtcsSessionId,
        address: callInfo.address
      }
    });
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.FORWARD_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, options);
    if (response.error) {
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    }
    requestEvent.endEvent();
  }

  /**
   * A REST DELETE request to send webRTC session call end requests.
   * @method endSession
   * @param  {Object} callInfo
   * @param  {string} callInfo.callId The ID that the SDK uses to identify this call.
   * @param  {string} callInfo.wrtcsSessionId ID that the server uses to identify the session.
   * @param  {boolean} callInfo.isAnonymous Whether the call is anonymous or not.
   * @param  {string} [callInfo.account] An account token used by the request if it is an anonymous call.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function endSession(callInfo) {
    const log = logManager.getLogger('CALL', callInfo.callId);
    log.info('Ending call session on server-side.');

    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.callId);

    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), callInfo.callId);
    const operation = call.currentOperations.find(op => {
      // The END and complex operations use this request.
      return op.isLocal && [_constants.OPERATIONS.END, _constants.OPERATIONS.JOIN, _constants.OPERATIONS.DIRECT_TRANSFER, _constants.OPERATIONS.CONSULTATIVE_TRANSFER].includes(op.type);
    });
    const operationEvent = report.getEvent(operation.eventId);
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'DELETE',
      responseType: 'none'
    };
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.END_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      log.info('Failed to end Call session server-side.', response.error);
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    }
    log.info('Call session ended server-side.', {
      wrtcsSessionId: callInfo.wrtcsSessionId
    });
    requestEvent.endEvent();
  }
  return {
    createSession,
    answerSession,
    rejectSession,
    forwardSession,
    endSession
  };
}

/***/ }),

/***/ 84410:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _complex = _interopRequireDefault(__webpack_require__(47630));
var _establish = _interopRequireDefault(__webpack_require__(7554));
var _misc = _interopRequireDefault(__webpack_require__(97617));
var _negotiation = _interopRequireDefault(__webpack_require__(12972));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Link-specific Call Requests factory function.
 * Creates a closure where dependencies can be set and used
 *    by requests.
 */
function createRequests(container) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, (0, _complex.default)(container)), (0, _establish.default)(container)), (0, _misc.default)(container)), (0, _negotiation.default)(container));
}

/***/ }),

/***/ 97617:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = miscRequests;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var _selectors2 = __webpack_require__(46942);
var requestUtils = _interopRequireWildcard(__webpack_require__(39790));
var _errors = _interopRequireDefault(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin
// Other plugins
// Helpers
/**
 * Bottle wrapper for Link "misc" call requests.
 * @return {Object}
 */
function miscRequests(container) {
  const {
    context,
    sendRequest,
    logManager,
    CallReporter
  } = container;

  // eslint-disable-next-line no-warning-comments
  /**
   * Gets the status of a session from the server.
   * Link-specific signaling function.
   *
   * Assumptions:
   *    1. The current user is authenticated.
   *    2. Signalling server has Kandy Link 4.7.1+
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method getSession
   * @param  {Object} callInfo
   * @param  {string} callInfo.id The ID of the call.
   * @param  {Object} callInfo.wrtcsSessionId The ID the backend uses to track the session.
   * @param  {boolean} [callInfo.isAnonymous] Flag indicating whether the call is anonymous or not.
   * @param  {string} [callInfo.account] An account token used by the request if it is an anonymous call.
   * @return {Object} response Signalling response.
   * @throws {Object} response.error An error object, if signalling failed.
   */
  async function getSession(callInfo) {
    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'GET'
    };

    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.id);
    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), callInfo.id);
    let requestEvent;
    const ongoingLocalOp = call.currentOperations.find(op => {
      return op.isLocal && op.status === _constants.OP_STATUS.ONGOING;
    });
    if (ongoingLocalOp) {
      const operationEvent = report.getEvent(ongoingLocalOp.eventId);

      // Create main event representing the request we're about to make
      requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
      // Add some metadata to it
      requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.GET_SESSION);
    } else {
      // If there is no ongoing local operation, then we look for last 'receive call' main event,
      // which should always be present in case of calling this function.
      const lastEvent = report.findLastOngoingEvent(_constants2.REPORT_EVENTS.RECEIVE_CALL);
      requestEvent = lastEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
      // Add some metadata to it
      requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.GET_SESSION);
    }
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      throw response.error;
    } else {
      requestEvent.addData('state', response.callControlResponse.state);
      requestEvent.endEvent();
      return {
        error: false,
        state: response.callControlResponse.state
      };
    }
  }

  /**
   * Updates a webRTC session on the server with a new state.
   * Link-specific signaling function.
   *
   * The request updates the server's session to be in "ringing" state.
   * Assumptions:
   *    1. The current user is authenticated.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method updateCallRinging
   * @param  {Object} callInfo
   * @param  {string} callInfo.id The ID of the call.
   * @param  {string} callInfo.wrtcsSessionId ID that the server uses to identify the session.
   * @param  {string} callInfo.isAnonymous    Whether the call is an anonymous call.
   * @return {Object} response Signalling response.
   * @throws {Object} [response.error] An error object, if signalling failed.
   */
  async function updateCallRinging(callInfo) {
    const log = logManager.getLogger('CALL', callInfo.id);
    log.info('Updating call session as ringing on server-side.');

    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    options.body = JSON.stringify({
      callControlRequest: {
        type: 'ringing'
      }
    });

    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.id);
    // Get the RECEIVE_CALL event from the report
    const receiveCallEvent = report.findLastOngoingEvent([_constants2.REPORT_EVENTS.RECEIVE_CALL, _constants2.REPORT_EVENTS.SEND_RINGING_FEEDBACK]);

    // Create main event representing the request we're about to make
    const requestEvent = receiveCallEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.CALL_RINGING_UPDATE_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      log.debug('Failed to update call session as ringing server-side.', response.error);
      // Need a linter exception here because we need to throw more data than what we can include in an instance of BasicError
      // eslint-disable-next-line no-throw-literal
      throw {
        error: response.error
      };
    } else {
      log.debug('Call session updated as ringing server-side.', {
        wrtcsSessionId: callInfo.wrtcsSessionId
      });
      requestEvent.addData('wrtcsSessionId', callInfo.wrtcsSessionId);
      requestEvent.endEvent();
      return {
        error: false
      };
    }
  }
  /**
   * Sends the (new?) custom parameters of the call to the webRTC session on the server.
   * @method updateCustomParameters
   * @param {Object} callInfo
   * @param {string} callInfo.id The ID of the call.
   * @param {string} callInfo.wrtcsSessionId    ID that the server uses to identify the session.
   * @param {string} callInfo.isAnonymous       Whether the call is an anonymous call
   * @param {Array<CustomParameter>} callInfo.customParameters  The custom parameters
   * @return {Object} response Signaling response.
   */
  async function updateCustomParameters(callInfo) {
    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    const bodyType = callInfo.isAnonymous ? 'callMeRequest' : 'callControlRequest';
    options.body = JSON.stringify({
      [bodyType]: {
        type: 'sendCustomHeaders',
        customParameters: callInfo.customParameters
      }
    });

    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.id);
    // Get the main operational event that is ongoing
    const call = (0, _selectors.getCallById)(context.getState(), callInfo.id);
    const operation = call.currentOperations.find(op => {
      return op.isLocal && op.type === _constants.OPERATIONS.SEND_CUSTOM_PARAMETERS;
    });
    const operationEvent = report.getEvent(operation.eventId);

    // Create main event representing the request we're about to make
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.UPDATE_CUSTOM_PARAMETERS_ON_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      requestEvent.setError(response.error);
      requestEvent.endEvent();
      // Need a linter exception here because we need to throw more data than what we can include in an instance of BasicError
      // eslint-disable-next-line no-throw-literal
      throw {
        error: response.error
      };
    } else {
      requestEvent.endEvent();
      return {
        error: false
      };
    }
  }

  /**
   * Updates a webRTC session on the server to ensure it's state.
   * Link-specific signaling function.
   *
   * This saga "audits" the server session to:
   *    1. notify the server that the call is still on-going locally, and
   *    2. ensure that the server is still handling the server session.
   * Assumptions:
   *    1. The current user is authenticated.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method auditCall
   * @param  {Object} callInfo
   * @param  {string} callInfo.id The ID of the call.
   * @param  {string} callInfo.wrtcsSessionId ID that the server uses to identify the session.
   * @param  {boolean} [callInfo.isAnonymous] Flag indicating whether the call is anonymous or not.
   * @param  {string} [callInfo.account] An account token used by the request if it is an anonymous call.
   * @return {Object} response Signalling response.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function auditCall(callInfo) {
    const requestInfo = (0, _selectors2.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    const bodyType = callInfo.isAnonymous ? 'callMeRequest' : 'callControlRequest';
    options.body = JSON.stringify({
      [bodyType]: {
        type: 'audit'
      }
    });

    // Get the report for this call id
    const report = CallReporter.getReport(callInfo.id);
    // Add an AUDIT_CALL main event from the report
    const auditCallEvent = report.addEvent(_constants2.REPORT_EVENTS.AUDIT_CALL);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      auditCallEvent.setError(response.error);
      auditCallEvent.endEvent();
      // Wrap the info in a BasicError because that is what sendCallAudit operation expects to receive.
      throw new _errors.default({
        code: response.error.code,
        message: response.error.message
      });
    } else {
      auditCallEvent.endEvent();
      return {
        status: 'Connected',
        error: false
      };
    }
  }
  return {
    getSession,
    updateCallRinging,
    updateCustomParameters,
    auditCall
  };
}

/***/ }),

/***/ 12972:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = negotiationRequests;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(46942);
var _selectors2 = __webpack_require__(11430);
var _constants = __webpack_require__(37409);
var _constants2 = __webpack_require__(42750);
var requestUtils = _interopRequireWildcard(__webpack_require__(39790));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Helpers
/**
 * Bottle wrapper for Link "negotiation" call requests.
 * @return {Object}
 */
function negotiationRequests(container) {
  const {
    context,
    sendRequest,
    CallReporter
  } = container;
  /**
   * Updates an existing webRTC session on the server.
   * Link-specific signalling function.
   *
   * This saga "updates a session" between the current user and another, specified
   *    user.
   * Assumptions:
   *    1. The current user is authenticated.
   * Responsibilities:
   *    1. Format parameters as needed for signalling.
   *    2. Perform the REST request.
   *    3. Return the response, formatted.
   * @method updateSession
   * @param  {Object} info
   * @param  {string} info.id The ID of the call.
   * @param  {string} info.wrtcsSessionId The ID the backend uses to track the session.
   * @param  {string} info.offer The local SDP offer to begin negotiation.
   * @param  {boolean} [info.isAnonymous] Flag indicating whether the call is anonymous or not.
   * @param  {string}  [info.account] An account token used by the request if it is an anonymous call.
   * @param  {Array}   [info.customParameters] The custom parameters of the call.
   * @param  {Array}   [info.customBodies] The custom bodies of the call.
   * @return {Object} response Signalling response.
   * @return {Object} response.error An error object, if signalling failed.
   */
  async function updateSession(info) {
    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    const bodyType = info.isAnonymous ? 'callMeRequest' : 'callControlRequest';
    options.body = JSON.stringify({
      [bodyType]: {
        type: 'startCallUpdate',
        sdp: info.offer,
        customParameters: info.customParameters,
        customBodies: info.customBodies
      }
    });
    const targetCall = (0, _selectors2.getCallById)(context.getState(), info.id);

    // Get the report for this call id
    const report = CallReporter.getReport(targetCall.id);

    // Get the main operational event that is ongoing
    const operation = targetCall.currentOperations.find(op => {
      return op.isLocal && op.status === _constants.OP_STATUS.ONGOING;
    });
    const operationEvent = report.getEvent(operation.eventId);
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.UPDATE_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), info));
    if (response.error) {
      requestEvent.endEvent(response.error);
      throw response.error;
    }
    requestEvent.endEvent();
  }

  /**
   * Responds to a received remote offer to update the webRTC session.
   * Link-specific signaling function.
   *
   * This request responds to a "call update" request as part of renegotiation.
   * This request handles both success and failure scenarios.
   *
   * In the case of a success scenario, this request
   *    updates the server session with an answer SDP, which in turn should notify
   *    the remote end of the session with the response.
   * In the case of a failure scenario, this request responds with a status code.
   *
   * Assumptions:
   *    1. The current user is authenticated.
   * Responsibilities:
   *    1. Perform the REST request.
   *    2. Return the response, formatted.
   * @method updateSessionResponse
   * @param  {Object} callInfo
   * @param  {Object} callInfo.wrtcsSessionId The ID the backend uses to track the session.
   * @param  {string} callInfo.answer The local SDP to complete renegotiation. This may be an offer if performing slow start.
   * @param  {boolean} [callInfo.isAnonymous] Flag indicating whether the call is anonymous or not.
   * @param  {string} [callInfo.account] An account token used by the request if it is an anonymous call.
   * @throws {BasicError} An error object, if signalling failed.
   */

  async function updateSessionResponse(callInfo) {
    // Collect the information needed to make the request.
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const options = {
      method: 'PUT'
    };
    const bodyType = callInfo.isAnonymous && callInfo.account ? 'callMeRequest' : 'callControlRequest';
    const body = {
      [bodyType]: {
        type: 'respondCallUpdate'
      }
    };
    if (callInfo.statusCode) {
      body[bodyType].statusCode = `${callInfo.statusCode}`;
    } else {
      body[bodyType].sdp = callInfo.answer;
      body[bodyType].customParameters = callInfo.customParameters;
      body[bodyType].customBodies = callInfo.customBodies;
    }
    options.body = JSON.stringify(body);
    const targetCall = (0, _selectors2.getCallByWrtcsSessionId)(context.getState(), callInfo.wrtcsSessionId);
    // Get the report for this call id
    const report = CallReporter.getReport(targetCall.id);

    // Get the main operational event that is ongoing
    const operation = targetCall.currentOperations.find(op => {
      return !op.isLocal;
    });
    const operationEvent = report.getEvent(operation.eventId);

    // Before sending the REST request, mark it's start by creating a sub-event
    // within the timeline of its parent operational event
    const requestEvent = operationEvent.addEvent(_constants2.REPORT_EVENTS.REST_REQUEST);
    // Add some metadata to it
    requestEvent.addData('requestType', _constants2.REPORTER_REQUESTS.UPDATE_SESSION);
    const response = await requestUtils.linkCallRequest(sendRequest, requestInfo, _objectSpread(_objectSpread({}, options), callInfo));
    if (response.error) {
      requestEvent.endEvent(response.error);
      throw response.error;
    }

    // No data returned from this server response, so we're not adding any data to this sub-event either
    requestEvent.endEvent();
  }
  return {
    updateSession,
    updateSessionResponse
  };
}

/***/ }),

/***/ 39790:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.generateCallUrl = generateCallUrl;
exports.handleLinkCallRequestError = handleLinkCallRequestError;
exports.linkCallRequest = linkCallRequest;
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Helpers

/**
 * Helper function which sends LINK related requests.
 * @param {function} sendRequest Utility function which sends the actual REST request to server side.
 * @param {Object} requestInfo Object containing request information.
 * @param {Object} options Any additional options associated with the REST request.
 * @return {Object} The server's response body (if request was successful), otherwise a BasicError.
 */
async function linkCallRequest(sendRequest, requestInfo, options) {
  options.url = generateCallUrl(requestInfo, options);
  const response = await sendRequest(options);
  if (response.error) {
    return {
      error: handleLinkCallRequestError(response)
    };
  } else {
    return response.body;
  }
}

/**
 * Analizes a failed server response in order to generate a specific BasicError.
 * @param {Object} response The server response which indicates a failure.
 * @return {BasicError} The error object containing a specific error code & message.
 */
function handleLinkCallRequestError(response) {
  function getMessage(code) {
    switch (code) {
      case 5:
        return 'Request failed: Invalid or missing request body';
      case 26:
        return 'Request failed: Internal Server Error';
      case 27:
        return 'Request failed: Authorization failure';
      case 35:
        return 'Request failed: Service is not authorized due to Call Control resources on the server being not enabled';
      case 37:
        return 'Request failed: Detected invalid parameter value. Check Request content';
      case 42:
        return 'Request failed: Resource does not exist';
      case 61:
        return 'Request failed: Authentication failure due to credentials not provided or incorrect';
      case 62:
        return 'Request failed: Authentication failure due to account being disabled';
      case 63:
        return 'Request failed: Authentication failure due to account being locked';
      case 1004:
        return 'Request failed: Bad request';
      default:
        return 'Request failed: Unknown error';
    }
  }
  let message, code;
  if (response) {
    if (response.body) {
      if ('callControlResponse' in response.body) {
        // The response includes a body with an error message.
        const {
          callControlResponse
        } = response.body;
        message = getMessage(callControlResponse.statusCode);
        // TODO: Do we want to wrap the backend's error codes?
        code = callControlResponse.statusCode;
      } else {
        // As serviceException details not available, we will capture general error information
        message = response.body.message;
        code = response.result.code;
      }
    } else if (response.result) {
      message = `Request failed: ${response.result.message}`;
      code = response.result.code;
    } else {
      message = 'Request failed: Unknown error.';
    }
  } else {
    message = 'Request failed: Unknown error.';
  }
  return new _errors.default({
    message,
    code
  });
}

/**
 * Generates the call url for the rest request based on the options provided.
 * @param {Object} requestInfo Object containing request information
 * @param {Object} options
 * @param {boolean} [options.isAnonymous] Flag indicating whether the call is anonymous or not.
 * @param {string} [options.account] An account token used by the request if it is an anonymous call.
 * @param {string} [options.wrtcsSessionId] The ID the backend uses to track the session.
 * @param {string} [options.endUrl] The end url to append to the main url.
 */
function generateCallUrl(requestInfo, options) {
  // Generic user information.
  const {
    baseURL,
    version,
    username
  } = requestInfo;
  // Call specific information.
  const {
    isAnonymous,
    account,
    wrtcsSessionId,
    endUrl
  } = options;
  const userType = isAnonymous ? 'anonymous' : 'user';
  const userId = isAnonymous ? account : username;
  const requestType = isAnonymous ? 'callMe' : 'callControl';

  // The common path for all call REST requests.
  let url = `${baseURL}/rest/version/${version}/${userType}/${userId}`;
  if (endUrl) {
    url += `/${endUrl}`;
  } else {
    url += `/${requestType}`;
  }

  // If the REST request is for an existing call, the path includes its ID.
  if (wrtcsSessionId) {
    url += `/callSessions/${wrtcsSessionId}`;
  }
  return url;
}

/***/ }),

/***/ 32100:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getRemoteParticipant = getRemoteParticipant;
/**
 * Gets the remote participant data from a notification object's `callNotificationParams` property if it exists.
 * @param {Object} targetCall The current call object from state.
 * @param {Object} notification The notification object to extract remote participant data from.
 * @param {Object} domain The domain associated with the authenticated user.
 * @returns {Object|undefined} Object containing `remoteName` & `remoteNumber` properties.
 *                   Or undefined if `callNotificationParams` property does not exist.
 */
function getRemoteParticipant(targetCall, notification, domain) {
  if (!notification.callNotificationParams || !targetCall) {
    // `sessionComplete` notification doesn't have `callNotificationParams`.
    return {};
  }
  let remoteInfo = {};

  // A "conference" call is a joined call. Joined calls are _always_ incoming
  //    calls, even if the original call was outgoing.
  const isConference = notification.callNotificationParams.callerDisplayNumber && notification.callNotificationParams.callerDisplayNumber.startsWith('conference@');
  const isIncoming = targetCall.direction === 'incoming' || isConference;

  /**
   * SPiDR notifications seem to have different "remote participant" properties
   *    in different scenarios. Determine which scenario the call is in to know
   *    how to parse the notification.
   */
  if (isIncoming) {
    remoteInfo = {
      remoteName: notification.callNotificationParams.callerName,
      remoteNumber: notification.callNotificationParams.callerDisplayNumber
    };
  } else {
    remoteInfo = {
      remoteName: notification.callNotificationParams.remoteName,
      remoteNumber: notification.callNotificationParams.remoteDisplayNumber
    };
  }
  /*
   * Sometimes the "display number" doesn't include a domain. Make sure it has
   *    a domain so that it is always consistent.
   * TODO: Figure out in which cases this was needed. Transfer?
   *    Ref: KAA-746
   */
  if (remoteInfo.remoteNumber && !remoteInfo.remoteNumber.includes('@')) {
    remoteInfo.remoteNumber += domain;
  }

  // If the data from the notification is undefined, use whatever the existing
  //    value on the call was.
  return {
    remoteName: remoteInfo.remoteName || targetCall.remoteParticipant.displayName,
    remoteNumber: remoteInfo.remoteNumber || targetCall.remoteParticipant.displayNumber
  };
}

/***/ }),

/***/ 87056:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCodecRemover = createCodecRemover;
/**
 * Creates and returns an SDP Handler function that will remove the desired codecs
 *  from the SDP when passed to the pipeline.
 *
 * @method createCodecRemover
 * @param  {string[]|Object[]} codecs An array of strings or objects representing the desired codecs to be removed.
 * @example
 * // `codecs` paramters can be an array of strings (i.e., ['VP8', 'VP9']) or as objects with the following signature:
 * const codecsToBeRemoved = [{
 *   name: 'codecname',
 *   fmtpParams: 'specific ftmp parameter target'
 * }]
 * const codecRemover = createCodecRemover(codecsToBeRemoved)
 * @return {Function} returns an SDP handler function
 */
function createCodecRemover() {
  let codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  // We allow the user to pass in a codecs of objects or strings, so here we format the strings into objects for uniformity.
  codecs = codecs.map(item => typeof item === 'string' ? {
    name: item
  } : item);
  return function (newSdp, info, originalSdp) {
    // This is an array of strings representing codec names we want to remove.
    const codecStringsToRemove = codecs.map(codec => codec.name);
    newSdp.media.forEach(media => {
      // This is an array of just the codes (codec payloads) that we FOR SURE want to remove.
      const finalRemoveList = [];
      // This is an array of RTP objects who have codecs that are the same as strings passed in via codecs.
      let filteredRtp = [];

      // If the current rtp.codec is in the codecStringsToRemove list, add the rtp to filteredRtp
      filteredRtp = media.rtp.filter(rtp => codecStringsToRemove.includes(rtp.codec));
      filteredRtp.forEach(rtp => {
        // We grab the relevantCodec codecs object from the passed in codecs, based on the name string.
        const relevantCodecs = codecs.filter(codec => codec.name === rtp.codec);

        // We check the relevantCodec. If it is not present, then we have no codecs info for this specific rtp.
        relevantCodecs.forEach(relevantCodec => {
          // If fmtpParams doesnt exist or is of length 0 then we assume we can remove all instances of this codec
          if (!relevantCodec.fmtpParams || relevantCodec.fmtpParams && relevantCodec.fmtpParams.length === 0) {
            // We want to delete this codec no matter what, since no fmtp params were included.
            finalRemoveList.push(rtp.payload);
          } else {
            // There are fmtp values for this codec. Therefore we have to check each media.fmtp object to see if it is the right one.
            // Then when we find the right fmtp object, we check its config to see if it has the parameters specified in the input.
            media.fmtp.forEach(fmtp => {
              // We check each iteration to see if we found the right fmtp object.
              if (fmtp.payload === rtp.payload) {
                // If we found the right fmtp object, we have to make sure each config param is in the fmtp.config.
                if (relevantCodec.fmtpParams.every(c => fmtp.config.includes(c))) {
                  finalRemoveList.push(rtp.payload);
                }
              }
            });
          }
        });
      });

      // At this point we should have an array (finalRemoveList) that contains all ORIGINAL codec payloads that we need to remove.
      // We now need to check fmtp for all rtx payloads ASSOCIATED with the original codec payload.
      media.fmtp.forEach(fmtp => {
        // Check if the config contains apt=, which indicates this fmtp is associated with another.
        if (fmtp.config.includes('apt=')) {
          // If so, lets grab the whole string WITHOUT the apt= part, and convet it into an integer. This should be a payload number.
          var payload = parseInt(fmtp.config.replace('apt=', ''));

          // Check if the finalRemoveList contains the payload that this fmtp is associated with.
          if (finalRemoveList.includes(payload)) {
            // If so, then we need to add this fmtp.payload to the finalRemoveList
            finalRemoveList.push(fmtp.payload);
          }
        }
      });

      // We assume past this point that the finalRemoveList is all powerful.
      // For each codec in the media.payloads string, if it is in our finalRemoveList list, we remove it.
      let isNumber = false;
      if (typeof media.payloads === 'number') {
        media.payloads = media.payloads.toString();
        isNumber = true;
      }
      if (media.payloads) {
        // If our final list of codecs to remove is greater than or equal to
        // the actual number of codecs in the SDP, remove codecs from the final list
        // such that it is exactly one fewer codecs than in the SDP. This way we
        // will never remove all codecs and always leave at least one.
        const payloadCount = media.payloads.split(' ').length;
        if (finalRemoveList.length >= payloadCount) {
          finalRemoveList.splice(payloadCount - 1, finalRemoveList.length - payloadCount + 1);
        }
        media.payloads = media.payloads.split(' ').filter(payload => !finalRemoveList.includes(parseInt(payload))).join(' ');
      }
      if (media.payloads && isNumber) {
        media.payloads = parseInt(media.payloads);
      }

      // For each codec object, if the payload is in our filteredCodes list, we remove the object.
      media.rtp = media.rtp.filter(rtp => !finalRemoveList.includes(rtp.payload));
      media.fmtp = media.fmtp.filter(fmtp => !finalRemoveList.includes(fmtp.payload));
      if (media.rtcpFb) {
        media.rtcpFb = media.rtcpFb.filter(rtcpFb => !finalRemoveList.includes(rtcpFb.payload));
      }
    });
    return newSdp;
  };
}

/***/ }),

/***/ 27241:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.iceCollectionCheckFunction = iceCollectionCheckFunction;
var _constants = __webpack_require__(60683);
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
/**
 * Default function used for the SDK's ICE collection process. Will determine when enough
 *     candidates have been collected, or enough time has passed, until negotiation can
 *     continue or if the call should be considered failed.
 *
 * If ICE collection completes normally (at any point),
 *   - start the call if we have some ICE candidates.
 *   - error the call if there are no ICE candidates.
 *
 * If a candidate is collected, follow logic based on below timings.
 *
 * If before the ideal timeout,
 *   - start the call if every media section has a relay candidate for every TURN server.
 *   - otherwise wait until max timeout.
 *
 * If before the max timeout (but after ideal),
 *   - start the call if every media section has at least one relay candidate.
 *   - otherwise wait until max timeout.
 *
 * If we reach max timeout,
 *   - start the call if we have some ICE candidates.
 *   - error the call if there are no ICE candidates.
 * @param {Object} iceCollectionInfo
 * @param {string} iceCollectionInfo.callId The ID of the call.
 * @param {string} iceCollectionInfo.callOperation The current operation of the call.
 * @param {string} iceCollectionInfo.reason The reason the check function was called.
 * @param {Array<Object>} iceCollectionInfo.iceCandidates The array of ICE candidates collected so far.
 * @param {number} iceCollectionInfo.iceCollectionDuration The time elapsed since the start of the ICE collection process.
 * @param {string} iceCollectionInfo.iceGatheringState The current ICE gathering state.
 * @param {Object} iceCollectionInfo.rtcPeerConnectionConfig The config of the RTC peer connection.
 * @param {string} iceCollectionInfo.rtcLocalSessionDescription The local description set on the peer.
 * @param {Object} timeoutConfigs Timeout configuration values provided by the application.
 * @param {number} timeoutConfigs.iceCollectionIdealTimeout The desired ideal ice collection check timeout.
 * @param {number} timeoutConfigs.iceCollectionMaxTimeout The desired max ice collection check timeout.
 * @return {call.iceCollectionCheckResult} Information on how to proceed with the ice collection check.
 */
function iceCollectionCheckFunction() {
  let iceCollectionInfo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let timeoutConfigs = arguments.length > 1 ? arguments[1] : undefined;
  const {
    iceCollectionDuration,
    iceCandidates,
    iceGatheringState,
    rtcPeerConnectionConfig,
    rtcLocalSessionDescription
  } = iceCollectionInfo;
  const {
    iceCollectionIdealTimeout,
    iceCollectionMaxTimeout
  } = timeoutConfigs;
  if (iceGatheringState === 'complete') {
    // If the ice gathering state is 'complete', but no candidates are available, end the call
    if (iceCandidates.length === 0) {
      return {
        type: _constants.ICE_COLLECTION_RESULT_TYPES.ERROR,
        error: 'No ICE candidates available for call to proceed.'
      };
    }
    return {
      type: _constants.ICE_COLLECTION_RESULT_TYPES.START_CALL
    };
  }

  // If we are under the ideal timeout time and iceGathering state is not complete, we will check that the amount
  //  relay candidates for each transport is equal to the number of configured TURN servers.
  if (iceCollectionDuration < iceCollectionIdealTimeout) {
    // Number of TURN servers
    let totalTurnServers = 0;
    const configuredIceServers = rtcPeerConnectionConfig.rtcConfig.iceServers || [];
    configuredIceServers.forEach(iceServer => {
      if (Array.isArray(iceServer.urls)) {
        totalTurnServers += iceServer.urls.filter(url => url.startsWith('turn')).length;
      } else if (typeof iceServer.urls === 'string' && iceServer.urls.startsWith('turn')) {
        totalTurnServers += 1;
      }
    });

    // RTP Relay candidates collected so far
    const relayCandidates = iceCandidates.filter(candidate => candidate.component === 'rtp' && candidate.type === 'relay');

    // Check whether there is atleast candidates for each media transport equal to the number of configured
    //  turn servers before starting the call.
    const parsedSdp = _sdpTransform.default.parse(rtcLocalSessionDescription.sdp);
    const readyToStart = parsedSdp.media.every(media => {
      const sectionRelays = relayCandidates.filter(candidate => parseInt(candidate.sdpMid) === media.mid || candidate.sdpMid === media.mid);
      return sectionRelays.length >= totalTurnServers;
    });

    // If no TURN servers we're provided we will wait till the ideal collection timeout.
    if (!readyToStart || !totalTurnServers) {
      return {
        type: _constants.ICE_COLLECTION_RESULT_TYPES.WAIT,
        wait: iceCollectionIdealTimeout - iceCollectionDuration
      };
    } else {
      return {
        type: _constants.ICE_COLLECTION_RESULT_TYPES.START_CALL
      };
    }
  } else if (iceCollectionDuration < iceCollectionMaxTimeout) {
    // If we are passed the ideal timeout time, we will check that the amount relay candidates for each transport is
    //  1 or more.

    // RTP Relay candidates collected so far
    const relayCandidates = iceCandidates.filter(candidate => candidate.component === 'rtp' && candidate.type === 'relay');

    // Check whether there is atleast 1 candidate for each media transport before starting the call.
    const parsedSdp = _sdpTransform.default.parse(rtcLocalSessionDescription.sdp);
    const readyToStart = parsedSdp.media.every(media => {
      const sectionRelays = relayCandidates.filter(candidate => parseInt(candidate.sdpMid) === media.mid || candidate.sdpMid === media.mid);
      return sectionRelays.length >= 1;
    });
    if (readyToStart) {
      return {
        type: _constants.ICE_COLLECTION_RESULT_TYPES.START_CALL
      };
    } else {
      return {
        type: _constants.ICE_COLLECTION_RESULT_TYPES.WAIT,
        wait: iceCollectionMaxTimeout - iceCollectionDuration
      };
    }
  } else {
    // If we are passed the max timeout and no candidates are available, end the call
    if (iceCandidates.length === 0) {
      return {
        type: _constants.ICE_COLLECTION_RESULT_TYPES.ERROR,
        error: 'No ICE candidates available for call to proceed.'
      };
    }
    // Otherwise, if there are some candidates, we can attempt to start the call.
    return {
      type: _constants.ICE_COLLECTION_RESULT_TYPES.START_CALL
    };
  }
}

/***/ }),

/***/ 54395:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.normalizeSipUri = normalizeSipUri;
/**
 * Extracts the domain from an address if an @ symbol exists and isn't at the start or end of the address.
 * @param {string} addressString The address string to extract the domain from (if it exists).
 * @returns {string} The extracted domain. Empty string of none found.
 */
function extractDomainFromAddress(addressString) {
  const indexOfAtSymbol = addressString.lastIndexOf('@');
  if (indexOfAtSymbol !== 0 && indexOfAtSymbol !== addressString.length - 1) {
    // If '@' symbol found in middle of addressString, split it.
    if (indexOfAtSymbol !== -1) {
      return addressString.substr(indexOfAtSymbol + 1);
    }
  }
  return '';
}

/**
 * Determines which address and domain to use depending on whether the address string contains a domain or not.
 * @param {string} addressString The address string to examine and extract a domain from (if any).
 * @param {string} defaultDomainString The domain to use if the address string does not contain a domain in it.
 * @returns {Object} An object containing the correct address and domain to use.
 */
function separateAddressAndDomain(addressString, defaultDomainString) {
  const extractedDomain = extractDomainFromAddress(addressString);
  // If a domain was extracted from the address, use that as the domain and strip it from the address.
  if (extractedDomain) {
    return {
      address: addressString.substr(0, addressString.length - extractedDomain.length - 1),
      domain: extractedDomain
    };
  } else {
    return {
      address: addressString,
      domain: defaultDomainString
    };
  }
}

/**
 * Extracts any pre-pended data before a ":" (if it exists) from the beginning of a string.
 * @param {string} inputString The string to remove pre-pended data from.
 * @returns {string} The pre-pended data string.
 */
function extractPrependedData(inputString) {
  const prependedDataMatches = inputString.match(/^.*:/g);
  if (prependedDataMatches && prependedDataMatches[0]) {
    return prependedDataMatches[0];
  } else {
    return '';
  }
}

/**
 * Finds the leading special characters ("#", "+", "*") of an address if it is a phone number.
 * If the address contains letters or any non-visual-separator characters,
 *  it is not a phone number and no leading special characters will be found.
 * @param {string} addressString The address string to find the leading characters of (if any).
 *  The addressString must not contain any pre-pended data such as "sip:".
 *  The addressString must not contain a domain.
 * @returns {string} The leading special characters as one string. Empty string if none found.
 */
function extractLeadingSpecialCharacters(addressString) {
  // A single or group of contiguous characters are considered leading character/s if it is  the following:
  // - starts at the beginning of the string - ^
  // - is any of the following characters - [#+*]+
  // - is followed by a digit or "(" - [\d|(]
  // - is followed by any number of only digits and visual separators - [\d \-.()+]*$
  const potentialLeadingChars = addressString.match(/^[#+*]+[\d|(][\d \-.()+]*$/g);
  if (potentialLeadingChars && potentialLeadingChars[0]) {
    // Guaranteed to have a match for regex [#+*]+ since we have potentialLeadingChars
    // which was a match for a similar regex and we are simply extracting the leading characters part.
    const actualLeadingChars = potentialLeadingChars[0].match(/[#+*]+/g);
    return actualLeadingChars[0];
  }
  return '';
}

/**
 * Outputs a new string without its phone number visual separators ("-", ".", "(", ")", "+").
 * @param {string} inputString The string to remove visual separators from.
 * @returns {string} A new string without visual separators.
 */
function withoutVisualSeparators(inputString) {
  return inputString.replace(/[ \-.()+]/g, '');
}

/**
 * Determines whether a string should be considered a phone number or not.
 * @param {string} addressString The address string to check.
 *  The addressString must not contain any pre-pended data such as "sip:"
 *  The addressString must not contain any leading special characters.
 *  The addressString must not contain a domain.
 * @returns {boolean} True if the input string is a phone number. False if it is not.
 */
function isPhoneNumber(addressString) {
  const cleanNumber = withoutVisualSeparators(addressString);
  const phoneNumberMatch = cleanNumber.match(/^\d+$/g);
  return phoneNumberMatch && phoneNumberMatch.length === 1;
}

/**
 * Processes the address string and returns the correct output.
 * If the address is a phone number, visual separators are removed.
 * Otherwise, it will just return the address as-is.
 * @param {string} addressString The address string to process.
 *  The addressString must not contain any pre-pended data such as "sip:".
 *  The addressString must not contain any leading special characters (if it is a phone number).
 *  The addressString must not contain a domain.
 * @returns {string} A phone number without visual-separators or the addressString as-is.
 */
function processAddress(addressString) {
  return isPhoneNumber(addressString) ? withoutVisualSeparators(addressString) : addressString;
}

/**
 * Processes the domain string and returns the correct output.
 * Adds an "@" symbol if it isn't present at the beginning of the domain.
 * @param {string} domainString The domain string to process.
 * @returns {string} The domain with "@" symbol at the beginning if it doesn't exist.
 */
function processDomain(domainString) {
  if (domainString === '' || domainString === undefined) {
    return '';
  } else if (domainString.indexOf('@') === 0) {
    return domainString;
  } else {
    return '@' + domainString;
  }
}

/**
 *The function takes in the input dial string and domain address of the user, performs a normalization process based on the phone number handling normalization rules
 * @function normalizeSipUri
 * @param {string} address   It contains the input dial string the user dials in or the callee address
 * @param {string} domain    It contains the user's domain address
 * @returns {string} output  The output which is the normalized callee address/phone number
 */
function normalizeSipUri(address, domain) {
  // Remove leading and trailing white spaces.
  address = address.trim();

  // Extract domain.
  const resultingAddressAndDomain = separateAddressAndDomain(address, domain);
  domain = resultingAddressAndDomain.domain;
  address = resultingAddressAndDomain.address;

  // Extract pre-pended "sip:".
  const prepend = extractPrependedData(address);
  address = address.substr(prepend.length);

  // Extract leading characters.
  const leadingChars = extractLeadingSpecialCharacters(address);
  address = address.substr(leadingChars.length);

  // Process and build parts into final output in the form of `<prepend>:<leadingChars><address>@<domain>`.
  return 'sip:' + leadingChars + processAddress(address) + processDomain(domain);
}

/***/ }),

/***/ 65794:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getMediaState = getMediaState;
exports.hasMedia = hasMedia;
exports.isDualHold = isDualHold;
exports.isLocalHold = isLocalHold;
exports.isRemoteHold = isRemoteHold;
var _constants = __webpack_require__(60683);
// Helpers.

/**
 * Retrieves the current state of media flow based on a call's state.
 * @method getMediaState
 * @param  {Object} callState A call's state.
 * @return {string} A CALL_MEDIA_STATES enum value.
 */
function getMediaState(callState) {
  if (hasMedia(callState)) {
    return _constants.CALL_MEDIA_STATES.CONNECTED;
  } else if (isLocalHold(callState)) {
    return _constants.CALL_MEDIA_STATES.LOCAL_HOLD;
  } else if (isRemoteHold(callState)) {
    return _constants.CALL_MEDIA_STATES.REMOTE_HOLD;
  } else if (isDualHold(callState)) {
    return _constants.CALL_MEDIA_STATES.DUAL_HOLD;
  }
}

/**
 * Checks whether the call state indicates that the call has media.
 * @method hasMedia
 * @param  {Object}  callState Redux call state.
 * @return {boolean}
 */
function hasMedia(callState) {
  return callState.state === _constants.CALL_STATES.CONNECTED && !callState.localHold && !callState.remoteHold;
}

/**
 * Checks whether the call state indicates that the call is locally held (only).
 * @method isLocalHold
 * @param  {Object}  callState Redux call state.
 * @return {boolean}
 */
function isLocalHold(callState) {
  return callState.state === _constants.CALL_STATES.ON_HOLD && callState.localHold && !callState.remoteHold;
}

/**
 * Checks whether the call state indicates that the call is remotely held (only).
 * @method isRemoteHold
 * @param  {Object}  callState Redux call state.
 * @return {boolean}
 */
function isRemoteHold(callState) {
  return callState.state === _constants.CALL_STATES.ON_HOLD && !callState.localHold && callState.remoteHold;
}

/**
 * Checks whether the call state indicates that the call is both locally and
 *    remote held.
 * @method isDualHold
 * @param  {Object}  callState Redux call state.
 * @return {boolean}
 */
function isDualHold(callState) {
  return callState.state === _constants.CALL_STATES.ON_HOLD && callState.localHold && callState.remoteHold;
}

/***/ }),

/***/ 13179:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SET_CACHE = exports.FETCH_CALL_HISTORY_FINISH = exports.FETCH_CALL_HISTORY = exports.DELETE_CALL_HISTORY_FINISH = exports.DELETE_CALL_HISTORY = exports.ADD_CALL_HISTORY_ENTRY = void 0;
const prefix = '@@KANDY/';
const FETCH_CALL_HISTORY = exports.FETCH_CALL_HISTORY = prefix + 'FETCH_CALL_HISTORY';
const FETCH_CALL_HISTORY_FINISH = exports.FETCH_CALL_HISTORY_FINISH = prefix + 'FETCH_CALL_HISTORY_FINISH';
const DELETE_CALL_HISTORY = exports.DELETE_CALL_HISTORY = prefix + 'DELETE_CALL_HISTORY';
const DELETE_CALL_HISTORY_FINISH = exports.DELETE_CALL_HISTORY_FINISH = prefix + 'DELETE_CALL_HISTORY_FINISH';
const ADD_CALL_HISTORY_ENTRY = exports.ADD_CALL_HISTORY_ENTRY = prefix + 'ADD_CALL_HISTORY_ENTRY';
const SET_CACHE = exports.SET_CACHE = prefix + 'SET_CACHE';

/***/ }),

/***/ 35222:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addCallLogEntry = addCallLogEntry;
exports.removeCallLogs = removeCallLogs;
exports.removeCallLogsFinish = removeCallLogsFinish;
exports.retrieveCallLogs = retrieveCallLogs;
exports.retrieveCallLogsFinish = retrieveCallLogsFinish;
exports.setCache = setCache;
var actionTypes = _interopRequireWildcard(__webpack_require__(13179));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Represents a request to fetch call logs.
 * @method retrieveCallLogs
 * @param  {number} amount The number of records to retrieve.
 * @param  {number} offset Starting offset for records to retrieve.
 * @return {Object} A flux standard action.
 */
function retrieveCallLogs(amount, offset) {
  return {
    type: actionTypes.FETCH_CALL_HISTORY,
    payload: {
      amount,
      offset
    }
  };
}

/**
 * Represents a received response from fetching call logs.
 * @method retrieveCallLogsFinish
 * @param  {Object} $0
 * @param  {Object} $0.logs Retrieved call logs.
 * @param  {BasicError} $0.error  Error object, in the case of an error.
 * @return {Object} A flux standard action.
 */
function retrieveCallLogsFinish(_ref) {
  let {
    logs,
    error
  } = _ref;
  return {
    type: actionTypes.FETCH_CALL_HISTORY_FINISH,
    error: !!error,
    payload: error || logs
  };
}

/**
 * Represents a request to delete call logs.
 * @method removeCallLogs
 * @param  {number} recordId Which logs to delete.
 * @return {Object} A flux standard action.
 */
function removeCallLogs(recordId) {
  return {
    type: actionTypes.DELETE_CALL_HISTORY,
    payload: recordId
  };
}

/**
 * Represents a received response from deleting call logs.
 * @method removeCallLogsFinish
 * @param  {Object} $0
 * @param  {number|string} $0.recordId The ID of the removed record. Can also be 'all'.
 * @param  {BasicError} $0.error  Error object, in the case of an error.
 * @return {Object} A flux standard action.
 */
function removeCallLogsFinish(_ref2) {
  let {
    recordId,
    error
  } = _ref2;
  return {
    type: actionTypes.DELETE_CALL_HISTORY_FINISH,
    error: !!error,
    payload: error || recordId
  };
}

/**
 * Represents a request to add a new entry to the call logs.
 * @method addCallLogEntry
 * @param  {Object} $0 The call log entry to add
 * @return {Object} A flux standard action.
 */
function addCallLogEntry(logEntry) {
  return {
    type: actionTypes.ADD_CALL_HISTORY_ENTRY,
    payload: logEntry
  };
}

/**
 * Represents a call to set the cache in the call history
 * @method setCache
 * @param  {Object} $0 call log state to hydrate into app state
 * @return {Object} A flux standard action.
 */
function setCache(data) {
  return {
    type: actionTypes.SET_CACHE,
    payload: data
  };
}

/***/ }),

/***/ 19314:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _isNumber2 = _interopRequireDefault(__webpack_require__(29180));
var actions = _interopRequireWildcard(__webpack_require__(35222));
var _selectors = __webpack_require__(99899);
var eventTypes = _interopRequireWildcard(__webpack_require__(46085));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call History plugin.

// Other plugins

// Libraries

/**
 * The 'call.history' namespace is used to retrieve and inspect the authenticated
 * users call logs.
 *
 * Functions below are all part of this namespace.
 *
 * @public
 * @namespace callHistory
 */

/**
 * Call History API factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} API.
 */
function createAPI(container) {
  const {
    context,
    CallHistoryOperations: operations,
    logManager,
    API_LOG_TAG,
    emitEvent
  } = container;
  const log = logManager.getLogger('CALLHISTORY');
  const callHistoryApi = {
    /**
     * Gets the list of call logs cached locally. The event
     * `callHistory:changed` is used to indicate the local state of logs
     * has been updated.
     * @public
     * @memberof callHistory
     * @requires callHistory
     * @method get
     * @example
     * client.on('callHistory:change', function() {
     *     // Get all call logs when they've been updated.
     *     let callLogs = client.call.history.get();
     * });
     * @returns {Array} A list of call log records, ordered by latest first.
     */
    get() {
      log.debug(`${API_LOG_TAG}call.history.get`);
      return (0, _selectors.getCallHistory)(context.getState());
    },
    /**
     * Fetches the list of call logs and stores them locally. The API
     * {@link #callhistoryget CallHistory.get} can then be used to get
     * the logs from local state after it has been updated.
     * @public
     * @memberof callHistory
     * @requires callHistory
     * @method fetch
     * @param  {number} [amount=50] The number of records to retrieve.
     * @param  {number} [offset=0] Starting offset for records to retrieve.
     */
    async fetch() {
      let amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      log.debug(`${API_LOG_TAG}call.history.fetch, amount: ${amount}, offset: ${offset}`);

      // Backwards compatibility: Dispatch this action at the start of the operation
      //    because that's what the old API does. But because we're not using actions
      //    to trigger sagas here, this doesn't actually do anything. Literally nothing.
      context.dispatch(actions.retrieveCallLogs(amount, offset));

      // Catch invalid input (which breaks SPiDR) before making the request.
      if (!(0, _isNumber2.default)(amount) || amount < 0 || !(0, _isNumber2.default)(offset)) {
        log.info('Unable to retrieve log(s); invalid input.');
        const validationError = new _errors.default({
          code: _errors.callHistoryCodes.BAD_REQUEST,
          message: 'Unable to retrieve log(s); invalid input.'
        });

        // Dispatch the failure action. This is for action logs backwards compatibility.
        context.dispatch(actions.retrieveCallLogsFinish({
          error: validationError
        }));

        // Emit the event for operation failure.
        emitEvent(eventTypes.CALL_HISTORY_ERROR, {
          validationError
        });
        return;
      }
      try {
        await operations.fetch(amount, offset);
      } catch (error) {
        log.info(`call.history.fetch error: ${error.message}`);

        // Emit the event for operation failure.
        emitEvent(eventTypes.CALL_HISTORY_ERROR, {
          error
        });
        return;
      }

      // Emit the events for "logs changed".
      emitEvent(eventTypes.CALL_HISTORY_CHANGE, {});
      emitEvent(eventTypes.CALL_HISTORY_CACHE_CHANGE, {});
    },
    /**
     * Deletes the specified call log.
     * @public
     * @memberof callHistory
     * @requires callHistory
     * @method remove
     * @param  {number} recordId The ID of the call log to be removed.
     */
    async remove(recordId) {
      log.debug(`${API_LOG_TAG}call.history.remove, recordId: ${recordId}`);

      // Backwards compatibility: Dispatch this action at the start of the operation
      //    because that's what the old API does. But because we're not using actions
      //    to trigger sagas, this doesn't actually do anything. Literally nothing.
      context.dispatch(actions.removeCallLogs(recordId));
      if (!recordId) {
        log.info('Could not remove call logs from history; invalid input.');
        const error = new _errors.default({
          code: _errors.callHistoryCodes.BAD_REQUEST,
          message: 'Could not remove call logs; invalid input.'
        });

        // Dispatch the failure action. This is for logging backwards compatibility.
        context.dispatch(actions.removeCallLogsFinish({
          error
        }));
        return;
      }
      try {
        await operations.removeCallLogs(recordId);
      } catch (error) {
        log.info(`call.history.remove error: ${error.message}`);

        // Emit the event for operation failure.
        emitEvent(eventTypes.CALL_HISTORY_ERROR, {
          error
        });
        return;
      }

      // Emit the events for "logs changed".
      emitEvent(eventTypes.CALL_HISTORY_CHANGE, {});
      emitEvent(eventTypes.CALL_HISTORY_CACHE_CHANGE, {});
    },
    /**
     * Deletes all call logs.
     * @public
     * @memberof callHistory
     * @requires callHistory
     * @method clear
     */
    async clear() {
      log.debug(`${API_LOG_TAG}call.history.clear`);

      // Backwards compatibility: Dispatch this action at the start of the operation
      //    because that's what the old API does. But because we're not using actions
      //    to trigger sagas, this doesn't actually do anything. Literally nothing.
      context.dispatch(actions.removeCallLogs('all'));
      try {
        await operations.removeCallLogs('all');
      } catch (error) {
        log.info(`call.history.clear error: ${error.message}`);

        // Emit the event for operation failure.
        emitEvent(eventTypes.CALL_HISTORY_ERROR, {
          error
        });
        return;
      }

      // Emit the events for "logs changed".
      emitEvent(eventTypes.CALL_HISTORY_CHANGE, {});
      emitEvent(eventTypes.CALL_HISTORY_CACHE_CHANGE, {});
    },
    /**
     * Gets the cached call history data and returns stringified data.
     *
     * The data is provided in a format that can be used directly with the
     *    {@link callHistory.setCache call.history.setCache} API. This allows an
     *    application to persist the information across SDK instances when the
     *    backend environment does not support the CallHistory feature.
     * @public
     * @memberof callHistory
     * @requires callHistory
     * @method getCache
     * @returns {string} A stringified list of call log records from the cache, ordered by latest first.
     */
    getCache() {
      log.debug(`${API_LOG_TAG}call.history.getCache`);
      return JSON.stringify((0, _selectors.getCachedHistory)(context.getState()));
    },
    /**
     * Sets the cached call history data, expects stringified data as it will be parsed.
     *
     * The data can be retrieved from the {@link callHistory.getCache
     *    call.history.getCache} API. This allows an
     *    application to persist the information across SDK instances when the
     *    backend environment does not support the CallHistory feature.
     * @public
     * @memberof callHistory
     * @requires callHistory
     * @method setCache
     * @param {string} data The stringified call history data to store in the cache.
     */
    setCache(data) {
      log.debug(`${API_LOG_TAG}call.history.setCache, data: ${data}`);
      let dataObj;
      // Verify that data is a JSON parsable string
      try {
        if (typeof data !== 'string') {
          throw new Error('data is not a valid string');
        }
        dataObj = JSON.parse(data);
      } catch (error) {
        log.info(`Invalid data provided: ${error}`);
        throw error;
      }
      operations.setCache(dataObj);

      // Emit the events for "logs changed".
      emitEvent(eventTypes.CALL_HISTORY_CHANGE, {});
      emitEvent(eventTypes.CALL_HISTORY_CACHE_CHANGE, {});
    }
  };
  return {
    call: {
      history: callHistoryApi
    }
  };
}

/***/ }),

/***/ 46085:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CALL_HISTORY_ERROR = exports.CALL_HISTORY_CHANGE = exports.CALL_HISTORY_CACHE_CHANGE = void 0;
/**
 * Call history state has been updated. See {@link #callhistoryget CallHistory.get} to retrieve new state.
 * @public
 * @memberof callHistory
 * @event callHistory:change
 */
const CALL_HISTORY_CHANGE = exports.CALL_HISTORY_CHANGE = 'callHistory:change';

/**
 * An error occurred while performing a call history operation.
 * @public
 * @memberof callHistory
 * @event callHistory:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 */
const CALL_HISTORY_ERROR = exports.CALL_HISTORY_ERROR = 'callHistory:error';

/**
 * Call history cached state has been updated
 * @public
 * @memberof callHistory
 * @event callHistoryCache:change
 */
const CALL_HISTORY_CACHE_CHANGE = exports.CALL_HISTORY_CACHE_CHANGE = 'callHistoryCache:change';

/***/ }),

/***/ 46441:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAPI", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _api = _interopRequireDefault(__webpack_require__(19314));
var _reducers = _interopRequireDefault(__webpack_require__(88998));
const name = exports.name = 'callHistory';

/***/ }),

/***/ 88998:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var _unionBy2 = _interopRequireDefault(__webpack_require__(84157));
var _sortBy2 = _interopRequireDefault(__webpack_require__(62974));
var _reverse2 = _interopRequireDefault(__webpack_require__(52419));
var actionTypes = _interopRequireWildcard(__webpack_require__(13179));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const reducers = {};
reducers[actionTypes.FETCH_CALL_HISTORY_FINISH] = {
  next(state, action) {
    // Note: If a conflict occurs in the below unionBy, the newer log is
    //      preferred over the older log. This is because SPiDR only keeps
    //      50 records at a time, and it re-uses old recordIds when it
    //      creates new record logs. It's stupid.

    // Get local Logs. Local logs are identified by having a recordID of 16 characters
    const localLogs = state.filter(function (log) {
      return log.recordId.length === 36 && log.duration !== '0';
    });

    // Remove the local logs
    const localLogsRemoved = state.filter(function (log) {
      return log.resourceLocation !== '';
    });

    // Generate a list of unique logs (ie; not found in server logs)
    const uniqueLogs = localLogs.filter(function (log) {
      var result = action.payload.some(isSimilar, log);
      return !result;
    });

    // Combine server logs and new logs.
    const newLogs = (0, _concat2.default)((0, _unionBy2.default)('recordId', action.payload, localLogsRemoved), uniqueLogs);

    // Sort start time, in descending order.
    return (0, _reverse2.default)((0, _sortBy2.default)('startTime', newLogs));
  }
};
reducers[actionTypes.DELETE_CALL_HISTORY_FINISH] = {
  next(state, action) {
    if (action.payload === 'all') {
      return [];
    } else {
      return state.filter(function (log) {
        return log.recordId !== action.payload;
      });
    }
  }
};
reducers[actionTypes.ADD_CALL_HISTORY_ENTRY] = {
  next(state, action) {
    return (0, _concat2.default)(action.payload, state);
  }
};

// rehydrate cache with previously stored data
reducers[actionTypes.SET_CACHE] = {
  next(state, action) {
    return action.payload;
  }
};

// Call History default state is an empty array.
const reducer = (0, _reduxActions.handleActions)(reducers, []);
var _default = exports["default"] = reducer;
/*
 * A helper function to determine if 2 log entries are similar.
 * A log is considered similar under the following conditions:
 *   - the startTime is within 10 seconds
 *   - the duration is within 5 seconds
 *   - the direction is the same
 */
const isSimilar = function (serverLogEntry) {
  const startTimePadding = 10000;
  const durationPadding = 5000;
  if (Math.abs(serverLogEntry.startTime - this.startTime) > startTimePadding) {
    return false;
  }
  if (Math.abs(serverLogEntry.duration - this.duration) > durationPadding) {
    return false;
  }
  if (serverLogEntry.direction !== this.direction) {
    return false;
  }
  return true;
};

/***/ }),

/***/ 99899:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getCachedHistory = getCachedHistory;
exports.getCallHistory = getCallHistory;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
/**
 * Retrieves call history stored in state.
 * Call History is a collection of data records detalining past calls that were made or received.
 * @method getCallHistory
 * @param  {Object} state Redux state.
 * @param  {Object} [options] Options that can be used to apply extra filtering.
 * @param  {number} [options.amout] The number of records to retrieve.
 * @param  {number} [options.offset] Starting offset for records to retrieve.
 * @return {Array} The records, as an array of objects.
 */
function getCallHistory(state, options) {
  if (!options) {
    return (0, _cloneDeep2.default)(state.callHistory);
  }

  // Othewise the amount & offset are guaranteed to be provided,
  // as enforced at the `callhistory.fetch` API level
  const amount = options.amount;
  const offset = options.offset;
  if (offset + amount >= state.callHistory.length) {
    return (0, _cloneDeep2.default)(state.callHistory.slice(offset));
  }
  return (0, _cloneDeep2.default)(state.callHistory.slice(offset, offset + amount));
}

/**
 * Retrieves call history stored in state
 * @method getCachedHistory
 * @param  {Object} state Redux state.
 * @return {Array}
 */
function getCachedHistory(state) {
  return (0, _cloneDeep2.default)(state.callHistory);
}

/***/ }),

/***/ 86316:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerFeature;
var _request = _interopRequireDefault(__webpack_require__(23353));
var _operation = _interopRequireDefault(__webpack_require__(35176));
function registerFeature(bottle) {
  bottle.factory('CallHistoryRequests.fetchCallLogs', container => {
    return (0, _request.default)(bottle.container);
  });
  bottle.factory('CallHistoryOperations.fetch', container => {
    return (0, _operation.default)(bottle.container);
  });
}

/***/ }),

/***/ 35176:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(35222));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call History plugin.

/**
 * Operation factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `fetch` operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    CallHistoryRequests: requests
  } = container;
  const log = logManager.getLogger('CALLHISTORY');

  /**
   * Operation for fetching call logs from the backend.
   * @method fetch
   * @param {number} amount
   * @param {number} offset
   * @returns {Array<Object>} List of retrieved call logs.
   * @throws {BasicError} Throws an error if parameters are invalid.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function fetch(amount, offset) {
    const {
      dispatch
    } = context;
    log.info(`Attempting to retrieve ${amount} call history log(s), with an offset of ${offset}.`);
    try {
      const logs = await requests.fetchCallLogs({
        amount,
        offset
      });
      log.info(`Successfully retrieved ${logs.length} call history log(s).`);

      // Dispatch the finish action to update redux state.
      dispatch(actions.retrieveCallLogsFinish({
        logs
      }));
      return logs;
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(actions.retrieveCallLogsFinish({
        error
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }
  return fetch;
}

/***/ }),

/***/ 23353:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequest;
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Other plugins.

/**
 * Request factory function.
 * @method createRequest
 * @param  {Object} container The bottle container.
 * @return {Function} The `fetchCallLogs` REST operation.
 */
function createRequest(container) {
  const {
    context,
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('CALLHISTORY');

  /**
   * KL REST Request to retrieve call history logs.
   * @method fetchCallLogs
   * @param {number} amount The number of logs to retrieve.
   * @param {number} offset
   * @returns {Array<Object>} List of retrieved call logs.
   * @throws {BasicError} Throws an error if the REST request fails.
   * @throws {BasicError} Throws an error if the server responds with auth issue.
   * @throws {BasicError} Throws an error if the server responds with bad request.
   * @throws {BasicError} Throws an error if the server responds with forbidden service.
   */
  async function fetchCallLogs(params) {
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const version = requestInfo.version;
    const url = `${requestInfo.baseURL}/rest/version/${version}/user/${requestInfo.username}/logHistory`;
    const queryParams = {
      startIndex: params.offset,
      count: params.amount
    };
    const options = {
      method: 'GET',
      url,
      queryParams,
      responseType: 'json',
      body: undefined
    };
    const bodyStatusCodeMap = {
      4: _errors.callHistoryCodes.NOT_AUTHENTICATED,
      27: _errors.callHistoryCodes.FORBIDDEN,
      35: _errors.callHistoryCodes.FORBIDDEN
    };
    const HTTPStatusCodes = {
      FORBIDDEN: 403
    };

    // Credentials not set. Therefore, request is not sent (unauthorized issue).
    if (!requestInfo.username) {
      const message = 'Failed to retrieve call logs; user not authenticated (credentials not set).';
      log.info(message);
      throw new _errors.default({
        code: _errors.callHistoryCodes.NOT_AUTHENTICATED,
        message
      });
    }

    // username is defined, proceed with the request.
    const response = await sendRequest(options);
    const {
      body,
      error,
      result
    } = response;

    // no errors, request is successful.
    if (!error) {
      log.info(`Call log(s) fetched; Status code: ${body.logHistory.statusCode}`);
      let logs = body.logHistory.logItems;

      // Massage the call logs into a more concise format.
      logs = logs.map(function (log) {
        if (log.type === 'CallLog') {
          return log.params;
        }
      });

      // Massage the call logs to include the remoteParticipant property.
      logs = logs.map(function (log) {
        /**
         * There is a bug in SPiDR where it always uses the keys `callerName` and
         * `callerDisplayNumber` for ALL logs, instead of only incoming logs.
         * Because of this, callerDisplayNumber is always the remote participant,
         * even when the local user is the caller.
         * This if statement is a workaround for this problem.
         * // TODO: Remove this if when the SPiDR issue is resolved.
         */
        if (log.direction === 'outgoing' && !log.calleeDisplayNumber && !log.calleeName) {
          log.calleeDisplayNumber = log.callerDisplayNumber;
          log.calleeName = log.callerName;
          // Keep callerDisplayNumber and callerName properties unchanged for
          //    backwards compatibility.
        }
        if (log.direction === 'outgoing') {
          log.remoteParticipant = {
            displayName: log.calleeName,
            displayNumber: log.calleeDisplayNumber
          };
        } else {
          log.remoteParticipant = {
            displayName: log.callerName,
            displayNumber: log.callerDisplayNumber
          };
        }
        return log;
      });
      return logs;
    }
    let errorCode = '';
    let errorMessage = '';
    if (!(0, _isEmpty2.default)(body)) {
      // Handle responses with a body status code.
      const {
        statusCode
      } = body.logHistory;
      errorMessage = `Failed to fetch call log(s); Status code: ${statusCode}`;
      errorCode = bodyStatusCodeMap[statusCode] || _errors.callHistoryCodes.UNKNOWN_ERROR;
    } else {
      // Handle responses without a body status code. HTTP status code is checked to determine the error.
      // Either REST request issues or unknown server issues.
      const {
        code,
        message
      } = result;
      errorMessage = `Failed to fetch call log(s); ${message}.`;
      errorCode = code === HTTPStatusCodes.FORBIDDEN ? _errors.callHistoryCodes.FORBIDDEN : _errors.callHistoryCodes.UNKNOWN_ERROR;
    }
    log.info(errorMessage);
    throw new _errors.default({
      code: errorCode,
      message: errorMessage
    });
  }
  return fetchCallLogs;
}

/***/ }),

/***/ 18895:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "fetch", ({
  enumerable: true,
  get: function () {
    return _fetch.default;
  }
}));
Object.defineProperty(exports, "removeCallLogs", ({
  enumerable: true,
  get: function () {
    return _remove.default;
  }
}));
Object.defineProperty(exports, "setCache", ({
  enumerable: true,
  get: function () {
    return _setCache.default;
  }
}));
Object.defineProperty(exports, "storeCallLog", ({
  enumerable: true,
  get: function () {
    return _storeLog.default;
  }
}));
var _fetch = _interopRequireDefault(__webpack_require__(86316));
var _remove = _interopRequireDefault(__webpack_require__(73667));
var _setCache = _interopRequireDefault(__webpack_require__(78522));
var _storeLog = _interopRequireDefault(__webpack_require__(29200));

/***/ }),

/***/ 73667:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerFeature;
var _request = _interopRequireDefault(__webpack_require__(42149));
var _operation = _interopRequireDefault(__webpack_require__(42086));
function registerFeature(bottle) {
  bottle.factory('CallHistoryRequests.removeCallLogs', container => {
    return (0, _request.default)(bottle.container);
  });
  bottle.factory('CallHistoryOperations.removeCallLogs', container => {
    return (0, _operation.default)(bottle.container);
  });
}

/***/ }),

/***/ 42086:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(35222));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call History plugin.

/**
 * Operation factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `removeCallLogs` operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    CallHistoryRequests: requests
  } = container;
  const log = logManager.getLogger('CALLHISTORY');

  /**
   * Operation for deleting call logs.
   * @method removeCallLogs
   * @param  {number} recordId The ID of the call log to be removed.
   * @throws {BasicError} If the parameters are invalid.
   * @throws {BasicError} If the REST request fails.
   *
   */
  async function removeCallLogs(recordId) {
    log.info('Attempting to remove call log(s):', recordId);
    try {
      await requests.removeCallLogs(recordId);
      log.info('Successfully removed log(s) from call history.');
      // Dispatch the finish action to update redux state.
      context.dispatch(actions.removeCallLogsFinish({
        recordId
      }));
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      context.dispatch(actions.removeCallLogsFinish({
        error
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }
  return removeCallLogs;
}

/***/ }),

/***/ 42149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequest;
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Other plugins.

/**
 * Request factory function.
 * @method createRequest
 * @param  {Object} container The bottle container.
 * @return {Function} The `removeCallLogs` REST operation.
 */
function createRequest(container) {
  const {
    context,
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('CALLHISTORY');

  /**
   * KL REST request to delete a call log.
   * @method removeCallLogs
   * @param  {number|string} recordId
   * @throws {BasicError} If the server responds with an error.
   */
  async function removeCallLogs(recordId) {
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const version = requestInfo.version;
    let url = `${requestInfo.baseURL}/rest/version/${version}/user/${requestInfo.username}/`;
    if (recordId === 'all') {
      url += 'logHistory';
    } else {
      url += `logRecord/${recordId}`;
    }
    const options = {
      method: 'DELETE',
      url,
      responseType: 'none'
    };
    const bodyStatusCodeMap = {
      4: _errors.callHistoryCodes.NOT_AUTHENTICATED,
      27: _errors.callHistoryCodes.FORBIDDEN,
      35: _errors.callHistoryCodes.FORBIDDEN,
      42: _errors.callHistoryCodes.NOT_FOUND
    };
    const HTTPStatusCodes = {
      FORBIDDEN: 403
    };

    // Credentials not set. Therefore, request is not sent (unauthorized issue).
    if (!requestInfo.username) {
      const message = 'Failed to remove call log(s) from call history; user not authenticated (credentials not set).';
      log.info(message);
      throw new _errors.default({
        code: _errors.callHistoryCodes.NOT_AUTHENTICATED,
        message
      });
    }

    // username is defined, proceed with the request.
    const response = await sendRequest(options);
    const {
      body,
      error,
      result
    } = response;

    // no errors, request is successful.
    if (!error) {
      log.info('Call log(s) removed successfully.');
      return;
    }
    let errorCode = '';
    let errorMessage = '';
    if (!(0, _isEmpty2.default)(body)) {
      // Handle responses with a body status code (errors from the server).
      const {
        statusCode
      } = body.logRecord;
      errorMessage = `Failed to remove log(s) from call history. Status Code ${statusCode}`;
      errorCode = bodyStatusCodeMap[statusCode] || _errors.callHistoryCodes.UNKNOWN_ERROR;
    } else {
      // Handle responses without a body status code. Errors from the request helper.
      const {
        code,
        message
      } = result;
      errorMessage = `Failed to remove log(s) from call history. ${message}`;
      errorCode = code === HTTPStatusCodes.FORBIDDEN ? _errors.callHistoryCodes.FORBIDDEN : _errors.callHistoryCodes.UNKNOWN_ERROR;
    }
    log.info(errorMessage);
    throw new _errors.default({
      code: errorCode,
      message: errorMessage
    });
  }
  return removeCallLogs;
}

/***/ }),

/***/ 78522:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerFeature;
var _operation = _interopRequireDefault(__webpack_require__(18523));
function registerFeature(bottle) {
  bottle.factory('CallHistoryOperations.setCache', container => {
    return (0, _operation.default)(bottle.container);
  });
}

/***/ }),

/***/ 18523:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(35222));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call History plugin.

/**
 * Operation factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `setCache` operation.
 */
function createOperation(container) {
  const {
    context
  } = container;

  /**
   * Operation for adding call history cache data to state.
   * @param {Object} data Call history cache.
   */
  function setCache(data) {
    // Dispatch the action to update state.
    context.dispatch(actions.setCache(data));
  }
  return setCache;
}

/***/ }),

/***/ 29200:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerFeature;
var _operation = _interopRequireDefault(__webpack_require__(2816));
function registerFeature(bottle) {
  bottle.factory('CallHistoryOperations.storeCallLog', container => {
    return (0, _operation.default)(bottle.container);
  });
}

/***/ }),

/***/ 2816:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(35222));
var eventTypes = _interopRequireWildcard(__webpack_require__(46085));
var _selectors = __webpack_require__(46942);
var _constants = __webpack_require__(60683);
var _selectors2 = __webpack_require__(11430);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call History plugin.

// Other plugins.

/**
 * Operation factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `storeCallLog` operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    emitEvent
  } = container;
  const log = logManager.getLogger('CALLHISTORY');

  /**
   * Constructs a local call log from a "call ended" action.
   * New callstack specific.
   *
   * This operation defines how a "local call log" is created after a call has ended.
   *    The format of the log mimics the format of server-side call logs.
   * Assumptions:
   *    1. The provided action is a "call ended" action for the new callstack.
   * Responsibilities:
   *    1. Gather all information needed for a call log.
   *    2. Create / format the call log.
   *    3. Update redux state (via actions).
   * @method storeCallLogs
   * @param {string} callId Id of a call that has ended.
   * @param {Object} transition An object representing the previous state of the call.
   */
  function storeCallLog(callId, transition) {
    const call = (0, _selectors2.getCallById)(context.getState(), callId);
    if (!call) {
      log.debug(`Call (${callId}) not in state to create local log.`);
      return;
    }
    if (call.state !== _constants.CALL_STATES.ENDED) {
      return;
    }
    const userInfo = (0, _selectors.getUserInfo)(context.getState());
    const logEntry = {
      recordId: callId,
      startTime: '' + call.startTime,
      duration: '' + (call.endTime - call.startTime),
      callerDisplayNumber: call.isCaller ? userInfo.username : call.remoteParticipant.displayNumber,
      calleeDisplayNumber: call.isCaller ? call.remoteParticipant.displayNumber : userInfo.username,
      calleeName: call.isCaller ? call.remoteParticipant.displayName || call.remoteParticipant.displayNumber : userInfo.username,
      callerName: call.isCaller ? call.displayName ? call.displayName : userInfo.username : call.remoteParticipant.displayName || call.remoteParticipant.displayNumber,
      remoteParticipant: call.remoteParticipant,
      originalRemoteParticipant: null,
      resourceLocation: ''
    };
    if (call.direction === 'incoming') {
      // If the previous state was ringing, and the change was not because the call was
      //      answered by another device (ie. code 9904), then it is a missed call.
      // TODO: 9904 is old FCS behaviour that doesn't actually exist in 4.X anymore.
      if (transition && transition.prevState === _constants.CALL_STATES.RINGING && transition.code !== '9904') {
        logEntry.direction = 'missed';
      } else {
        logEntry.direction = 'incoming';
      }
    } else {
      logEntry.direction = 'outgoing';
    }
    log.debug(`Adding ${logEntry.direction} call to the local call history:`, logEntry);
    context.dispatch(actions.addCallLogEntry(logEntry));

    // Emit the events for "logs changed".
    emitEvent(eventTypes.CALL_HISTORY_CHANGE, {});
    emitEvent(eventTypes.CALL_HISTORY_CACHE_CHANGE, {});
  }
  return storeCallLog;
}

/***/ }),

/***/ 62735:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = callHistoryFactory;
var _interface = __webpack_require__(46441);
var _middleware = _interopRequireDefault(__webpack_require__(27891));
var features = _interopRequireWildcard(__webpack_require__(18895));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Call History plugin factory.
 * @method callHistoryFactory
 */
function callHistoryFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Register the component factory functions to the bottle.
  bottle.factory('CallHistoryAPI', _interface.createAPI);
  // Initialize the plugin features with the bottle scope.
  for (const name in features) {
    features[name](bottle);
  }
  return {
    name: _interface.name,
    capabilities: ['callHistory'],
    reducer: _interface.reducer,
    middleware: _middleware.default
  };
}

/***/ }),

/***/ 27891:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
var _actionTypes = __webpack_require__(39100);
/**
 * Call History middleware factory function.
 * @method createMiddleware
 * @param  {Object} context The factory context.
 * @return {Function} A redux middleware.
 */
function createMiddleware(context) {
  const operations = context.container.CallHistoryOperations;
  /*
   * Redux middleware: Watch for specific actions and trigger operations
   *    when we see them.
   */
  return next => action => {
    /*
     * Let the action pass through all middlewares and reducers before acting
     *    on it. This ensures the operation that triggered the action, and any
     *    state changes involved, has finished completely.
     *
     * The Call History's middleware operations are side-effects: they do not
     *    affect/interact with the original operation and so wait for them to
     *    finish before being triggered.
     */
    const returnVal = next(action);
    switch (action.type) {
      // When a call ends from the Call plugin, Call History should create
      //    a local call log for it.
      case _actionTypes.END_CALL_FINISH:
      case _actionTypes.REJECT_CALL_FINISH:
        if (action.payload.id) {
          operations.storeCallLog(action.payload.id, action.payload.transition);
        }
        break;
      // Call History doesn't act on any other actions.
      default:
        break;
    }
    return returnVal;
  };
}

/***/ }),

/***/ 17385:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CLICK_TO_CALL_FINISH = exports.CLICK_TO_CALL = void 0;
const PREFIX = '@@KANDY/';
const CLICK_TO_CALL = exports.CLICK_TO_CALL = PREFIX + 'CLICK_TO_CALL';
const CLICK_TO_CALL_FINISH = exports.CLICK_TO_CALL_FINISH = PREFIX + 'CLICK_TO_CALL_FINISH';

/***/ }),

/***/ 21585:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.clickToCall = clickToCall;
exports.clickToCallFinish = clickToCallFinish;
var actionTypes = _interopRequireWildcard(__webpack_require__(17385));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Represents a request to POST clickToCall data.
 * @method clickToCall
 * @param  {string} callId
 * @param  {string} caller
 * @param  {string} callee
 * @return {Action} A redux action.
 */
function clickToCall(callId, caller, callee) {
  return {
    type: actionTypes.CLICK_TO_CALL,
    payload: {
      callId,
      caller,
      callee
    }
  };
}

/**
 * Represents that a response was received for a clickToCall request.
 * @method clickToCallFinish
 * @param  {string} callId
 * @param  {string} caller
 * @param  {string} callee
 * @param  {number} requestTime time that the request was made at
 * @param  {Boolean}  [error] A parameter to indicate if there was an issue.
 * @return {Action} A redux action.
 */
function clickToCallFinish(_ref) {
  let {
    callId,
    caller,
    callee,
    requestTime,
    error
  } = _ref;
  if (error) {
    return {
      type: actionTypes.CLICK_TO_CALL_FINISH,
      error: true,
      payload: {
        error
      }
    };
  } else {
    return {
      type: actionTypes.CLICK_TO_CALL_FINISH,
      error: false,
      payload: {
        callId,
        caller,
        callee,
        requestTime
      }
    };
  }
}

/***/ }),

/***/ 43797:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _eventTypes = __webpack_require__(206);
var _selectors = __webpack_require__(56070);
var _uuid = __webpack_require__(60130);
/**
 * The clickToCall namespace is used to bridge a call between two specified devices
 *
 * @public
 * @namespace clickToCall
 * @requires clickToCall
 */

/**
 * ClickToCall API factory function.
 * Defines the interface between the application and the SDK's ClickToCall APIs.
 * @method createAPI
 * @param {Object} container The bottle container.
 * @returns {Object} Available public APIs for ClickToCall.
 */
function createAPI(container) {
  const {
    context,
    emitEvent,
    ClickToCallOperations: operations,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('CLICKTOCALL');
  const clickToCallApi = {
    /**
     * Attempts to establish a call between two specified devices.
     *
     * @public
     * @memberof clickToCall
     * @method make
     * @param  {string} caller A string representing the person making the call
     * @param  {string} callee A string representing the person receiving the call
     * @returns {string} callId A unique id representing the call or undefined if there is an error.
     */
    make: function (caller, callee) {
      log.debug(API_LOG_TAG + 'clickToCall.make: ', caller, callee);
      const callId = (0, _uuid.v4)();
      try {
        operations.clickToCall(callId, caller, callee);
      } catch (error) {
        emitEvent(_eventTypes.CLICK_TO_CALL_ERROR, {
          callId,
          error
        });
        return callId;
      }

      // Emit the event for "click to call started".
      // Only include callId in payload, for backward compatibility
      emitEvent(_eventTypes.CLICK_TO_CALL_STARTED, {
        callId
      });

      // Return the end result from calling this API.
      // For backwards compatibility we only return the callId,
      // not the entire object returned by 'clickToCall' operation.
      return callId;
    },
    /**
     * Gets all local clickToCall calls
     *
     * @public
     * @memberof clickToCall
     * @requires clickToCall
     * @method get
     * @returns {Array} A list of clickToCall records, ordered by earliest requestTime
     */
    get: function () {
      log.debug(API_LOG_TAG + 'clickToCall.get');
      return (0, _selectors.getAll)(context.getState());
    }
  };
  return {
    clickToCall: clickToCallApi
  };
}

/***/ }),

/***/ 206:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CLICK_TO_CALL_STARTED = exports.CLICK_TO_CALL_ERROR = void 0;
/**
 * ClickToCall has successfully started.
 *
 * @public
 * @memberof clickToCall
 * @requires clickToCall
 * @event clickToCall:start
 * @param {Object} params
 * @param {string} params.callId A unique id representing the call made
 */
const CLICK_TO_CALL_STARTED = exports.CLICK_TO_CALL_STARTED = 'clickToCall:start';

/**
 * ClickToCall had an error.
 *
 * @public
 * @memberof clickToCall
 * @requires clickToCall
 * @event clickToCall:error
 * @param {Object} params
 * @param {string} params.callId A unique id representing the call made
 * @param {api.BasicError} params.error The Basic error object.
 *
 */
const CLICK_TO_CALL_ERROR = exports.CLICK_TO_CALL_ERROR = 'clickToCall:error';

/***/ }),

/***/ 77638:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "api", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _api = _interopRequireDefault(__webpack_require__(43797));
var _reducers = _interopRequireDefault(__webpack_require__(19211));
/**
 * This interface is for a clickToCall plugin.
 * @type {string}
 */
const name = exports.name = 'clickToCall';

/***/ }),

/***/ 19211:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _reduxActions = __webpack_require__(68305);
var actionTypes = _interopRequireWildcard(__webpack_require__(17385));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * clicktoCall Plugin.
 *
 * Handles the clicktoCall plugin substate. Defines how to communicate back to
 * the Interface (ie. which actions to use).
 * @param  {Object} [state={}] Default state for the reducer is an empty object.
 * @param  {Action} action A dispatched action.
 * @return {Object} state The new example sub-state.
 */

const reducers = {};
reducers[actionTypes.CLICK_TO_CALL_FINISH] = {
  next(state, action) {
    if (action.error) {
      return state;
    } else {
      return state.concat({
        callId: action.payload.callId,
        caller: action.payload.caller,
        callee: action.payload.callee,
        requestTime: action.payload.requestTime
      });
    }
  }
};

// clickToCall default state is empty array
const reducer = (0, _reduxActions.handleActions)(reducers, []);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 56070:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getAll = getAll;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
// Other Libraries

/**
 * Retrieves clickToCall calls stored in state
 *
 * @method getAll
 * @param  {Object} state Redux state.
 * @return {Array}
 */
function getAll(state) {
  return (0, _cloneDeep2.default)(state.clickToCall);
}

/***/ }),

/***/ 85952:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = clickToCallFactory;
var _interface = __webpack_require__(77638);
var _api = _interopRequireDefault(__webpack_require__(43797));
var _operations = _interopRequireDefault(__webpack_require__(77571));
var _requests = _interopRequireDefault(__webpack_require__(70371));
/**
 * ClickToCall service plugin factory.
 * Provides the SDK with the 'Click to Call' feature.
 * @method clickToCallFactory
 */
function clickToCallFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Register the component factory functions to the bottle.
  bottle.factory('ClickToCallAPI', _api.default);
  bottle.factory('ClickToCallOperations', _operations.default);
  bottle.factory('ClickToCallRequests', _requests.default);
  const capabilities = ['clickToCall'];
  return {
    capabilities,
    name: _interface.name,
    reducer: _interface.reducer
  };
}

/***/ }),

/***/ 77571:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actions = _interopRequireWildcard(__webpack_require__(21585));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // ClickToCall Actions
/**
 * ClickToCall Operations factory function.
 * @method createOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for ClickToCall.
 */
function createOperations(container) {
  const {
    context,
    logManager,
    ClickToCallRequests: requests
  } = container;
  const log = logManager.getLogger('CLICKTOCALL');

  /**
   * Operation to setup a call between a caller and a callee.
   * @method clickToCall
   * @param {string} callId A unique id representing the call.
   * @param {string} caller A string representing the person from whom the call originates.
   * @param {string} callee A string representing the person receiving the call.
   */
  async function clickToCall(callId, caller, callee) {
    const {
      dispatch
    } = context;

    // Backwards compatibility: Dispatch this action at the start of the operation
    // because that's what the old API does. Will not affect state or trigger an event.
    dispatch(actions.clickToCall(callId, caller, callee));

    // ensure both caller and callee are provided in payload.
    if (!caller || !callee) {
      log.info('Missing call participant information');
      const validationError = new _errors.default({
        message: 'callee and/or caller were not provided in CLICK_TO_CALL action payload',
        code: _errors.clickToCallCodes.MISSING_ARGS
      });

      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(actions.clickToCallFinish({
        payload: {
          error: validationError,
          callId
        }
      }));

      // Throw the error so it makes it back to the API.
      throw validationError;
    }
    try {
      const clickToCallData = await requests.clickToCall(callId, caller, callee);
      log.info('Successfully initiated a click to call.');

      // Update state by dispatching an action.
      dispatch(actions.clickToCallFinish(_objectSpread({}, clickToCallData)));
      return clickToCallData;
    } catch (error) {
      // Backwards compatibility: Dispatch this action to signal an error.
      dispatch(actions.clickToCallFinish({
        error,
        callId
      }));

      // Throw the error so it makes it back to the API.
      throw error;
    }
  }
  return {
    // API operations:
    clickToCall
  };
}

/***/ }),

/***/ 70371:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Other plugins.

/**
 * ClickToCall Link REST Requests factory function.
 * Defines the REST interface between the SDK and KL's ClickToCall REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for ClickToCall.
 */
function createRequests(container) {
  const {
    context,
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('CLICKTOCALL');

  /**
   * KL REST request to trigger the call setup between a caller and a callee.
   * @param {string} callId A unique id representing the call.
   * @param {string} caller A string representing the person from whom the call originates.
   * @param {string} callee A string representing the person receiving the call.
   */
  async function clickToCall(callId, caller, callee) {
    const conn = (0, _selectors.getConnectionInfo)(context.getState());
    const {
      server,
      username
    } = conn;
    const version = server.version;
    const url = `${server.protocol}://${server.server}:${server.port}/rest/version/${version}/user/${username}/clicktocall`;
    const data = {
      clickToCallRequest: {
        callingParty: caller,
        calledParty: callee
      }
    };
    const options = {
      url,
      method: 'POST',
      body: JSON.stringify(data)
    };
    const requestTime = Date.now();
    const response = await sendRequest(options);
    const {
      error,
      result
    } = response;
    if (error) {
      // Handle errors from the request helper.
      const {
        message
      } = result;
      const errMsg = `ClickToCall request failed. ${message}`;
      log.info(errMsg);
      throw new _errors.default({
        code: _errors.clickToCallCodes.RESPONSE_ERROR,
        message: errMsg
      });
    } else {
      return {
        callId,
        caller,
        callee,
        requestTime
      };
    }
  }
  return {
    // Operation requests.
    clickToCall
  };
}

/***/ }),

/***/ 93725:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createInterval;
/**
 * Interval creation factory function.
 * @method createInterval
 * @param {function} callback Function to run when the interval timer expires.
 * @param {number} interval Duration of interval.
 * @return {Object} Interval operations.
 */
function createInterval(func, interval) {
  let intervalId = null;

  /**
   * Get the id for the currently running interval.
   * @returns The id for the interval that is currently running
   */
  function getId() {
    return intervalId;
  }

  /**
   * Start the interval
   * @method start
   */
  function start() {
    intervalId = setInterval(async () => {
      await func();
    }, interval);
  }

  /**
   * Stop the interval
   * @method stop
   */
  function stop() {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = null;
    } else {
      throw new Error('This operation interval has not been started yet.');
    }
  }
  if (!func || typeof func !== 'function') {
    throw new Error('No valid callback function provided for interval operation.');
  }
  if (!interval || typeof interval !== 'number' || interval < 0) {
    throw new Error('No valid interval period provided for interval operation.');
  }
  return {
    getId,
    start,
    stop
  };
}

/***/ }),

/***/ 15878:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _uuid = __webpack_require__(60130);
// Generate a unique SDK GUID for the running SDK instance.
const sdkId = (0, _uuid.v4)();
var _default = exports["default"] = sdkId;

/***/ }),

/***/ 25189:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.autoRestart = autoRestart;
exports.defer = defer;
exports.delay = delay;
exports.forwardAction = forwardAction;
exports.logCssSelector = logCssSelector;
exports.mergeValues = mergeValues;
exports.normalizeServices = normalizeServices;
exports.toQueryString = toQueryString;
var _isElement2 = _interopRequireDefault(__webpack_require__(23004));
var _isPlainObject2 = _interopRequireDefault(__webpack_require__(1449));
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _mergeAllWith2 = _interopRequireDefault(__webpack_require__(38041));
var _queryString = _interopRequireDefault(__webpack_require__(34126));
var _effects = __webpack_require__(27422);
// Libraries.

/**
 * Deeply merges the values of multiple objects. Objects on the left receive the values from objects on their right.
 * Unlike lodash's default merge behavior this doesn't merge arrays.
 *
 * @name mergeValues
 * @param {...Object} objects - Objects to merge
 * @return {Object} A new object containing the merged values.
 */
function mergeValues() {
  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }
  return (0, _mergeAllWith2.default)((leftValue, rightValue) => {
    // Overwrite the default behavior of lodash's merge for arrays and simply
    // clobber what's on the left so we don't end up with merged arrays.
    if ((0, _isArray2.default)(leftValue)) {
      return rightValue;
    }
  }, objects);
}

/**
 * Utility function to convert an object to a query string.
 *
 * @param {Object} params An object of query parameters to be parsed and converted for use in a URL string
 * @param {Object} [options] Options to be passed to the query-string library
 * * @param {String} [options.arrayFormat] Format in which to compose array values which were passed as query parameters
 */
function toQueryString() {
  let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (Object.keys(params).length > 0) {
    const stringifiedParams = _queryString.default.stringify(params, options);
    return '?' + stringifiedParams;
  }
  return '';
}

/**
 * Higher-order function to auto-restart sagas when they crash.
 * Based on: https://github.com/redux-saga/redux-saga/pull/644#issuecomment-266454875
 * @method autoRestart
 * @param  {Generator} saga The saga to wrap.
 * @return {Generator} Wrapped saga.
 */
function autoRestart(saga) {
  return function* autoRestarting() {
    // Only restart the saga if it crashed; avoid restarting it if
    //      it returned normally.
    let shouldRestart = false;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    do {
      try {
        yield (0, _effects.call)(saga, ...args);
        shouldRestart = false;
      } catch (e) {
        // TODO: Re-add this log line.
        // Importing the LogManager in this file breaks tests for an unknown
        //    reason. Should find out why so that we can log in our utils.
        // log.error(`Unhandled error in saga ${saga.name}.`, e)
        // eslint-disable-next-line no-console
        console.log(`Unhandled error in saga ${saga.name}.`, e);
        shouldRestart = true;
      }
    } while (shouldRestart);
  };
}

/**
 * Forwards the actions by directly dispatching them.
 * For example, this can be used with a takeEvery effect to grab actions from a channel and dispatch them.
 * @param {Object} action The action to be forwarded.
 * @example
 * const channel = eventChannel(...)
 * yield takeEvery(channel, forwardAction)
 */
function* forwardAction(action) {
  yield (0, _effects.put)(action);
}

/**
 * Ensures that services are in the same format understood by the server regardless,
 * of whether the client provides services as strings or objects.
 * @param {Array} services The list of services requested by the client.
 * @return {Array} A normalized list of services requested by the client.
 */
function normalizeServices() {
  let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return services.map(service => {
    if ((0, _isPlainObject2.default)(service) && service.hasOwnProperty('service')) {
      return service;
    }
    return {
      service: service
    };
  });
}

/**
 * A deferred promise
 * Don't use this unless you know what you are doing:
 *  <https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern>
 * @returns An object a with promise property and functions to resolve and reject
 */
function defer() {
  const d = {};
  d.promise = new Promise((resolve, reject) => {
    d.resolve = resolve;
    d.reject = reject;
  });
  return d;
}

/**
 * Delay execution.
 * @param {number} duration in milleseconds.
 */
function delay(duration) {
  return new Promise(resolve => setTimeout(resolve, duration));
}

/**
 * Returns a log-safe CSS selector string.
 * This is needed because applications that may try to stringify logs that output an HTML element may run
 *   into a circular structure exceptions.
 * @param {*} selector CSS Selector.
 * @returns A log-safe string.
 */
function logCssSelector(selector) {
  return (0, _isElement2.default)(selector) ? selector.id : selector;
}

/***/ }),

/***/ 42850:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.validationResults = exports.validation = exports.parse = exports.errorMessages = exports.enums = void 0;
var _partial2 = _interopRequireDefault(__webpack_require__(8959));
var _map2 = _interopRequireDefault(__webpack_require__(65159));
var _join2 = _interopRequireDefault(__webpack_require__(85569));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _flatMap2 = _interopRequireDefault(__webpack_require__(97665));
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var _2 = _interopRequireDefault(__webpack_require__(99194));
var _logs = __webpack_require__(43862);
var _v8n = _interopRequireDefault(__webpack_require__(66162));
/**
 * This wrapper generates error messages from v8n Validation Errors. https://imbrn.github.io/v8n/api/#validationerror
 * They are logged using LogManager as a warning to our customers when they mess up arguments.
 * To use: `import { enums, validation as v8n, parse } from '<relativePath>/common/validation'`.
 * Build up your validation using v8n.string, v8n.number, v8n.schema, enums, etc.
 * Enums is not part of the v8n library, but provided here for ease of use
 * const v8nValidation = v8n.schema({
      sdpSemantics: enums(['unified-plan']),
      iceServers: v8n.array(),
      iceCollectionIdealTimeout: v8n.positive(),
      serverTurnCredentials: v8n.boolean(),
      iceCollectionCheckFunction: v8n.optional(v8n.function())
    })
 * Create a validator like this: `const parseOptions = parse('nameOfArg', v8nValidation)`
 * Run that validator against the actual values: `parseOptions(options)`
 * Returns the input either way and logs errors, in the future will throw errors on invalid data.
 */

// Custom v8n Rules - https://imbrn.github.io/v8n/api/#extend
_v8n.default.extend({
  function: () => value => typeof value === 'function'
});

// EXPORTS / IO
const validation = exports.validation = (0, _v8n.default)();

// TODO: Add an enums function to the v8n library
// Use as such: `prop: enums( [ 'red', 'blue', 'green' ] )
const enums = values => {
  // Map iteratee isn't just `v8n().exact` due to v8n() returning a new ProxyContext each time
  const v8nExact = value => (0, _v8n.default)().exact(value);
  const exactValues = (0, _map2.default)(v8nExact)(values);
  return (0, _v8n.default)().passesAnyOf(...exactValues);
};

// Name -> v8nRule -> Input -> [String]
exports.enums = enums;
const errorMessages = name => v8nRule => input => (0, _flatMap2.default)(validationErrorMessages(name))(validationResults(v8nRule)(input));
exports.errorMessages = errorMessages;
const validationResults = v8nRule => input => v8nRule.testAll(input);

// (Name, v8nRule) -> Input -> IO Input
exports.validationResults = validationResults;
const parse = (name, v8nRule) => input => {
  const errors = errorMessages(name)(v8nRule)(input);
  if ((0, _isEmpty2.default)(errors)) {
    return input;
  } else {
    const log = _logs.logManager.getLogger('VALIDATION');
    log.info(prettyPrint(errors)); // This is an IO side-effect
    return input;
  }
};

// DEFINITIONS

// Name -> ValidationError -> [String]
// https://imbrn.github.io/v8n/api/#validationerror
exports.parse = parse;
const validationErrorMessages = name => validationError => {
  const startingPath = [];
  return validationErrorMessageHelper(startingPath)(name)(validationError);
};

// [String] -> Name -> ValidationError -> [String]
const validationErrorMessageHelper = acc => name => _ref => {
  let {
    cause,
    rule,
    target,
    value
  } = _ref;
  const path = (0, _concat2.default)(acc)(target || name);
  if ((0, _isArray2.default)(cause)) {
    const newVEM = validationErrorMessageHelper(path)(target);
    return (0, _flatMap2.default)(newVEM)(cause);
  } else {
    return `${(0, _join2.default)('.')(path)} has value of '${value}', but it should be ${ruleMessage(rule)}`;
  }
};

// Rule -> String
// https://imbrn.github.io/v8n/api/#rule
const ruleMessage = _ref2 => {
  let {
    name,
    args
  } = _ref2;
  switch (name) {
    case 'schema':
      return 'Schema';
    case 'passesAnyOf':
      return `any of '${(0, _join2.default)("', '")((0, _map2.default)(enumName)(args))}'`;
    case 'between':
      return `between ${args.join(', ')}`;
    default:
      return `${aOrAn(name)} ${name}`;
  }
};

// HELPERS
const enumName = arg => arg.chain[0].args; // v8n internals
const prettyPrint = (0, _partial2.default)(JSON.stringify)([_2.default, null, 4]);
// https://dictionary.cambridge.org/grammar/british-grammar/a-an-and-the
const aOrAn = string => /[aeiou]/i.test(string[0]) ? 'an' : 'a';

/***/ }),

/***/ 26218:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = configFactory;
var _interface = _interopRequireDefault(__webpack_require__(13522));
var _api = _interopRequireDefault(__webpack_require__(86304));
/**
 * This file is a plugin for the "Config" plugin
 * Reference info: https://confluence.genband.com/display/KSDK/Plugins
 */

/**
 * Config Plugin
 *
 * @method configImplementation
 * @return {Object} An instance of the "Config" plugin.
 */

// yarn lint:docs complains if this isn't defined in a plugin.
/**
 * Config service plugin factory.
 * Provides the SDK with the 'Config' feature.
 * @module config
 */
function configFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Register the component factory functions to the bottle.
  bottle.factory('ConfigAPI', _api.default);
  const capabilities = ['config'];
  return {
    // Interface Components:
    name: _interface.default.name,
    capabilities,
    api: _interface.default.createAPI,
    reducer: _interface.default.reducer
  };
}

/***/ }),

/***/ 29341:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SET_SDP_HANDLERS = exports.CONFIG_UPDATE = void 0;
const PREFIX = '@@KANDY/';
const CONFIG_UPDATE = exports.CONFIG_UPDATE = PREFIX + 'CONFIG_UPDATE';
const SET_SDP_HANDLERS = exports.SET_SDP_HANDLERS = PREFIX + 'SET_SDP_HANDLERS';

/***/ }),

/***/ 43424:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setSdpHandlers = setSdpHandlers;
exports.update = update;
var actionTypes = _interopRequireWildcard(__webpack_require__(29341));
var _sanitizeSdesFromSdp = __webpack_require__(22379);
var _modifySdpBandwidth = __webpack_require__(46699);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Add or update a specific key within the store.config.
 *
 * @param {Object} values The values that will be placed in the store.
 * @param {string} [pluginName] The plugin name of the config being set.
 * @return {Action} action A redux action.
 */
function update(values) {
  let pluginName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var payload;
  // Use the plugin name as a substate key, if present.
  if (pluginName) {
    payload = {
      [pluginName]: values
    };
  } else {
    payload = values;
  }
  return {
    type: actionTypes.CONFIG_UPDATE,
    payload: payload
  };
}

/**
 * Updates the SDP Handlers in the call plugin configs
 *
 * @method setSdpHandlers
 * @param {Array<call.SdpHandlerFunction>} sdpHandlers The list of SDP handler to set in the config.
 * @returns {Object} A flux standard action.
 */
function setSdpHandlers(sdpHandlers) {
  /*
   * Set SDP handlers to be used for every operation:
   *
   * 1. Application provided SDP handlers.
   *
   * 2. Disable DTLS-SDES crypto method (ie. delete the line) if there's a better
   *    crypto method enabled. WebRTC only allows one method to be enabled.
   *    This is needed for interoperability with non-browser endpoints that include
   *    SDES as a fallback method.
   *
   *
   * 3. Modify sdp and add bandwidth limits on it if bandwidth controls are provided.
   */
  sdpHandlers.push(_sanitizeSdesFromSdp.sanitizeSdesFromSdp);
  sdpHandlers.push(_modifySdpBandwidth.modifySdpBandwidth);
  return {
    type: actionTypes.SET_SDP_HANDLERS,
    payload: {
      sdpHandlers
    }
  };
}

/***/ }),

/***/ 86304:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var actions = _interopRequireWildcard(__webpack_require__(43424));
var _selectors = __webpack_require__(44790);
var _configs = _interopRequireDefault(__webpack_require__(87878));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Config plugin.

// Other plugins.

/**
 * Config API factory function.
 * Defines the interface between the application and the SDK's Config APIs.
 * @method createAPI
 * @param {Object} container The bottle container.
 * @returns {Object} Available public APIs for Config.
 */
function createAPI(container) {
  const {
    context,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('CONFIG');
  const configApi = {
    /**
     * Gets the current configuration Object. This is the object that is initially set as part of SDK creation using 'create' function.
     *
     * @public
     * @static
     * @memberof api
     * @requires config
     * @method getConfig
     * @returns {Object} A configuration Object.
     */
    getConfig: function () {
      log.debug(API_LOG_TAG + 'getConfig');
      return (0, _selectors.getConfiguration)(context.getState());
    },
    /**
     * Update the configuration values for the SDK to use.
     *
     * This API will only modify the configurations provided, leaving other configurations
     *   as they were originally set, by performing a merge of the new values into the
     *   previous values.
     *
     * Please note that the object provided to the `updateConfig` API may be different
     *   than the object retrieved from the {@link api.getConfig getConfig} API. This may happen when a format
     *   change has happened and the SDK modifies the provided format to alleviate
     *   backwards-compatibility issues. We recommend ensuring the configurations you
     *   provide are as described by the {@link config} section.
     *
     * @public
     * @static
     * @memberof api
     * @requires config
     * @method updateConfig
     * @param {Object} newConfigValues Key-value pairs that will be placed into the store. See {@link config} for details on what key-value pairs are available for use.
     * @example
     * // Instantiate the SDK with certain configs.
     * const client = create({
     *   authentication: { ... },
     *   logs: { ... },
     *   ...
     * })
     *
     * // Modify a subsection of the configs at a later time.
     * // This will only update the specified configurations.
     * client.updateConfig({
     *     logs: {
     *       loglevel: 'DEBUG'
     *     }
     * })
     */
    updateConfig: function (newConfigValues) {
      log.debug(API_LOG_TAG + 'updateConfig: ', newConfigValues);

      // Clone the configs so we don't mutate the application's object.
      const configs = (0, _cloneDeep2.default)(newConfigValues);

      // Validate the new config provided by the application.
      if (configs.call) {
        // TODO: Should add validation for all configs, not just the call-related ones
        //      (by parsing using the specific 'v8nValidation' constant,
        //       available in each plugin).
        configs.call = (0, _configs.default)(configs.call);
      }
      context.dispatch(actions.update(configs));
    }
  };
  return configApi;
}

/***/ }),

/***/ 13522:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _api = _interopRequireDefault(__webpack_require__(86304));
var _reducers = _interopRequireDefault(__webpack_require__(30658));
/**
 * This interface is for a Config plugin.
 * @type {string}
 */
const name = 'config';
var _default = exports["default"] = {
  reducer: _reducers.default,
  name,
  api: _api.default.configApi
};

/***/ }),

/***/ 30658:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(29341));
var _reduxActions = __webpack_require__(68305);
var _utils = __webpack_require__(25189);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
reducers[actionTypes.CONFIG_UPDATE] = {
  next(state, action) {
    return (0, _utils.mergeValues)(state, action.payload);
  }
};
reducers[actionTypes.SET_SDP_HANDLERS] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      call: _objectSpread(_objectSpread({}, state.call), {}, {
        sdpHandlers: action.payload.sdpHandlers
      })
    });
  }
};

// Config default state is an empty Object
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 44790:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getConfiguration = getConfiguration;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
/**
 * Retrieves configuration Object stored in state
 *
 * @method getConfiguration
 * @param  {Object} state Redux state.
 * @return {Object}
 */
function getConfiguration(state) {
  return (0, _cloneDeep2.default)(state.config);
}

/***/ }),

/***/ 89214:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = baseConnectivity;
var _interface = _interopRequireDefault(__webpack_require__(25726));
var _events = _interopRequireDefault(__webpack_require__(25592));
var _sagas = __webpack_require__(49070);
var _actions = __webpack_require__(43424);
var _actions2 = __webpack_require__(60279);
var _effects = __webpack_require__(27422);
var _constants = __webpack_require__(49833);
// Connectivity plugin.

// Other plugins.

// Libraries.

/**
 * Base Connectivity plugin factory.
 * Responsible for handling websockets.
 * @method baseConnectivity
 * @param  {Object} [options={}] Connectivity configs. See above.
 * @return {Object} Plugin - A connectivity plugin.
 */
function baseConnectivity(options) {
  // For backwards compatibility, convert the old style to the new style.
  if (typeof options.method === 'string') {
    const method = options.method;
    options.method = {
      type: method,
      // In both old scenarios, the client is responsible.
      responsibleParty: _constants.connCheckResponsibility.CLIENT
    };
  }
  function* init() {
    yield (0, _effects.put)((0, _actions.update)(options, _interface.default.name));
    yield (0, _effects.put)((0, _actions2.mapEvents)(_events.default));
  }
  return {
    sagas: [_sagas.wsConnectFlow],
    init,
    name: _interface.default.name,
    reducer: _interface.default.reducer,
    api: _interface.default.api
  };
}

/***/ }),

/***/ 49070:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.clientPingFlow = clientPingFlow;
exports.connectWebsocket = connectWebsocket;
exports.websocketLifecycle = websocketLifecycle;
exports.wsConnectFlow = wsConnectFlow;
var _websocket = __webpack_require__(62845);
var _selectors = __webpack_require__(53951);
var actionTypes = _interopRequireWildcard(__webpack_require__(53202));
var actions = _interopRequireWildcard(__webpack_require__(69897));
var _selectors2 = __webpack_require__(46942);
var _logs = __webpack_require__(43862);
var _effects = __webpack_require__(27422);
var _errors = _interopRequireDefault(__webpack_require__(83437));
var _codes = __webpack_require__(87772);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Connectivity plugin.

// Other plugins.

// Libraries.

// Helpers

// Get the logger
const log = _logs.logManager.getLogger('CONNECTIVITY');
function* wsConnectFlow() {
  log.info('Creating channel for handling websocket actions ...');
  const chan = yield (0, _effects.actionChannel)(actionTypes.WS_ATTEMPT_CONNECT);
  log.info('Channel successfully created.');
  yield (0, _effects.takeEvery)(chan, websocketLifecycle);
}

/**
 * Saga that handles a websocket over its lifecycle.
 * @method websocketLifecycle
 * @param  {Object} wsConnectAction
 */
function* websocketLifecycle(wsConnectAction) {
  const wsInfo = wsConnectAction.payload;
  const {
    platform,
    isReconnect
  } = wsConnectAction.meta;

  // Redux-saga take() pattern.
  // Take disconnect websocket action for this platform.
  function disconnectWebsocketPattern(action) {
    return action.type === actionTypes.WS_DISCONNECT && action.meta.platform === platform;
  }
  log.info(`Connecting to websocket on platform: ${platform} ...`);
  // Try to open the websocket, but cancel if we get a disconnect action.
  const {
    websocket,
    disconnect
  } = yield (0, _effects.race)({
    websocket: (0, _effects.call)(connectWebsocket, wsInfo, platform),
    disconnect: (0, _effects.take)(disconnectWebsocketPattern)
  });

  // If the websocket didn't open, stop here. Dispatch the error if there was one.
  if (disconnect) {
    log.info('Received disconnect during websocket connection; stopping.');
    return;
  } else if (websocket.error) {
    if (isReconnect) {
      yield (0, _effects.put)(actions.wsReconnectFailed(undefined, platform));
      return;
    } else {
      yield (0, _effects.put)(actions.wsConnectFinished(new _errors.default({
        message: websocket.message,
        code: _codes.subscriptionCodes.WS_CONNECTION_ERROR
      }), platform));
      return;
    }
  }

  // Append information to the websocket, so that its accessible elsewhere.
  // TODO: Remove this and replace with proper redux state storage.
  const connConfig = yield (0, _effects.select)(_selectors.getConnectivityConfig);
  websocket.kandy = connConfig;
  websocket.kandy.wsInfo = wsInfo;
  websocket.kandy.platform = platform;
  const emitTask = yield (0, _effects.fork)(_websocket.wsEmitter, websocket, platform);
  log.debug(`Starting a clientPing flow on ${platform} ...`);
  const pingFlow = yield (0, _effects.fork)(clientPingFlow, websocket, platform);

  // Dispatch the finish action, to notify that the websocket is connected.
  yield (0, _effects.put)(actions.wsConnectFinished(websocket, platform));

  // Redux-saga take() pattern.
  // Take end of lifecycle WS actions for this platform.
  function closeWebsocketPattern(action) {
    return (action.type === actionTypes.WS_DISCONNECT || action.type === actionTypes.LOST_CONNECTION || action.type === actionTypes.WS_CLOSED || action.type === actionTypes.WS_ERROR) && action.meta.platform === platform;
  }

  // Wait for a disconnect or lost connection action.
  const action = yield (0, _effects.take)(closeWebsocketPattern);
  log.debug(`Cancelling outstanding tasks upon receiving action: ${action.type}`);

  // Whether we're disconnecting or have lost connection,
  //      we want to cancel these tasks either way.
  yield (0, _effects.cancel)([emitTask, pingFlow]);
  log.debug('Cleaning up websocket connection ...');
  yield (0, _effects.call)(_websocket.cleanupWebSocket, websocket);
  if (action.type === actionTypes.WS_DISCONNECT) {
    // If we're disconnecting, close the websocket to end it's lifecycle.
    yield (0, _effects.put)(actions.wsDisconnectFinished(undefined, platform));
    log.info('Successfully disconnected websocket connection.');
  } else if (action.type === actionTypes.WS_CLOSED && action.payload.code === 1000) {
    // 1000 signifies a normal closure
    // Normal websocket close, don't try to reconnect
    log.debug('Websocket closed normally.');
    yield (0, _effects.put)(actions.wsReconnectFailed(undefined, platform));
  } else {
    if (websocket.kandy.autoReconnect) {
      // If using tokens, ensure the URL is using the "latest" token from state.
      const {
        bearerAccessToken,
        accessToken
      } = yield (0, _effects.select)(_selectors2.getConnectionInfo);
      // If using bearerAccessToken and WS query mode, set the token as part
      //    of the WS reconnect query string.
      if (bearerAccessToken && connConfig.webSocketOAuthMode === 'query') {
        wsInfo.params = {
          access_token: bearerAccessToken
        };
      } else if (accessToken) {
        // TODO: An "accessToken" was a CIM concept. This likely should be removed
        //    but is dependent on the Auth plugin not allowing an application
        //    to provide one (ie. we still document it as a thing in Auth).
        wsInfo.params = {
          token: accessToken
        };
      }

      // If we've lost connection, re-dispatch the initial action, so that we can
      //      start the lifecycle over.
      log.debug('Attempting to reconnect using a new websocket ...');
      yield (0, _effects.put)(actions.wsAttemptConnect(wsInfo, wsConnectAction.meta.platform, true));
    } else {
      log.debug('Not attempting to reconnect to websocket autoReconnect is false.');
      yield (0, _effects.put)(actions.wsReconnectFailed(undefined, platform));
    }
  }
}

/**
 * This flow is responsible for handling keepAlive method for client,
 * if keepAlive is used the client simply sends the keepAlive message to the websocket after waiting the pingInterval
 * @param {Object} ws a websocket connected to the backend
 * @return {Object} yields a Flux standard action
 */
function* clientPingFlow(ws) {
  const {
    platform,
    autoReconnect
  } = ws.kandy;
  const {
    checkConnectivity,
    method
  } = yield (0, _effects.select)(_selectors.getConnectivityConfig);

  // WS message is a keep-alive ping.
  const message = {
    message_type: 'ping'
  };
  let shouldCheck;
  while (true) {
    // If the flag was explicitly set in state, prefer that over the config.
    shouldCheck = yield (0, _effects.select)(_selectors.getCheckConnectivity);
    shouldCheck = typeof shouldCheck !== 'undefined' ? shouldCheck : checkConnectivity;
    const {
      pingInterval
    } = yield (0, _effects.select)(_selectors.getConnectivityConfig);
    const intervalInSeconds = pingInterval / 1000;
    if (shouldCheck) {
      log.debug(`${platform} is sending a ${method.type} every ${intervalInSeconds} sec.`);
      const error = _sendWSMessage(ws, JSON.stringify(message));
      if (error) {
        log.error('Exception in clientPing flow: ' + error.message);
        if (autoReconnect) {
          log.debug(`${platform} is attempting to auto reconnect ...`);
        }
        yield (0, _effects.put)(actions.lostConnection(undefined, platform));
        break;
      }
    } else {
      log.debug('Set to not check websocket connectivity. Waiting for connectivity status change ...');

      // If we shouldn't ping, wait until we receive a trigger to (maybe) ping.
      const shouldCheckConnectivity = yield (0, _effects.take)(action => action.type === 'CHANGE_CONNECTIVITY_CHECKING' && action.payload);
      log.debug(`Connectivity check setting changed. Check connectivity?: ${shouldCheckConnectivity}`);
      continue;
    }

    // Wait for either the ping interval, or a disconnect.
    const {
      disconnect
    } = yield (0, _effects.race)({
      expiry: (0, _effects.delay)(pingInterval),
      disconnect: (0, _effects.take)(actionTypes.WS_DISCONNECT_FINISHED)
    });

    // If we received a disconnect action, stop the pings and exit.
    //    Otherwise, let the while(true) loop.
    if (disconnect) {
      log.debug('Got disconnect action. Exiting from clientPing flow ...');
      break;
    }
  }
}

/**
 * Generic Websocket message that takes a websocket and a message and sends it
 * @param  {Object} ws  websocket
 * @return {Object}     Error object
 */
function _sendWSMessage(ws, message) {
  try {
    if (ws && ws.readyState === 1) {
      log.debug('Sending message on websocket.', message);
      ws.send(message);
    } else {
      throw new _errors.default({
        message: 'websocket was not in readyState',
        code: _codes.connectivityCodes.WS_MESSAGE_ERROR
      });
    }
  } catch (e) {
    return e;
  }
}

/**
 * Helper function for connecting to a websocket.
 * Attempts to connect a specified number of times before returning an error.
 * Includes a delay in between attempts, determined by configs.
 * @method connectWebsocket
 * @param  {Object} wsInfo
 * @return {Websocket|Object}  Either a connected websocket or an error object.
 */
function* connectWebsocket(wsInfo, platform) {
  const configs = yield (0, _effects.select)(_selectors.getConnectivityConfig);
  let connectionAttempt = 0;
  // The delay between attempts should not be shorter than 2 seconds.
  let delayTime = configs.reconnectDelay > 2000 ? configs.reconnectDelay : 2000;
  let websocket;

  // If no limit is set, we will continually attempt to reconnect.
  if (!configs.reconnectLimit) {
    log.debug('No connectivity reconnect limit set.');
  }
  function* safeOpenWs(wsInfo) {
    let websocket;
    try {
      websocket = yield (0, _effects.call)(_websocket.openWebsocket, wsInfo);
    } catch (err) {
      websocket = err;
    }
    return websocket;
  }
  while (connectionAttempt < configs.reconnectLimit || !configs.reconnectLimit) {
    const wsConnectStart = Date.now();
    const {
      openWs,
      timeout
    } = yield (0, _effects.race)({
      openWs: (0, _effects.call)(safeOpenWs, wsInfo),
      timeout: (0, _effects.delay)(delayTime)
    });
    const attemptDuration = Date.now() - wsConnectStart;

    // Checking for both timeout and open websocket errors here since we need to calculate the next delay parameters in
    //  both scenarios
    if (timeout || openWs && openWs.error) {
      connectionAttempt++;
      websocket = openWs;
      log.debug(`Failed to connect to websocket on ${platform}. (Attempt #${connectionAttempt}). Message: ${timeout ? 'Timed out' : websocket.message}.`);

      // If we are still under the reconnect attempt limit, calculate the next delay time and delay before retrying.
      if (connectionAttempt < configs.reconnectLimit || !configs.reconnectLimit) {
        // Calculate the remaining delay time by checking how long the previous connection attempt was.
        // Do this before potentially lengthening the `delayTime` value.
        const remainingDelay = timeout ? 0 : delayTime - attemptDuration;

        // Increase the delay time for the next loop if we're not at the limit.
        if (delayTime !== configs.reconnectTimeLimit) {
          delayTime = configs.reconnectDelay * Math.pow(configs.reconnectTimeMultiplier, connectionAttempt);
          delayTime = delayTime < configs.reconnectTimeLimit ? delayTime : configs.reconnectTimeLimit;
        }
        log.debug(`Websocket will attempt to reconnect after ${remainingDelay} ms on ${platform}`);
        if (remainingDelay > 0) {
          yield (0, _effects.delay)(remainingDelay);
        }
      } else {
        log.debug(`Stopping websocket connection attempts on ${platform}.`);
        // We are at reconnect attempt limit; if it was due to a timeout we need to return an error. In case of
        //  websocket error, that will be returned by the websocket.
        if (timeout) {
          return {
            error: true,
            message: `Websocket connection timed out. Tried ${connectionAttempt} times to connect.`
          };
        }
        break;
      }
    } else if (openWs) {
      websocket = openWs;
      break;
    }
  }

  // Return either the websocket or the latest error.
  return websocket;
}

/***/ }),

/***/ 62845:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cleanupWebSocket = cleanupWebSocket;
exports.openWebsocket = openWebsocket;
exports.wsEmitter = wsEmitter;
var _actions = __webpack_require__(69897);
var _reduxSaga = __webpack_require__(7);
var _effects = __webpack_require__(27422);
var _utils = __webpack_require__(25189);
var _actions2 = __webpack_require__(32697);
var _logs = __webpack_require__(43862);
// Other plugins.

const INITIAL_BUFFER_SIZE = 50;
const log = _logs.logManager.getLogger('CONNECTIVITY');

/**
 * Create a new websocket.
 * @method openWebsocket
 * @param  {Object} options Websocket configuration options.
 * @param {string} options.protocol Websocket protocol to use.
 * @param {string} options.server Websocket hostname.
 * @param {string} options.port Websocket port to use.
 * @param {string} options.url Websocket notification channel.
 * @param {Object} options.params A list of URL params to attach to the websocket.
 * @return {WebSocket} ws Newly connected websocket.
 */
function openWebsocket(options) {
  // Create the websocket.
  const wsUrl = `${options.protocol}://${options.server}:${options.port}${options.url}` + (0, _utils.toQueryString)(options.params);
  log.debug(`Opening socket at: ${wsUrl}`);
  const ws = new WebSocket(wsUrl);

  // Use a promise to wait for the first message from the websocket.
  // This indicates whether the WS opened successfully or not.
  const validateWS = new Promise((resolve, reject) => {
    const onOpen = function () {
      ws.onopen = null;
      ws.onerror = null;
      resolve(ws);
    };
    const onError = function () {
      ws.onopen = null;
      ws.onerror = null;

      // TODO: Fix this?
      /* eslint-disable-next-line prefer-promise-reject-errors */
      reject({
        // Websocket doesn't return error codes for security reasons and as such all websocket
        // errors have to be handled the same.
        error: true,
        message: 'Could not connect to websocket. Received error on open.'
      });
    };
    ws.onopen = onOpen;
    ws.onerror = onError;
  });
  return validateWS;
}

/**
 * Clean-up a provided websocket.
 * @method cleanupWebSocket
 * @param  {Websocket} ws Websocket to be cleaned-up.
 * @return {Websocket} ws The websocket after being cleaned.
 */
function cleanupWebSocket(ws) {
  if (ws.close) {
    ws.close();
  }
  ws.onclose = null;
  ws.onmessage = null;
  ws.onopen = null;
  ws.onerror = null;
}

/**
 * Create an event channel for a given websocket
 * @param  {WebSocket} ws       The websocket to make an event channel for.
 * @param {string} [platform=link]    The backend platform associated with the websocket.
 * @return {EventChannel}              The event channel corresponding to the WebSocket
 */
function createWsChannel(ws, platform) {
  // this function handles server messages
  return (0, _reduxSaga.eventChannel)(emit => {
    // Define handlers
    ws.onmessage = message => {
      // Mark this websocket are being connected as of now.
      ws.kandy.lastContact = Date.now();
      var data = JSON.parse(message.data);
      log.debug('Received message on websocket.', data);
      emit((0, _actions2.websocketNotification)(data, platform));
    };
    ws.onclose = data => {
      emit((0, _actions.wsClosed)(data, platform));
      emit(_reduxSaga.END);
    };
    ws.onerror = err => {
      emit((0, _actions.wsError)(new Error(err), platform));
      emit(_reduxSaga.END);
    };
    return () => cleanupWebSocket(ws);
  }, _reduxSaga.buffers.expanding(INITIAL_BUFFER_SIZE));
}

/**
 * Saga worker for creating a websocket and emitting its events
 * @param {Object} ws configuration options.
 * @param {string} [platform=link]    The backend platform associated with the websocket.
 * @return {Generator}
 */
function* wsEmitter(ws, platform) {
  var wsChannel = yield (0, _effects.call)(createWsChannel, ws, platform);
  while (true) {
    const action = yield (0, _effects.take)(wsChannel);
    yield (0, _effects.put)(action);
  }
}

/***/ }),

/***/ 53202:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.WS_RECONNECT_FAILED = exports.WS_ERROR = exports.WS_DISCONNECT_FINISHED = exports.WS_DISCONNECT = exports.WS_CONNECT_FINISHED = exports.WS_CLOSED = exports.WS_ATTEMPT_CONNECT = exports.LOST_CONNECTION = exports.CHANGE_PING_INTERVAL = exports.CHANGE_CONNECTIVITY_CHECKING = void 0;
const prefix = '@@KANDY/CONN/';

// Actions to tell connectivity plugin what to do
const WS_ATTEMPT_CONNECT = exports.WS_ATTEMPT_CONNECT = prefix + 'WS_ATTEMPT_CONNECT';
const WS_CONNECT_FINISHED = exports.WS_CONNECT_FINISHED = prefix + 'WS_CONNECT_FINISHED';
const WS_DISCONNECT = exports.WS_DISCONNECT = prefix + 'WS_DISCONNECT';
const WS_DISCONNECT_FINISHED = exports.WS_DISCONNECT_FINISHED = prefix + 'WS_DISCONNECT_FINISHED';
const WS_RECONNECT_FAILED = exports.WS_RECONNECT_FAILED = prefix + 'WS_RECONNECT_FAILED';

// actions for hooking into connectivity plugin behaviour
const WS_CLOSED = exports.WS_CLOSED = prefix + 'WS_CLOSED';
const WS_ERROR = exports.WS_ERROR = prefix + 'WS_ERROR';
const LOST_CONNECTION = exports.LOST_CONNECTION = prefix + 'LOST_CONNECTION';
const CHANGE_CONNECTIVITY_CHECKING = exports.CHANGE_CONNECTIVITY_CHECKING = prefix + 'CHANGE_CONNECTIVITY_CHECKING';
const CHANGE_PING_INTERVAL = exports.CHANGE_PING_INTERVAL = prefix + 'CHANGE_PING_INTERVAL';

/***/ }),

/***/ 69897:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.wsReconnectFailed = exports.wsError = exports.wsDisconnectFinished = exports.wsDisconnect = exports.wsConnectFinished = exports.wsClosed = exports.wsAttemptConnect = exports.lostConnection = exports.changePingInterval = exports.changeConnectivityChecking = void 0;
var actionTypes = _interopRequireWildcard(__webpack_require__(53202));
var _constants = __webpack_require__(49833);
var _errors = _interopRequireDefault(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Constants

/**
 * @param {string} type
 */
function createWsAction(type) {
  /**
   * @param {any=} payload
   * @param {string=} platform
   * @param {boolean=} [isReconnect] flag to signify if we are reconnecting or not.
   */
  function action(payload) {
    let platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.platforms.LINK;
    let isReconnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return {
      type,
      // TODO: This must check for basic error eventually instead.
      error: payload instanceof Error || payload instanceof _errors.default,
      payload,
      meta: {
        platform,
        isReconnect
      }
    };
  }
  return action;
}
const wsAttemptConnect = exports.wsAttemptConnect = createWsAction(actionTypes.WS_ATTEMPT_CONNECT);
const wsDisconnect = exports.wsDisconnect = createWsAction(actionTypes.WS_DISCONNECT);
const wsConnectFinished = exports.wsConnectFinished = createWsAction(actionTypes.WS_CONNECT_FINISHED);
const wsDisconnectFinished = exports.wsDisconnectFinished = createWsAction(actionTypes.WS_DISCONNECT_FINISHED);
const wsReconnectFailed = exports.wsReconnectFailed = createWsAction(actionTypes.WS_RECONNECT_FAILED);
const wsClosed = exports.wsClosed = createWsAction(actionTypes.WS_CLOSED);
const wsError = exports.wsError = createWsAction(actionTypes.WS_ERROR);
const lostConnection = exports.lostConnection = createWsAction(actionTypes.LOST_CONNECTION);
const changeConnectivityChecking = exports.changeConnectivityChecking = createWsAction(actionTypes.CHANGE_CONNECTIVITY_CHECKING);
const changePingInterval = exports.changePingInterval = createWsAction(actionTypes.CHANGE_PING_INTERVAL);

/***/ }),

/***/ 44211:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = api;
var _constants = __webpack_require__(49833);
var _actions = __webpack_require__(69897);
var _selectors = __webpack_require__(53951);
var _selectors2 = __webpack_require__(46942);
var _logs = __webpack_require__(43862);
// Constants

/**
 * The 'connection' namespace is used to connect and maintain connections between
 * the SDK and one or more backend servers.
 *
 * @public
 * @namespace connection
 */

/**
 * Information about a websocket connection.
 *
 * Can be retrieved using the {@link connection.getSocketState} API.
 *
 * @public
 * @static
 * @typedef {Object} WSConnectionObject
 * @memberof connection
 * @property {boolean} connected The state of the websocket connection.
 * @property {boolean} pinging True if the client has sent a ping to the server and is still waiting for a pong response.
 * @property {Object} method Information about how the websocket is being used.
 * @property {string} [method.type] How the websocket is staying connected.
 * @property {string} [method.responsibleParty] Who is responsible for keeping the connection alive.
 * @property {string} platform The SDK platform being used.
 * @property {number} pingInterval How often the client will ping the server to test for websocket connectivity.
 * @property {number} reconnectLimit How many times the SDK will try to reconnect a disconnected websocket.
 * @property {number} reconnectDelay How long the SDK will wait before retrying websocket reconnection.
 * @property {number} reconnectTimeMultiplier Reconnect delay multiplier for subsequent attempts. The reconnect delay time will be multiplied by this after each failed reconnect attempt to increase the delay between attempts. eg. 5000ms then 10000ms then 20000ms delay if value is 2.
 * @property {number} reconnectTimeLimit Maximum time delay between reconnect attempts (milliseconds). Used in conjunction with `reconnectTimeMultiplier` to prevent overly long delays between reconnection attempts.
 * @property {boolean} autoReconnect Indicates if the SDK should automatically try reconnecting a disconnected websocket.
 * @property {number} maxMissedPings How many missed pings before the SDK stops trying to reconnect a disconnected websocket.
 * @property {string} webSocketOAuthMode The mode used for authenticating with the server.
 * @property {Object} wsInfo Information required to connect a websocket to the server.
 * @property {string} [wsInfo.protocol] The protocol to use to connect a websocket.
 * @property {string} [wsInfo.server] The domain name or IP address of the server to connect to.
 * @property {number} [wsInfo.port] The port of the server to connect to.
 * @property {string} [wsInfo.url] The URL path to use to request a websocket connection.
 * @property {string} [wsInfo.params] Any additional params that might be required by the server to establish the websocket connection.
 * @property {number} lastContact The date and time that the last known contact with the server was.
 */

// Selectors

const log = _logs.logManager.getLogger('CONNECTIVITY');
function api(_ref) {
  let {
    dispatch,
    getState
  } = _ref;
  const connectivityApi = {
    /**
     * Get the state of the websocket.
     * @public
     * @static
     * @memberof connection
     * @method getSocketState
     * @param {string} [platform='link'] Backend platform for which to request the websocket's state.
     * @return {connection.WSConnectionObject} Details about the current websocket connection, including state and configuration.
     */
    getSocketState() {
      let platform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.platforms.LINK;
      log.debug(_logs.API_LOG_TAG + 'connection.getSocketState: ', platform);
      return (0, _selectors.getConnectionState)(getState(), platform);
    },
    /**
     * Enables or disables connectivity checking.
     * @public
     * @memberof connection
     * @method enableConnectivityChecking
     * @param {boolean} enable Enable connectivity checking.
     */
    enableConnectivityChecking(enable) {
      log.debug(_logs.API_LOG_TAG + 'connection.enableConnectivityChecking: ', enable);
      dispatch((0, _actions.changeConnectivityChecking)(enable));
    },
    /**
     * Triggers a reset in the connection to the WebSocket being used for notifications.
     * This can be used in scenarios where a network issue (undetectable by the SDK)
     * is detected by an application.
     *
     * If there is no WebSocket currently connected, this function has no effect.
     * Calling this function will trigger all the normal WebSocket and connectivity lifecycle
     * events as well as trigger re-connection processing that follows the configuration of the SDK.
     * Calling this function always has the potential of causing some events being lost by the
     * SDK and preventing proper operation.
     * @public
     * @memberof connection
     * @method resetConnection
     */
    resetConnection() {
      const state = getState();
      const platform = (0, _selectors2.getPlatform)(state);
      log.debug(_logs.API_LOG_TAG + 'connection.resetConnection: ', platform);
      const wsState = (0, _selectors.getConnectionState)(state, platform);
      if (!wsState.connected) {
        log.debug(_logs.API_LOG_TAG + 'connection.resetConnection: No active websocket connection. Ignoring request.');
        return;
      }
      // Dispatching this action would close/cleanup existing ws connection
      // However, we'll re-connect after that.
      dispatch((0, _actions.lostConnection)(undefined, platform));
    }
  };
  return {
    connection: connectivityApi
  };
}

/***/ }),

/***/ 50287:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.WS_CHANGE = void 0;
/**
 * The WebSocket to the server has changed state.
 *
 * This event is only emitted when the WebSocket is connected, or has lost connection.
 *
 * @public
 * @memberof connection
 * @event ws:change
 * @param {Object} params
 * @param {string} params.platform The platform
 */
const WS_CHANGE = exports.WS_CHANGE = 'ws:change';

/***/ }),

/***/ 25592:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var eventTypes = _interopRequireWildcard(__webpack_require__(50287));
var actionTypes = _interopRequireWildcard(__webpack_require__(53202));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var events = {};
events[actionTypes.WS_CONNECT_FINISHED] = function (action) {
  if (action.error) {
    // TODO: Handle the error case?
  } else {
    return {
      type: eventTypes.WS_CHANGE,
      args: {
        platform: action.meta.platform
      }
    };
  }
};
events[actionTypes.LOST_CONNECTION] = function (action) {
  return {
    type: eventTypes.WS_CHANGE,
    args: {
      platform: action.meta.platform
    }
  };
};
// TODO: Differentiate between types of disconnects?
events[actionTypes.WS_DISCONNECT_FINISHED] = events[actionTypes.LOST_CONNECTION];

// TODO: Does an app care that we're trying to connect/reconnect?
events[actionTypes.WS_ATTEMPT_CONNECT] = function (action) {
  return {
    type: eventTypes.WS_CHANGE,
    args: {
      platform: action.meta.platform
    }
  };
};
var _default = exports["default"] = events;

/***/ }),

/***/ 25726:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _name = _interopRequireDefault(__webpack_require__(70629));
var _api = _interopRequireDefault(__webpack_require__(44211));
var _reducers = _interopRequireDefault(__webpack_require__(76734));
var _default = exports["default"] = {
  name: _name.default,
  api: _api.default,
  reducer: _reducers.default
};

/***/ }),

/***/ 70629:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const name = 'connectivity';
var _default = exports["default"] = name;

/***/ }),

/***/ 76734:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _omit2 = _interopRequireDefault(__webpack_require__(81053));
var actionTypes = _interopRequireWildcard(__webpack_require__(53202));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
reducers[actionTypes.WS_ATTEMPT_CONNECT] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      [action.meta.platform]: _objectSpread(_objectSpread({}, state[action.meta.platform]), {}, {
        connected: false,
        pinging: false
      })
    });
  }
};
reducers[actionTypes.WS_RECONNECT_FAILED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      [action.meta.platform]: _objectSpread(_objectSpread({}, state[action.meta.platform]), {}, {
        connected: false,
        pinging: false
      })
    });
  }
};
reducers[actionTypes.WS_CONNECT_FINISHED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      [action.meta.platform]: _objectSpread(_objectSpread({}, state[action.meta.platform]), {}, {
        connected: true,
        method: action.payload.kandy.method,
        platform: action.meta.platform
      }, (0, _omit2.default)('checkConnectivity', action.payload.kandy))
    });
  },
  throw(state, action) {
    return {
      [action.meta.platform]: {
        connected: false,
        pinging: false
      }
    };
  }
};
reducers[actionTypes.LOST_CONNECTION] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      [action.meta.platform]: _objectSpread(_objectSpread({}, state[action.meta.platform]), {}, {
        connected: false,
        pinging: false
      })
    });
  }
};
reducers[actionTypes.WS_DISCONNECT_FINISHED] = {
  next(state, action) {
    return {
      [action.meta.platform]: {
        connected: false,
        pinging: false
      }
    };
  },
  throw(state, action) {
    return {
      [action.meta.platform]: {
        connected: false,
        pinging: false
      }
    };
  }
};
reducers[actionTypes.WS_ERROR] = {
  next(state, action) {
    return {
      [action.meta.platform]: {
        connected: false,
        pinging: false
      }
    };
  },
  throw(state, action) {
    return {
      [action.meta.platform]: {
        connected: false,
        pinging: false
      }
    };
  }
};

/*
  Accepts a boolean payload for checkConnectivity
 */
reducers[actionTypes.CHANGE_CONNECTIVITY_CHECKING] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      checkConnectivity: action.payload
    });
  }
};

/*
  Accepts a payload for pingInterval in MILLISECONDS
 */
reducers[actionTypes.CHANGE_PING_INTERVAL] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      pingInterval: action.payload
    });
  }
};

/**
 * Connectivity Interface reducer
 * @method reducer
 * @param  {Object}  state - The current redux state.
 * @param  {Object}  action - A flux standard action.
 * @return {Object}  - The new redux state.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 53951:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getCheckConnectivity = getCheckConnectivity;
exports.getConnectionState = getConnectionState;
exports.getConnectivityConfig = getConnectivityConfig;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _name = _interopRequireDefault(__webpack_require__(70629));
function getConnectionState(state, platform) {
  if (state[_name.default][platform]) {
    return (0, _cloneDeep2.default)(state[_name.default][platform]);
  } else {
    return new Error('No sockets are up. Have you attempted to connect?');
  }
}

/**
 * Retrieves the config options provided by the connectivity plugin.
 * @method getConnectivityConfig
 * @return {Object}
 */
function getConnectivityConfig(state) {
  return state.config[_name.default];
}

/**
 * Retrieves the checkConnectivity property from state
 * @method getCheckConnectivity
 * @param {Object} state Redux state.
 * @return {Object}
 */
function getCheckConnectivity(state) {
  return state[_name.default].checkConnectivity;
}

/***/ }),

/***/ 54866:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.waitForReconnect = waitForReconnect;
var _selectors = __webpack_require__(53951);
var _actionTypes = __webpack_require__(53202);
var _selectors2 = __webpack_require__(46942);
var _utils = __webpack_require__(25189);
var _actionTypes2 = __webpack_require__(27190);
// Connectivity plugin

// Other plugins

/**
 * Util for waiting for the websocket / subscription to reconnect.
 * Assumption is that the websocket is in the middle of reconnect attempts. This
 *    is why the timeout is so long; one of the two scenarios should be guaranteed
 *    to happen before then.
 * @param {Object} container The bottle container.
 * @param {number} timeout The time, in milliseconds, to wait before timing out.
 * @return {boolean} Whether the websocket has reconnected or not.
 */
async function waitForReconnect(container) {
  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60000;
  const {
    context,
    Notifications
  } = container;
  const platform = (0, _selectors2.getPlatform)(context.getState());
  const {
    connected: isConnected
  } = (0, _selectors.getConnectionState)(context.getState(), platform);
  if (isConnected) {
    return true;
  }
  const result = await Promise.race([Notifications.takeAction(_actionTypes.WS_CONNECT_FINISHED), Notifications.takeAction(_actionTypes2.UNSUBSCRIBE_FINISHED), (0, _utils.delay)(timeout)]);
  if (result && result.type && result.type === _actionTypes.WS_CONNECT_FINISHED) {
    return true;
  }
  return false;
}

/***/ }),

/***/ 76712:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = connectivity;
var _defaults2 = _interopRequireDefault(__webpack_require__(469));
var _base = _interopRequireDefault(__webpack_require__(89214));
var _constants = __webpack_require__(49833);
var _validation = __webpack_require__(42850);
// Parse and/or Validate

const defaultValues = {
  method: _constants.connCheckMethods.KEEP_ALIVE,
  pingInterval: 30000,
  reconnectLimit: 5,
  reconnectDelay: 5000,
  reconnectTimeMultiplier: 1,
  reconnectTimeLimit: 640000,
  autoReconnect: true,
  maxMissedPings: 3,
  checkConnectivity: true,
  webSocketOAuthMode: 'query'
};

// config validation
const v8nValidation = _validation.validation.schema({
  method: (0, _validation.enums)([_constants.connCheckMethods.KEEP_ALIVE]),
  pingInterval: _validation.validation.positive(),
  reconnectLimit: _validation.validation.positive(),
  reconnectDelay: _validation.validation.positive(),
  reconnectTimeMultiplier: _validation.validation.positive(),
  reconnectTimeLimit: _validation.validation.positive(),
  autoReconnect: _validation.validation.boolean(),
  maxMissedPings: _validation.validation.positive(),
  checkConnectivity: _validation.validation.boolean(),
  webSocketOAuthMode: _validation.validation.string()
});
const parseOptions = (0, _validation.parse)('connectivity', v8nValidation);

/**
 * Configuration options for the Connectivity feature.
 * The SDK can only use keepalive as the connectivity check.
 *
 * Keep Alive: The client sends "keepalive" messages (to the server) on the websocket at regular intervals. This lets the server know that the client is still connected, and that it should "keep the connection alive".
 *
 * For more information on keepalive see here: https://en.wikipedia.org/wiki/Keepalive
 * @public
 * @name config.connectivity
 * @memberof config
 * @instance
 * @param {Object} connectivity Connectivity configs.
 * @param {Number} [connectivity.pingInterval=30000] Time in between websocket ping attempts (milliseconds).
 * @param {Number} [connectivity.reconnectLimit=5] Number of failed reconnect attempts before reporting an error. Can be set to 0 to not limit reconnection attempts.
 * @param {Number} [connectivity.reconnectDelay=5000] Base time between websocket reconnect attempts (milliseconds).
 * @param {Number} [connectivity.reconnectTimeMultiplier=1] Reconnect delay multiplier for subsequent attempts. The reconnect delay time will be multiplied by this after each failed reconnect attempt to increase the delay between attempts. eg. 5000ms then 10000ms then 20000ms delay if value is 2.
 * @param {Number} [connectivity.reconnectTimeLimit=640000] Maximum time delay between reconnect attempts (milliseconds). Used in conjunction with the reconnect time multiplier to prevent overly long delays between reconnection attempts.
 * @param {Boolean} [connectivity.autoReconnect=true] Flag to determine whether the SDK will attempt to automatically reconnect after connectivity disruptions.
 * @param {Number} [connectivity.maxMissedPings=3] Maximum pings sent (without receiving a response) before reporting an error.
 * @param {Boolean} [connectivity.checkConnectivity=true] Flag to determine whether the SDK should check connectivity.
 * @param {string} [connectivity.webSocketOAuthMode=query] query will send the bearer access token to authenticate the websocket and none will not send it.
 */
function connectivity() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = (0, _defaults2.default)(defaultValues, options);
  parseOptions(options);
  return (0, _base.default)(options);
}

/***/ }),

/***/ 49833:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.platforms = exports.notificationTypes = exports.connCheckResponsibility = exports.connCheckMethods = void 0;
const platforms = exports.platforms = {
  LINK: 'link',
  UC: 'uc'
};
const notificationTypes = exports.notificationTypes = {
  WEBSOCKET: 'websocket',
  PUSH: 'push'
};
const connCheckResponsibility = exports.connCheckResponsibility = {
  CLIENT: 'client',
  SERVER: 'server'
};
const connCheckMethods = exports.connCheckMethods = {
  KEEP_ALIVE: 'keepAlive',
  PING_PONG: 'pingPong'
};

/***/ }),

/***/ 71308:
/***/ (() => {

"use strict";
/**
 * The ID of a User (e.g. joe@domain.com)
 * @public
 * @static
 * @typedef {string} UserID
 * @memberof user
 * @requires link_user_id
 */

/**
 * The SIP URI ie: sip:joe@domain.com
 *
 * @public
 * @static
 * @typedef {string} SIP_URI
 * @memberof call
 * @requires link_user_id
 */

/**
 * The TEL URI ie: tel:+18885559876
 *
 * @public
 * @static
 * @typedef {string} TEL_URI
 * @memberof call
 * @requires link_pstn
 */


/***/ }),

/***/ 87772:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.webrtcCodes = exports.usersCodes = exports.subscriptionCodes = exports.sipEventCodes = exports.proxyCodes = exports.presenceCodes = exports.mwiCodes = exports.messagingCodes = exports.groupsCodes = exports.connectivityCodes = exports.clickToCallCodes = exports.callHistoryCodes = exports.callCodes = exports.bridgeCodes = exports.authCodes = void 0;
/**
 * Error codes for the Auth plugin.
 * @name authCodes
 */
const authCodes = exports.authCodes = {
  INVALID_CREDENTIALS: 'authentication:1',
  CONNECT_FAIL_WS_ERROR: 'authentication:2',
  LINK_UNSUBSCRIBE_FAIL: 'authentication:3',
  LINK_SUBSCRIBE_FAIL: 'authentication:4',
  LINK_EXTEND_SUBSCRIPTION_FAIL: 'authentication:5',
  LINK_UPDATE_SUBSCRIPTION_FAIL: 'authentication:6',
  INVALID_STATE: 'authentication:7',
  MISSING_SERVICE: 'authentication:12',
  LINK_SUBSCRIBE_UNAVAILABLE: 'authentication:13'
};

/**
 * Error codes for the Call plugin.
 * @name callCodes
 */
const callCodes = exports.callCodes = {
  UNKNOWN_ERROR: 'call:1',
  GENERIC_ERROR: 'call:2',
  INIT_MEDIA_FAILED: 'call:3',
  USER_MEDIA_ERROR: 'call:4',
  NOT_SUPPORTED: 'call:5',
  // The call is in the wrong state.
  INVALID_STATE: 'call:6',
  // A provided parameter is not valid.
  INVALID_PARAM: 'call:7',
  // There is a desync between components' state.
  STATE_DESYNC: 'call:8',
  // Offer could not be generated
  INVALID_OFFER: 'call:9',
  // No ICE candidates found
  NO_ICE_CANDIDATES: 'call:10',
  // Failed to recieve answer due to media mismatch
  SESSION_MISMATCH: 'call:11',
  GLARE: 'call:12'
};

/**
 * Error codes for the Call History plugin.
 * @name callHistoryCodes
 */
const callHistoryCodes = exports.callHistoryCodes = {
  UNKNOWN_ERROR: 'callHistory:1',
  BAD_REQUEST: 'callHistory:2',
  NOT_FOUND: 'callHistory:3',
  NOT_AUTHENTICATED: 'callHistory:4',
  FORBIDDEN: 'callHistory:5'
};
/**
 * @name clickToCallCodes
 */
const clickToCallCodes = exports.clickToCallCodes = {
  MISSING_ARGS: 'clickToCall:1',
  RESPONSE_ERROR: 'clickToCall:2'
};
/**
 * Error codes for the Groups plugin.
 * @name groupsCodes
 */
const groupsCodes = exports.groupsCodes = {
  UNKNOWN_ERROR: 'groups:1',
  GENERIC_ERROR: 'groups:2',
  MISSING_PARAMETERS: 'groups:3'
};

/**
 * Error codes for the Message plugin.
 * @name messagingCodes
 */
const messagingCodes = exports.messagingCodes = {
  SEND_MESSAGE_FAIL: 'messaging:5'
};

/**
 * Error codes for the Message Waiting Indicator plugin.
 * @name mwiCodes
 */
const mwiCodes = exports.mwiCodes = {
  FETCH_MWI_FAIL: 'mwi:1'
};

/**
 * Error codes from the Sip Events plugin.
 * @name sipEventCodes
 */
const sipEventCodes = exports.sipEventCodes = {
  UNKNOWN_ERROR: 'sipEvents:1',
  // The user did not subscribe/connect for the specified sip event service.
  NOT_PROVISIONED: 'sipEvents:2',
  // The user is not subscribed for the specified sip event.
  NOT_SUBSCRIBED: 'sipEvents:3'
};

/**
 * Error codes for the audio bridge portion of the call plugin.
 * @name bridgeCodes
 */
const bridgeCodes = exports.bridgeCodes = {
  UNKNOWN_ERROR: 'audioBridge:1',
  // TODO: Make "invalid input" (and others) a generic code.
  INVALID_INPUT: 'audioBridge:2',
  ALREADY_EXISTS: 'audioBridge:3',
  NOT_FOUND: 'audioBridge:4',
  NOT_SUPPORTED: 'audioBridge:5',
  MEDIA_NOT_FOUND: 'audioBridge:6',
  INVALID_STATE: 'audioBridge:7'
};

/**
 * Error codes for the subscription plugin.
 * @name subscriptionCodes
 */
const subscriptionCodes = exports.subscriptionCodes = {
  WS_CONNECTION_ERROR: 'subscription:1',
  NO_SERVICE_PROVIDED: 'subscription:2',
  GENERIC_ERROR: 'subscription:3'
};

/**
 * Error codes for the connectivity plugin
 * @name connectivityCodes
 */
const connectivityCodes = exports.connectivityCodes = {
  WS_MESSAGE_ERROR: 'connectivity:1'
};

/**
 * Error codes for the Presence plugin.
 * @name presenceCodes
 */
const presenceCodes = exports.presenceCodes = {
  INVALID_STATUS: 'presence:1',
  INVALID_ACTIVITY: 'presence:2',
  INVALID_REQUEST: 'presence:3',
  INVALID_PARAM: 'presence:4'
};

/**
 * Error codes for the Users plugin
 * @name usersCodes
 */
const usersCodes = exports.usersCodes = {
  UNKNOWN: 'users:1',
  REFRESH_CONTACTS_FAIL: 'users:2',
  DIRECTORY_REQUEST_FAIL: 'users:3',
  INVALID_PARAM: 'users:4'
};

/**
 * Error codes for the Webrtc plugin
 * @name webrtcCodes
 */
const webrtcCodes = exports.webrtcCodes = {
  INVALID_PARAM: 'webrtc:1',
  INVALID_TRACK_ID: 'webrtc:2',
  TRACK_IN_USE: 'webrtc:3',
  TRACK_NOT_LOCAL: 'webrtc:4'
};

/**
 * Error codes for the Proxy plugin
 * @name proxyCodes
 */
const proxyCodes = exports.proxyCodes = {
  INVALID_PARAM: 'proxy:1',
  SET_PROXY_CHANNEL_FAIL: 'proxy:2',
  IN_ACTIVE_CALL: 'proxy:3',
  VERSION_MISMATCH: 'proxy:4',
  INVALID_STATE: 'proxy:5',
  TIMEOUT: 'proxy:6',
  UNKNOWN: 'proxy:7'
};

/***/ }),

/***/ 83437:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NO_CODE = void 0;
Object.defineProperty(exports, "authCodes", ({
  enumerable: true,
  get: function () {
    return _codes.authCodes;
  }
}));
Object.defineProperty(exports, "bridgeCodes", ({
  enumerable: true,
  get: function () {
    return _codes.bridgeCodes;
  }
}));
Object.defineProperty(exports, "callCodes", ({
  enumerable: true,
  get: function () {
    return _codes.callCodes;
  }
}));
Object.defineProperty(exports, "callHistoryCodes", ({
  enumerable: true,
  get: function () {
    return _codes.callHistoryCodes;
  }
}));
Object.defineProperty(exports, "clickToCallCodes", ({
  enumerable: true,
  get: function () {
    return _codes.clickToCallCodes;
  }
}));
exports["default"] = void 0;
Object.defineProperty(exports, "groupsCodes", ({
  enumerable: true,
  get: function () {
    return _codes.groupsCodes;
  }
}));
Object.defineProperty(exports, "messagingCodes", ({
  enumerable: true,
  get: function () {
    return _codes.messagingCodes;
  }
}));
Object.defineProperty(exports, "mwiCodes", ({
  enumerable: true,
  get: function () {
    return _codes.mwiCodes;
  }
}));
Object.defineProperty(exports, "presenceCodes", ({
  enumerable: true,
  get: function () {
    return _codes.presenceCodes;
  }
}));
Object.defineProperty(exports, "proxyCodes", ({
  enumerable: true,
  get: function () {
    return _codes.proxyCodes;
  }
}));
Object.defineProperty(exports, "sipEventCodes", ({
  enumerable: true,
  get: function () {
    return _codes.sipEventCodes;
  }
}));
Object.defineProperty(exports, "subscriptionCodes", ({
  enumerable: true,
  get: function () {
    return _codes.subscriptionCodes;
  }
}));
Object.defineProperty(exports, "usersCodes", ({
  enumerable: true,
  get: function () {
    return _codes.usersCodes;
  }
}));
Object.defineProperty(exports, "webrtcCodes", ({
  enumerable: true,
  get: function () {
    return _codes.webrtcCodes;
  }
}));
var _codes = __webpack_require__(87772);
const NO_CODE = exports.NO_CODE = 'NO_CODE';

/**
 * The Basic Error object. Provides information about an error that occurred in the SDK.
 * @public
 * @static
 * @typedef {Object} BasicError
 * @memberof api
 * @property {string} code The code of the error. If no code is known, this will be 'NO_CODE'.
 * @property {string} message A human-readable message to describe the error. If no message is known, this will be 'An error occurred'.
 */

class BasicError {
  constructor(_ref) {
    let {
      message,
      code
    } = _ref;
    this.name = 'BasicError';
    this.code = code || NO_CODE;
    this.message = message ? `${message}` : 'An error occurred.';
  }
}
exports["default"] = BasicError;

/***/ }),

/***/ 49661:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = eventEmitter;
/*
 * Event emitter module. Can be used as a standalone factory or as a mixin.
 *
 * @private
 * @class emitter
 * @example
 * ``` javascript
 * var eventEmitter = emitter(); // Create a new emitter.
 * emitter(myEmittingObject.prototype); // Mixin to an existing object.
 * ```
 */
function eventEmitter() {
  let prototype = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var eventMap = [];
  var subscribeMap = [];
  var strictMode = false;

  /*
   * Check if the event is a valid event type.
   */
  function checkEvent(type) {
    if (strictMode && !eventMap[type]) {
      throw new Error('Invalid event type: ' + type);
    }
  }
  return Object.assign(prototype, {
    /*
     * Define an event type with the event emitter.
     *
     * @method define
     * @param {String} type The name for the event type.
     */
    define: function (type) {
      eventMap[type] = eventMap[type] || [];
    },
    /*
     * Define an alias for an event type.
     *
     * @method alias
     * @param {String} type The event type for which to add an alias.
     * @param {String} alias The alias name for the event type.
     * @throws {Error} Invalid event type
     */
    alias: function (type, alias) {
      checkEvent(type);
      eventMap[alias] = eventMap[type] = eventMap[type] || [];
    },
    /*
     * Add an event listener for the specified event type.
     *
     * @method on
     * @param {String} type The event type for which to add the listener.
     * @param {Function} listener The listener for the event type. The parameters
     *                            of the listener depend on the event type.
     * @throws {Error} Invalid event type
     */
    on: function (type, listener) {
      checkEvent(type);
      (eventMap[type] = eventMap[type] || []).push(listener);
    },
    /*
     * Removes an event listener for the specified event type.
     *
     * @method off
     * @param {String} type The event type for which to remote the listener.
     * @param {Function} listener The listener to remove.
     * @throws {Error} Invalid event type
     */
    off: function (type, listener) {
      checkEvent(type);
      var list = eventMap[type] || [];
      var i = list.length;
      while (i--) {
        if (listener === list[i]) {
          list.splice(i, 1);
        }
      }
    },
    /*
     * Emits an event of the specified type.
     *
     * @method emit
     * @param {String} type The event type to emit.
     * @param {any} [...args] The arguments to pass to the listeners of the event.
     * @throws {Error} Invalid event type
     */
    emit: function (type) {
      checkEvent(type);
      var args = Array.prototype.slice.call(arguments, 1);
      var list = eventMap[type] || [];
      var i = 0;
      for (; i < list.length; i++) {
        list[i].apply(undefined, args);
      }
      for (var j = 0; j < subscribeMap.length; j++) {
        subscribeMap[j].call(undefined, type, args);
      }
    },
    /*
     * Add a subscription for all event types.
     *
     * @method subscribe
     * @param {Function} listener The listener for all event types.
     * @throws {Error} Listener not a function
     */
    subscribe: function (listener) {
      if (typeof listener === 'function') {
        subscribeMap.push(listener);
      } else {
        throw new Error('Listener not a function');
      }
    },
    /*
     * Remove a subscription for all event types.
     *
     * @method unsubscribe
     * @param {Function} listener The listener for all event types.
     * @throws {Error} Listener not a function
     */
    unsubscribe: function (listener) {
      if (typeof listener === 'function') {
        var i = subscribeMap.length;
        while (i--) {
          if (listener === subscribeMap[i]) {
            subscribeMap.splice(i, 1);
          }
        }
      } else {
        throw new Error('Listener not a function');
      }
    },
    /*
     * Sets the emitter in strict mode where it only allows events that have been defined or aliases.
     *
     * @method setStrictMode
     * @param {Boolean} strict Whether to set strict mode for the emitter.
     */
    setStrictMode: function (strict) {
      strictMode = strict;
    }
  });
}

/***/ }),

/***/ 94731:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = eventsImplementation;
var _interface = _interopRequireDefault(__webpack_require__(85902));
var _actions = __webpack_require__(60279);
var actionTypes = _interopRequireWildcard(__webpack_require__(73051));
var _eventEmitter = _interopRequireDefault(__webpack_require__(49661));
var _logs = __webpack_require__(43862);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Events plugin.

// Logs, TODO: Remove this once the middleware is removed.

const log = _logs.logManager.getLogger('EVENTS');

/**
 * Event Emitter Implementation.
 * Factory function to create the Event Emitter Implementation.
 * Defines the functionality exposed by an Event Emitter Interface.
 */
function eventsImplementation() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Create the emitter and provide it to the middleware.
  //    It is created here so that it can also be provided to the bottle.
  const emitter = (0, _eventEmitter.default)();
  const middleware = setupMiddleware(emitter);

  // Provide the emit function to the bottle container.
  //    This function will be provided to other plugins for emitting events.
  bottle.factory('emitEvent', () => {
    const log = bottle.container.logManager.getLogger('EVENTS');
    return function emitEvent(type, args) {
      log.info(`Emitting event: ${type}`, args);
      emitter.emit(type, args);
    };
  });
  const Events = {
    on: (eventType, listener) => {
      emitter.on(eventType, listener);
    },
    off: (eventType, listener) => {
      emitter.off(eventType, listener);
    },
    subscribe: listener => {
      emitter.subscribe(listener);
    },
    unsubscribe: listener => {
      emitter.unsubscribe(listener);
    }
  };

  // Provide the Events functions bottle container.
  bottle.value('Events', Events);

  // Register the component factory functions to the bottle.
  bottle.factory('EventsAPI', _interface.default.createAPI);
  return {
    name: _interface.default.name,
    middleware: middleware,
    reducer: _interface.default.reducer
  };
}

/*
 * Extra wrapper function for the middleware so that we can provide an already
 *     created emitter to it.
 */
function setupMiddleware(emitter) {
  /**
   * Implementation of Event Emitter Interface.
   * @return {Middleware} middleware Middleware to be applied to the redux store.
   */
  return function middleware(context) {
    var eventMap = {};

    /**
     * Middleware to handle Event Emitter Interface actions.
     * Redirects Interface actions to the Plugin functionality, and dispatches
     *      actions to update the store if needed.
     * @type {Function}
     */
    return next => action => {
      switch (action.type) {
        case actionTypes.EVENTS_ALIAS:
          emitter.alias(action.payload.eventType, action.payload.alias);
          break;
        case actionTypes.EVENTS_EMIT:
          log.info(`Emitting event: ${action.payload.eventType}`, action.payload.args[0]);
          emitter.emit(action.payload.eventType, ...action.payload.args);
          break;
        case actionTypes.MAP_EVENTS:
          for (const actionType in action.payload) {
            if (action.payload.hasOwnProperty(actionType)) {
              const mapper = action.payload[actionType];
              if (eventMap.hasOwnProperty(actionType)) {
                eventMap[actionType].push(mapper);
              } else {
                eventMap[actionType] = [mapper];
              }
            }
          }
          break;
        default:
          if (eventMap.hasOwnProperty(action.type)) {
            // Get state both before and after allowing the action to go through
            //    the reducers. This lets events have compare state changes.
            const prevState = context.getState();
            let result = next(action);
            const state = context.getState();

            // make this compatible with promise middleware by ensuring we
            // wait for the promise to resolve. It's easier to just always
            // use a promise, as opposed to handling cases.
            if (!result || !result.then) {
              result = Promise.resolve(result);
            }
            result.then(function () {
              for (const mapper of eventMap[action.type]) {
                // Use the mapper(s) for this specific event to create the event object(s).
                // Event mappings have access to the action and states pre+post reducer.
                let events = mapper(action, {
                  prevState,
                  state
                });
                if (!events) {
                  events = [];
                } else if (!Array.isArray(events)) {
                  events = [events];
                }
                for (const event of events) {
                  if (typeof event !== 'undefined') {
                    if (!event.args) {
                      event.args = {};
                    }
                    context.dispatch((0, _actions.emitEvent)(event.type, event.args));
                  }
                }
              }
            });
            return result;
          }
          break;
      }
      return next(action);
    };
  };
}

/***/ }),

/***/ 73051:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MAP_EVENTS = exports.EVENTS_UNSUBSCRIBE = exports.EVENTS_SUBSCRIBE = exports.EVENTS_ON = exports.EVENTS_OFF = exports.EVENTS_EMIT = exports.EVENTS_ALIAS = void 0;
const PREFIX = '@@KANDY/';
const EVENTS_ON = exports.EVENTS_ON = PREFIX + 'EVENTS_ON';
const EVENTS_OFF = exports.EVENTS_OFF = PREFIX + 'EVENTS_OFF';
const EVENTS_SUBSCRIBE = exports.EVENTS_SUBSCRIBE = PREFIX + 'EVENTS_SUBSCRIBE';
const EVENTS_UNSUBSCRIBE = exports.EVENTS_UNSUBSCRIBE = PREFIX + 'EVENTS_UNSUBSCRIBE';
const EVENTS_ALIAS = exports.EVENTS_ALIAS = PREFIX + 'EVENTS_ALIAS';
const EVENTS_EMIT = exports.EVENTS_EMIT = PREFIX + 'EVENTS_EMIT';
const MAP_EVENTS = exports.MAP_EVENTS = PREFIX + 'MAP_EVENTS';

/***/ }),

/***/ 60279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.aliasEvent = aliasEvent;
exports.emitEvent = emitEvent;
exports.mapEvents = mapEvents;
exports.off = off;
exports.on = on;
exports.subscribe = subscribe;
exports.unsubscribe = unsubscribe;
var actionTypes = _interopRequireWildcard(__webpack_require__(73051));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Add an action-to-event mapping
 * @param  {Object} mapping A mapping object
 * @return {action}          A redux action.
 */
function mapEvents(mapping) {
  return {
    type: actionTypes.MAP_EVENTS,
    payload: mapping
  };
}

/* Interface actions */

/**
 * Add a listener for a specified event type.
 *
 * @param {string} type The event type to add the listener on.
 * @param {Function} listener The event listener to be added.
 * @return {Action} action A redux action.
 */
function on(type, listener) {
  return {
    type: actionTypes.EVENTS_ON,
    payload: {
      eventType: type,
      listener: listener
    }
  };
}

/**
 * Remove a listener from a specified event type.
 *
 * @param {string} type The event type to remove the listener from.
 * @param {Function} listener The event listener to be removed.
 * @return {Action} action A redux action.
 */
function off(type, listener) {
  return {
    type: actionTypes.EVENTS_OFF,
    payload: {
      eventType: type,
      listener: listener
    }
  };
}

/**
 * Add a global event listener.
 *
 * @param {Function} listener The event listener to be added.
 * @return {Action} action A redux action.
 */
function subscribe(listener) {
  return {
    type: actionTypes.EVENTS_SUBSCRIBE,
    payload: listener
  };
}

/**
 * Remove a global event listener.
 *
 * @param {Function} listener The event listener to be removed.
 * @return {Action} action A redux action.
 */
function unsubscribe(listener) {
  return {
    type: actionTypes.EVENTS_UNSUBSCRIBE,
    payload: listener
  };
}

/* Internal actions */

/**
 * Emits an event of the specified type.
 *
 * @method emitEvent
 * @param {Object} payload Information of the event to emit.
 * @throws {Error} Invalid event type
 * @return action An EVENTS_EMIT action.
 */
function emitEvent(type) {
  if (type === undefined) {
    throw Error('Attempted to emit an event without a type.');
  }
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return {
    type: actionTypes.EVENTS_EMIT,
    payload: {
      eventType: type,
      args
    }
  };
}

/**
 * Define an alias for an event type.
 *
 * @method alias
 * @param {string} type The event type for which to add an alias.
 * @param {string} alias The alias name for the event type.
 */
function aliasEvent(type, alias) {
  if (type === undefined || alias === undefined) {
    throw Error('Invalid attempt to alias an event.');
  }
  return {
    type: actionTypes.EVENTS_ALIAS,
    payload: {
      eventType: type,
      alias
    }
  };
}

/***/ }),

/***/ 24514:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _actions = __webpack_require__(60279);
// Actions the interface uses.

/**
 * Events APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} Events API.
 */
function createAPI(container) {
  const {
    logManager,
    context,
    Events,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('EVENTS');
  const eventsApi = {
    /**
     * Add an event listener for the specified event type. The event is emitted by the SDK instance.
     *
     * @public
     * @memberof api
     * @method on
     * @param {string} type The event type for which to add the listener.
     * @param {Function} listener The listener for the event type. The parameters of the listener depend on the event type.
     * @example
     * // Listen for events of a specific type emitted by the SDK.
     * client.on('dummy:event', function (params) {
     *    // Handle the event.
     * })
     */
    on: function (type, listener) {
      log.debug(API_LOG_TAG + 'on: ', type);
      context.dispatch((0, _actions.on)(type, listener));
      Events.on(type, listener);
    },
    /**
     * Removes an event listener for the specified event type. The event is emitted by the SDK instance.
     *
     * @public
     * @memberof api
     * @method off
     * @param {string} type The event type for which to remote the listener.
     * @param {Function} listener The listener to remove.
     */
    off: function (type, listener) {
      log.debug(API_LOG_TAG + 'off: ', type);
      context.dispatch((0, _actions.off)(type, listener));
      Events.off(type, listener);
    },
    /**
     * Adds a global event listener to SDK instance.
     *
     * @public
     * @memberof api
     * @method subscribe
     * @param {Function} listener The event listener to add. The parameters are (type, ...args), where args depend on the event type.
     */
    subscribe: function (listener) {
      log.debug(API_LOG_TAG + 'subscribe');
      context.dispatch((0, _actions.subscribe)(listener));
      Events.subscribe(listener);
    },
    /**
     * Removes a global event listener from SDK instance.
     *
     * @public
     * @memberof api
     * @method unsubscribe
     * @param {Function} listener The event listener to remove.
     */
    unsubscribe: function (listener) {
      log.debug(API_LOG_TAG + 'unsubscribe');
      context.dispatch((0, _actions.unsubscribe)(listener));
      Events.unsubscribe(listener);
    }
  };
  return eventsApi;
}

/***/ }),

/***/ 85902:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _api = _interopRequireDefault(__webpack_require__(24514));
var _reducers = _interopRequireDefault(__webpack_require__(62319));
// Import the components of the interface.

/**
 * This interface is for an events plugin.
 * @type {string}
 */
const name = 'events';
var _default = exports["default"] = {
  name,
  createAPI: _api.default,
  reducer: _reducers.default
};

/***/ }),

/***/ 62319:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = reducer;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _contains2 = _interopRequireDefault(__webpack_require__(54665));
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var _add2 = _interopRequireDefault(__webpack_require__(14727));
var _update2 = _interopRequireDefault(__webpack_require__(68496));
var actionTypes = _interopRequireWildcard(__webpack_require__(73051));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Events plugin.
// Libraries.

function eventReducer() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    aliases: [],
    count: 0
  };
  let action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case actionTypes.EVENTS_ON:
      return (0, _update2.default)('count', (0, _add2.default)(1), state);
    case actionTypes.EVENTS_OFF:
      return (0, _update2.default)('count', (0, _add2.default)(-1), state);
    case actionTypes.EVENTS_ALIAS:
      return (0, _update2.default)('aliases', (0, _concat2.default)(action.payload.alias), state);
    default:
      return state;
  }
}

/**
 * Reducer for Event Emitter plugin.
 * Defines the events an Event plugin should dispatch to modify state.
 * @param  {Object} [state={}] The events substate.
 * @param  {Object} action     A Flux Standard action.
 * @returns {Object} state      The new event substate.
 */
function reducer() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;
  // Only handle event types.
  if (!(0, _contains2.default)(action.type, actionTypes)) {
    return state;
  }
  return _objectSpread(_objectSpread({}, state), {}, {
    [action.payload.eventType]: eventReducer(state[action.payload.eventType], action)
  });
}

/***/ }),

/***/ 25:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.factory = factory;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(24923));
var _merge2 = _interopRequireDefault(__webpack_require__(9612));
var _map2 = _interopRequireDefault(__webpack_require__(65159));
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _redux = __webpack_require__(76070);
var _reduxDevtoolsExtension = __webpack_require__(58267);
var _reduxSaga = _interopRequireDefault(__webpack_require__(7));
var _effects = __webpack_require__(27422);
var _bottlejs = _interopRequireDefault(__webpack_require__(39146));
var _utils = __webpack_require__(25189);
var _version = __webpack_require__(10825);
var _intervalFactory = _interopRequireDefault(__webpack_require__(93725));
var _validation = __webpack_require__(42850);
const _excluded = ["common"]; // Libraries.
// Helpers.
// Parse and/or Validate
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const factoryDefaults = {
  enableReduxDevTools: false,
  reduxDevToolsName: 'WebRTC SDK',
  disableProxy: false
};

// config validation
const v8nValidation = _validation.validation.schema({
  enableReduxDevTools: _validation.validation.boolean(),
  reduxDevToolsName: _validation.validation.string(),
  disableProxy: _validation.validation.boolean()
});
const parseOptions = (0, _validation.parse)('common', v8nValidation);

/**
 * Creates an instance of the SDK with the specified plugins and configuration.
 *
 * @param {Function[]} pluginFactories - The list of factories to create plugins for this instance of the SDK.
 * @param {Object} [sdkOptions] - Factory and plugin options
 * @param {Object} [sdkOptions.common] - Factory specific options
 * @param {boolean} [sdkOptions.common.enableReduxDevTools] - A flag to indicate whether or not to include Redux Dev Tools
 * @param {string}  [sdkOptions.common.reduxDevToolsName="WebRTC SDK"] - The name of the store that will show up in the
 *                                          Redux Dev tools. This helps differentiate the SDK from other redux instances.
 */
function factory(pluginFactories) {
  let sdkOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const version = (0, _version.getVersion)();

  // Clone the options so we don't mutate the application's object.
  const clonedOptions = (0, _cloneDeep2.default)(sdkOptions);
  // Separate factory and plugin options.
  let {
      common: options
    } = clonedOptions,
    pluginOptions = (0, _objectWithoutProperties2.default)(clonedOptions, _excluded);
  options = (0, _utils.mergeValues)(factoryDefaults, options);
  parseOptions(options);

  // Create a bottle which will act as a container for plugin components.
  const bottle = new _bottlejs.default();
  bottle.defer(container => {
    // Log the SDK's version after the plugins have been initialized.
    if (container.logManager && container.logManager.getLogger) {
      const log = container.logManager.getLogger('FACTORY');
      if (log && log.info) {
        log.info(`SDK version: ${version}`);
      }
    }
  });
  var sagas = [];
  var store;
  var middlewares = [];
  const apis = [];
  var reducers = {};
  var initSagas = [];
  var taskDescriptor;
  var context = {
    container: bottle.container,
    capabilities: [],
    api: {},
    getState() {
      if (!store) {
        throw Error('Store is not available during factory creation');
      }
      if (destroyedSDK) {
        throw Error('State is not available if the SDK has been destroyed');
      }
      return store.getState();
    },
    dispatch() {
      if (!store) {
        throw Error('Store is not available during factory creation');
      }
      return store.dispatch(...arguments);
    },
    subscribe(fn) {
      if (!store) {
        throw Error('Store is not available during factory creation');
      }
      return store.subscribe(fn);
    }
  };

  // Add the context to the container so plugins can access it.
  bottle.value('context', context);

  // Add the interval helper, used to create intervals.
  bottle.value('createInterval', _intervalFactory.default);

  // Special case middleware for logging.
  var loggerMiddleware;
  var destroyedSDK = false;
  var destroyedSDKMiddleware = store => next => action => {
    if (destroyedSDK) {
      return null;
    } else {
      return next(action);
    }
  };

  // Instantiate the plugins.
  let plugins = (0, _map2.default)(function (plugin) {
    // Make sure the plugin factory is actually a function.
    if (!plugin || !plugin.fn || typeof plugin.fn !== 'function') {
      return false;
    }

    // Ignore the Proxy Plugin if not configured to allow it.
    if (plugin.name === 'proxy' && options.disableProxy) {
      return false;
    }

    // Provide the bottle to plugin factory functions so they can add their
    //    components.
    return plugin.fn(pluginOptions[plugin.name], bottle);
  }, pluginFactories);

  // Remove undefined plugins. Those are plugins that failed to load for some reason.
  plugins = plugins.filter(plugin => Boolean(plugin));

  // Run all the plugins to build the context.
  // Set up each plugin component individually.
  plugins.forEach(function (plugin) {
    if (plugin.capabilities) {
      context.capabilities = context.capabilities.concat(plugin.capabilities);
    }
    if (plugin.reducer) {
      reducers[plugin.name] = plugin.reducer;
    }
    if (plugin.middleware) {
      if (plugin.name === 'logs') {
        loggerMiddleware = plugin.middleware;
      } else {
        middlewares.push(() => plugin.middleware(context)); // pass context to middleware instead of store
      }
    }
    if (plugin.api) {
      apis.push(plugin.api);
    }
    if (plugin.init) {
      initSagas.push(plugin.init);
    }
    if (plugin.sagas) {
      sagas = sagas.concat(plugin.sagas);
    }
  });
  if (loggerMiddleware) {
    // The redux logger middleware should be the last middleware.
    middlewares.push(() => loggerMiddleware(context));
  }

  // Compose the root saga
  function* rootSaga() {
    // Give all plugins an opportunity to initialize themselves.
    // Note: Sagas have not been forked yet, so init cannot use them
    //      by dispatching actions. See PR #698.
    // Note: If anything asynchronous is done in an init, it MUST be
    //      non-blocking (ie. use fork, not call). See PR #699.
    for (const init of initSagas) {
      // Note: Yield directly to init. If redux-saga's `call()` is used, then the
      //      factory returns before the instance is done all inits. See PR #699.
      yield* init();
    }
    // Run all of the sagas provided by implementation plugins.
    for (const saga of sagas) {
      yield (0, _effects.fork)((0, _utils.autoRestart)(saga));
    }
  }

  // Alias our composeMiddleware to conditionally include devTools as per the provided configuration flag
  const composeMiddleware = options.enableReduxDevTools ? (0, _reduxDevtoolsExtension.composeWithDevTools)({
    name: options.reduxDevToolsName
  }) : _redux.compose;

  // don't include saga stuff if there are no sagas.
  if (initSagas.length + sagas.length > 0) {
    var sagaMiddleware = (0, _reduxSaga.default)();

    // Create the store with the plugins (incl. sagas) and with the configuration as the initial state.
    store = (0, _redux.createStore)((0, _redux.combineReducers)(reducers), composeMiddleware((0, _redux.applyMiddleware)(destroyedSDKMiddleware, sagaMiddleware, ...middlewares)));
    taskDescriptor = sagaMiddleware.run(rootSaga);
  } else {
    // Create the store with the plugins (excl. sagas) and with the configuration as the initial state.
    store = (0, _redux.createStore)((0, _redux.combineReducers)(reducers), composeMiddleware((0, _redux.applyMiddleware)(destroyedSDKMiddleware, ...middlewares)));
  }

  // Use the plugins' API factories to build the public API.
  //    Do this after the store has been created.
  // Plugins can either have provided their API factory by:
  //    - returning it directly from its factory function,
  //    - registering it to the bottle.
  apis.forEach(apiFactory => {
    context.api = (0, _merge2.default)(context.api, apiFactory(context));
  });
  bottle.list().forEach(name => {
    // Find API components on the bottle and add them to the SDK API.
    if (name.toLowerCase().endsWith('api')) {
      const api = bottle.container[name];
      context.api = (0, _merge2.default)(context.api, api);
    }
  });

  // Resolve all deferred functions. Provide them the container so they have the
  //    same parameters as registered components.
  bottle.resolve(bottle.container);

  // setup the API
  const publicAPI = _objectSpread(_objectSpread({}, context.api), {}, {
    state: {
      get: function () {
        return store.getState();
      },
      subscribe: function () {
        return store.subscribe(...arguments);
      }
    },
    /**
     * Return all the capabilities currently available to the plugin system.
     *
     * @memberof api
     * @method getCapabilities
     */
    getCapabilities() {
      return context.capabilities;
    },
    /**
     * Returns the current version of the API.
     *
     * @public
     * @memberof api
     * @method getVersion
     */
    getVersion() {
      return version;
    },
    // Disabling eslint for the next comment as we want to be able to use a disallowed word
    // eslint-disable-next-line no-warning-comments
    /**
     * Destroys the SDK, and removes its state, rendering the SDK unusable.
     * Useful when a user logs out and their call data needs to be destroyed.
     * The SDK must be recreated to be usable again.
     * The destroy command is async, and will happen on the next tick
     *   so as not to interfere with any ongoing events.
     *
     * @public
     * @memberof api
     * @method destroy
     * @example
     * // Instantiate the SDK.
     * import { create } from '@rbbn/webrtc-js-sdk'
     * const config = {
     *     authentication: { ... },
     *     logs: { ... },
     *     ...
     * }
     * let client = create(config);
     * client.on( ... )
     * // Use the SDK
     * ...
     * // Destroy the SDK, then recreate on the next step
     * client.destroy()
     * client = create(config)
     * client.on( ... )
     */
    destroy() {
      // TODO: Is it possible for the store to auto-unsubscribe any listeners
      //    (from client.state.subscribe API)? If not, may be easier to simply
      //    protect from issues.

      const _destroy = () => {
        if (destroyedSDK) return;

        // Cancel all the sagas
        if (taskDescriptor) taskDescriptor.cancel();

        // Clear the state
        function destroyStateReducer(state, action) {
          return {};
        }
        store.replaceReducer(destroyStateReducer);

        // Neuter all actions
        destroyedSDK = true;
      };

      // setTimeout is necessary so that the destroy
      //   happens at the start of the next tick for
      //   when destroy is called inside an event handler
      const immediately = 0;
      setTimeout(_destroy, immediately);
    }
  });

  // Return the public API.
  return publicAPI;
}

/***/ }),

/***/ 88923:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = defaultActionHandler;
/* Helper function for styling logs based on the log type.
 * This function will inspect the log entry and format the log
 * accordingly.
 */
function styleLog(entry) {
  const {
    timestamp,
    level
  } = entry;
  const logInfo = `${timestamp} - ACTION - ${level}`;
  let [logType, payload] = entry.messages;
  let prefix;
  let style = '';
  if (logType.includes('state')) {
    // If the log is for prev state / next state, display that in the prefix.
    prefix = `${logInfo} - ${logType.toUpperCase()}`;
  } else if (logType.includes('ADDED') || logType.includes('DELETED') || logType.includes('ARRAY')) {
    // If the log has added or removed keys from state, log the operation, keys affected and new values.
    prefix = `${entry.messages[0]}: ${entry.messages[2]}`;
    style = entry.messages[1];
    payload = entry.messages[3];
  } else if (logType.includes('CHANGED')) {
    // If the log has changed keys in state, log the operation, keys, old and new values.
    prefix = `${entry.messages[0]}: ${entry.messages[2]}`;
    style = entry.messages[1];
    payload = `${entry.messages[3]} ${entry.messages[4]} ${entry.messages[5]}`;
  } else if (logType.includes('no diff')) {
    // If action results in no change in state, just log no diff.
    prefix = `${logInfo} - NO DIFF`;
    payload = '';
  } else {
    // Else the log is the action itself, so use the action type.
    prefix = `${logInfo} - ${payload.type} - ${logType}`;
  }
  return {
    prefix,
    style,
    payload
  };
}

/**
 * Default function for the SDK to use for logging actions.
 * Action entries come in 4 different types:
 *    1. start: Log the message directly and "open the group".
 *    2. state: Log a prefix, state type, and state itself.
 *      (prev state and next state)
 *    3. payload: Log a prefix, action type, and payload.
 *    4. end: Close the group.
 * @method defaultActionHandler
 * @param  {LogEntry} entry
 */
function defaultActionHandler(entry) {
  // Handle the "start" and "stop" action log entries specifically.
  if (['group', 'groupCollapsed'].includes(entry.method)) {
    // eslint-disable-next-line no-console
    console[entry.method](...entry.messages);
    return;
  } else if (entry.method === 'groupEnd') {
    // eslint-disable-next-line no-console
    console.groupEnd();
    return;
  }
  const {
    prefix,
    style,
    payload
  } = styleLog(entry);
  // eslint-disable-next-line no-console
  console[entry.method](prefix, style, payload);
}

/***/ }),

/***/ 90632:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createActionLogger;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _index = __webpack_require__(43862);
var _constants = __webpack_require__(8599);
var _transformers = _interopRequireDefault(__webpack_require__(34305));
var _utils = __webpack_require__(63821);
var _reduxLogger = __webpack_require__(17073);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Logs plugin.
// Action specific.
// Libraries.
/**
 * Creates a redux middleware for logging actions.
 * @method createActionLogger
 * @param  {Object}     options
 * @return {Middleware}
 */
function createActionLogger(options) {
  // Create a Logger for handling the action logs.
  const logger = _index.logManager.getLogger('ACTION');
  logger.setHandler(options.logActions.handler);
  logger.setLevel(options.logActions.level);
  const setLevel = _constants.logLevels[options.logLevel];
  let actionOptions = {};
  // Use different options for redux-logger depending on log level.
  if (setLevel === _constants.logLevels.INFO) {
    // At the INFO level, hide everything except the action name.
    actionOptions.level = false;
    actionOptions.diff = false;
  } else {
    // At the DEBUG+ levels, use the configs.
    actionOptions = _objectSpread({}, options.logActions);
  }
  if (options.logActions.actionOnly) {
    // Hide prevState and nextState.
    // Log action and error at info level, so the browser won't hide it by default.
    actionOptions.level = {
      prevState: false,
      action: 'info',
      error: 'info',
      nextState: false
    };
  }
  if (options.logActions.excludeActions) {
    actionOptions.predicate = excludeActions(options.logActions.excludeActions);
  }

  // ALWAYS use our own logger
  actionOptions.logger = logger;
  // ALWAYS remove theming/styling from the action log messages
  actionOptions.titleFormatter = _utils.titleFormatter;
  actionOptions.colors = false;

  // Setup the transformers based on the options.
  const transformers = (0, _transformers.default)(options.logActions);
  // Create the logger middleware.

  return (0, _reduxLogger.createLogger)(_objectSpread(_objectSpread({}, actionOptions), transformers));
}

/**
 * Logger predicate function that will take an array of action types
 * and exclude them from logs
 * @param {Array} actions An array of action types to exclude from logs
 * @returns {function} A predicate function
 */
function excludeActions(actions) {
  return (getState, action) => !actions.includes(action.type);
}

/***/ }),

/***/ 34305:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = setupTransformers;
var _omit2 = _interopRequireDefault(__webpack_require__(81053));
// Libraries

/**
 * Determines which redux-logger transformers we need based on options.
 * @method setupTransformers
 * @param  {Object} options
 * @return {Object} An object of transformers to be provided to redux-logger.
 */
function setupTransformers(options) {
  // A "pipeline" of all redux-logger action transformers.
  function actionPipeline(transformers) {
    return function (action) {
      transformers.forEach(function (transformer) {
        action = transformer(action);
      });
      return action;
    };
  }
  const transformers = {};
  const actionTransformers = [];
  if (!options.exposePayloads) {
    // If exposePayloads is disabled, include the removePayloads transformer
    actionTransformers.push(removePayloads);
  } else {
    // Otherwise, we should still hide passwords
    actionTransformers.push(passwordHider);
  }
  // Create the actionTransformer pipeline with the included transformers.
  transformers.actionTransformer = actionPipeline(actionTransformers);
  return transformers;
}

// Redux-logger actionTransformer to prevent passwords from being logged.
function passwordHider(action) {
  if (action.meta && action.meta.isSensitive) {
    // Only log the action name for actions that have sensitive data in them.
    return (0, _omit2.default)('payload', action);
  }
  return action;
}

/**
 * Helper function removes secure data if secure mode is enabled
 * @param {Object} action
 */
function removePayloads(action) {
  if (!(action.meta && action.meta.isSafe)) {
    return (0, _omit2.default)('payload', action);
  }
  return action;
}

/***/ }),

/***/ 63821:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.titleFormatter = titleFormatter;
/**
 * Standard title formatter function is almost identical to the defaultTitleFormatter found in redux-logger
 * but removes placeholder characters previously used for styling, which is not being used in the logging
 * configuration
 *
 * @param action
 * @param time
 * @param took
 * @returns {string}
 */
function titleFormatter(action, time, took) {
  var parts = ['action'];
  parts.push(action.type);
  parts.push('@ ' + time);
  parts.push('(in ' + took.toFixed(2) + ' ms)');
  return parts.join(' ');
}

/***/ }),

/***/ 64883:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.partialDefaultLogActions = exports.defaultOptions = void 0;
var _actionHandler = _interopRequireDefault(__webpack_require__(88923));
/**
 * Configuration options for the Logs feature.
 *
 * The SDK will log information about the operations it is performing. The
 *    amount of information will depend on how the Logs feature is configured.
 *
 * The format of logs can also be customized by providing a
 *    {@link logger.LogHandler LogHandler}. This function will receive a
 *    {@link logger.LogEntry LogEntry} which it can handle as it sees fit. By
 *    default, the SDK will log information to the console. For more
 *    information, see the {@link logger Logs feature} description.
 *
 * @public
 * @static
 * @name config.logs
 * @memberof config
 * @requires logs
 * @instance
 * @param {Object} logs Logs configs.
 * @param {string} [logs.logLevel='debug'] Log level to be set. See {@link logger.levels}.
 * @param {logger.LogHandler} [logs.handler] The function to receive log entries from the
 *    SDK. If not provided, a default handler will be used that logs entries
 *    to the console.
 * @param {Object|boolean} [logs.logActions=false] Options specifically for action logs when
 *    logLevel is at DEBUG+ levels. Set this to false to not output action logs.
 * @param {logger.LogHandler} [logs.logActions.handler] The function to receive action
 *    log entries from the SDK. If not provided, a default handler will be used
 *    that logs actions to the console.
 * @param {boolean} [logs.logActions.actionOnly=false] Only output information
 *    about the action itself. Omits the SDK context for when it occurred.
 * @param {boolean} [logs.logActions.collapsed=false] Whether logs should be
 *    minimized when initially output. The full log is still output and can be
 *    inspected on the console.
 * @param {boolean} [logs.logActions.diff=false] Include a diff of what SDK
 *    context was changed by the action.
 * @param {string}  [logs.logActions.level='debug'] Log level to be set
 *    on the action logs
 * @param {boolean} [logs.logActions.exposePayloads=true] Allow action payloads
 *    to be exposed in the logs, potentially displaying sensitive information.
 */
const defaultOptions = exports.defaultOptions = {
  logLevel: 'debug',
  handler: undefined,
  logActions: false
};
const partialDefaultLogActions = exports.partialDefaultLogActions = {
  handler: _actionHandler.default,
  actionOnly: false,
  collapsed: false,
  diff: false,
  level: 'debug',
  exposePayloads: true
};
/*
 * TODO: Figure out a way to work around this.
 * Can't use validation in logging because validation uses logging to output errors.
 * Circular dependency, have to refactor.
 * Code:
 ```javascript
// Parse and/or Validate
// import { enums, validation as v8n, parse } from '../common/validation'
const defaultValidation = v8n.schema({
  logLevel: enums(['silent', 'error', 'warn', 'info', 'debug']),
  handler: v8n.optional(v8n.function()),
  logActions: v8n.optional(
    v8n.passesAnyOf(
      v8n.schema({
        handler: v8n.optional(v8n.function()),
        actionOnly: v8n.boolean(),
        collapsed: v8n.boolean(),
        diff: v8n.boolean(),
        exposePayloads: v8n.boolean()
      }),
      // OR
      v8n.boolean()
    )
  )
})

export const parseLogConfig = parse('logger', defaultValidation)
```
*/

/***/ }),

/***/ 81370:
/***/ (() => {

"use strict";
/*
 * This file contains SDK documentation for stuff defined by the Logger package.
 * They are here to 1) ensure they are picked up by our documentation tool and
 *    2) ensure they are written from the perspective of the SDK (not the Logger
 *    library).
 */

/**
 * A LogEntry object is the data that the SDK compiles when information is
 *    logged. It contains both the logged information and meta-info about when
 *    and who logged it.
 *
 * A {@link logger.LogHandler LogHandler} provided to the SDK (see
 *    {@link #configconfiglogs config.logs}) will need to handle LogEntry
 *    objects.
 *
 * @public
 * @static
 * @typedef {Object} LogEntry
 * @memberof logger
 * @requires logs
 * @property {number} timestamp When the log was created, based on UNIX epoch.
 * @property {string} method The log function that was used to create the log.
 * @property {string} level The level of severity the log.
 * @property {Object} target The subject that the log is about.
 * @property {string} target.type The type of the target. This is also
 *    used as part of the name of the Logger.
 * @property {string} [target.id] A unique identifier for the target.
 * @property {string} target.name A combination of the target type and ID. If no
 *    id was provided, this will be the same as the type.
 * @property {Array} messages The logged information, given to the Logger
 *    method as parameters.
 * @property {Object} [timer] Timing data, if the log method was a timer method.
 * @example
 * function defaultLogHandler (logEntry) {
 *   // Compile the meta info of the log for a prefix.
 *   const { timestamp, level, target } = logEntry
 *   let { method } = logEntry
 *   const logInfo = `${timestamp} - ${target.type} - ${level}`
 *
 *   // Assume that the first message parameter is a string.
 *   const [log, ...extra] = logEntry.messages
 *
 *   // For the timer methods, don't actually use the console methods.
 *   //    The Logger already did the timing, so simply log out the info.
 *   if (['time', 'timeLog', 'timeEnd'].includes(method)) {
 *     method = 'debug'
 *   }
 *
 *   console[method](`${logInfo} - ${log}`, ...extra)
 * }
 */

/**
 * A LogHandler can be used to customize how the SDK should log information. By
 *    default, the SDK will log information to the console, but a LogHandler can
 *    be configured to change this behaviour.
 *
 * A LogHandler can be provided to the SDK as part of its configuration (see
 *    {@link #configconfiglogs config.logs}). The SDK will then provide this
 *    function with the logged information.
 *
 * @public
 * @static
 * @typedef {Function} LogHandler
 * @memberof logger
 * @requires logs
 * @param {Object} LogEntry The LogEntry to be logged.
 * @example
 * // Define a custom function to handle logs.
 * function logHandler (logEntry) {
 *   // Compile the meta info of the log for a prefix.
 *   const { timestamp, level, target } = logEntry
 *   let { method } = logEntry
 *   const logInfo = `${timestamp} - ${target.type} - ${level}`
 *
 *   // Assume that the first message parameter is a string.
 *   const [log, ...extra] = logEntry.messages
 *
 *   // For the timer methods, don't actually use the console methods.
 *   //    The Logger already did the timing, so simply log out the info.
 *   if (['time', 'timeLog', 'timeEnd'].includes(method)) {
 *     method = 'debug'
 *   }
 *
 *   console[method](`${logInfo} - ${log}`, ...extra)
 * }
 *
 * // Provide the LogHandler as part of the SDK configurations.
 * const configs = { ... }
 * configs.logs.handler = logHandler
 * const client = create(configs)
 */


/***/ }),

/***/ 43862:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.logManager = exports.API_LOG_TAG = void 0;
var _kandyLogger = _interopRequireDefault(__webpack_require__(17070));
var _config = __webpack_require__(64883);
// Logs generated as a result of invoking the public API will contain this tag
const API_LOG_TAG = exports.API_LOG_TAG = 'API invoked: ';

/**
 * Create the LogManager right away so that it is available. The SDK has not
 *    been instantiated yet, so we have to use the default options until we get
 *    the application's configs.
 */
/**
 * TODO: There is a technical debt associated with having a loggerManager along with it's
 * loggers created at the global scope. Multiple instances of the SDK would end up sharing
 * the log manager and therefore loggers.
 */
const manager = (0, _kandyLogger.default)(_config.defaultOptions);
const logManager = exports.logManager = manager;

/***/ }),

/***/ 91913:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SET_LEVEL = exports.SET_HANDLER = exports.LEVELS_CHANGE = exports.HANDLERS_CHANGE = void 0;
const prefix = '@@KANDY/LOGS/';
const SET_LEVEL = exports.SET_LEVEL = prefix + 'SET_LEVEL';
const LEVELS_CHANGE = exports.LEVELS_CHANGE = prefix + 'LEVELS_CHANGE';
const SET_HANDLER = exports.SET_HANDLER = prefix + 'SET_HANDLER';
const HANDLERS_CHANGE = exports.HANDLERS_CHANGE = prefix + 'HANDLERS_CHANGE';

/***/ }),

/***/ 5161:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.handlersChanged = handlersChanged;
exports.levelsChanged = levelsChanged;
exports.setHandler = setHandler;
exports.setLevel = setLevel;
var actionTypes = _interopRequireWildcard(__webpack_require__(91913));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Logs plugin.

/**
 * Action for setting a Logger's level.
 * @method setLevel
 * @param  {string} level  The level to be set.
 * @param  {string} [type] The type of Logger to set it for.
 */
function setLevel(level, type) {
  return {
    type: actionTypes.SET_LEVEL,
    payload: {
      level,
      type
    }
  };
}

/**
 * Action for setting all of the Loggers' log level.
 * @method levelsChanged
 * @param  {Object} levelMap Mapping of logger type to level.
 * @return {Object}
 */
function levelsChanged(levelMap) {
  return {
    type: actionTypes.LEVELS_CHANGE,
    payload: levelMap
  };
}

/**
 * Action for setting a Logger's handler.
 * @method setHandler
 * @param  {Function} handler A LogHandler function.
 * @param  {string}   [type]  The type of Logger to set it for.
 */
function setHandler(handler, type) {
  return {
    type: actionTypes.SET_HANDLER,
    payload: {
      handler,
      type
    }
  };
}

/**
 * Action for setting all of the Loggers' log handler.
 * @method handlersChanged
 * @param  {Object} handlerMap Mapping of logger type to handler.
 * @return {Object}
 */
function handlersChanged(handlerMap) {
  return {
    type: actionTypes.HANDLERS_CHANGE,
    payload: handlerMap
  };
}

/***/ }),

/***/ 17188:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var actions = _interopRequireWildcard(__webpack_require__(5161));
var _selectors = __webpack_require__(13751);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * The SDK has an internal logging system for providing information about its
 *    behaviour. The SDK will generate logs, at different levels for different
 *    types of information, which are routed to a
 *    "{@link logger.LogHandler Log Handler}" for consumption. An application
 *    can provide their own Log Handler (see
 *    {@link #configconfiglogs config.logs}) to customize how the logs are
 *    handled, or allow the default Log Handler to print the logs to the
 *    console.
 *
 * The SDK's default Log Handler is merely a thin wrapper around the browser's
 *    console API (ie. `window.console`). It receives the log generated by the
 *    SDK, called a "{@link logger.LogEntry Log Entry}", formats a
 *    human-readable message with it, then uses the console to log it at the
 *    appropriate level. This is important to be aware of, since your browser's
 *    console may affect how you see the SDK's default log messages. Since the
 *    default Log Handler uses the console's levels, the browser may filter
 *    which messages are shown depending on which levels it has configured. For
 *    a user that understands console log levels, this can be helpful for
 *    filtering the logs to only the relevant information. But it can equally
 *    be a hindrance by hiding the more detailed log messages (at the 'debug'
 *    level), since browser can have this level hidden by default. For this
 *    reason, we recommend providing a custom Log Handler to the SDK that is
 *    better suited for your application and its users.
 *
 * @public
 * @namespace logger
 * @requires logs
 */
/**
 * Call Logs API factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} API.
 */
function createAPI(container) {
  const {
    context,
    LogsOperations: operations,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('LOGS');
  const logsApi = {
    /**
     * Possible levels for the SDK logger.
     *
     * The SDK will provide {@link logger.LogEntry Log Entries} to the
     *    {@link logger.LogHandler Log Handler} for all logs at or above the set
     *    log level. 'debug' is considered the lowest level and 'silent' the
     *    highest level. For example, if the current level is 'info', then the
     *    {@link logger.LogHandler Log Handler} will receive
     *    {@link logger.LogEntry Log Entries} for logs at 'info', 'warn', and
     *    'error', but not for the 'debug' level.
     * @public
     * @static
     * @memberof logger
     * @method levels
     * @property {string} SILENT Nothing will be logged.
     * @property {string} ERROR Unhandled error information will be logged. If
     *    the SDK encounters an issue it cannot resolve, the error will be included
     *    in the logs. This likely points to an issue with the SDK itself or an
     *    issue with how the SDK is being used.
     * @property {string} WARN Warning messages for the application developer will
     *    be logged. If the SDK encounters an issue that it can recover and continue,
     *    a warning about the issue will be included in the logs. These logs point
     *    to issues that need to be handled by the application. For example, providing
     *    an invalid configuration to the SDK will cause a warning log that explains
     *    the issue.
     * @property {string} INFO General information about the SDK's operations will
     *    be logged, outlining how the SDK is handling the operations. Reading through
     *    these logs should provide a high-level view of what the SDK is doing,
     *    and why it is doing it.
     * @property {string} DEBUG Detailed information about the SDK's operations,
     *    meant for debugging issues, will be logged. Specific information and relevant
     *    operation data are provided for understanding the scenario that the SDK
     *    was in during the operation.
     */
    levels: {
      SILENT: 'silent',
      ERROR: 'error',
      WARN: 'warn',
      INFO: 'info',
      DEBUG: 'debug'
    },
    /**
     * Update the log level used by the SDK's loggers.
     *
     * Changing the log level will affect the amount of logs that the SDK will
     *    output for debugging purposes.
     *
     * See {@link logger.levels} for valid log levels. Other values will not be
     *    accepted. See the {@link logger.getTypes} API for valid logger types.
     *    Other values will have no affect.
     * @private
     * @static
     * @memberof logger
     * @method setLevel
     * @param  {string} level The log level to set.
     * @param  {string} [type] An optional subset of loggers to update.
     * @example
     * // Set logs to be at the warn level.
     * client.logger.setLevel(client.logger.levels.WARN)
     */
    async setLevel(level, type) {
      log.debug(API_LOG_TAG + 'logger.setLevel: ', level, type);

      // Backwards compatibility: Dispatch this action at the start of the operation
      //    because that's what the old API does. But because we're not using actions
      //    to trigger sagas here, this doesn't actually do anything.
      context.dispatch(actions.setLevel(level, type));
      try {
        await operations.setLogLevel(level, type);
      } catch (error) {
        log.error(error.message);
      }
    },
    /**
     * Get the currently set log level used by the SDK's loggers.
     *
     * @private
     * @static
     * @memberof logger
     * @method getLevel
     * @param  {string} [type] An optional subset of loggers.
     * @return {logger.levels} A log level.
     */
    getLevel(type) {
      log.debug(API_LOG_TAG + 'logger.getLevel: ', type);
      return (0, _selectors.getLevel)(context.getState(), type);
    },
    /**
     * Updates the {@link logger.LogHandler LogHandler} used by the SDK's
     *    loggers.
     *
     * Changing the log handler will change how the SDK's logs are handled by
     *    the application.
     *
     * See {@link logger.LogHandler} and {@link logger.LogEntry} for information
     *    about the handler. See the {@link logger.getTypes} API for valid
     *    logger types. Other values will have no affect.
     * @private
     * @static
     * @memberof logger
     * @method setHandler
     * @param  {logger.LogEntry} handler A {@link logger.LogHandler} function.
     * @param  {string}   [type] An optional subset of loggers to update.
     * @example
     * // Change the SDK's Log Handler to a custom function.
     * client.logger.setHandler((logEntry) => {
     *    // Handle the SDK's logs in a custom way.
     *    ...
     * })
     *
     */
    async setHandler(handler, type) {
      log.debug(API_LOG_TAG + 'logger.setHandler: ', handler, type);

      // Backwards compatibility: Dispatch this action at the start of the operation
      //    because that's what the old API does. But because we're not using actions
      //    to trigger sagas here, this doesn't actually do anything.
      context.dispatch(actions.setHandler(handler, type));
      try {
        await operations.setLogHandler(handler, type);
      } catch (error) {
        log.error(error.message);
      }
    },
    /**
     * Get the list of logger types used by the SDK.
     *
     * Logs for different SDK features can be managed separately from one
     *    another by specifying the type when using the {@link logger.setLevel}
     *    and {@link logger.setHandler} APIs.
     * @private
     * @static
     * @memberof logger
     * @method getTypes
     * @return {Array<string>} Logger types.
     * @example
     * const types = client.logger.getTypes()
     * // types: ['DEFAULT', 'AUTH', 'CALL', ...]
     *
     * // Set the Call logs to be at the debug level.
     * client.logger.setLevel('DEBUG', 'CALL')
     */
    getTypes() {
      log.debug(API_LOG_TAG + 'logger.getTypes');
      return (0, _selectors.getTypes)(context.getState());
    }
  };
  return {
    logger: logsApi
  };
}

/***/ }),

/***/ 47166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAPI", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _api = _interopRequireDefault(__webpack_require__(17188));
var _reducers = _interopRequireDefault(__webpack_require__(43773));
const name = exports.name = 'logs';

/***/ }),

/***/ 43773:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(91913));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Libraries
/**
 * Logs state is a mapping between every Logger type (and the default type)
 *    and its set log level.
 * eg. {
 *    DEFAULT: 'DEBUG',
 *    AUTH: 'DEBUG',
 *    CALL: 'INFO',
 *    ...
 * }
 */

const reducers = {};
reducers[actionTypes.LEVELS_CHANGE] = {
  next(state, action) {
    // Replace all levels that have been changed.
    return _objectSpread(_objectSpread({}, state), action.payload);
  }
};
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 13751:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getLevel = getLevel;
exports.getTypes = getTypes;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
// Libraries.

/**
 * Retrieves the log level for a specified logger type, or the default level.
 * @method getLevel
 * @param  {Object} state            SDK redux state.
 * @param  {String} [type='DEFAULT'] A type of Logger.
 * @return {string} A log level.
 */
function getLevel(state) {
  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  const clonedState = (0, _cloneDeep2.default)(state);
  return clonedState.logs[type];
}

/**
 * Retrieves a list of all of the SDK's Logger types.
 * @method getTypes
 * @param  {Object} state  SDK redux state.
 * @return {Array<string>}
 */
function getTypes(state) {
  const clonedState = (0, _cloneDeep2.default)(state);
  return Object.keys(clonedState.logs);
}

/***/ }),

/***/ 32908:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getHandlerMap = getHandlerMap;
exports.getLevelMap = getLevelMap;
// The SDK's name for the default/global log level.
const defaultType = 'DEFAULT';

/**
 * Helper function.
 * Gets the log levels for every Logger type (and default).
 * @method getLevelMap
 * @return {Object} Mapping of Logger type to its log level.
 */
function getLevelMap(logManager) {
  // Get unique types from all Loggers.
  const loggers = logManager.getLoggers();
  const types = [...new Set(loggers.map(logger => logger.type))];
  const levels = {};
  // Add the default level to the beginning.
  levels[defaultType] = logManager.getLevel();

  // Get the level for each Logger type.
  types.forEach(type => {
    levels[type] = logManager.getLevel(type);
  });
  return levels;
}

/**
 * Helper function.
 * Gets the log handler for every Logger type (and default).
 * @method getHandlerMap
 * @return {Object} Mapping of Logger type to its log handler.
 */
function getHandlerMap(logManager) {
  // Get unique types from all Loggers.
  const loggers = logManager.getLoggers();
  const types = [...new Set(loggers.map(logger => logger.type))];
  const handlers = {};
  // Add the default level to the beginning.
  handlers[defaultType] = logManager.getHandler();

  // Get the handler for each Logger type.
  types.forEach(type => {
    handlers[type] = logManager.getHandler(type);
  });
  return handlers;
}

/***/ }),

/***/ 81864:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var actions = _interopRequireWildcard(__webpack_require__(5161));
var _utils = __webpack_require__(32908);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Logs Operations factory function.
 * @method createOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for Logs.
 */
function createOperations(container) {
  const {
    context,
    logManager
  } = container;

  // The SDK's name for the default/global log level.
  const defaultType = 'DEFAULT';

  /**
   * Operation to setup log level (either for a specific logger type or implicitly for the DEFAULT type).
   * @method setLogLevel
   * @param  {string} level The log level to be set.
   * @param  {string} [type] The type of logger which will use that log level.
   *   If not specified, the DEFAULT logger will use it.
   */
  async function setLogLevel(level, type) {
    if (!type || type === defaultType) {
      // Update the Manager's default level.
      logManager.setLevel(level);
      // Update all Loggers' levels.
      logManager.getLoggers().forEach(logger => {
        logger.setLevel(level);
      });

      // Update all Logger levels in state, because changing the default level
      //    will affect all Loggers without their own explicit level set.
      context.dispatch(actions.levelsChanged((0, _utils.getLevelMap)(logManager)));
    } else {
      // Update the Manager's default level for this type.
      logManager.setLevel(type, level);
      // Update all Loggers of this type.
      logManager.getLoggers(type).forEach(logger => {
        logger.setLevel(level);
      });

      // Update the one type's level in state.
      context.dispatch(actions.levelsChanged({
        [type]: level
      }));
    }
  }

  /**
   * Operation to setup a custom log handler (either for a specific logger type or implicitly for the DEFAULT type).
   * @method setLogLevel
   * @param  {string} handler The log handler function to be set.
   *   This will be the function invoked when SDK logs something (for that logger type or for DEFAULT type)
   * @param  {string} [type] The type of logger whose loggin activity which will trigger that handler function.
   *   If not specified, the DEFAULT logger will trigger that handler.
   */
  async function setLogHandler(handler, type) {
    if (!type || type === defaultType) {
      // Update the Manager's default level.
      logManager.setHandler(handler);
      // Update all Loggers' handlers.
      logManager.getLoggers().forEach(logger => {
        logger.setHandler(handler);
      });

      // Notify that all Logger handlers [may] have changed (because changing
      //    the default handler will affect all Loggers without their own
      //    handler explicitly set).
      context.dispatch(actions.handlersChanged((0, _utils.getHandlerMap)(logManager)));
    } else {
      // Update the Manager's default handler for this type.
      logManager.setHandler(type, handler);
      // Update all Loggers of this type.
      logManager.getLoggers(type).forEach(logger => {
        logger.setHandler(handler);
      });

      // Notify that the one type's handler has changed.
      context.dispatch(actions.handlersChanged({
        [type]: handler
      }));
    }
  }
  return {
    setLogLevel,
    setLogHandler
  };
}

/***/ }),

/***/ 47995:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = logsFactory;
var _interface = __webpack_require__(47166);
var actions = _interopRequireWildcard(__webpack_require__(5161));
var _utils = __webpack_require__(32908);
var _operations = _interopRequireDefault(__webpack_require__(81864));
var _config = __webpack_require__(64883);
var _actions2 = _interopRequireDefault(__webpack_require__(90632));
var _actions3 = __webpack_require__(43424);
var _utils2 = __webpack_require__(25189);
var _kandyLogger = __webpack_require__(17070);
var _index = __webpack_require__(43862);
__webpack_require__(81370);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
Note regarding this file's name:

Usually plugins factories are in the index.js file of their corresponding folder.
This used to be the case. However this file was also being used to host the logManager
that is being used with the SDK.

Since the logManager is being included in almost every file it was preferable to rename this
file rather than point 100s of files to a new place for the logManager.
**/

// Logs plugin.

// Other plugins.

// Libraries.

// Include the extra JSDoc items.

/**
 * Logs plugin factory.
 * @method logsFactory
 */
function logsFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Register the logManager with the bottle so that other plugins have access to it.
  // Log Manager needs to be registered before registering LogsAPI (below) because the API will
  // try to get a logger, as part of its own initialization.
  bottle.value('logManager', _index.logManager);
  bottle.constant('API_LOG_TAG', _index.API_LOG_TAG);

  // Register the component factory functions to the bottle.
  bottle.factory('LogsAPI', _interface.createAPI);
  bottle.factory('LogsOperations', _operations.default);
  const logger = _index.logManager.getLogger('LOGS');

  // Make sure the configured log handler was a function.
  if (options.handler && typeof options.handler !== 'function') {
    delete options.handler;
    logger.warn('Invalid log handler configuration provided; using default instead.');
  }

  // Make sure configured log level is supported.
  if (options.logLevel && !Object.keys(_kandyLogger.logLevels).includes(options.logLevel.toUpperCase())) {
    delete options.logLevel;
    logger.warn('Invalid log level configuration provided; using default instead.');
  }
  options = (0, _utils2.mergeValues)(_config.defaultOptions, options);

  // Check if `logActions` is true and apply defaults for action logging
  if (options.logActions !== false) {
    if (options.logActions instanceof Object) {
      options.logActions = (0, _utils2.mergeValues)(_config.partialDefaultLogActions, options.logActions);
    } else {
      options.logActions = _config.partialDefaultLogActions;
    }
  }

  // Now that we have the application's log configs, update everything to
  //    use those values instead of default values.
  _index.logManager.setLevel(options.logLevel);
  if (options.handler) {
    _index.logManager.setHandler(options.handler);
  }
  Object.values(_index.logManager.getLoggers()).forEach(logger => {
    logger.setLevel(options.logLevel);
    if (options.handler) {
      logger.setHandler(options.handler);
    }
  });

  /*
   * Init function to setup the Logs plugin.
   * It should be the first plugin to be initialized.
   */
  function initPlugin(container) {
    const {
      context,
      WebRTC
    } = container;

    // Send the provided options to the store.
    // This will be `state.config[name]`.
    context.dispatch((0, _actions3.update)(options, _interface.name));

    // Update state with the initial Logger levels.
    context.dispatch(actions.levelsChanged((0, _utils.getLevelMap)(_index.logManager)));

    // Ensure the webRTC object exists.
    if (WebRTC) {
      // Update everything to
      //    use those values from the application configs instead of default values in the webrtc Stack.
      const webRTCLogManager = WebRTC.logs;
      if (options.handler) {
        webRTCLogManager.setHandler(options.handler);
      }
      Object.values(webRTCLogManager.getLoggers()).forEach(logger => {
        logger.setLevel(options.logLevel);
        if (options.handler) {
          logger.setHandler(options.handler);
        }
      });
    }
  }
  const components = {
    name: _interface.name,
    capabilities: ['logs'],
    reducer: _interface.reducer
  };
  options.logLevel = options.logLevel.toUpperCase();
  const setLevel = _kandyLogger.logLevels[options.logLevel];
  // Consider actions to be at the INFO log level.
  // Only export a middleware (for actions) at the appropriate levels.
  if (setLevel <= _kandyLogger.logLevels.INFO && options.logActions !== false) {
    components.middleware = (0, _actions2.default)(options);
  }
  bottle.defer(initPlugin);
  return components;
}

/***/ }),

/***/ 5344:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UPDATE_CONVERSATION = exports.SEND_MESSAGE_READ_FINISH = exports.SEND_MESSAGE_READ = exports.SEND_MESSAGE_FINISH = exports.SEND_MESSAGE = exports.MESSAGE_RECEIVED = exports.INCOMING_MESSAGE_READ = exports.FILE_UPLOAD_FAIL = exports.FETCH_MESSAGES_FINISHED = exports.FETCH_MESSAGES = exports.FETCH_CONVERSATIONS_FINISHED = exports.FETCH_CONVERSATIONS = exports.DELETE_MESSAGE_FINISH = exports.DELETE_MESSAGE = exports.DELETE_CONVERSATION_FINISH = exports.DELETE_CONVERSATION = exports.CREATE_CONVERSATION = exports.CLEAR_MESSAGES_FINISH = exports.CLEAR_MESSAGES = void 0;
const PREFIX = '@@KANDY/';
const CREATE_CONVERSATION = exports.CREATE_CONVERSATION = PREFIX + 'CREATE_CONVERSATION';
const SEND_MESSAGE = exports.SEND_MESSAGE = PREFIX + 'SEND_MESSAGE';
const SEND_MESSAGE_FINISH = exports.SEND_MESSAGE_FINISH = PREFIX + 'SEND_MESSAGE_FINISH';
const MESSAGE_RECEIVED = exports.MESSAGE_RECEIVED = PREFIX + 'MESSAGE_RECEIVED';
const INCOMING_MESSAGE_READ = exports.INCOMING_MESSAGE_READ = PREFIX + 'INCOMING_MESSAGE_READ';
const SEND_MESSAGE_READ = exports.SEND_MESSAGE_READ = PREFIX + 'SEND_MESSAGE_READ';
const SEND_MESSAGE_READ_FINISH = exports.SEND_MESSAGE_READ_FINISH = PREFIX + 'SEND_MESSAGE_READ_FINISH';
const CLEAR_MESSAGES = exports.CLEAR_MESSAGES = PREFIX + 'CLEAR_MESSAGES';
const CLEAR_MESSAGES_FINISH = exports.CLEAR_MESSAGES_FINISH = PREFIX + 'CLEAR_MESSAGES_FINISH';
const DELETE_CONVERSATION = exports.DELETE_CONVERSATION = PREFIX + 'DELETE_CONVERSATION';
const DELETE_CONVERSATION_FINISH = exports.DELETE_CONVERSATION_FINISH = PREFIX + 'DELETE_CONVERSATION_FINISH';
const DELETE_MESSAGE = exports.DELETE_MESSAGE = PREFIX + 'DELETE_MESSAGES';
const DELETE_MESSAGE_FINISH = exports.DELETE_MESSAGE_FINISH = PREFIX + 'DELETE_MESSAGES_FINISH';
const FETCH_CONVERSATIONS = exports.FETCH_CONVERSATIONS = PREFIX + 'FETCH_CONVERSATIONS';
const FETCH_CONVERSATIONS_FINISHED = exports.FETCH_CONVERSATIONS_FINISHED = PREFIX + 'FETCH_CONVERSATIONS_FINISHED';
const UPDATE_CONVERSATION = exports.UPDATE_CONVERSATION = PREFIX + 'UPDATE_CONVERSATION';
const FETCH_MESSAGES = exports.FETCH_MESSAGES = PREFIX + 'FETCH_MESSAGES';
const FETCH_MESSAGES_FINISHED = exports.FETCH_MESSAGES_FINISHED = PREFIX + 'FETCH_MESSAGES_FINISHED';
const FILE_UPLOAD_FAIL = exports.FILE_UPLOAD_FAIL = PREFIX + 'FILE_UPLOAD_FAIL';

/***/ }),

/***/ 50226:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createConversation = createConversation;
exports.deleteConversation = deleteConversation;
exports.deleteConversationFinish = deleteConversationFinish;
exports.fetchConversations = fetchConversations;
exports.fetchConversationsFinished = fetchConversationsFinished;
exports.updateConversation = updateConversation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(5344));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Conversation actions.
 * Actions relating to the creation/management of conversation objects.
 */

/**
 * Creates a create conversation action. Triggered when the user creates a new conversation object.
 *
 * @method createConversation
 * @param {Array<string>} destination An array of destinations for messages created in this conversation.
 * Currently, only one destination is supported.
 * @param {Object} options The options object can contain any keys an app may want passed along into the conversation object in the store.
 * @returns {Object} A flux standard action representing the create conversation action.
 */
function createConversation(destination, options) {
  return {
    type: actionTypes.CREATE_CONVERSATION,
    payload: _objectSpread({
      destination: destination,
      messages: [],
      isTypingList: []
    }, options)
  };
}

/**
 * Creates a fetch conversations action. This is dispatched by the API directly.
 * @param {Object} [options] An optional configuration object to query for more specific results. If no object is passed, all threads will be retrieved
 * @method fetchConversations
 * @returns {Object} A flux standard action representing the fetch conversations action.
 */
function fetchConversations(options) {
  return {
    type: actionTypes.FETCH_CONVERSATIONS,
    payload: _objectSpread({}, options)
  };
}

/**
 * Creates a fetch conversations finished action.
 * @method fetchConversationsFinished
 * @param {Object} $0
 * @param {Array<Object>} [$0.conversations] An array of conversation objects, if fetch was successful
 * @param {Object} [$0.error] An error object, only included if fetchConversations implementation had an error.
 * @returns {Object} A flux standard action representing the fetch conversations finished action.
 */
function fetchConversationsFinished(_ref) {
  let {
    conversations,
    error
  } = _ref;
  return {
    type: actionTypes.FETCH_CONVERSATIONS_FINISHED,
    payload: error || {
      conversations
    },
    error: Boolean(error)
  };
}

/**
 * Creates an update conversation action.
 *
 * @method updateConversation
 * @param {Object} conversation The conversation object
 * @param {Array<string>} conversation.destination An array of strings representing the destinations for messages that are sent from this conversation object.
 * Currently, only one destination is supported.
 * This property is always required, as it is the primary property by which conversations are organized in messaging plugin
 * @param {number} [conversation.id] The conversation object's corresponding thread ID
 * @param {string} [conversation.type] The conversation type, which is expected to be one of: "im", "sms".
 * @returns {Object} A flux standard action representing the create conversation action.
 */
function updateConversation(conversation) {
  return {
    type: actionTypes.UPDATE_CONVERSATION,
    payload: conversation
  };
}

/**
 * Request to delete all the messages from a conversation.
 * @method deleteConversation
 * @param  {string} destination The destination for messages created in this conversation.
 * @param {string} type The type of conversation: can be one of "im", "sms".
 * @returns {Object} A flux standard action.
 */
function deleteConversation(destination, type) {
  return {
    type: actionTypes.DELETE_CONVERSATION,
    payload: {
      destination: destination,
      type: type
    }
  };
}

/**
 * Creates a fetch messages finished action.
 * @method deleteConversationFinish
 * @param {Object} $0
 * @param {Array<string>} $0.destination An array of destinations for messages created in this conversation.
 * @param {string} $0.type The type of conversation: can be one of "im", "sms".
 * @param {Object} [$0.error] An error object, only present if an error occurred.
 * @returns {Object} A flux standard action representing the fetch messages finished action.
 */
function deleteConversationFinish(_ref2) {
  let {
    destination,
    type,
    error
  } = _ref2;
  return {
    type: actionTypes.DELETE_CONVERSATION_FINISH,
    payload: error || {
      destination,
      type
    },
    error: !!error
  };
}

/***/ }),

/***/ 60152:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.messageActions = exports.convoActions = void 0;
var messageActionsImport = _interopRequireWildcard(__webpack_require__(91153));
var convoActionsImport = _interopRequireWildcard(__webpack_require__(50226));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Apparently the following doesn't work:
//      export * as newName from './place';
// So import everything from each file, then re-export.

/**
 * The messaging plugin's actions are organized into three types:
 *  - message actions: those which act on message object,
 *  - convo actions: those which act on conversation objects,
 */
const messageActions = exports.messageActions = messageActionsImport;
const convoActions = exports.convoActions = convoActionsImport;

/***/ }),

/***/ 91153:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.clearMessages = clearMessages;
exports.deleteMessage = deleteMessage;
exports.deleteMessageFinish = deleteMessageFinish;
exports.fetchMessages = fetchMessages;
exports.fetchMessagesFinished = fetchMessagesFinished;
exports.incomingMessageRead = void 0;
exports.messageReceived = messageReceived;
exports.sendMessageRead = exports.sendMessageFinish = exports.sendMessage = void 0;
exports.sendMessageReadFinish = sendMessageReadFinish;
var actionTypes = _interopRequireWildcard(__webpack_require__(5344));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Action helper functions.
 */

function sendMessageHelper(actionType, destination, parts, timestamp, type, id) {
  return {
    type: actionType,
    payload: {
      destination,
      id: id,
      message: {
        timestamp,
        isPending: true,
        read: false,
        parts,
        type
      }
    }
  };
}
function messageReadHelper(actionType, messageId, participant) {
  return {
    type: actionType,
    payload: {
      messageId,
      participant
    }
  };
}

/**
 * Message actions.
 * Actions about the CRUD of message objects.
 */

/**
 * Creates a send message action. Triggered when the user initiates the send message process.
 *
 * @method sendMessage
 * @param {Array<string>} destination An array of destinations for messages created in this conversation. Currently, only one destination is supported.
 * @param {Array} parts The message parts, as a formatted object.
 * @param {number} timestamp A timestamp for the sent message in seconds.
 * @param {number} id The ID of the conversation as it exists in the back end.
 * @param {string} type Type of message. 'im' or 'sms'.
 * @returns {Object} A flux standard action representing the send message action.
 */
const sendMessage = (destination, parts, timestamp, type, id) => sendMessageHelper(actionTypes.SEND_MESSAGE, destination, parts, timestamp, type, id);

/**
 * Creates a send message finished action. Trigged when a message send function has received a success response.
 *
 * @method sendMessageFinish
 * @param {Object} $0
 * @param {Array<string>} $0.destination An array of destinations for messages created in this conversation. Currently, only one destination is supported.
 * @param {string} $0.sender The sender of the outgoing message.
 * @param {string} $0.type The type of conversation: can be one 'im' or 'sms'.
 * @param {Array} $0.parts The message parts.
 * @param {number} $0.timestamp A timestamp for the sent message in seconds.
 * @param {string} [$0.messageId] The returned messageId of the message if sent successfully.
 * @param {string} [$0.deliveryStatus] The status of sent message
 * @param {Object} [$0.error] A basic error object
 * @returns {Object} A flux standard action representing the send message finished action.
 */
exports.sendMessage = sendMessage;
const sendMessageFinish = _ref => {
  let {
    destination,
    sender,
    type,
    parts,
    timestamp,
    messageId,
    deliveryStatus,
    error
  } = _ref;
  return {
    type: actionTypes.SEND_MESSAGE_FINISH,
    payload: {
      destination,
      sender,
      type,
      parts,
      timestamp,
      messageId,
      deliveryStatus,
      error
    },
    error: Boolean(error)
  };
};

/**
 * Creates a message received action. Triggered when the websocket receives a chat message.
 *
 * @method messageReceived
 * @param {Array<string>} destination An array of destinations for messages created in this conversation. Currently, only one destination is supported.
 * @param {Array} parts The message parts.
 * @param {string} messageId The messageId of the message that has been received.
 * @param {string} sender The user who sent the message. This is the user who the conversation is with.
 * @param {number} timestamp A timestamp for the sent message.
 * @param {Object} meta - A meta object.
 * @param {string} meta.type The type of conversation: can be "im" or "sms".
 * @param {boolean} meta.newConversation - A boolean value indicating whether the message corresponds to a conversation not yet in the store.
 * @returns {Object} A flux standard action representing the message received action.
 */
exports.sendMessageFinish = sendMessageFinish;
function messageReceived(destination, parts, messageId, sender, timestamp) {
  let meta = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
    type: 'im',
    newConversation: false
  };
  return {
    type: actionTypes.MESSAGE_RECEIVED,
    meta: meta,
    payload: {
      destination: destination,
      message: {
        timestamp: timestamp,
        isPending: false,
        read: false,
        parts: parts,
        sender: sender,
        messageId: messageId
      }
    }
  };
}

/**
 * Creates an incoming message read action. This triggers when we receive a "Message Read" notification over the websocket.
 *
 * @method incomingMessageRead
 * @param {string} messageId The unique id of the message being marked as read.
 * @param {string} participant The other participant of the conversation.
 * @returns {Object} A flux standard action representing the incoming message read action.
 */
const incomingMessageRead = (messageId, participant) => messageReadHelper(actionTypes.INCOMING_MESSAGE_READ, messageId, participant);

/**
 * Creates a send message read action. This should send a "mark message as read" request to the server.
 *
 * @method sendMessageRead
 * @param {string} messageId The unique id of the message being marked as read.
 * @param {string} participant The other participant of the conversation.
 * @returns {Object} A flux standard action representing the send message read action.
 */
exports.incomingMessageRead = incomingMessageRead;
const sendMessageRead = (messageId, participant) => messageReadHelper(actionTypes.SEND_MESSAGE_READ, messageId, participant);

/**
 * Creates a send message read finish action. This triggers on server response when attempting to mark a message read.
 *
 * @method sendMessageReadFinish
 * @param {Object} $0
 * @param {string} $0.messageId The unique id of the message being marked as read.
 * @param {string} $0.participant The other participant of the conversation.
 * @param {Object} $0.error A Basic error object.
 * @returns {Object} A flux standard action representing the send message read finish action.
 */
exports.sendMessageRead = sendMessageRead;
function sendMessageReadFinish(_ref2) {
  let {
    messageId,
    participant,
    error
  } = _ref2;
  return {
    type: actionTypes.SEND_MESSAGE_READ_FINISH,
    payload: error || {
      messageId,
      participant
    },
    error: Boolean(error)
  };
}

/**
 * Creates a fetch messages action. This is dispatched by the API directly.
 * @method fetchMessages
 * @param {Array} destination An array of destinations for messages created in this conversation.
 * @param {number} amount A number representing the amount of messages to fetch.
 * @returns {Object} A flux standard action representing the fetch messages action.
 */
function fetchMessages(destination, amount, type) {
  return {
    type: actionTypes.FETCH_MESSAGES,
    payload: {
      destination,
      amount,
      type
    }
  };
}

/**
 * Creates a fetch messages finished action.
 * @method fetchMessagesFinished
 * @param {Array<string>} destination An array of destinations for messages created in this conversation. Currently, only one destination is supported.
 * @param {string} type The type of conversation: can be "im" or "sms".
 * @param {Array} messages An array of formatted messages to put into the store.
 * @param {Object} [error] An error object, only present if an error occurred.
 * @returns {Object} A flux standard action representing the fetch messages finished action.
 */
function fetchMessagesFinished(destination, type, messages, error) {
  return {
    type: actionTypes.FETCH_MESSAGES_FINISHED,
    payload: error || {
      destination,
      type,
      messages
    },
    error: !!error
  };
}

/**
 * Request to clear messages from a conversation's state.
 * @method clearMessages
 * @param  {string} destination The destination for messages created in this conversation.
 * @param {string} type The type of conversation: can be "im" or "sms".
 * @returns {Object} A flux standard action.
 */
function clearMessages(destination, type) {
  return {
    type: actionTypes.CLEAR_MESSAGES,
    payload: {
      destination: destination,
      type: type
    }
  };
}

/**
 * Request to delete all the messages from a conversation.
 * @method deleteMessage
 * @param  {string} destination The destination for messages created in this conversation.
 * @param {string} type The type of conversation: can be "im" or "sms".
 * @param {string} messageId The ID of the message targeted for deletion
 * @returns {Object} A flux standard action.
 */
function deleteMessage(destination, type, messageId) {
  return {
    type: actionTypes.DELETE_MESSAGE,
    payload: {
      destination: destination,
      type: type,
      messageId: messageId
    }
  };
}

/**
 * Creates a fetch messages finished action.
 * @method deleteMessagesFinish
 * @param {Object} $0
 * @param {Array<string>} $0.destination An array of destinations for messages created in this conversation. Currently, only one destination is supported.
 * @param {string} $0.type The type of conversation: can be "im" or "sms".
 * @param {string} $0.messageId The ID of the message that was targeted for deletion
 * @param {Object} [$0.error] An error object, only present if an error occurred.
 * @returns {Object} A flux standard action representing the fetch messages finished action.
 */
function deleteMessageFinish(_ref3) {
  let {
    destination,
    type,
    messageId,
    error
  } = _ref3;
  return {
    type: actionTypes.DELETE_MESSAGE_FINISH,
    payload: error || {
      destination,
      type,
      messageId
    },
    error: !!error
  };
}

/***/ }),

/***/ 63910:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _actions = __webpack_require__(60152);
var _selectors = __webpack_require__(20504);
/**
 * The messaging feature revolves around a 'conversation' namespace. It is responsible to store the conversations
 * and its messages, and return conversation objects when requested.
 *
 * See the "Conversation" and "Message" sections of the documentation for more details.
 *
 *
 * Messaging functions are all part of the 'conversation' namespace. Ex: client.conversation.get('id').
 *
 * @public
 * @namespace conversation
 */

/**
 * Messaging API factory function.
 * Defines the interface between the application and the SDK's Messaging APIs.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @return {Object} Available public APIs for Messaging.
 */
function createAPI(container) {
  const {
    logManager,
    API_LOG_TAG,
    context,
    MixinsMessaging
  } = container;
  const log = logManager.getLogger('MESSAGING');
  const messagingApi = {
    // TODO: Revise this API's argument, since it is using names that are defined by CIM  they are not very descriptive.
    /**
     * Get a conversation object matching the user ID provided in the 'destination' parameter.
     * If successful, the event 'conversations:change' will be emitted.
     *
     * This API will retrieve a conversation already existing in the store.
     *
     * @public
     * @memberof conversation
     * @requires onlyInternalMessaging
     * @method get
     * @param {string} destination The destination for messages created in this conversation. This will
     * be a user's sip address.
     * @param {Object} [options] An optional configuration object to query for more specific results.
     * If this object is not passed, the function will query for "im" conversation with that recipient.
     * @param {string} [options.type] The type of conversation to retrieve. Can be one of "im", "sms" or "other".
     * @returns {conversation.Conversation} A Conversation object matching the passed destination, otherwise undefined is returned.
     */
    /**
     * Get a conversation object matching the user ID provided in the 'recipient' parameter.
     *
     * This API will retrieve a conversation already existing in the store.
     *
     * @public
     * @memberof conversation
     * @requires internalAndSmsMessaging
     * @method get
     * @param {string} recipient The destination for messages created in this conversation. This
     * will be a user's sip address.
     * @param {Object} [options] An optional configuration object to query for more specific results.
     * If this object is not passed, the function will query for "im" conversation with that recipient.
     * @param {string} [options.type] The type of conversation to retrieve. Can be one of "im", "sms" or "other".
     * @returns {Object} A Conversation object matching the passed recipient, otherwise undefined is returned.
     */
    get: function (recipient) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        type: 'im'
      };
      log.debug(API_LOG_TAG + 'conversation.get: ', recipient, options);
      const destination = Array.isArray(recipient) ? [...recipient] : [recipient];
      let description = 'Conversation';
      let messages;
      let id;
      const conversation = (0, _selectors.findConversation)(context.getState(), destination, options.type);
      if (conversation) {
        if (options.type === conversation.type) {
          description = conversation.description;
          messages = conversation.messages;
          id = conversation.id;
          return MixinsMessaging.Conversation({
            destination,
            type: options.type,
            id: id,
            description,
            messages: messages,
            lastMessage: conversation.lastMessage,
            isTypingList: conversation.isTypingList,
            lastReceived: conversation ? conversation.lastReceived : undefined,
            lastPull: conversation ? conversation.lastPull : undefined
          });
        } else {
          log.info('Conversation found with matching destination, but conversation type does not match the type requested. Please specify the appropriate type, or call client.conversation.create() for a new type of conversation');
        }
      } else {
        log.info('Requested conversation not in state. Please use the create function if you would like a new conversation object.');
      }
      return undefined;
    },
    /**
     * Create and return a new conversation object. Any messages being sent through this conversation
     * object will be sent to the destination provided.
     *
     * @public
     * @memberof conversation
     * @requires internalAndSmsMessaging
     * @method create
     * @param {string} recipient
     * @param options
     * @returns {Object} a Conversation object
     */
    create: function (recipient) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        type: 'im'
      };
      log.debug(API_LOG_TAG + 'conversation.create: ', recipient, options);
      const destination = Array.isArray(recipient) ? recipient : [recipient];
      const prevConv = (0, _selectors.findConversation)(context.getState(), destination, options.type);
      if (!prevConv) {
        // No operation/request is triggered. This action simply creates a conversation
        // in redux store (i.e. locally)
        context.dispatch(_actions.convoActions.createConversation(destination, options));
      }
      return MixinsMessaging.Conversation({
        destination,
        type: options.type
      });
    },
    /**
     * Returns all conversations currently tracked by the SDK
     *
     * @public
     * @memberof conversation
     * @requires internalAndSmsMessaging
     * @requires onlyInternalMessaging
     * @method getAll
     * @returns {Array<conversation.Conversation>} An array of conversation objects.
     */
    getAll: function () {
      log.debug(API_LOG_TAG + 'conversation.getAll');
      const conversations = (0, _selectors.getConversations)(context.getState());

      // Map conversation Objects to Conversation-Mixin Objects
      return conversations.map(conversation => MixinsMessaging.Conversation(conversation));
    }
  };
  return {
    conversation: messagingApi
  };
}

/***/ }),

/***/ 40080:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MESSAGES_ERROR = exports.MESSAGES_CHANGE = exports.CONVERSATIONS_NEW = exports.CONVERSATIONS_CHANGE = void 0;
/**
 * A new conversation has been created and added to the state.
 *
 * @public
 * @memberof conversation
 * @event conversations:new
 */
const CONVERSATIONS_NEW = exports.CONVERSATIONS_NEW = 'conversations:new';

/**
 * A change has occurred in the conversation list.
 *
 * @public
 * @memberof conversation
 * @event conversations:change
 * @param {Array} params An array of objects containing information about the conversations that have changed
 * @param {Array} params.destination The destination for messages created in this conversation.
 * @param {string} params.type The type of conversation to create. Can be one of "chat", "im", "sms".
 */
const CONVERSATIONS_CHANGE = exports.CONVERSATIONS_CHANGE = 'conversations:change';

/**
 * A change has occurred in a specific conversations message list.
 * If a single message was affected/created, `messageId` will be present
 * as part of the event argument.
 *
 * @public
 * @memberof conversation
 * @event messages:change
 * @param {Object} params
 * @param {string} params.destination The destination for messages created in this conversation.
 * @param {string} params.type The type of conversation to create. Can be one of "chat", "im", "sms".
 * @param {string} [params.messageId] The ID of the message affected.
 * @param {string} [params.sender] The username of the sender of the message which caused the `messages:change` event to be triggered.
 */
const MESSAGES_CHANGE = exports.MESSAGES_CHANGE = 'messages:change';

/**
 * An error occurred with messaging.
 *
 * @public
 * @memberof conversation
 * @event messages:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 */
const MESSAGES_ERROR = exports.MESSAGES_ERROR = 'messages:error';

/***/ }),

/***/ 52009:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAPI", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
Object.defineProperty(exports, "createMixins", ({
  enumerable: true,
  get: function () {
    return _mixins.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _api = _interopRequireDefault(__webpack_require__(63910));
var _mixins = _interopRequireDefault(__webpack_require__(65101));
var _reducers = _interopRequireDefault(__webpack_require__(96467));
// Import the components of the interface.

/**
 * This interface is for a messaging plugin.
 * @type {string}
 */
const name = exports.name = 'messaging';

/***/ }),

/***/ 65101:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMixins;
var _isEqual2 = _interopRequireDefault(__webpack_require__(11520));
var _find2 = _interopRequireDefault(__webpack_require__(60758));
var _actions = __webpack_require__(60152);
var _selectors = __webpack_require__(20504);
var _selectors2 = __webpack_require__(46942);
var eventTypes = _interopRequireWildcard(__webpack_require__(40080));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// `features` and `lastPull` are not documented because they're intended to be internal
// `type` is not documented because as of now there are no types other than 'im'

/**
 * A Conversation object represents a conversation between two users.
 * A Conversation can create messages via the conversation's
 * {@link conversation.Conversation.createMessage createMessage()} function.
 * @public
 * @static
 * @typedef {Object} Conversation
 * @memberof conversation
 * @requires simpleMessagingOnly
 * @property {string} destination The id of the remote user with which the current user is having a conversation.
 */

/**
 * A Message object is a means by which a sender can deliver information to a recipient.
 *
 * Creating and sending a message:
 *
 * A message object can be obtained through the {@link conversation.Conversation.createMessage Conversation.createMessage} API on an existing conversation.
 *
 * Messages have Parts which represent pieces of a message. Currently, only a 'text' part is suported.
 * Once all the desired parts have been added to the message using the {@link conversation.Message.addPart Message.addPart} function,
 * the message can then be sent using the {@link conversation.Message.send Message.send} function.
 *
 * Once the sender sends a message, this message is saved in sender's state as an object.
 * Similarly, once the recipient gets a message, this message is saved in recipient's state.
 *
 * Retrieving a delivered message:
 *
 * Once a message is delivered successfully, it can be
 * obtained through the {@link conversation.Conversation.getMessages Conversation.getMessages} or {@link conversation.Conversation.getMessage Conversation.getMessage} API on an existing conversation.
 *
 * Below are the properties pertaining to the message object, returned by Conversation.getMessage(s) APIs, for either sender or recipient.
 *
 * @property {number} timestamp A Unix timestamp in seconds marking the time when the message was created by sender.
 * @property {Array<conversation.Part>} parts An array of Part Objects.
 * @property {string} sender The primary contact address of the sender.
 * @property {Array<string>} destination An array of primary contact addresses associated with various destinations to which the message is meant to be delivered. Currently, only one destination is supported.
 * @property {string} messageId The unique id of the message. The message object (stored in sender's state) has a different id
 * than the one associated with the message object stored in recipient's state.
 * @property {string} type The type of message that was sent. See {@link conversation.chatTypes} for valid types.
 * This property applies only to message objects stored in sender's state.
 *
 * @public
 * @static
 * @typedef {Object} Message
 * @memberof conversation
 */

// Events

function createMixins(container) {
  const {
    logManager,
    API_LOG_TAG,
    context,
    emitEvent,
    MessagingOperations: operations
  } = container;
  const log = logManager.getLogger('MESSAGING');

  /**
   * Conversation instance.
   *
   * @param {Object} info The information object used for creating a conversation instance.
   * @param {Array<string>} info.destination The Destination for messages being sent through
   * this conversation in this instance of the SDK. Currently, only one destination is supported.
   * @param {string} [info.type='im'] The type of the message. Currently, only instant messages are supported.
   * @param {string} [info.id=undefined] The unique identifier for base conversation.
   * @param {string} [info.description=''] The description associated with base conversation.
   * @param {Array} [info.messages=[]] An array containing the conversation's messages.
   * @param {number} [info.lastReceived] The timestamp associated with the last received message.
   * @param {string} [info.lastMessage] This is the last received message in a given conversation, as delivered by server.
   */
  const Conversation = function (_ref) {
    let {
      destination,
      type = 'im',
      id = undefined,
      description = '',
      messages = [],
      isTypingList = [],
      lastReceived,
      lastPull,
      lastMessage = ''
    } = _ref;
    const convo = {
      destination: destination,
      type: type,
      description: description,
      messages: messages,
      lastMessage: lastMessage,
      isTypingList: isTypingList,
      id: id,
      features: (0, _selectors.getMessagingConfig)(context.getState()).features,
      lastReceived: lastReceived,
      lastPull: lastPull,
      isPending: false,
      /**
       * Create and return a message object. You must provide a `text` part as demonstrated in the example.
       *
       * @public
       * @static
       * @memberof conversation.Conversation
       * @requires simpleMessagingOnly
       * @param {Object} part The part to add to the message.
       * @param {string} part.type The type of part. Must be "text".
       * @param {string} part.text The text of the part. Must be a part of type "text".
       * @returns {conversation.Message} The newly created Message object.
       *
       * @example
       * conversation.createMessage({type: 'text', text: 'This is the message'});
       */
      createMessage: function (part) {
        log.debug(`${API_LOG_TAG}conversation.Conversation.getMessages`);
        const messageContext = {
          features: this.features,
          id: this.id,
          type: this.type
        };
        return Message({
          destination: this.destination,
          part,
          messageContext: messageContext,
          type: this.type
        });
      },
      /**
       * Clears all messages in this conversation from local state.
       * @public
       * @static
       * @memberof conversation.Conversation
       * @method clearMessages
       */
      clearMessages: function () {
        log.debug(`${API_LOG_TAG}conversation.Conversation.clearMessages`);
        context.dispatch(_actions.messageActions.clearMessages(this.destination, this.type));

        // Trigger the same event that CLEAR_MESSAGES action would do.
        emitEvent(eventTypes.MESSAGES_CHANGE, {
          destination: this.destination,
          type: this.type
        });
      },
      /**
       * Get the messages associated with this conversation.
       *
       * @public
       * @static
       * @memberof conversation.Conversation
       * @returns {Object[]} messages An array containing the conversation's messages.
       * @returns {Function} messages.markRead Marks the message as read.
       * @returns {Function} messages.forward Forward the message to another user.
       * @returns {string} messages.messageId The Id of the message.
       * @returns {string} messages.sender The user Id of the user who sent the message.
       * @returns {number} messages.timestamp The time at which the message was sent.
       * @returns {boolean} messages.read Whether the message has been marked as read.
       * @returns {boolean} messages.isPending Whether the message has finished being sent to the server.
       * @returns {Array} messages.parts The parts of the message.
       */
      getMessages: function () {
        log.debug(`${API_LOG_TAG}conversation.Conversation.getMessages`);
        const convo = (0, _selectors.findConversation)(context.getState(), this.destination, this.type);
        return convo.messages.map(message => {
          message.forward = async participant => {
            const timestamp = Date.now();
            context.dispatch(_actions.messageActions.sendMessage(participant, message.parts, timestamp, this.type, this.id));
            // When forward() is called on a mesage instance, we'll trigger the sendMessage operation
            try {
              await operations.sendMessage(participant, timestamp, message.parts);
            } catch (error) {
              // Just log the error
              log.debug(`${API_LOG_TAG}conversation.Message.forward: Encountered an error: ${error}`);
              emitEvent(eventTypes.MESSAGES_CHANGE, {
                error
              });
            }
          };
          const userInfo = (0, _selectors2.getUserInfo)(context.getState());
          // Only allow the end user to markRead on message that were incoming.
          if (message.sender !== userInfo.username) {
            message.markRead = () => {
              context.dispatch(_actions.messageActions.sendMessageRead(message.messageId, this.destination));
            };
          }
          return message;
        });
      },
      /**
       * Get a specific message from this conversation.
       * @public
       * @static
       * @method getMessage
       * @memberof conversation.Conversation
       * @param {string} messageId ID of the message to retrieve.
       * @return {Object} A message object.
       */
      getMessage: function (messageId) {
        log.debug(`${API_LOG_TAG}conversation.Conversation.getMessage`);
        const convo = (0, _selectors.findConversation)(context.getState(), this.destination, this.type);
        const message = (0, _find2.default)(message => message.messageId === messageId)(convo.messages);
        if (!message) {
          log.debug(`Message (${messageId}) not found in conversation (${this.destination}).`);
          return;
        }
        message.forward = async participant => {
          const timestamp = Date.now();
          context.dispatch(_actions.messageActions.sendMessage(participant, message.parts, timestamp, this.type, this.id));
          try {
            await operations.sendMessage(participant, timestamp, message.parts);
          } catch (error) {
            // Just log the error
            log.debug(`${API_LOG_TAG}conversation.Message.forward: Encountered an error: ${error}`);
            emitEvent(eventTypes.MESSAGES_CHANGE, {
              error
            });
          }
        };
        // Only allow the end user to markRead on message that were incoming.
        const userInfo = (0, _selectors2.getUserInfo)(context.getState());
        if (message.sender !== userInfo.username) {
          message.markRead = () => {
            context.dispatch(_actions.messageActions.sendMessageRead(message.messageId, this.destination));
          };
        }
        return message;
      },
      /**
       * Subscribe to this conversations messages array.
       *
       * @public
       * @static
       * @memberof conversation.Conversation
       * @param {Function} subscriber A subscriber function to be triggered when the messages array of this conversation is updated.
       * @param {string} subscriber.destination The conversation participants.
       * @param {string} subscriber.messageId The ID of the message that caused the event.
       * @return {Function} The unsubscribe function.
       */
      subscribe: function (subscriber) {
        log.debug(`${API_LOG_TAG}conversation.Conversation.subscribe`);
        if (subscriber) {
          // Create a subscriber wrapper to properly determine if this messages:change event is relevant to this convo
          const subscriberWrapper = _ref2 => {
            let {
              destination,
              messageId
            } = _ref2;
            if ((0, _isEqual2.default)(destination, this.destination)) {
              subscriber({
                destination,
                messageId
              });
            }
          };
          // Subscribe to the messages:change event with the wrapped subscriber
          context.api.on('messages:change', subscriberWrapper);

          // Return the unsubscribe function
          return () => {
            context.api.off('messages:change', subscriberWrapper);
          };
        }
      }
    };
    return convo;
  };

  /**
   * Message instance.
   *
   * @param {Object} info The information object used for creating a message instance.
   * @param {string} info.destination The Destination for messages being sent through
   * this conversation in this instance of the SDK. Currently, only one destination is supported.
   * @param  {Object|string} info.part - Indentifies the payload to the message.
   * @param  {string} info.part.type - Type of payload. Currently, only 'text' is supported.
   * @param  {string} info.part.text - The actual message content.
   * @param  {Object} [info.messageContext] - Information and capabilities for how the message will act with regard to the conversation.
   * @param  {Array}  [info.messageContext.features] - List of features the conversation supports.
   * @param  {string} [info.type='im'] - The type of the message. Currently, only instant messaging is supported.
   */
  const Message = function (_ref3) {
    let {
      destination,
      part,
      messageContext,
      type = 'im'
    } = _ref3;
    let payload;
    // We only support typeof part as being a 'string' or an object whose type is plain text
    if (typeof part === 'string' || part.type === 'text') {
      payload = {
        type: 'text',
        text: part.text
      };
    } // otherwise message will have no payload

    const message = {
      destination: Array.isArray(destination) ? destination : [destination],
      messageContext: messageContext,
      type: type,
      parts: [payload],
      /**
       * Sends the message.
       *
       * @public
       * @static
       * @method send
       * @memberof conversation.Message
       */
      send: async function () {
        log.debug(`${API_LOG_TAG}conversation.Message.send`, this);
        const timestamp = Date.now();
        context.dispatch(_actions.messageActions.sendMessage(this.destination, this.parts, timestamp, this.type, this.messageContext.id));
        // Call the operatin to do actual sending of the message
        try {
          // For Link, we don't support sending a message from a user to multiple users, but rather
          // user to another user.
          await operations.sendMessage(this.destination[0], timestamp, this.parts);
        } catch (error) {
          // Just log the error
          log.debug(`${API_LOG_TAG}conversation.Message.send: Encountered an error: ${error}`);
          emitEvent(eventTypes.MESSAGES_CHANGE, {
            error
          });
        }
      }
    };
    return message;
  };
  return {
    Conversation,
    Message
  };
}

/***/ }),

/***/ 96467:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isEqual2 = _interopRequireDefault(__webpack_require__(11520));
var _sortBy2 = _interopRequireDefault(__webpack_require__(62974));
var _unionWith2 = _interopRequireDefault(__webpack_require__(83227));
var _unionBy2 = _interopRequireDefault(__webpack_require__(84157));
var actionTypes = _interopRequireWildcard(__webpack_require__(5344));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
reducers[actionTypes.CREATE_CONVERSATION] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: [...state.conversations, _objectSpread({}, action.payload)]
    });
  }
};
reducers[actionTypes.FETCH_CONVERSATIONS_FINISHED] = {
  next(state, action) {
    // TODO: does not persist conversations unique to local state
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: (0, _unionWith2.default)((a, b) => (0, _isEqual2.default)(a.destination, b.destination) && a.type === b.type,
      // Comparator
      action.payload.conversations, state.conversations // Conversation arrays
      )
    });
  }
};
reducers[actionTypes.UPDATE_CONVERSATION] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), action.payload);
        }
        return conversation;
      })
    });
  }
};
reducers[actionTypes.FETCH_MESSAGES] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            isPending: true
          });
        }
        return conversation;
      })
    });
  }
};
reducers[actionTypes.FETCH_MESSAGES_FINISHED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: (0, _sortBy2.default)('timestamp', (0, _unionBy2.default)('messageId', action.payload.messages, conversation.messages)),
            isTypingList: [],
            isPending: false
          });
        }
        return conversation;
      })
    });
  }
};
reducers[actionTypes.SEND_MESSAGE] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.message.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: [...conversation.messages, action.payload.message]
          });
        }
        return conversation;
      })
    });
  }
};
reducers[actionTypes.INCOMING_MESSAGE_READ] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: conversation.messages.map(message => {
              if (message.messageId === action.payload.messageId) {
                return _objectSpread(_objectSpread({}, message), {}, {
                  read: true
                });
              }
              return message;
            })
          });
        }
        return conversation;
      })
    });
  }
};
reducers[actionTypes.SEND_MESSAGE_READ_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: conversation.messages.map(message => {
              if (message.messageId === action.payload.messageId) {
                return _objectSpread(_objectSpread({}, message), {}, {
                  read: true
                });
              }
              return message;
            })
          });
        }
        return conversation;
      })
    });
  }
};
reducers[actionTypes.MESSAGE_RECEIVED] = {
  next(state, action) {
    if (action.meta.newConversation) {
      return _objectSpread(_objectSpread({}, state), {}, {
        conversations: [...state.conversations, {
          destination: action.payload.destination,
          messages: [action.payload.message],
          type: action.meta.type,
          lastReceived: action.payload.message.timestamp
        }]
      });
    } else {
      return _objectSpread(_objectSpread({}, state), {}, {
        conversations: state.conversations.map(conversation => {
          if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.meta.type) {
            return _objectSpread(_objectSpread({}, conversation), {}, {
              messages: [...conversation.messages, action.payload.message],
              lastReceived: action.payload.message.timestamp
            });
          }
          return conversation;
        })
      });
    }
  }
};
reducers[actionTypes.SEND_MESSAGE_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: conversation.messages.map(message => sendMessageFinishHelper(message, action))
          });
        }
        return conversation;
      })
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: conversation.messages.filter(message => message.timestamp !== action.payload.timestamp && !message.isPending)
          });
        }
        return conversation;
      })
    });
  }
};

// Remove all messages from the specified conversation.
reducers[actionTypes.CLEAR_MESSAGES] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: []
          });
        }
        return conversation;
      })
    });
  }
};
reducers[actionTypes.DELETE_MESSAGE_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.map(conversation => {
        if ((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type) {
          return _objectSpread(_objectSpread({}, conversation), {}, {
            messages: conversation.messages.filter(message => message.messageId !== action.payload.messageId)
          });
        }
        return conversation;
      })
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      errors: state.errors.concat(action.payload)
    });
  }
};
reducers[actionTypes.DELETE_CONVERSATION_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      conversations: state.conversations.filter(conversation => !((0, _isEqual2.default)(conversation.destination, action.payload.destination) && conversation.type === action.payload.type))
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      errors: state.errors.concat(action.payload)
    });
  }
};

/*
 * Combine all of reducers into a single reducer, with
 *      a default state of an empty array.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, {
  conversations: [],
  errors: []
});
var _default = exports["default"] = reducer;
/**
 * sendMessageFinishHelper
 *
 * A helper function to make dealing with the messages array in SEND_MESSAGE_FINISH
 * a little bit easier.
 *
 * @param {Object} message
 * @param {Object} action
 */
function sendMessageFinishHelper(message, action) {
  if (message.timestamp === action.payload.timestamp) {
    if (action.payload.error) {
      message = _objectSpread(_objectSpread({}, message), {}, {
        sender: action.payload.sender,
        isPending: false,
        messageId: null,
        error: action.payload.error
      });
    } else {
      message = _objectSpread(_objectSpread({}, message), {}, {
        sender: action.payload.sender,
        isPending: false,
        messageId: action.payload.messageId,
        parts: action.payload.parts
      });
    }
    if (action.payload.deliveryStatus) {
      message.deliveryStatus = action.payload.deliveryStatus;
    }
  } else {
    message = _objectSpread({}, message);
  }
  return message;
}

/***/ }),

/***/ 20504:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.findConversation = findConversation;
exports.findMember = findMember;
exports.getConversations = getConversations;
exports.getMessages = getMessages;
exports.getMessagingConfig = getMessagingConfig;
var _isEqual2 = _interopRequireDefault(__webpack_require__(11520));
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
/*
 * Selector functions for messaging.
 * Used to retrieve specific portions of the state.
 */

/**
 * Retrieves the config options provided by the messaging plugin.
 * @method getMessagingConfig
 * @return {Object}
 */
function getMessagingConfig(state) {
  return (0, _cloneDeep2.default)(state.config.messaging);
}

/**
 * Retrieves conversations from the store pertaining to messaging.
 * @method getConversations
 * @return {Object}
 */
function getConversations(state) {
  return (0, _cloneDeep2.default)(state.messaging.conversations);
}

/**
 * Retrieves the messages from the store pertaining to a specific messaging
 * conversation.
 * @method getMessages
 * @return {Object}
 */
function getMessages(state, conversationId) {
  return (0, _cloneDeep2.default)(state.messaging.conversations[conversationId].messages);
}

/**
 * Searches for a conversation by its destination, which represents the destination
 * for all messages being sent to this conversation from this instance of the SDK
 *
 * @param state
 * @param {Array<string>} destination Curently, only one destination is supported.
 * @param {string} type The type of conversation: can be one of 'im', 'sms'.
 * @returns {Object}
 */
function findConversation(state, destination) {
  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'im';
  return (0, _cloneDeep2.default)(state.messaging.conversations.find(conversation => {
    return (0, _isEqual2.default)(conversation.destination, destination) && conversation.type === type;
  }));
}

/**
 * Searches for a member in a conversation and returns their name.
 *
 * @param state
 * @param {string} destination The destination for the conversation instance.
 * @param id {number} User ID for the specific conversation member for whom we are searching
 * @returns {*}
 */
function findMember(state, destination, id) {
  const conv = state.messaging.conversations.find(conversation => conversation.destination === destination);
  if (conv) {
    return (0, _cloneDeep2.default)(conv.members.find(member => member.id === id));
  }
}

/***/ }),

/***/ 77307:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = messagingFactory;
var _defaults2 = _interopRequireDefault(__webpack_require__(469));
var _interface = __webpack_require__(52009);
var _operations = _interopRequireDefault(__webpack_require__(31192));
var _middleware = _interopRequireDefault(__webpack_require__(12686));
var _requests = _interopRequireDefault(__webpack_require__(84060));
var _validation = __webpack_require__(42850);
var _actions = __webpack_require__(43424);
// Parse and/or Validate

// Other plugins.

/**
 * Link Messaging plugin factory.
 * Provides the SDK with the 'Messaging' feature.
 * @method messagingFactory
 * @param  {Object} [options={}]
 * @param  {Array}  [options.features=['base']] - A list of the supported features of messaging
 * @return {Object} A plugin object.
 */
function messagingFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  const defaultOptions = {
    features: ['base']
  };
  const {
    logManager
  } = bottle.container;
  // Get the logger
  const log = logManager.getLogger('MESSAGING');
  const v8nValidation = _validation.validation.schema({
    features: _validation.validation.array().every.string()
  });
  const parseOptions = (0, _validation.parse)('messaging', v8nValidation);
  options = (0, _defaults2.default)(defaultOptions, options);
  parseOptions(options);
  if (options.features.length > 1 || options.features[0] !== defaultOptions.features[0]) {
    log.warn('Link messaging is not compatible with add-on ' + 'features. Reverting to base messaging.');
    options.features = defaultOptions.features;
  }
  log.info('Messaging features in use: ' + options.features);
  function initPlugin(container) {
    const {
      context
    } = container;
    // Update the redux state so that it contains the state.config.messaging sub-state
    context.dispatch((0, _actions.update)(options, _interface.name));
  }

  // Register the component factory functions to the bottle.
  bottle.factory('MessagingAPI', _interface.createAPI);
  bottle.factory('MixinsMessaging', _interface.createMixins);
  bottle.defer(initPlugin);
  bottle.factory('MessagingOperations', _operations.default);
  bottle.factory('MessagingRequests', _requests.default);
  const capabilities = ['simpleMessagingOnly', 'onlyInternalMessaging'];
  return {
    name: _interface.name,
    capabilities,
    reducer: _interface.reducer,
    middleware: _middleware.default
  };
}

/***/ }),

/***/ 12686:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
var _actionTypes = __webpack_require__(9148);
/**
 * Messaging middleware factory function.
 * @method createMiddleware
 * @param  {Object} context The factory context.
 * @return {Function} A redux middleware.
 */
function createMiddleware(context) {
  const operations = context.container.MessagingOperations;
  /*
   * Redux middleware: Watch for specific actions and trigger operations
   *    when we see them.
   */
  return next => action => {
    // Messaging doesn't act on any other actions.
    if (action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage && action.payload.notificationMessage.eventType === 'IM') {
      // When a notification of type IM is received, Messaging plugin should deal with it
      operations.messageReceived(action);
    }
    return next(action);
  };
}

/***/ }),

/***/ 31192:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var _actions = __webpack_require__(60152);
var _selectors = __webpack_require__(20504);
var eventTypes = _interopRequireWildcard(__webpack_require__(40080));
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _selectors2 = __webpack_require__(46942);
var _actionTypes = __webpack_require__(9148);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Messaging

// Error

// Other plugins.

/**
 * Messaging Operations factory function.
 * @method createOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for Messaging.
 */
function createOperations(container) {
  const {
    context,
    emitEvent,
    logManager,
    MessagingRequests: requests
  } = container;
  const log = logManager.getLogger('MESSAGING');

  /**
   * Operation to receive Message info from a notification.
   * @method messageReceived
   * @param {Object} action The action for receiving an incoming message notification.
   */
  function messageReceived(action) {
    const {
      dispatch,
      getState
    } = context;
    if (![_actionTypes.NOTIFICATION_RECEIVED].includes(action.type)) {
      return;
    }
    if (!(action.payload.notificationMessage && action.payload.notificationMessage.eventType === 'IM')) {
      return;
    }
    const message = action.payload.notificationMessage.imnotificationParams.msgText;
    const sender = action.payload.notificationMessage.imnotificationParams.primaryContact.split('sip:')[1];
    const messageId = action.payload.notificationMessage.eventId;
    const conversations = (0, _selectors.getConversations)(getState());
    // Search for an existing conversation that matches this message's sender.
    const convo = conversations.find(conv => {
      return conv.destination[0] === sender;
    });
    const metaType = 'im';
    if (convo) {
      dispatch(_actions.messageActions.messageReceived([sender], [{
        mimeType: 'text/plain',
        type: 'text',
        text: message
      }], messageId, sender, Date.now(), {
        newConversation: false,
        type: metaType
      }));
      const data = {
        destination: [sender],
        messageId,
        type: metaType
      };
      // Tell the application that state has changed.
      emitEvent(eventTypes.MESSAGES_CHANGE, data);
    } else {
      // Add the new message to the convo in the store
      dispatch(_actions.messageActions.messageReceived([sender], [{
        mimeType: 'text/plain',
        type: 'text',
        text: message
      }], messageId, sender, Date.now(), {
        newConversation: true,
        type: 'im'
      }));
      const data = [{
        destination: [sender],
        type: metaType
      }];
      // Tell the application that state has changed.
      emitEvent(eventTypes.CONVERSATIONS_CHANGE, data);
    }
  }

  /**
   * Operation to send a message to a given destination.
   * @method send
   * @param {string} destination The Id of the remote user with which the current user is having a conversation.
   * @param {number} timestamp A Unix timestamp in seconds marking the time when the message was created by sender.
   * @param {Array<conversation.Part>} parts An array of Part Objects. This is the actual payload, containing the message type & the message itself.
   */
  async function sendMessage(destination, timestamp, parts) {
    const connectionInfo = (0, _selectors2.getConnectionInfo)(context.getState());
    const type = 'im';
    let error;
    if (!connectionInfo) {
      log.debug('Sending mesage was aborted due to: no connection info available. Ensure user is authenticated.');
      error = new _errors.default({
        code: _errors.messagingCodes.SEND_MESSAGE_FAIL,
        message: 'Failed to send message; no user connection info available.'
      });
      context.dispatch(_actions.messageActions.sendMessageFinish({
        sender: undefined,
        destination: [destination],
        type,
        parts,
        timestamp,
        error
      }));
      emitEvent(eventTypes.MESSAGES_ERROR, {
        error
      });
      // Also throw it to internal API (i.e. mixins)
      throw error;
    }
    const {
      username
    } = connectionInfo;
    try {
      const messageData = await requests.sendMessage(destination, parts, connectionInfo);
      context.dispatch(_actions.messageActions.sendMessageFinish({
        sender: username,
        destination: [destination],
        type,
        parts: parts,
        timestamp: timestamp,
        messageId: messageData.messageId // message was sent to server & server generated an id
      }));
      emitEvent(eventTypes.MESSAGES_CHANGE, {
        destination: [destination],
        type,
        messageId: messageData.messageId,
        sender: username
      });
    } catch (error) {
      context.dispatch(_actions.messageActions.sendMessageFinish({
        sender: username,
        destination: [destination],
        type,
        parts: parts,
        timestamp: timestamp,
        error
      }));
      emitEvent(eventTypes.MESSAGES_ERROR, {
        error
      });
      throw error;
    }
  }
  return {
    // API operations:
    messageReceived,
    sendMessage
  };
}

/***/ }),

/***/ 84060:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Error

/**
 * Messaging Link REST Requests factory function.
 * Defines the REST interface between the SDK and KL's Messaging REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for Messaging.
 */
function createRequests(container) {
  const {
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('MESSAGING');

  /**
   * @method sendMessage
   * @param {string} destination The Id of the remote user with which the current user is having a conversation.
   * @param {Array<conversation.Part>} parts An array of Part Objects. This is the actual payload, containing the message type & the message itself.
   * @param {Object} connectionInfo Contains connection related values such as authenticated username & server info.
   * @returns {Object} An object containing the messageId, or BasicError if request fails.
   */
  async function sendMessage(destination, parts, connectionInfo) {
    const {
      server,
      username
    } = connectionInfo;
    const url = `${server.protocol}://${server.server}:${server.port}/rest/version/${server.version}/user/${username}/instantmessage`;
    const data = {
      imRequest: {
        charset: 'UTF-8',
        toUrl: destination,
        message: parts[0].text,
        type: 'A2'
      }
    };
    const options = {
      url,
      method: 'POST',
      body: JSON.stringify(data)
    };
    const response = await sendRequest(options);
    const {
      error,
      result,
      body
    } = response;
    if (error) {
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.imResponse;
        log.debug(`Failed to send message with status code ${statusCode}.`);
        throw new _errors.default({
          code: _errors.messagingCodes.SEND_MESSAGE_FAIL,
          message: `Failed to send message. Code: ${statusCode}.`
        });
      } else {
        // Handler errors from the request helper.
        const {
          message
        } = result;
        log.debug('Send message request failed', message);
        throw new _errors.default({
          code: _errors.messagingCodes.SEND_MESSAGE_FAIL,
          message: `Send message request failed: ${message}.`
        });
      }
    } else if (body.imResponse && body.imResponse.messageId) {
      // Request was successful, so at this point we know backend generated a unique messageId for
      // the message that our SDK tried to sent. Return this to the operation.
      return {
        messageId: body.imResponse.messageId
      };
    } else {
      // Unknown error scenario.
      throw new _errors.default({
        code: _errors.messagingCodes.SEND_MESSAGE_FAIL,
        message: 'Failed to send message: Unexpected error'
      });
    }
  }
  return {
    // Operation requests.
    sendMessage
  };
}

/***/ }),

/***/ 5733:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MWI_UPDATE = void 0;
const PREFIX = '@@KANDY/';
const MWI_UPDATE = exports.MWI_UPDATE = PREFIX + 'MWI_UPDATE';

/***/ }),

/***/ 60764:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mwiUpdate = mwiUpdate;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(5733));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Creates a message waiting indicator update action.
 *
 * @method mwiUpdate
 * @param {Object} $0
 * @param {string} $0.mwiEvent An mwiEvent object from spidr.
 * @param {Object} $0.error A Basic error object.
 * @returns {Object} A flux standard action.
 */
function mwiUpdate(_ref) {
  let {
    mwiData,
    error
  } = _ref;
  if (error) {
    return {
      type: actionTypes.MWI_UPDATE,
      payload: error,
      error: true
    };
  } else {
    return {
      type: actionTypes.MWI_UPDATE,
      payload: _objectSpread({}, mwiData)
    };
  }
}

/***/ }),

/***/ 55489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _selectors = __webpack_require__(19710);
var _eventTypes = __webpack_require__(89764);
/**
 * The 'voicemail' namespace is used to retrieve and view
 * voicemail indicators.
 *
 * Voicemail functions are all part of this namespace.
 *
 * @public
 * @requires voicemail
 * @namespace voicemail
 */

/**
 * MWI API factory function.
 * Defines the interface between the application and the SDK's MWI APIs.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @return {Object} Available public APIs for MWI.
 */
function createAPI(container) {
  const {
    context,
    emitEvent,
    MWIOperations: operations,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('MWI');
  const mwiApi = {
    /**
     * Attempts to retrieve voicemail information from the server.
     *
     * A {@link voicemail.event:voicemail:change voicemail:change} event is
     *    emitted upon completion.
     *
     * @public
     * @requires voicemail
     * @memberof voicemail
     * @method fetch
     */
    async fetch() {
      log.debug(API_LOG_TAG + 'voicemail.fetch');
      let mwiData;
      try {
        mwiData = await operations.fetchMwi();
      } catch (error) {
        emitEvent(_eventTypes.MWI_ERROR, {
          error
        });
        return;
      }

      // fetchMwi operation succeeded
      emitEvent(_eventTypes.MWI_CHANGE, mwiData);
    },
    /**
     * Returns voicemail data from the store.
     *
     * @public
     * @requires voicemail
     * @memberof voicemail
     * @method get
     */
    get() {
      log.debug(API_LOG_TAG + 'voicemail.get');
      return (0, _selectors.getMwi)(context.getState());
    }
  };
  return {
    voicemail: mwiApi
  };
}

/***/ }),

/***/ 89764:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MWI_ERROR = exports.MWI_CHANGE = void 0;
// TODO: Fix params in this file, move to voicemail over MWI on all public wording.
/**
 * A voicemail event has been received.
 *
 * @requires voicemail
 * @public
 * @static
 * @memberof voicemail
 * @event voicemail:change
 * @param {Object} params An object containing voicemail info.
 * @param {number} params.lastUpdated Timestamp of the last time voicemail data was checked.
 * @param {boolean} params.newMessagesWaiting Whether there are new messages.
 * @param {number} params.totalVoice The total number of voicemail messages.
 * @param {number} params.unheardVoice Number of unheard voicemail messages.
 * @param {Object} params.voice Object containing individual counts of new, old, urgent voicemails.
 * @param {Object} params.fax Object containing individual counts of new, old, urgent faxes.
 * @param {Object} params.multimedia Object containing individual counts of new, old, urgent multimedia messages.
 */
const MWI_CHANGE = exports.MWI_CHANGE = 'voicemail:change';

/**
 * An error has occurred while attempting to retrieve voicemail data.
 *
 * @requires voicemail
 * @public
 * @memberof voicemail
 * @event voicemail:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 */
const MWI_ERROR = exports.MWI_ERROR = 'voicemail:error';

/***/ }),

/***/ 4788:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "api", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _api = _interopRequireDefault(__webpack_require__(55489));
var _reducers = _interopRequireDefault(__webpack_require__(50325));
// Import the components of the interface.

/**
 * This interface is for a mwi plugin.
 * @type {string}
 */
const name = exports.name = 'mwi';

/***/ }),

/***/ 50325:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(5733));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
reducers[actionTypes.MWI_UPDATE] = {
  // The next function will only handle non-error actions.
  next(state, action) {
    return _objectSpread({}, action.payload);
  }
};
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 19710:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getMwi = getMwi;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
/*
 * Redux-saga selector functions.
 * Used with the `select` effect in sagas to retrieve
 *      specific portions of the state.
 */

/**
 * Retrieves the message waiting indicator data from the state.
 * @method getMwi
 * @return {Object}
 */
function getMwi(state) {
  return (0, _cloneDeep2.default)(state.mwi);
}

/***/ }),

/***/ 84544:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = mwiFactory;
var _interface = __webpack_require__(4788);
var _api = _interopRequireDefault(__webpack_require__(55489));
var _middleware = _interopRequireDefault(__webpack_require__(93288));
var _operations = _interopRequireDefault(__webpack_require__(89115));
var _requests = _interopRequireDefault(__webpack_require__(87113));
/**
 * Voicemail service plugin factory.
 * Provides the SDK with the Voicemail feature.
 * @method mwiFactory
 */
function mwiFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Register the component factory functions to the bottle.
  bottle.factory('MWIAPI', _api.default);
  bottle.factory('MWIOperations', _operations.default);
  bottle.factory('MWIRequests', _requests.default);
  const capabilities = ['voicemail'];
  return {
    capabilities,
    name: _interface.name,
    reducer: _interface.reducer,
    middleware: _middleware.default
  };
}

/***/ }),

/***/ 93288:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
var _actionTypes = __webpack_require__(9148);
/**
 * Message Waiting Indicator middleware factory function.
 * @method createMiddleware
 * @param  {Object} context The factory context.
 * @return {Function} A redux middleware.
 */
function createMiddleware(context) {
  const {
    mwiReceived
  } = context.container.MWIOperations;
  /*
   * Redux middleware: Watch for specific actions and trigger operations
   *    when we see them.
   */
  return next => action => {
    /*
     * Let the action happen as it is received.
     *
     * The MWI's middleware operations are not side-effects, they are
     *     relevant to the operation being performed. As such they can
     *     happen when necessary without waiting for other operations.
     *
     * MWI doesn't act on any other actions.
     */

    const {
      type,
      payload = {}
    } = action;
    if (type === _actionTypes.NOTIFICATION_RECEIVED && payload.notificationMessage && payload.notificationMessage.eventType === 'mwi') {
      mwiReceived(payload.notificationMessage);
    }
    return next(action);
  };
}

/***/ }),

/***/ 89115:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actions = _interopRequireWildcard(__webpack_require__(60764));
var eventTypes = _interopRequireWildcard(__webpack_require__(89764));
var _utils = __webpack_require__(9533);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // MWI Actions
/**
 * MWI Operations factory function.
 * @method createOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for MWI.
 */
function createOperations(container) {
  const {
    context,
    emitEvent,
    logManager,
    MWIRequests: requests
  } = container;
  const {
    dispatch
  } = context;
  const log = logManager.getLogger('MWI');

  /**
   * Operation to receive MWI info from a notification.
   * @method mwiReceived
   * @param {Object} notificationMessage from action.payload, containing the mwi notification data
   */
  function mwiReceived(notificationMessage) {
    const mwiData = (0, _utils.processMwi)(_objectSpread(_objectSpread({}, notificationMessage), {}, {
      data: notificationMessage.mwiNotificationParam
    }));
    dispatch(actions.mwiUpdate({
      mwiData
    }));
    emitEvent(eventTypes.MWI_CHANGE, mwiData);
    log.info('Successfully processed mwi notification');
  }

  /**
   * Operation to fetch MWI info from the backend.
   * @method fetchMwi
   * @returns {Object} Object
   * @returns {Date} Object.lastUpdated The last time the voicemail indicator was updated
   * @returns {boolean} Object.newMessagesWaiting Whether there is a new message waiting
   * @returns {string} Object.totalVoice The number of total voicemails that haven't been heard, in string form
   * @returns {string} Object.unheardVoice The number of unheard voicemails, in string form
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function fetchMwi() {
    const mwiData = await requests.fetchVoicemails();
    dispatch(actions.mwiUpdate({
      mwiData
    }));
    log.info('Successfully retrieved voicemail data from server');
    return mwiData;
  }
  return {
    // API operations:
    fetchMwi,
    mwiReceived
  };
}

/***/ }),

/***/ 87113:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _utils = __webpack_require__(9533);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Other plugins.

/**
 * MWI Link REST Requests factory function.
 * Defines the REST interface between the SDK and KL's MWI REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for MWI.
 */
function createRequests(container) {
  const {
    context,
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('MWI');

  /**
   * KL REST request to retrieve MWI info.
   * @method fetchVoicemails
   * @returns {Object} Object
   * @returns {Date} Object.lastUpdated The last time the voicemail indicator was updated
   * @returns {boolean} Object.newMessagesWaiting Whether there is a new message waiting
   * @returns {string} Object.totalVoice The number of total voicemails that haven't been heard, in string form
   * @returns {string} Object.unheardVoice The number of unheard voicemails, in string form
   * @throws {BasicError} Throws an error if the REST request fails.
   * @throws {BasicError} Throws an error if the server responds with an issue.
   */
  async function fetchVoicemails() {
    const {
      baseURL,
      username,
      version
    } = (0, _selectors.getRequestInfo)(context.getState());
    const {
      body,
      error,
      result = {}
    } = await sendRequest({
      method: 'GET',
      url: `${baseURL}/rest/version/${version}/user/${username}/voicemail`,
      responseType: 'json',
      body: undefined
    });
    const {
      mwiresponse
    } = body || {}; // body may be 'null'

    if (error) {
      let statusCode;
      if (mwiresponse) {
        ;
        ({
          statusCode
        } = mwiresponse);
      }
      const errMsg = typeof statusCode === 'number' // need type check because statusCode may be 0
      ? `Failed to fetch voicemail(s). Status Code: ${statusCode}` : `Voicemail fetch request failed. ${result.message}`;
      log.info(errMsg);
      throw new _errors.default({
        code: _errors.mwiCodes.FETCH_MWI_FAIL,
        message: errMsg
      });
    }
    return (0, _utils.processMwi)({
      data: mwiresponse
    });
  }
  return {
    // Operation requests.
    fetchVoicemails
  };
}

/***/ }),

/***/ 9533:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.processMwi = processMwi;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Process an MWI info object
 * @method processMwi
 * @param {Object} mwiData Object containg mwi information
 * @returns {Object} Object
 * @returns {Date} Object.lastUpdated The last time the voicemail indicator was updated
 * @returns {boolean} Object.newMessagesWaiting Whether there are one or more new messages waiting
 * @returns {string} Object.totalVoice The number of total voicemails that haven't been heard
 * @returns {string} Object.unheardVoice The number of unheard voicemails
 */
function processMwi(_ref) {
  let {
    time = Date.now(),
    data = {}
  } = _ref;
  const {
    mwi,
    totalVoice = '0',
    unheardVoice = '0'
  } = data;
  delete data.mwi;
  delete data.statusCode;
  return _objectSpread(_objectSpread({}, data), {}, {
    newMessagesWaiting: mwi === 'yes',
    lastUpdated: time,
    totalVoice,
    unheardVoice
  });
}

/***/ }),

/***/ 9148:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UNREGISTER_APPLE_PUSH_NOTIFICATION = exports.UNREGISTER_ANDROID_PUSH_NOTIFICATION = exports.REGISTER_APPLE_PUSH_NOTIFICATION = exports.REGISTER_ANDROID_PUSH_NOTIFICATION = exports.PROCESS_NOTIFICATION_FINISH = exports.PROCESS_NOTIFICATION = exports.NOTIFICATION_RECEIVED = exports.ENABLE_NOTIFICATION_CHANNEL_FINISH = exports.ENABLE_NOTIFICATION_CHANNEL = void 0;
const prefix = '@@KANDY/';
const PROCESS_NOTIFICATION = exports.PROCESS_NOTIFICATION = prefix + 'PROCESS_NOTIFICATION';
const PROCESS_NOTIFICATION_FINISH = exports.PROCESS_NOTIFICATION_FINISH = prefix + 'PROCESS_NOTIFICATION_FINISH';
const NOTIFICATION_RECEIVED = exports.NOTIFICATION_RECEIVED = prefix + 'NOTIFICATION_RECEIVED';
const ENABLE_NOTIFICATION_CHANNEL = exports.ENABLE_NOTIFICATION_CHANNEL = prefix + 'ENABLE_NOTIFICATION_CHANNEL';
const ENABLE_NOTIFICATION_CHANNEL_FINISH = exports.ENABLE_NOTIFICATION_CHANNEL_FINISH = prefix + 'ENABLE_NOTIFICATION_CHANNEL_FINISH';
const REGISTER_APPLE_PUSH_NOTIFICATION = exports.REGISTER_APPLE_PUSH_NOTIFICATION = prefix + 'REGISTER_APPLE_PUSH_NOTIFICATION';
const REGISTER_ANDROID_PUSH_NOTIFICATION = exports.REGISTER_ANDROID_PUSH_NOTIFICATION = prefix + 'REGISTER_ANDROID_PUSH_NOTIFICATION';
const UNREGISTER_APPLE_PUSH_NOTIFICATION = exports.UNREGISTER_APPLE_PUSH_NOTIFICATION = prefix + 'UNREGISTER_APPLE_PUSH_NOTIFICATION';
const UNREGISTER_ANDROID_PUSH_NOTIFICATION = exports.UNREGISTER_ANDROID_PUSH_NOTIFICATION = prefix + 'UNREGISTER_ANDROID_PUSH_NOTIFICATION';

/***/ }),

/***/ 32697:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.enableNotificationChannel = enableNotificationChannel;
exports.enableNotificationChannelFinish = enableNotificationChannelFinish;
exports.externalNotification = externalNotification;
exports.notificationReceived = notificationReceived;
exports.processNotificationFinish = processNotificationFinish;
exports.registerAndroidPushNotification = registerAndroidPushNotification;
exports.registerApplePushNotification = registerApplePushNotification;
exports.unregisterAndroidPushNotification = unregisterAndroidPushNotification;
exports.unregisterApplePushNotification = unregisterApplePushNotification;
exports.websocketNotification = websocketNotification;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(9148));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Helper function for funneling all notification types into a single action.
 * @method notificationHelper
 * @param  {string} channel - The channel that the notification came from.
 * @param  {Object} notification
 * @return {Object} A flux standard action.
 */
function notificationHelper(channel, notification) {
  return {
    type: actionTypes.PROCESS_NOTIFICATION,
    payload: notification,
    meta: {
      channel
    }
  };
}

/**
 * Represents an application request to process a websocket notification.
 * @method websocketNotification
 * @param  {Object} notification
 * @return {Object} A flux standard action.
 */
function websocketNotification(notification) {
  return notificationHelper('WEBSOCKET', notification);
}

/**
 * Represents an application request to process an external notification.
 * @method externalNotification
 * @param  {Object} notification
 * @param  {string} [channel='PUSH'] - The channel that the notification came from.
 * @return {Object} A flux standard action.
 */
function externalNotification(notification) {
  let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'PUSH';
  return notificationHelper(channel.toUpperCase(), notification);
}

/**
 * Represents a received notification.
 * @method notificationReceived
 * @param  {Object} notification
 * @return {Object} A flux standard action.
 */
function notificationReceived(notification, channel) {
  return {
    type: actionTypes.NOTIFICATION_RECEIVED,
    payload: notification,
    error: notification instanceof Error,
    meta: {
      channel
    }
  };
}

/**
 * Represents a received notification.
 * @method processNotificationFinish
 * @param  {Object} notification
 * @return {Object} A flux standard action.
 */
function processNotificationFinish(notification) {
  return {
    type: actionTypes.PROCESS_NOTIFICATION_FINISH,
    payload: notification,
    error: notification instanceof Error,
    meta: {}
  };
}

/**
 * Represents a request to change a notification channel status.
 * @method enableNotificationChannel
 * @param  {string} channel - The notification channel being affected.
 * @param  {Object} params
 * @param  {boolean} params.channelEnabled - Whether to enable the channel or not.
 * @return {Object} A flux standard action.
 */
function enableNotificationChannel(channel) {
  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    type: actionTypes.ENABLE_NOTIFICATION_CHANNEL,
    payload: _objectSpread({}, params),
    meta: {
      channel
    }
  };
}

/**
 * Represents a request to change a notification channel status.
 * @method registerApplePushNotification
 * @param  {Object} params
 * @return {Object} A flux standard action.
 */
function registerApplePushNotification(params, deferred) {
  return {
    type: actionTypes.REGISTER_APPLE_PUSH_NOTIFICATION,
    payload: _objectSpread(_objectSpread({}, params), {}, {
      pushProvider: 'apple'
    }),
    meta: {
      deferred
    }
  };
}

/**
 * Represents a request to change a notification channel status.
 * @method registerAndroidPushNotification
 * @param  {Object} params
 * @return {Object} A flux standard action.
 */
function registerAndroidPushNotification(params, deferred) {
  return {
    type: actionTypes.REGISTER_ANDROID_PUSH_NOTIFICATION,
    payload: _objectSpread(_objectSpread({}, params), {}, {
      pushProvider: 'google'
    }),
    meta: {
      deferred
    }
  };
}

/**
 * Represents a request to change a notification channel status.
 * @method unregisterApplePushNotification
 * @param  {string} registration
 * @return {Object} A flux standard action.
 */
function unregisterApplePushNotification(registration, deferred) {
  return {
    type: actionTypes.UNREGISTER_APPLE_PUSH_NOTIFICATION,
    payload: {
      registration
    },
    meta: {
      deferred
    }
  };
}

/**
 * Represents a request to change a notification channel status.
 * @method unregisterAndroidPushNotification
 * @param  {string} registration
 * @return {Object} A flux standard action.
 */
function unregisterAndroidPushNotification(registration, deferred) {
  return {
    type: actionTypes.UNREGISTER_ANDROID_PUSH_NOTIFICATION,
    payload: {
      registration
    },
    meta: {
      deferred
    }
  };
}

/**
 * Represents the response of a change in a notification channel status.
 * @method enableNotificationChannelFinish
 * @param  {string} channel - The notification channel being affected.
 * @param  {Object} $1
 * @param  {Object} $1.params - Information about the channel change.
 * @param  {Object} $1.params.channelEnabled - Whether the channel was enabled or not.
 * @param  {Object} $1.error - Error object, in the case of an error.
 * @return {Object} A flux standard action.
 */
function enableNotificationChannelFinish(channel) {
  let {
    params,
    error
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var action = {
    type: actionTypes.ENABLE_NOTIFICATION_CHANNEL_FINISH,
    meta: {
      channel
    }
  };
  if (error) {
    action.error = true;
    action.payload = new Error(error);
    action.payload.channelEnabled = params.channelEnabled;
  } else {
    action.payload = _objectSpread({}, params);
  }
  return action;
}

/***/ }),

/***/ 64959:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var actions = _interopRequireWildcard(__webpack_require__(32697));
var eventTypes = _interopRequireWildcard(__webpack_require__(92710));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * The 'notification' namespace allows user to register/deregister for/from push notifications as well as
 * enabling/disabling the processing of websocket notifications.
 *
 * @public
 * @requires externalNotifications
 * @namespace notification
 */

/**
 * Notification APIs factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} Establish API.
 */
function createAPI(container) {
  const {
    logManager,
    context,
    NotificationsOperations: operations,
    emitEvent,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('NOTIFICATIONS');
  const notificationApi = {
    /**
     * Provides an external notification to the system for processing.
     *
     * @public
     * @requires externalNotifications
     * @memberof notification
     * @method process
     * @param {Object} notification The notification object from which to extract relevant data.
     * @param {string} [channel='PUSH'] The channel that the notification came from.
     *    If no channel provided, then by default it will be a PUSH notification.
     */
    process: function (notification) {
      let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'PUSH';
      log.debug(API_LOG_TAG + 'notification.process: ', notification, channel);
      context.dispatch(actions.externalNotification(notification, channel));
      operations.processNotification(notification, channel);
    },
    /**
     * Registers with Apple push notification service. Once registration is successful, the application will be able to receive
     * standard and/or voip push notifications. It can then send these notifications to the SDK with {@link api.notifications.process}
     * in order for the SDK to process them.
     *
     * @public
     * @requires push
     * @memberof notification
     * @method registerApplePush
     * @param {Object} params
     * @param {string[]} params.services - Array of services for which we wish to receive notifications.
     * @param {string} params.voipDeviceToken - The voip device token used for voip push on iOS.
     *                                          This token is required if registering for call service notifications on iOS.
     * @param {string} params.standardDeviceToken - The standardDevice token used for standard push on iOS .
     *                                              This token is required when registering for non-call service notifications.
     * @param {string} params.bundleId - The bundleId to identify the application receiving the push notification.
     * @param {string} params.clientCorrelator - Unique identifier for a client device.
     * @param {string} params.realm - The realm used by the push registration service to identify and
     *                                establish a connection with the service gateway.
     * @param {boolean} params.isProduction - If true, push notification will be sent to production.
     *                                        If false, push notification will be sent to sandbox.
     * @return {Promise} When successful,  the information of the registration.
     *                   Promise will reject with error object otherwise.
     */
    registerApplePush: function (_ref) {
      let {
        services,
        voipDeviceToken,
        standardDeviceToken,
        bundleId,
        clientCorrelator,
        realm,
        isProduction
      } = _ref;
      log.debug(API_LOG_TAG + 'notification.registerApplePush', arguments);
      context.dispatch(actions.registerApplePushNotification({
        services,
        voipDeviceToken,
        standardDeviceToken,
        bundleId,
        clientCorrelator,
        realm,
        isProduction
      }));
      return operations.registerPushDeviceToken({
        services,
        voipDeviceToken,
        standardDeviceToken,
        bundleId,
        clientCorrelator,
        realm,
        isProduction,
        pushProvider: 'apple'
      });
    },
    /**
     * Registers with Google push notification service. Once registration is successful, the application will be able to receive
     * standard and/or voip push notifications. It can then send these notifications to the SDK with {@link api.notifications.process}
     * in order for the SDK to process them.
     *
     * @public
     * @requires push
     * @memberof notification
     * @method registerAndroidPush
     * @param {Object} params
     * @param {string[]} params.services - Array of services to register for.
     * @param {string} params.deviceToken - The device token used for standard push on Android. This token is required
     *                                      when registering for all related services notifications.
     * @param {string} params.bundleId - The bundleId to identify the application receiving the push notification.
     * @param {string} params.clientCorrelator - Unique identifier for a client device.
     * @param {string} params.realm - The realm used by the push registration service to identify
     *                                and establish a connection with the service gateway.
     * @return {Promise} When successful,  the information of the registration.
     *                   Promise will reject with error object otherwise.
     */
    registerAndroidPush: function (_ref2) {
      let {
        services,
        deviceToken,
        bundleId,
        clientCorrelator,
        realm
      } = _ref2;
      log.debug(API_LOG_TAG + 'notification.registerAndroidPush', arguments);
      context.dispatch(actions.registerAndroidPushNotification({
        services,
        deviceToken,
        bundleId,
        clientCorrelator,
        realm
      }));
      return operations.registerPushDeviceToken({
        services,
        deviceToken,
        bundleId,
        clientCorrelator,
        realm,
        pushProvider: 'google'
      });
    },
    /**
     * Unregister Apple push notifications.
     *
     * @public
     * @requires push
     * @memberof notification
     * @method unregisterApplePush
     * @param {string} registrationInfo - The data returned from the push registration
     * @return {Promise} When successful, the promise will resolve with undefined.
     *                   Promise will reject with error object otherwise.
     */
    unregisterApplePush: function (registrationInfo) {
      log.debug(API_LOG_TAG + 'notification.unregisterPush');
      context.dispatch(actions.unregisterApplePushNotification(registrationInfo));
      return operations.unregisterPushDeviceToken(registrationInfo);
    },
    /**
     * Unregister Android push notifications.
     *
     * @public
     * @requires push
     * @memberof notification
     * @method unregisterAndroidPush
     * @param {string} registrationInfo - The data returned from the push registration
     * @return {Promise} When successful, the promise will resolve with undefined.
     *                   Promise will reject with error object otherwise.
     */
    unregisterAndroidPush: function (registrationInfo) {
      log.debug(API_LOG_TAG + 'notification.unregisterPush');
      context.dispatch(actions.unregisterAndroidPushNotification(registrationInfo));
      return operations.unregisterPushDeviceToken(registrationInfo);
    },
    /**
     * Enables, or disables, the processing of websocket notifications.
     *
     * @public
     * @requires push
     * @memberof notification
     * @method enableWebsocket
     * @param {boolean} enable - Whether the websocket channel should be enabled.
     */
    enableWebsocket: async function (enable) {
      log.debug(API_LOG_TAG + 'notification.enableWebsocket: ', enable);
      context.dispatch(actions.enableNotificationChannel('WEBSOCKET', {
        channelEnabled: enable
      }));
      try {
        await operations.enableWebsocketChannel(enable, 'WEBSOCKET');
        emitEvent(eventTypes.NOTI_CHANGE, {
          channel: 'WEBSOCKET'
        });
      } catch (error) {
        emitEvent(eventTypes.NOTI_ERROR, {
          channel: 'WEBSOCKET',
          error
        });
      }
    }
  };
  return {
    notification: notificationApi
  };
}

/***/ }),

/***/ 92710:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NOTI_RECEIVED = exports.NOTI_ERROR = exports.NOTI_CHANGE = void 0;
/**
 * Push notifications registration state has changed.
 *
 * @public
 * @requires push
 * @memberof notification
 * @event notifications:change
 * @param {Object} params
 * @param {string} params.channel The channel for the notification.
 */
const NOTI_CHANGE = exports.NOTI_CHANGE = 'notifications:change';

/**
 * An error occurred with push notifications.
 *
 * @public
 * @requires push
 * @memberof notification
 * @event notifications:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 * @param {string} params.channel The channel for the notification.
 */
const NOTI_ERROR = exports.NOTI_ERROR = 'notifications:error';

/**
 * A notification was received by the SDK.
 *
 * @private This is an undocumented feature.
 *
 * @event notification:received
 * @param {Object} params Object that has information about the notification.
 * @param {Object} params.payload The payload of the notification.
 */
const NOTI_RECEIVED = exports.NOTI_RECEIVED = 'notification:received';

/***/ }),

/***/ 90308:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAPI", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _reducers = _interopRequireDefault(__webpack_require__(67263));
var _api = _interopRequireDefault(__webpack_require__(64959));
const name = exports.name = 'notifications';

/***/ }),

/***/ 67263:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(9148));
var _actionTypes2 = __webpack_require__(53202);
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
reducers[actionTypes.ENABLE_NOTIFICATION_CHANNEL_FINISH] = {
  next(state, action) {
    const channel = action.meta.channel;
    const enabled = action.payload.channelEnabled;
    let newChannelState;
    if (enabled) {
      newChannelState = _objectSpread(_objectSpread({}, state[channel]), action.payload);
    } else {
      // If the channel is being disabled, clear old state.
      newChannelState = _objectSpread({}, action.payload);
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      [channel]: newChannelState
    });
  }
};

/*
 * The websocket channel is assumed to be enabled when the
 *      websocket is opened.
 */
reducers[_actionTypes2.WS_CONNECT_FINISHED] = {
  next(state) {
    // TODO: Link WS only?
    return _objectSpread(_objectSpread({}, state), {}, {
      WEBSOCKET: _objectSpread(_objectSpread({}, state.WEBSOCKET), {}, {
        channelEnabled: true
      })
    });
  }
};

/*
 * The websocket channel is assumed to be disabled when the
 *      websocket is closed.
 */
reducers[_actionTypes2.WS_DISCONNECT_FINISHED] = {
  next(state) {
    // TODO: Link WS only?
    return _objectSpread(_objectSpread({}, state), {}, {
      WEBSOCKET: _objectSpread(_objectSpread({}, state.WEBSOCKET), {}, {
        channelEnabled: false
      })
    });
  }
};

// Default notifications sub-state.
const defaultState = {
  WEBSOCKET: {
    channelEnabled: false
  },
  PUSH: {
    channelEnabled: true
  }
};

/**
 * Notifications reducer.
 * @method reducer
 * @param  {Object}  state - The current redux state.
 * @param  {Object}  action - A flux standard action.
 * @return {Object}  - The new redux state.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, defaultState);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 50606:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getNotificationConfig = getNotificationConfig;
exports.getNotificationsInfo = getNotificationsInfo;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
/**
 * Retrieves the notifications state.
 * @method getNotificationsInfo
 * @param  {String} [channel] - Specific notification channel information to retrieve.
 * @return {Object}
 */
function getNotificationsInfo(state) {
  let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  if (channel) {
    return state.notifications[channel];
  } else {
    return state.notifications;
  }
}

/**
 * Retrieves notification config.
 * @method getNotificationConfig
 * @return {Object}
 */
function getNotificationConfig(state) {
  return (0, _cloneDeep2.default)(state.config.notifications);
}

/***/ }),

/***/ 83668:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = notificationsFactory;
var _defaultsDeep2 = _interopRequireDefault(__webpack_require__(6766));
var _interface = __webpack_require__(90308);
var _middleware = _interopRequireDefault(__webpack_require__(90746));
var initOperations = _interopRequireWildcard(__webpack_require__(78409));
var _requests = _interopRequireDefault(__webpack_require__(77895));
var _actions = __webpack_require__(43424);
var _validation = __webpack_require__(42850);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Notifications plugin

// Other plugins.

// Libraries

// Parse and/or Validate

/**
 * Link Notifications plugin factory.
 * Provides the SDK with the 'Notifications' feature.
 * @method notificationsFactory
 * @param  {Object} [options={}]
 * @return {Object} A plugin object.
 */
function notificationsFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  /**
   * Configuration options for the notification feature.
   * @public
   * @name config.notifications
   * @memberof config
   * @instance
   * @param {Object} notifications - The notifications configuration object.
   * @param {number} [notifications.idCacheLength=100] - Default amount of event ids to remember for de-duplication purposes.
   * @param {string} [notifications.incomingCallNotificationMode='any-channel'] - Communication channel mode used for incoming call notifications. Supported values are 'any-channel' or 'push-channel-only'.
   * @param {Object} [notifications.pushRegistration] - Object describing the server to use for push services.
   * @param {string} [notifications.pushRegistration.server] - Hostname for the push registration server.
   * @param {string} [notifications.pushRegistration.port] - Port for the push registration server.
   * @param {string} [notifications.pushRegistration.protocol] - Protocol for the push registration server.
   * @param {string} [notifications.pushRegistration.version] - Version for the push registration server.
   */

  const defaultOptions = {
    idCacheLength: 100,
    incomingCallNotificationMode: 'any-channel'
  };

  // config validation
  const v8nValidation = _validation.validation.schema({
    idCacheLength: _validation.validation.positive(),
    incomingCallNotificationMode: (0, _validation.enums)(['any-channel', 'push-channel-only']),
    pushRegistration: _validation.validation.optional(_validation.validation.schema({
      server: _validation.validation.string(),
      port: _validation.validation.string(),
      protocol: _validation.validation.string(),
      version: _validation.validation.string()
    }))
  });
  const parseOptions = (0, _validation.parse)('notifications', v8nValidation);
  const pluginOptions = (0, _defaultsDeep2.default)(defaultOptions, options);
  parseOptions(pluginOptions);
  function initPlugin(container) {
    const {
      context
    } = container;
    // Update the redux state so that it contains the state.config.messaging sub-state
    context.dispatch((0, _actions.update)(pluginOptions, _interface.name));
  }

  // Register the component factory functions to the bottle.
  bottle.factory('NotificationsAPI', _interface.createAPI);
  bottle.defer(initPlugin);
  for (const name in initOperations) {
    initOperations[name](bottle);
  }
  bottle.factory('NotificationRequests', _requests.default);
  const capabilities = ['push', 'registerPushNotifications', 'externalNotifications'];
  return {
    name: _interface.name,
    capabilities,
    reducer: _interface.reducer,
    middleware: (0, _middleware.default)(bottle)
  };
}

/***/ }),

/***/ 78409:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "notification", ({
  enumerable: true,
  get: function () {
    return _notification.default;
  }
}));
Object.defineProperty(exports, "pushRegistration", ({
  enumerable: true,
  get: function () {
    return _pushRegistration.default;
  }
}));
var _notification = _interopRequireDefault(__webpack_require__(43351));
var _pushRegistration = _interopRequireDefault(__webpack_require__(6305));

/***/ }),

/***/ 27695:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(32697));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Link-specific notification factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The enableWebsocketChannel operation.
 */
function createOperation(container) {
  const {
    context
  } = container;
  async function enableWebsocketChannel(channel, enable) {
    if (enable) {
      // TODO: If websockets are not connected, connect them here.
    }

    // TODO: Handle possible error case when connecting websockets.
    //      Otherwise, plain dispatch to update state.
    context.dispatch(actions.enableNotificationChannelFinish(channel, {
      params: {
        channelEnabled: enable
      }
    }));
  }
  return enableWebsocketChannel;
}

/***/ }),

/***/ 43351:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerOperations;
var _processNotification = _interopRequireDefault(__webpack_require__(45821));
var _enableWebsocketChannel = _interopRequireDefault(__webpack_require__(27695));
/*
 * Register the operation with the bottle. This will make it available on the
 *    top-level container under its namespace.
 */
function registerOperations(bottle) {
  bottle.factory('NotificationsOperations.enableWebsocketChannel', () => {
    return (0, _enableWebsocketChannel.default)(bottle.container);
  });
  bottle.factory('NotificationsOperations.processNotification', () => {
    return (0, _processNotification.default)(bottle.container);
  });
}

/***/ }),

/***/ 45821:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _has2 = _interopRequireDefault(__webpack_require__(15107));
var _defaults2 = _interopRequireDefault(__webpack_require__(469));
var _selectors = __webpack_require__(50606);
var actions = _interopRequireWildcard(__webpack_require__(32697));
var eventTypes = _interopRequireWildcard(__webpack_require__(92710));
var _selectors2 = __webpack_require__(46942);
var _pako = __webpack_require__(32845);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Notifications plugin
// Other plugins
// Libraries
/**
 * Link-specific notification factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The processNotification operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    NotificationRequests,
    emitEvent
  } = container;
  const log = logManager.getLogger('NOTIFICATIONS');

  /**
   * This function accepts a notification. If the notification is a spidr notification
   * and contains an sdpFormat that needs manipulating, it is done here.
   * @method normalizeSDP
   * @param notification A processNotification notification
   * @returns payload A processNotification notification
   */
  async function normalizeSDP(notification) {
    // Copy the notification.
    notification = _objectSpread({}, notification);
    if (notification.notificationMessage.sessionParams.sdpFormat === 'compressed') {
      log.debug('Found SDP format: compressed. Deflating compressed SDP...');
      // convert based64 encoded string into bytes
      const sdpCompressedBytes = atob(notification.notificationMessage.sessionParams.sdp);

      // First convert the ASCII string into an array of unsigned integers
      // pako.inflate() requires an Uint8Array as parameter.
      const buf = new ArrayBuffer(sdpCompressedBytes.length);
      const bufView = new Uint8Array(buf); // allocate enough space ..
      for (let i = 0, strLen = sdpCompressedBytes.length; i < strLen; i++) {
        bufView[i] = sdpCompressedBytes.charCodeAt(i); // fill-in the array of uint(s)
      }

      // uncompressed the bytes
      try {
        const sdpUnCompressedBytes = (0, _pako.inflate)(bufView);
        // convert uncompressed bytes back into string

        const sdpString = String.fromCharCode.apply(null, sdpUnCompressedBytes);
        notification.notificationMessage.sessionParams.sdp = sdpString;
        log.debug(`Returning uncompressed SDP as part of payload: ${sdpString}`);
      } catch (err) {
        log.debug(`Cannot inflate the compressed SDP: ${err}`);
        // TODO: If there was an error, try to handle it here.
      }
      return notification;
    } else if (notification.notificationMessage.sessionParams.sdpFormat === 'url') {
      const connection = (0, _selectors2.getConnectionInfo)(context.getState());
      const {
        pushRegistration
      } = (0, _selectors.getNotificationConfig)(context.getState());
      log.debug(`Found SDP format: url. pushRegistration: ${pushRegistration}`);
      // If a push registration endpoint was configured, use that instead of default.
      if (pushRegistration) {
        connection.server = (0, _defaults2.default)(connection.server, pushRegistration);
        connection.protocol = (0, _defaults2.default)(connection.protocol, pushRegistration);
        connection.port = (0, _defaults2.default)(connection.port, pushRegistration);
        connection.version = (0, _defaults2.default)(connection.version, pushRegistration);
      }
      log.info('Fetching SDP...');
      try {
        const response = await NotificationRequests.fetchSDP(connection, notification.notificationMessage.sessionParams.sdp);
        notification.notificationMessage.sessionParams.sdp = response.eventDataResponse.sdp;
        return notification;
      } catch (error) {
        // REST request failed.
        // TODO: Handle the error here rather than throwing an error
      }
    } else {
      log.debug(`Unknown sdpFormat received: ${notification.notificationMessage.sessionParams.sdpFormat}.`);
      return notification;
    }
  }
  var queue = [];
  async function processNotification(notification, notificationChannel) {
    const config = (0, _selectors.getNotificationConfig)(context.getState());
    log.info(`Received notification on channel ${notificationChannel}. Handling...`);

    // Only process notifications from enabled channels, ie. "silence" the channel.
    const channel = (0, _selectors.getNotificationsInfo)(context.getState(), notificationChannel);
    if (!channel.channelEnabled) {
      log.debug(`Notification received on disabled channel: ${notificationChannel}. Ignoring it ...`);
      return;
    }
    const notificationMessage = notification.notificationMessage;
    const notificationId = notificationMessage.eventId;
    log.debug(`The received notification is of type ${notificationMessage.eventType}.`);
    let formattedNotification = notification;
    if ((0, _has2.default)('notificationMessage.sessionParams.sdpFormat', notification)) {
      log.debug('Notification contains SDP. Normalizing.');
      formattedNotification = await normalizeSDP(notification);
    }

    // If we're in the PUSH-only notification mode and
    // this incoming notification is coming through a channel other than PUSH channel (e.g. WEBSOCKET) and
    // this notification is for an incoming call
    if (formattedNotification.notificationMessage.eventType === 'call' && config.incomingCallNotificationMode === 'push-channel-only' && channel !== 'PUSH') {
      // Ignore this call-related notification, but at a minimum generate a log so that user is aware.
      log.warn('Dropped incoming call notification with id: ' + notificationId + ' received through channel: ' + channel + ' because current mode for handling notifications is set to: push-channel-only.');
    } else {
      // Don't check for duplicate notifications if idCacheLength is set to 0
      // Get the list of "relevant" IDs in the queue ("relevant" being the latest X elements).
      // This covers edge-cases where the cache length config is changed (to a smaller number)
      //    after the queue has begun to be populated.
      const ids = config.idCacheLength === 0 ? [] : queue.slice(config.idCacheLength * -1);
      // If the notification ID is part of the list, then it's a duplicate.
      const duplicate = ids.includes(notificationId);
      if (duplicate) {
        log.info('Notification was a duplicate; ignoring.');
        const error = new Error(`Notification id ${notificationId} is duplicate.`);
        // TODO: Tech-debt; this action should be a notificationReceived error action.
        //      But that requires all sagas listening for notifications to filter out
        //      error actions ..which requires their take() patterns changed, which
        //      is another tech-debt item.
        context.dispatch(actions.processNotificationFinish(error));
      } else {
        queue.push(notificationId);
        // Because the client can update the value of idCacheLength at any time
        // we have to adjust the size of our queue accordingly
        while (queue.length > config.idCacheLength) {
          queue.shift();
        }

        // Inform all other plugins by sending a NOTIFICATION_RECEIVED action
        context.dispatch(actions.notificationReceived(formattedNotification, notificationChannel));

        // For backwards compatibility, also emit the event that 'notificationReceived' action normally emits.
        emitEvent(eventTypes.NOTI_RECEIVED, {
          payload: _objectSpread({}, formattedNotification)
        });
      }
    }
  }
  return processNotification;
}

/***/ }),

/***/ 6305:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerOperations;
var _registerPushDeviceToken = _interopRequireDefault(__webpack_require__(94183));
var _unregisterPushDeviceToken = _interopRequireDefault(__webpack_require__(75733));
/*
 * Register the operation with the bottle. This will make it available on the
 *    top-level container under its namespace.
 */
function registerOperations(bottle) {
  bottle.factory('NotificationsOperations.registerPushDeviceToken', () => {
    return (0, _registerPushDeviceToken.default)(bottle.container);
  });
  bottle.factory('NotificationsOperations.unregisterPushDeviceToken', () => {
    return (0, _unregisterPushDeviceToken.default)(bottle.container);
  });
}

/***/ }),

/***/ 94183:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _defaults2 = _interopRequireDefault(__webpack_require__(469));
var _selectors = __webpack_require__(50606);
var _selectors2 = __webpack_require__(46942);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Libraries.
// Other plugins.
/**
 * Link-specific push notification factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The registerPushDeviceToken operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    NotificationRequests
  } = container;
  const log = logManager.getLogger('NOTIFICATIONS');

  /**
   * Operation for registering a device token for push notifications.
   * @method registerPushDeviceToken
   */
  async function registerPushDeviceToken(params) {
    const connection = (0, _selectors2.getConnectionInfo)(context.getState());
    const {
      pushRegistration
    } = (0, _selectors.getNotificationConfig)(context.getState());

    // If a push registration endpoint was configured, use that instead of default.
    if (pushRegistration) {
      connection.server = (0, _defaults2.default)(connection.server, pushRegistration);
    }
    log.info('Registering device token for PUSH notifications...');
    return await NotificationRequests.pushNotificationsRegistration(connection, _objectSpread({}, params));
  }
  return registerPushDeviceToken;
}

/***/ }),

/***/ 75733:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _defaults2 = _interopRequireDefault(__webpack_require__(469));
var _selectors = __webpack_require__(50606);
var _selectors2 = __webpack_require__(46942);
// Libraries.

// Other plugins.

/**
 * Link-specific push notification factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The unregisterPushDeviceToken operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    NotificationRequests
  } = container;
  const log = logManager.getLogger('NOTIFICATIONS');

  /**
   * Operation for deregistering a device token for push notifications.
   * @method deregisterPushDeviceToken
   */
  async function unregisterPushDeviceToken(registration) {
    const connection = (0, _selectors2.getConnectionInfo)(context.getState());
    const {
      pushRegistration
    } = (0, _selectors.getNotificationConfig)(context.getState());

    // If a push registration endpoint was configured, use that instead of default.
    if (pushRegistration) {
      connection.server = (0, _defaults2.default)(connection.server, pushRegistration);
    }
    log.info('Un-registering device token for PUSH notifications...');
    return await NotificationRequests.pushNotificationsDeRegistration(connection, {
      registration
    });
  }
  return unregisterPushDeviceToken;
}

/***/ }),

/***/ 77895:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _errors = _interopRequireDefault(__webpack_require__(83437));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Error plugin
/**
 * Messaging Link REST Requests factory function.
 * Defines the REST interface between the SDK and KL's Messaging REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for Messaging.
 */
function createRequests(container) {
  const {
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('NOTIFICATIONS');

  /**
   * Registers a device token with On-Prem services.
   * @method pushNotificationsRegistration
   * @param  {Object} connection - Information for formatting the request.
   * @param  {Object} options
   * @param  {string[]} options.services - Push service to register to; either 'google' or 'apple'.
   * @param {string} options.pushProvider - The push provider, can be either 'apple' or 'google'.
   * @param  {string} options.bundleId - The bundle id to use for registration.
   * @param  {string} options.deviceToken
   * @param {string} options.voipDeviceToken - Token for call related service.
   * @param {string} options.standardDeviceToken - Token for non-call related service.
   * @param  {string} options.clientCorrelator - Unique identifier for a client device.
   * @param {string} options.realm - The realm used by the push registration service to identify
   *                                and establish a connection with the service gateway.
   * @param {boolean} options.isProduction - If true, push notification will be sent to production. If false, push notification will be sent to sandbox.
   * @return {Object} response
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function pushNotificationsRegistration(connection, _ref) {
    let {
      services,
      pushProvider,
      bundleId,
      deviceToken,
      voipDeviceToken,
      standardDeviceToken,
      clientCorrelator,
      realm,
      isProduction
    } = _ref;
    const {
      server
    } = connection;
    pushProvider = pushProvider.toLowerCase();
    const url = `${server.protocol}://${server.server}:${server.port}/` + `rest/version/${server.version}/` + `user/${connection.username}/` + 'push/' + pushProvider + '/devices/';
    const method = 'POST';
    let body = {
      bundleID: bundleId,
      service: services,
      clientCorrelator: clientCorrelator,
      realm: realm,
      isProduction: isProduction
    };
    if (pushProvider === 'apple') {
      body.voipDeviceToken = voipDeviceToken;
      body.standardDeviceToken = standardDeviceToken;
    } else {
      body.deviceToken = deviceToken;
    }
    body = JSON.stringify(body);
    log.debug(`Sending PUSH register request: ${method} ${url}`);
    const response = await sendRequest({
      url,
      method,
      body
    });
    const {
      body: responseBody,
      error,
      result
    } = response;
    let registrationResponse;
    const responseName = pushProvider + 'DeviceRegistrationResponse';
    if (responseBody && responseBody[responseName]) {
      registrationResponse = responseBody[responseName];
    }
    if (error) {
      log.info('Failed to register device token for PUSH notifications.');
      if (registrationResponse) {
        // Handle errors from the server.
        const statusCode = registrationResponse.statusCode;
        log.debug(`Device registration request for PUSH notifications failed with status code: ${statusCode}`);
        throw new _errors.default({
          code: statusCode,
          message: `Failed to register device token for PUSH notifications. Code: ${statusCode}`
        });
      } else {
        // Handle errors from the request helper.
        const {
          message
        } = result;
        log.debug(`Device registration request for PUSH notifications failed with message: ${message}.`);
        throw new _errors.default({
          code: result.code,
          message: `Failed to register device token for PUSH notifications. Error: ${result.message}`
        });
      }
    } else if (registrationResponse && registrationResponse.statusCode !== 0) {
      log.info(`Failed to register device token for PUSH notifications. Code: ${registrationResponse.statuscode}`);
      // TODO: Is this else-if needed?
      throw new _errors.default({
        code: registrationResponse.statusCode,
        message: `Failed to register device token for PUSH notifications. Error: ${registrationResponse.statusCode}`
      });
    } else {
      log.info('Successfully registered device token for PUSH notifications.');
      return _objectSpread({
        error: false
      }, registrationResponse);
    }
  }

  /**
   * De-Registers a device token with On-Prem services.
   * @method pushNotificationsDeRegistration
   * @param  {Object} connection - Information for formatting the request.
   * @param  {Object} options
   * @param  {string} options.registration
   * @return {Object} response
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function pushNotificationsDeRegistration(connection, _ref2) {
    let {
      registration
    } = _ref2;
    const {
      server
    } = connection;
    const url = `${server.protocol}://${server.server}:${server.port}${registration}`;
    const method = 'DELETE';
    const responseType = 'none';
    log.debug(`Sending PUSH unregister request: ${method} ${url}`);
    const response = await sendRequest({
      url,
      method,
      responseType
    });
    if (response.error) {
      log.info('Failed to unregister device token for PUSH notifications.');
      if (response.payload.body) {
        // Handle errors from the server.
        const {
          statusCode
        } = response.payload.body;
        log.debug(`Failed to unregister device token for PUSH notifications. Status code: ${statusCode}.`);
        throw new _errors.default({
          code: statusCode,
          message: `Failed to unregister device token for PUSH notifications. Code: ${statusCode}.`
        });
      } else {
        // Handle errors from the request helper.
        const {
          message
        } = response.payload.result;
        log.debug(`Device token unregistration request failed for PUSH notifications: ${message}`);
        throw new _errors.default({
          code: response.payload.result.code,
          message: `Device token unregistration request failed for PUSH notifications: ${message}`
        });
      }
    } else {
      log.info('Successfully unregistered device token for PUSH notifications.');
      // Successful de-register has no response.
      return {
        error: false
      };
    }
  }

  /**
   * Fetches SDP data from a given partial URL.
   * @method fetchSDP
   * @param  {Object} partialUrl - A partial URL. Contains everything after the protocol://server:port
   * @return {Object} response A response payload
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function fetchSDP(connection, partialUrl) {
    const {
      server
    } = connection;
    const method = 'GET';
    const url = `${server.protocol}://${server.server}:${server.port}${partialUrl}`;
    log.debug(`Sending request to fetch SDP: ${method} ${url}`);
    const response = await sendRequest({
      url,
      method
    });
    if (!response.error) {
      log.info('SDP fetched successfully.');
      // TODO: test and see what this format actually is.
      return response.payload.body;
    } else {
      log.debug(`Failed to fetch SDP. Error is: ${JSON.stringify(response.error)}`);
      throw new _errors.default({
        code: response.payload.result.code,
        message: response.payload.result.message
      });
    }
  }
  return {
    pushNotificationsRegistration,
    pushNotificationsDeRegistration,
    fetchSDP
  };
}

/***/ }),

/***/ 90746:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
var _actionTypes = __webpack_require__(9148);
/**
 * Middleware factory for the Notifications plugin.
 */
function createMiddleware(bottle) {
  // List of all listeners that are waiting for actions.
  const actionListeners = [];

  /*
   * The middleware that will be given to the Factory.
   *
   * TODO: Eventually, when the Connectivity plugin is redesigned (or maybe as
   *    technical-debt follow-up afterwards?), this middleware can be replaced
   *    so that the Notifications plugin doesn't need to use redux middlewares anymore.
   */
  const middleware = context => next => action => {
    const operations = context.container.NotificationsOperations;

    // Only need to act on PROCESS_NOTIFICATION that come from the Connectivity plugin.
    if (action.type === _actionTypes.PROCESS_NOTIFICATION && action.meta.channel === 'WEBSOCKET') {
      operations.processNotification(action.payload, action.meta.channel);
    }

    // Act after the action has gone through the reducers.
    const returnVal = next(action);
    let i = actionListeners.length;
    // Start from the end of the list so we can remove items from the list
    //    without making it complicated to iterate over everything.
    while (i--) {
      const listener = actionListeners[i];
      /*
       * If the action matches a listener, then process the action with the listener
       *    and eventually call the listener's callback function.
       */
      if (listener.pattern(action)) {
        /*
         * If this `take` was only intended for a single action, remove the listener
         *    from the list and clear its timeout.
         */
        if (listener.singleTake) {
          actionListeners.splice(i, 1);
          if (listener.timeoutId) {
            clearTimeout(listener.timeoutId);
          }
        }
        listener.callback(action);
      }
    }
    return returnVal;
  };

  /**
   * Utility function for operations to pause until an action is dispatched.
   *
   * Using this function should be avoided if possible. This was created as a stop-gap
   *    so pre-redesign sagas and post-redesign operations could still work together.
   *    ie. so a saga that is triggered by an action, then responds by dispatching
   *    another action, can be used by an operation.
   *
   * @method waitForAction
   * @param {Function} pattern Function that decides whether the action should trigger the listener.
   * @param {number} [timeout] Delay, in milleseconds, to wait for the action before rejecting the promise.
   * @return {Promise} Promise that resolves when the action has been dispatched.
   * @example
   * const takeAction = container.Notifications.takeAction
   * const action = await takeAction((action) => ...)
   */
  function takeAction(pattern, timeout) {
    if (typeof pattern === 'string') {
      // If a single action type was passed in, convert it to a function for consistency.
      const actionType = pattern;
      pattern = action => action.type === actionType;
    }
    return new Promise((resolve, reject) => {
      let timeoutId;
      // If a timeout was provided, reject the promise after that long.
      if (typeof timeout === 'number') {
        timeoutId = setTimeout(reject, timeout);
      }
      actionListeners.push({
        singleTake: true,
        pattern,
        callback: resolve,
        timeoutId
      });
    });
  }

  /**
   * Utility function to act on dispatched actions.
   * Will call the provided callback function every time a matching action is
   *    dispatched.
   *
   * This was created as a stop-gap between pre-redesign sagas and post-redesign
   *    operations. It simulates the behaviour of a redux middleware without
   *    other Plugins needing to actually create/use a redux middleware themselves.
   *
   * @method takeEveryAction
   * @param {Function} pattern Function that decides whether the action should trigger the listener.
   * @param {Function} callback Function to be called with a matched action.
   * @return {undefined}
   * @throws {Error} When either parameter provided is invalid.
   * @example
   * const takeEveryAction = container.Notifications.takeEveryAction
   * takeAction((action) => { ... }, aCallback)
   *
   * function aCallback (action) { ... }
   */
  function takeEveryAction(pattern, callback) {
    if (typeof pattern === 'string') {
      // If a single action type was passed in, convert it to a function for consistency.
      const actionType = pattern;
      pattern = action => action.type === actionType;
    }
    if (typeof pattern !== 'function' || typeof callback !== 'function') {
      throw new Error('takeEveryAction parametesr must be functions.');
    }
    actionListeners.push({
      singleTake: false,
      pattern,
      callback
    });
  }

  // Add the utilities to the bottle container.
  bottle.value('Notifications.takeAction', takeAction);
  bottle.value('Notifications.takeEveryAction', takeEveryAction);
  return middleware;
}

/***/ }),

/***/ 65181:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UPDATE_FINISH = exports.UPDATE = exports.UNSUBSCRIBE_FINISH = exports.UNSUBSCRIBE = exports.SUBSCRIBE_FINISH = exports.SUBSCRIBE = exports.RECEIVED = exports.GET_PRESENCE_LIST = exports.GET_FINISH = exports.GET = exports.DELETE_PRESENCE_LIST = exports.CREATE_PRESENCE_LIST_FINISH = exports.CREATE_PRESENCE_LIST = void 0;
const prefix = '@@KANDY/PRESENCE/';
const UPDATE = exports.UPDATE = prefix + 'UPDATE';
const UPDATE_FINISH = exports.UPDATE_FINISH = prefix + 'UPDATE_FINISH';
const GET = exports.GET = prefix + 'GET';
const GET_FINISH = exports.GET_FINISH = prefix + 'GET_FINISH';
const SUBSCRIBE = exports.SUBSCRIBE = prefix + 'SUBSCRIBE';
const SUBSCRIBE_FINISH = exports.SUBSCRIBE_FINISH = prefix + 'SUBSCRIBE_FINISH';
const UNSUBSCRIBE = exports.UNSUBSCRIBE = prefix + 'UNSUBSCRIBE';
const UNSUBSCRIBE_FINISH = exports.UNSUBSCRIBE_FINISH = prefix + 'UNSUBSCRIBE_FINISH';
const RECEIVED = exports.RECEIVED = prefix + 'RECEIVED';
const CREATE_PRESENCE_LIST = exports.CREATE_PRESENCE_LIST = prefix + 'CREATE_PRESENCE_LIST';
const CREATE_PRESENCE_LIST_FINISH = exports.CREATE_PRESENCE_LIST_FINISH = prefix + 'CREATE_PRESENCE_LIST_FINISH';
const DELETE_PRESENCE_LIST = exports.DELETE_PRESENCE_LIST = prefix + 'DELETE_PRESENCE_LIST';
const GET_PRESENCE_LIST = exports.GET_PRESENCE_LIST = prefix + 'GET_PRESENCE_LIST';

/***/ }),

/***/ 4785:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createListFinish = createListFinish;
exports.createPresenceList = createPresenceList;
exports.deletePresenceList = deletePresenceList;
exports.getPresence = getPresence;
exports.getPresenceFinish = getPresenceFinish;
exports.getPresenceList = getPresenceList;
exports.presenceReceived = presenceReceived;
exports.subscribePresence = subscribePresence;
exports.subscribePresenceFinish = subscribePresenceFinish;
exports.unsubscribePresence = unsubscribePresence;
exports.unsubscribePresenceFinish = unsubscribePresenceFinish;
exports.updatePresence = updatePresence;
exports.updatePresenceFinish = updatePresenceFinish;
var actionTypes = _interopRequireWildcard(__webpack_require__(65181));
var _errors = _interopRequireDefault(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Presence plugin.

// Other plugins.

/**
 * Update the presence for the current user
 * @param  {string} status   The status of the presence state
 * @param  {string} activity The activity to be shown as presence state
 * @param  {string} note     The note to be shown as alternative presence state
 *                           which is determined by the user. The note entry is
 *                           effective on the remote sip client when the
 *                           activity is âotherâ.
 * @return {Object}          A Flux Standard Action for UPDATE_PRESENCE
 */
function updatePresence(status, activity, note) {
  return {
    type: actionTypes.UPDATE,
    payload: {
      status,
      activity,
      note
    }
  };
}
function updatePresenceFinish(payload) {
  return {
    type: actionTypes.UPDATE_FINISH,
    error: payload instanceof Error || payload instanceof _errors.default,
    payload
  };
}

/**
 * Get the presence for the given user(s)
 * @param  {string} users  A user id or an array of user ids.
 * @return {Object}        A Flux Standard Action for GET_PRESENCE
 */
function getPresence(users) {
  return {
    type: actionTypes.GET,
    payload: users
  };
}
function getPresenceFinish(payload) {
  return {
    type: actionTypes.GET_FINISH,
    error: payload instanceof Error || payload instanceof _errors.default,
    payload
  };
}

/**
 * Subscribe to the presence for the given user(s)
 * @param  {string} users  A user id or an array of user ids.
 * @return {Object}        A Flux Standard Action for SUBSCRIBE_PRESENCE
 */
function subscribePresence(users) {
  return {
    type: actionTypes.SUBSCRIBE,
    payload: users
  };
}
function subscribePresenceFinish(result) {
  if (!Array.isArray(result.presentityUserId)) {
    result.presentityUserId = [result.presentityUserId];
  }
  return {
    type: actionTypes.SUBSCRIBE_FINISH,
    error: result instanceof Error || result instanceof _errors.default,
    payload: result
  };
}

/**
 * Unsubscribe from the presence for the given user(s)
 * @param  {string} users  A user id or an array of user ids.
 * @return {Object}        A Flux Standard Action for UNSUBSCRIBE_PRESENCE
 */
function unsubscribePresence(users) {
  return {
    type: actionTypes.UNSUBSCRIBE,
    payload: users
  };
}
function unsubscribePresenceFinish(result) {
  if (result.presentityUserId && !Array.isArray(result.presentityUserId)) {
    result.presentityUserId = [result.presentityUserId];
  }
  return {
    type: actionTypes.UNSUBSCRIBE_FINISH,
    error: result instanceof Error || result instanceof _errors.default,
    payload: result
  };
}

/**
 * Create a new presence list
 * @param  {string} users  A user id or an array of user ids.
 * @return {Object}        A Flux Standard Action for UNSUBSCRIBE_PRESENCE
 */
function createPresenceList(users) {
  return {
    type: actionTypes.CREATE_PRESENCE_LIST,
    payload: users
  };
}

/**
 * Delete a presence list
 * @param  {string} presenceListId  The ID of the presence list to delete.
 * @return {Object}                 A Flux Standard Action for UNSUBSCRIBE_PRESENCE
 */
function deletePresenceList(presenceListId) {
  return {
    type: actionTypes.DELETE_PRESENCE_LIST,
    payload: presenceListId
  };
}

/**
 * Retrieve a presence list
 * @param  {string} presenceListId  The ID of the presence list to delete.
 * @return {Object}                 A Flux Standard Action for UNSUBSCRIBE_PRESENCE
 */
function getPresenceList(presenceListId) {
  return {
    type: actionTypes.GET_PRESENCE_LIST,
    payload: presenceListId
  };
}
function createListFinish(payload) {
  return {
    type: actionTypes.CREATE_PRESENCE_LIST_FINISH,
    error: payload instanceof Error || payload instanceof _errors.default,
    payload
  };
}
function presenceReceived(presence) {
  return {
    type: actionTypes.RECEIVED,
    payload: presence
  };
}

/***/ }),

/***/ 69694:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _eventTypes = __webpack_require__(30719);
var selectors = _interopRequireWildcard(__webpack_require__(87291));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * The 'presence' namespace provides an interface for an application to set the
 *    User's presence information and to track other Users' presence
 *    information.
 *
 * Presence information is persisted by the server. When the SDK is initialized,
 *    there will be no information available. Presence information will become
 *    available either by using {@link presence.fetch} or by subscribing for
 *    updates about other Users, using {@link presence.subscribe}.
 *
 * Available presence information can be retrieved using {@link presence.get} or
 *    {@link presence.getAll}.
 *
 * @public
 * @requires presence
 * @namespace presence
 */

/**
 * The PresenceStatus type defines the user's current status in terms of the user's availability to
 * communicate/respond to other users in the network.
 * An instance of this type can be obtained by invoking the {@link presence.get} function.
 *
 * Reporting when a user is on the phone is enabled (by default), which means that presence update notifications
 * will be sent whenever a user is in a call, as well as when the call has ended.
 * This is a user preference enabled or disabled on server side, and it can only be changed on the server side.
 *
 * The status is set to {@link presence.statuses open} as soon as a user subscribes for the presence service.
 *
 * @public
 * @static
 * @typedef {Object} PresenceStatus
 * @memberof presence
 * @property {string} userId The unique identifier for the user associated with this presence status.
 * @property {string} status The current status the user has set for themselves. For supported values see {@link presence.statuses}.
 * @property {string} activity The current activity of the user.
 *      For supported values see {@link presence.activities}.
 * @property {string} note Additional message accompanying the status & activity.
 * @property {boolean} loading Whether the presence information has been loaded or is in the process of loading.
 */

/**
 * Presence API factory function.
 * Defines the interface between the application and the SDK's Presence APIs.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @return {Object} Available public APIs for Presence.
 */
function createAPI(container) {
  const {
    emitEvent,
    PresenceOperations: operations,
    logManager,
    API_LOG_TAG,
    context
  } = container;
  const log = logManager.getLogger('PRESENCE');
  const presenceApi = {
    /**
     * Updates the presence information for the current user.
     *
     * See {@link presence.statuses} and {@link presence.activities} for valid
     *    values.
     *
     * The SDK will emit a
     *    {@link presence.event:presence:selfChange presence:selfChange} event
     *    when the operation completes. The updated presence information is
     *    available and can be retrieved with {@link presence.getSelf}.
     *
     * Other users subscribed for this user's presence will receive a
     *    {@link presence.event:presence:change presence:change} event.
     *
     * @public
     * @static
     * @memberof presence
     * @requires presence
     * @method update
     * @param  {string} status The status of the presence state.
     * @param  {string} activity The activity to be shown as presence state
     * @param  {string} [note] An additional note to be provided when the activity is `presence.activities.ACTIVITIES_OTHER`.
     */
    async update(status, activity, note) {
      log.debug(API_LOG_TAG + 'presence.update: ', status, activity, note);
      try {
        await operations.update(status, activity, note);
        emitEvent(_eventTypes.SELF_CHANGE, {});
      } catch (error) {
        emitEvent(_eventTypes.ERROR, {
          error
        });
      }
    },
    /**
     * Fetches presence information for the given users. This will refresh the
     *    available information with any new information from the server.
     *
     * Available presence information an be retrieved using the
     *    {@link presence.get} or {@link presence.getAll} APIs.
     *
     * @public
     * @static
     * @memberof presence
     * @requires presence
     * @method fetch
     * @param {Array<string>|string} user A User ID or an array of User IDs.
     */
    async fetch(user) {
      log.debug(API_LOG_TAG + 'presence.fetch: ', user);
      const users = Array.isArray(user) ? user : [user];
      try {
        await operations.fetch(users);
      } catch (error) {
        emitEvent(_eventTypes.ERROR, {
          error
        });
      }
    },
    /**
     * Subscribe to another User's presence updates.
     *
     * When the User updates their presence information, the SDK will emit a
     *    {@link presence.event:presence:change presence:change} event.
     *
     * @public
     * @static
     * @memberof presence
     * @requires presence
     * @method subscribe
     * @param {Array<string>|string} users A User ID or an array of User IDs.
     */
    async subscribe(users) {
      log.debug(API_LOG_TAG + 'presence.subscribe: ', users);
      users = Array.isArray(users) ? users : [users];
      try {
        await operations.subscribe(users);
      } catch (error) {
        emitEvent(_eventTypes.ERROR, {
          error
        });
      }
    },
    /**
     * Unsubscribe from another User's presence updates.
     *
     * @public
     * @static
     * @memberof presence
     * @requires presence
     * @method unsubscribe
     * @param {Array<string>|string} users A User ID or an array of User IDs.
     */
    async unsubscribe(users) {
      log.debug(API_LOG_TAG + 'presence.unsubscribe: ', users);
      users = Array.isArray(users) ? users : [users];
      try {
        await operations.unsubscribe(users);
      } catch (error) {
        emitEvent(_eventTypes.ERROR, {
          error
        });
      }
    },
    /**
     * Retrieves the presence information for specified users, if available.
     *
     * @public
     * @static
     * @memberof presence
     * @requires presence
     * @method get
     * @param  {Array<string>|string} user A User ID or an array of User IDs.
     * @return {Array<Object>|Object} List of user presence information.
     */
    get(user) {
      log.debug(API_LOG_TAG + 'presence.get: ', user);
      const users = Array.isArray(user) ? user : [user];
      const storedUsers = selectors.getPresence(context.getState(), users);
      // return something sensible based on the input
      if (!Array.isArray(users)) {
        if (storedUsers.length) {
          return storedUsers[0];
        }
        return undefined;
      }
      return storedUsers;
    },
    /**
     * Retrieves the presence information for all available users.
     *
     * @public
     * @static
     * @memberof presence
     * @requires presence
     * @method getAll
     * @return {Array<Object>} List of user presence information.
     */
    getAll() {
      log.debug(API_LOG_TAG + 'presence.getAll: ');
      return selectors.getAllPresence(context.getState());
    },
    /**
     * Retrieves the presence information for the current user.
     *
     * This information is set using the {@link presence.update} API.
     *
     * @public
     * @static
     * @memberof presence
     * @requires presence
     * @method getSelf
     * @return {Object} Presence information for the current user.
     */
    getSelf() {
      log.debug(API_LOG_TAG + 'presence.getSelf: ');
      return selectors.getSelfPresence(context.getState());
    }
  };
  return {
    presence: presenceApi
  };
}

/***/ }),

/***/ 30719:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UNSUBSCRIBE = exports.SUBSCRIBE = exports.SELF_CHANGE = exports.RECEIVED = exports.ERROR = void 0;
/**
 * A presence update about a subscribed user has been received.
 *
 * This event is generated as a result of {@link presence.fetch} or {@link presence.update} operations.
 *
 * For the latter operation, the current user receives a presence update of another user that the current user is subscribed to.
 *
 * The changed information can be retrieved using the {@link presence.get}
 *    API.
 *
 * @public
 * @memberof presence
 * @requires presence
 * @event presence:change
 * @param {Object} params A presence object containing data.
 * @param {string} params.userId The ID of the user.
 * @param {string} params.status The presence status of the user.
 * @param {string} params.activity The activity of the user.
 * @param {string} params.note A custom note provided by the user.
 */
const RECEIVED = exports.RECEIVED = 'presence:change';

/**
 * The current user's presence information has changed.
 *
 * The changed information can be retrieved using the {@link presence.getSelf}
 *    API.
 *
 * @public
 * @memberof presence
 * @requires presence
 * @event presence:selfChange
 */
const SELF_CHANGE = exports.SELF_CHANGE = 'presence:selfChange';

/**
 * An update (as a result of subscribing to a specific user's presence) has been received.
 *
 * @public
 * @memberof presence
 * @requires presence
 * @event presence:subscribe
 * @param {Object} params A subscription object containing data.
 * @param {Array<string>} params.userIds The ID(s) of the user(s) whose presence needs to be watched.
 */
const SUBSCRIBE = exports.SUBSCRIBE = 'presence:subscribe';

/**
 * An update (as a result of unsubscribing to a specific user's presence) has been received.
 *
 * @public
 * @memberof presence
 * @requires presence
 * @event presence:unsubscribe
 * @param {Object} params A subscription object containing data.
 * @param {Array<string>} params.userIds The ID(s) of the user(s) whose presence no longer requires to be watched.
 */
const UNSUBSCRIBE = exports.UNSUBSCRIBE = 'presence:unsubscribe';

/**
 * An error occurred with presence.
 *
 * @public
 * @memberof presence
 * @requires presence
 * @event presence:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 */
const ERROR = exports.ERROR = 'presence:error';

/***/ }),

/***/ 35303:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "api", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _api = _interopRequireDefault(__webpack_require__(69694));
var _reducers = _interopRequireDefault(__webpack_require__(7834));
// Import the components of the interface.

/**
 * This interface is for a presence plugin.
 * @type {string}
 */
const name = exports.name = 'presence';

/***/ }),

/***/ 7834:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _omit2 = _interopRequireDefault(__webpack_require__(81053));
var actionTypes = _interopRequireWildcard(__webpack_require__(65181));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Libraries
const reducers = {};
reducers[actionTypes.UPDATE] = {
  next(state) {
    return _objectSpread(_objectSpread({}, state), {}, {
      self: _objectSpread(_objectSpread({}, state.self), {}, {
        loading: true,
        error: false
      })
    });
  }
};
reducers[actionTypes.UPDATE_FINISH] = {
  next(state, action) {
    const result = _objectSpread(_objectSpread({}, state), {}, {
      self: {
        loading: false,
        error: false,
        status: action.payload.status,
        activity: action.payload.activity
      }
    });
    if (action.payload.note) {
      result.self.note = action.payload.note;
    }
    return result;
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      self: _objectSpread(_objectSpread({}, state.self), {}, {
        loading: false,
        error: action.payload
      })
    });
  }
};
reducers[actionTypes.GET] = {
  next(state, _ref) {
    let {
      payload: userIds
    } = _ref;
    const users = _objectSpread({}, state.users);
    for (const userId of userIds) {
      users[userId] = {
        userId,
        loading: true
      };
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      users
    });
  }
};
reducers[actionTypes.GET_FINISH] = {
  next(state, _ref2) {
    let {
      payload
    } = _ref2;
    const users = {};
    for (const presence of payload) {
      if (presence.userId) {
        // userId is a mandatory property
        presence.loading = false;
        users[presence.userId] = presence;
      }
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      users: _objectSpread(_objectSpread({}, state.users), users)
    });
  },
  throw(state, action) {
    return _objectSpread({}, state);
  }
};
reducers[actionTypes.RECEIVED] = {
  next(state, _ref3) {
    let {
      payload
    } = _ref3;
    return _objectSpread(_objectSpread({}, state), {}, {
      users: _objectSpread(_objectSpread({}, state.users), {}, {
        [payload.userId]: {
          userId: payload.userId,
          // optimize for filtering by userId
          status: payload.status,
          activity: payload.activity,
          note: payload.note,
          loading: false
        }
      })
    });
  }
};
reducers[actionTypes.SUBSCRIBE] = {
  next(state, _ref4) {
    let {
      payload
    } = _ref4;
    // Payload could be a string (single userId) or array (multiple userIds)
    if (!Array.isArray(payload)) {
      payload = [payload];
    }
    const updatedUsers = Object.assign({}, state.users);
    payload.forEach(userId => {
      updatedUsers[userId] = {
        userId,
        loading: false,
        isPending: true
      };
    });
    return _objectSpread(_objectSpread({}, state), {}, {
      users: updatedUsers
    });
  }
};
reducers[actionTypes.SUBSCRIBE_FINISH] = {
  next(state, _ref5) {
    let {
      payload
    } = _ref5;
    const updatedUsers = Object.assign({}, state.users);
    payload.presentityUserId.forEach(userId => {
      updatedUsers[userId] = {
        userId,
        loading: false,
        isPending: false
      };
    });
    return _objectSpread(_objectSpread({}, state), {}, {
      users: updatedUsers
    });
  },
  throw(state, _ref6) {
    let {
      payload
    } = _ref6;
    const updatedUsers = Object.assign({}, state.users);
    payload.presentityUserId.forEach(userId => {
      delete updatedUsers[userId];
    });
    return _objectSpread(_objectSpread({}, state), {}, {
      users: updatedUsers
    });
  }
};
reducers[actionTypes.UNSUBSCRIBE] = {
  next(state, _ref7) {
    let {
      payload
    } = _ref7;
    // Payload could be a string (single userId) or array (multiple userIds)
    if (!Array.isArray(payload)) {
      payload = [payload];
    }
    const updatedUsers = Object.assign({}, state.users);
    payload.forEach(userId => {
      updatedUsers[userId] = {
        userId,
        loading: false,
        isPending: true
      };
    });
    return _objectSpread(_objectSpread({}, state), {}, {
      users: updatedUsers
    });
  }
};
reducers[actionTypes.UNSUBSCRIBE_FINISH] = {
  next(state, _ref8) {
    let {
      payload
    } = _ref8;
    return _objectSpread(_objectSpread({}, state), {}, {
      users: (0, _omit2.default)(payload.presentityUserId, state.users)
    });
  },
  throw(state, _ref9) {
    let {
      payload
    } = _ref9;
    const updatedUsers = Object.assign({}, state.users);
    // Update the userId in state
    if (payload.presentityUserId && payload.presentityUserId.length > 0) {
      payload.presentityUserId.forEach(userId => {
        updatedUsers[userId] = {
          userId,
          loading: false,
          isPending: false
        };
      });
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      users: updatedUsers
    });
  }
};
const reducer = (0, _reduxActions.handleActions)(reducers, {
  self: {},
  users: {}
});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 87291:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getAllPresence = getAllPresence;
exports.getPresence = getPresence;
exports.getSelfPresence = getSelfPresence;
function getPresence(state, users) {
  // If no users specified, return them all
  if (!users) {
    return state.presence.users;
  }

  // Grab all users that match the passed in IDs, return
  return Object.values(state.presence.users).filter(user => users.indexOf(user.userId) !== -1);
}

/**
 * Retrieves presence information for all users.
 * @method getAllPresence
 * @param  {Object} state Redux state.
 * @return {Array}  List of presence information for users.
 */
function getAllPresence(state) {
  return Object.values(state.presence.users);
}

/**
 * Retrieves the current user's self presence.
 * @method getSelfPresence
 * @param  {Object} state Redux state.
 * @return {Object} Self-presence information.
 */
function getSelfPresence(state) {
  return state.presence.self;
}

/***/ }),

/***/ 88460:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.STATUS = exports.ACTIVITY = void 0;
/**
 * The status of the presence state
 * @name STATUS
 */
const STATUS = exports.STATUS = {
  OPEN: 'open',
  CLOSED: 'closed'
};

/**
 * The presence activity
 * @name ACTIVITY
 */
const ACTIVITY = exports.ACTIVITY = {
  ACTIVE: 'active',
  IDLE: 'idle',
  AWAY: 'away',
  LUNCH: 'lunch',
  OTHER: 'other',
  BUSY: 'busy',
  VACATION: 'vacation',
  ON_THE_PHONE: 'on-the-phone',
  UNKNOWN: 'unknown'
};

/***/ }),

/***/ 33037:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = presenceFactory;
var _interface = __webpack_require__(35303);
var _api = _interopRequireDefault(__webpack_require__(69694));
var _middleware = _interopRequireDefault(__webpack_require__(37085));
var _operations = _interopRequireDefault(__webpack_require__(87783));
var _requests = _interopRequireDefault(__webpack_require__(2457));
var _constants = __webpack_require__(88460);
/**
 * Link Presence plugin factory.
 * @method presenceFactory
 * @return {Object} A plugin.
 */
function presenceFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Add plugin-specific things to the API.
  function augmentedApi(container) {
    const newApi = (0, _api.default)(container);

    /**
     * Possible status values.
     * @public
     * @static
     * @memberof presence
     * @type {Object}
     * @property {string} OPEN
     * @property {string} CLOSED
     * @example
     * const { statuses, activities } = client.presence
     * // Use the values when updating presence.
     * client.presence.update(statuses.OPEN, activities.AVAILABLE)
     */
    newApi.presence.statuses = _constants.STATUS;

    /**
     * Possible activity values.
     * @public
     * @static
     * @memberof presence
     * @type {Object}
     * @property {string} AVAILABLE
     * @property {string} IDLE
     * @property {string} AWAY
     * @property {string} LUNCH
     * @property {string} BUSY
     * @property {string} VACATION
     * @property {string} ON_THE_PHONE
     * @property {string} UNKNOWN
     */
    newApi.presence.activities = _constants.ACTIVITY;
    return newApi;
  }

  // Register the component factory functions to the bottle.
  bottle.factory('PresenceAPI', augmentedApi);
  bottle.factory('PresenceOperations', _operations.default);
  bottle.factory('PresenceRequests', _requests.default);
  const capabilities = ['presence'];
  return {
    capabilities,
    name: _interface.name,
    reducer: _interface.reducer,
    middleware: _middleware.default
  };
}

/***/ }),

/***/ 37085:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
var _actionTypes = __webpack_require__(9148);
/**
 * Presence middleware factory function.
 * @method createMiddleware
 * @param  {Object} context The factory context.
 * @return {Function} A redux middleware.
 */
function createMiddleware(context) {
  const operations = context.container.PresenceOperations;
  /*
   * Redux middleware: Watch for specific actions and trigger operations
   *    when we see them.
   */
  return next => action => {
    /*
     * Let the action happen as it is received.
     *
     * The Presence middleware operations are not side-effects, they are
     *     relevant to the operation being performed. As such they can
     *     happen when necessary without waiting for other operations.
     */

    // Presence doesn't act on any other actions.
    if (action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage && action.payload.notificationMessage.eventType === 'presenceWatcher') {
      // When a notification of type presenceWatcher is received, Presence plugin should deal with it
      operations.presenceReceived(action);
    }
    return next(action);
  };
}

/***/ }),

/***/ 87783:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var actions = _interopRequireWildcard(__webpack_require__(4785));
var eventTypes = _interopRequireWildcard(__webpack_require__(30719));
var _selectors = __webpack_require__(87291);
var _actionTypes = __webpack_require__(9148);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _constants = __webpack_require__(88460);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Presence plugin.

// Other plugins

// Helpers

// Constants

/**
 * Presence Operations factory function.
 * @method createOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for Presence.
 */
function createOperations(container) {
  const {
    context,
    emitEvent,
    logManager,
    PresenceRequests: requests
  } = container;
  const log = logManager.getLogger('PRESENCE');

  /**
   * Operation to receive Presence info from a notification.
   * @method presenceReceived
   * @param {Object} action The action for receiving a user presence notification.
   */
  function presenceReceived(action) {
    const {
      dispatch,
      getState
    } = context;
    if (![_actionTypes.NOTIFICATION_RECEIVED].includes(action.type)) {
      return;
    }
    if (!(action.payload.notificationMessage && action.payload.notificationMessage.eventType === 'presenceWatcher')) {
      return;
    }

    // Find the user in our list of users
    // If found and not pending then notify the client
    const params = action.payload.notificationMessage.presenceWatcherNotificationParams;
    const users = (0, _selectors.getAllPresence)(getState());
    const user = users.find(item => item.userId === params.name);
    if (user && !user.isPending) {
      log.info(`Received notification of the user(s): ${params.name} present presence.`);
      const presence = {
        userId: params.name,
        activity: params.activity,
        status: params.status,
        note: params.note
      };

      // Dispatch an action to update state.
      dispatch(actions.presenceReceived(presence));
      // Tell the application that state has changed.
      emitEvent(eventTypes.RECEIVED, presence);
    }
  }

  /**
   * Link operation for updating user(s) Presence .
   * @method update
   * @param  {string} status The status of the presence state.
   * @param  {string} activity The activity to be shown as presence state
   * @param  {string} [note] An additional note to be provided when the activity is `presence.activities.ACTIVITIES_OTHER`.
   */
  async function update(status, activity, note) {
    const {
      dispatch
    } = context;

    // Dispatch an updatePresence action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.updatePresence(status, activity, note));

    // Verify that the status value is a valid
    if (Object.values(_constants.STATUS).indexOf(status) === -1) {
      log.debug('Invalid presence status present.');
      const error = new _errors.default({
        code: _errors.presenceCodes.INVALID_STATUS,
        message: 'Invalid status in presence update request.'
      });
      dispatch(actions.updatePresenceFinish(error));
      throw error;
    }

    // Verify that the activity value is a valid
    if (Object.values(_constants.ACTIVITY).indexOf(activity) === -1) {
      log.debug('Invalid presence activity present.');
      const error = new _errors.default({
        code: _errors.presenceCodes.INVALID_ACTIVITY,
        message: 'Invalid activity in presence update request.'
      });
      dispatch(actions.updatePresenceFinish(error));
      throw error;
    }
    try {
      await requests.updatePresence(status, activity, note);
      log.debug('Successfully updated presence.');

      // Update state by dispatching an action.
      dispatch(actions.updatePresenceFinish({
        status,
        activity,
        note
      }));
    } catch (error) {
      log.debug(`Failed to update presence. Error is: ${error}`);
      // Dispatch an error action for backwards-compatible of action logs.
      //     This does not affect state or emit an event.
      dispatch(actions.updatePresenceFinish(error));
      throw error;
    }
  }

  /**
   * Link operation for getting the presence updates one time only for the user(s).
   * @method fetch
   * @param  {Array<string>} users An array of User IDs.
   */
  async function fetch(users) {
    const {
      dispatch
    } = context;

    // Dispatch an updatePresence action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.getPresence(users));
    try {
      const result = await requests.watchPresence(users, 'get');
      dispatch(actions.getPresenceFinish(result));
    } catch (error) {
      dispatch(actions.getPresenceFinish(error));
      throw error;
    }
  }

  /**
   * Link operation for Handling subscribing to another users(s) presence.
   * @method subscribe
   */
  async function subscribe(users) {
    const {
      dispatch
    } = context;

    // Dispatch an updatePresence action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.subscribePresence(users));

    // Check if no users were passed in
    if (!users || users.length === 1 && !users[0]) {
      // No users passed in
      throw new _errors.default({
        message: 'No users provided to subscribe to.'
      });
    }
    try {
      log.info(`Subscribing to the user(s) ${users} presence.`);
      const result = await requests.watchPresence(users, 'watch');
      log.info(`Finished subscribing to user(s): ${users} with status code: ${result.presenceWatcherResponse.statusCode}`);
      result.presentityUserId = users;
      dispatch(actions.subscribePresenceFinish(result));
    } catch (error) {
      log.info(`Failed to subscribe to users(s): ${users}. ${error.message}`);
      error.presentityUserId = users;
      dispatch(actions.subscribePresenceFinish(error));
      throw error;
    }
  }

  /**
   * Link operation for Handling unsubscribing the user(s) presence.
   * User will not be able to receive presence updates of the unsubscribed user.
   * @method unsubscribePresence
   */
  async function unsubscribe(users) {
    const {
      dispatch
    } = context;

    // Dispatch an updatePresence action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.unsubscribePresence(users));

    // Check if no users were passed in
    if (!users || users.length === 1 && !users[0]) {
      // No users passed in
      throw new _errors.default({
        message: 'No users provided to unsubscribe to.'
      });
    }
    try {
      log.info(`UnSubscribing to the user(s) ${users} presence.`);
      const result = await requests.watchPresence(users, 'stopwatch');
      log.info(`Finished unSubscribing to user(s): ${users} with status code: ${result.presenceWatcherResponse.statusCode}`);
      result.presentityUserId = users;
      dispatch(actions.unsubscribePresenceFinish(result));
    } catch (error) {
      log.info(`Failed to unsubscribe to users(s): ${users}. ${error.message}`);
      error.presentityUserId = users;
      dispatch(actions.unsubscribePresenceFinish(error));
      throw error;
    }
  }
  return {
    // API operations:
    presenceReceived,
    update,
    fetch,
    subscribe,
    unsubscribe
  };
}

/***/ }),

/***/ 2457:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Other plugins.

/**
 * Presence Link REST Requests factory function.
 * Defines the REST interface between the SDK and KL's Presence REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for Presence.
 */
function createRequests(container) {
  const {
    context,
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('PRESENCE');
  async function updatePresence(status, activity, note) {
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const version = requestInfo.version;
    const url = `${requestInfo.baseURL}/rest/version/${version}/user/${requestInfo.username}/presence`;
    const data = {
      status,
      activity
    };
    if (note) {
      data.note = note;
    }
    const bodyData = JSON.stringify({
      presenceRequest: data
    });
    const options = {
      method: 'POST',
      url,
      responseType: 'json',
      body: bodyData
    };
    const response = await sendRequest(options);
    const {
      body,
      error,
      result
    } = response;
    if (error) {
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.presenceResponse;
        const message = `Failed to update presence with status code ${statusCode}.`;
        log.debug(message);
        throw new _errors.default({
          message
        });
      } else {
        // Handle errors from the request helper.
        const {
          message
        } = result;
        const errMsg = `Update presence request failed: ${message}`;
        log.info(errMsg);
        throw new _errors.default({
          message: errMsg
        });
      }
    } else {
      if (body.presenceResponse.statusCode !== 0) {
        const message = `Failed to update presence. Code: ${body.presenceResponse.statusCode}.`;
        throw new _errors.default({
          message
        });
      }
    }
    return response;
  }

  /**
   * Make a request to the presenceWatcher resource
   * @method watchPresence
   * @param  {Array<User>}  users  a lits of users for the watch request
   * @param  {string}       action watch     Starts watching the presence updates
   *                                         for the users in the users array.
   *                               stopwatch Stops watching the presence updates
   *                                         for the users in the users array.
   *                               get       Gets the presence updates one time
   *                                         only for the users in the users array.
   */
  async function watchPresence(users, action) {
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const version = requestInfo.version;
    const url = `${requestInfo.baseURL}/rest/version/${version}/user/${requestInfo.username}/presenceWatcher`;
    const bodyData = JSON.stringify({
      presenceWatcherRequest: {
        userList: users,
        action
      }
    });
    const options = {
      method: 'POST',
      url,
      responseType: 'json',
      body: bodyData
    };
    const response = await sendRequest(options);
    const {
      body,
      error,
      result
    } = response;
    if (error) {
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.presenceWatcherResponse;
        const message = `Failed to watch presence with status code ${statusCode}.`;
        log.debug(message);
        throw new _errors.default({
          message
        });
      } else {
        // Handle errors from the request helper.
        const {
          message
        } = result;
        const errMsg = `Watch presence request failed: ${message}`;
        log.info(errMsg);
        throw new _errors.default({
          message: errMsg
        });
      }
    } else {
      if (body.presenceWatcherResponse.statusCode !== 0) {
        const message = `Failed to execute presence operation (${action}). Code: ${body.presenceWatcherResponse.statusCode}.`;
        throw new _errors.default({
          message
        });
      }
    }
    return response.body;
  }
  return {
    // Operation requests.
    updatePresence,
    watchPresence
  };
}

/***/ }),

/***/ 55689:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.linkAuthorization = linkAuthorization;
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * "Authorization" issues are REST errors caused by invalid user credentials.
 *    These are issues that should be solvable by an end-user updating/fixing
 *    the credentials that they have provided.
 */

/**
 * Function that checks a REST response action for Link authorization issues.
 * @param  {Object} response A REST response object.
 * @return {BasicError|undefined}
 */
function linkAuthorization(response) {
  if (!response.error) {
    return;
  }

  /*
   * A SPiDR REST request will return
   *  - '403 Forbidden', with body 'statusCode: 4' for bad password,
   *  - '403 Forbidden', with html body (which is thrown away) for bad username.
   *
   * The SPiDR REST API document (v4.7, May 2019) says it will return '403 Forbidden'
   *    with other statusCodes for numerous untestable scenarios. Some of these are
   *    for credential/auth issues, others are for unrelated issues.
   * Authorization related:
   *    - 27 (generic auth failure), 61 (credentials issue), 65 (token expired)
   * Unrelated:
   *    - 29 (device not authorized), 35 (service not enabled), 37 (invalid value),
   *      45 (invalid app_name), 46 (invalid CallMe token), 62 (account is disabled),
   *      63 (account is locked), 64 (invalid CallMe realm)
   */
  // Status codes considered to be "auth issues".
  const authIssues = [4, 27, 61, 65];
  const statusCode = getStatusCode(response);

  /*
   * A case where Link REST request will return '401 Unauthorized'
   */
  if (response.result.code === 401) {
    return new _errors.default({
      code: _errors.authCodes.INVALID_CREDENTIALS,
      message: 'Authorization failed with server. Please check credentials.'
    });
  }

  /*
   * Define a Link authorization issue to be:
   *  - a '403 Forbidden', with no body or with a specific statusCode.
   */
  if (response.result.code === 403 && (response.body === undefined || authIssues.includes(statusCode))) {
    let message = 'Authorization failed with server. Please check credentials.';
    if (statusCode) {
      message += ` Status code: ${statusCode}`;
    }
    return new _errors.default({
      code: _errors.authCodes.INVALID_CREDENTIALS,
      message: message
    });
  }
}

/**
 * Helper function for parsing a statusCode from a SPiDR REST response body.
 * @param  {Object} response
 * @return {number|undefined}
 */
function getStatusCode(response) {
  let statusCode;
  /*
   * Parse the statusCode out from the body.
   */
  if (response.body) {
    if (response.body.statusCode) {
      // In some cases (eg. KAA-1937), the statusCode is at the top-level of the body.
      statusCode = response.body.statusCode;
    } else {
      // In most cases, the statusCode is inside another object. The name of this
      //    parameter is different depending which service the request was for,
      //    so search for it.
      Object.values(response.body).forEach(value => {
        if (value.statusCode) {
          statusCode = value.statusCode;
        }
      });
    }
  }
  return statusCode;
}

/***/ }),

/***/ 2853:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseOptions = exports.defaultOptions = void 0;
var _validation = __webpack_require__(42850);
// Parse and/or Validate

/**
 * Configurable properties 'published' by this "Request" plugin.
 * NOTE: Do NOT expose the config properties (related to this plugin) to the public API documentation.
 *
 * @property {boolean} [injectAgentVersionHeader=true] Option to automatically inject an agent version header to every REST request.
 *            This header is used to help with diagnostics and analytics in a completely anonymous fashion.
 *
 * @property {string} [customAgentVersionHeaderSuffix=''] Additional custom information that can be appended to the agent version header's value.
 *           This additional suffix value is only used when injectAgentVersionHeader property is enabled.
 */
const defaultOptions = exports.defaultOptions = {
  injectAgentVersionHeader: true,
  customAgentVersionHeaderSuffix: ''
};
const v8nValidation = _validation.validation.schema({
  injectAgentVersionHeader: _validation.validation.boolean()
});
const parseOptions = exports.parseOptions = (0, _validation.parse)('request', v8nValidation);

/***/ }),

/***/ 38048:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.linkRequest = exports["default"] = void 0;
var _configs = __webpack_require__(2853);
var _requestModule = _interopRequireDefault(__webpack_require__(35669));
var _interface = _interopRequireDefault(__webpack_require__(65696));
var _actions = __webpack_require__(43424);
var _utils = __webpack_require__(25189);
// Request plugin.
// Other plugins.
// Utils.
/*
 * HTTP request plugin.
 *
 */
var _default = exports["default"] = pluginFactory();
/*
 * Platform-specific request plugins.
 *    Same base REST behaviour as the generic request plugin, with some extra
 *    handling of a response.
 */
const linkRequest = exports.linkRequest = pluginFactory('link');

/**
 * Factory function for creating a Request Plugin.
 *    Allows for specifying which platform the requests will be made to. This
 *    adds special handling of responses to check for special-case issues.
 * @param  {string} [platform] The platform this plugin is for.
 * @return {Function} The actual Plugin creator function.
 */
function pluginFactory(platform) {
  return function request() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let bottle = arguments.length > 1 ? arguments[1] : undefined;
    options = (0, _utils.mergeValues)(_configs.defaultOptions, options);
    (0, _configs.parseOptions)(options);

    /*
     * Init function to setup the Request plugin.
     * @param {Object} container The bottle container.
     */
    function initPlugin(container) {
      const {
        context
      } = container;

      // Send the provided options to the store.
      // This will be `state.config[name]`.
      context.dispatch((0, _actions.update)(options, _interface.default.name));
    }

    // Register the component factory functions to the bottle.
    bottle.factory('RequestAPI', _interface.default.createAPI);
    bottle.factory('sendRequest', _requestModule.default);
    bottle.defer(initPlugin);
    return {
      capabilities: platform ? ['restAuthorization'] : [],
      name: _interface.default.name
    };
  };
}

/***/ }),

/***/ 42165:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RESPONSE = exports.REQUEST = exports.AUTHORIZATION_ERROR = void 0;
const PREFIX = '@@KANDY/';
const REQUEST = exports.REQUEST = PREFIX + 'REQUEST';
const RESPONSE = exports.RESPONSE = PREFIX + 'RESPONSE';
const AUTHORIZATION_ERROR = exports.AUTHORIZATION_ERROR = PREFIX + 'AUTHORIZATION_ERROR';

/***/ }),

/***/ 55839:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.authorizationError = authorizationError;
exports.request = request;
exports.response = response;
var actionTypes = _interopRequireWildcard(__webpack_require__(42165));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var nextRequestId = 0;
function generateRequestId() {
  return nextRequestId++;
}

/**
 * Creates a request action.
 * @param {Object} options
 * @param {string} options.url The url for the request
 * @param {Object} [options.queryParams] Query parameters to be added to the url string
 * @param {string} [options.responseType] The data type assumed to be received in the response body
 * @param {Blob|BufferSource|FormData|UrlSearchParams|string} [options.body] The request body
 */
function request(options) {
  return {
    type: actionTypes.REQUEST,
    payload: options,
    meta: {
      requestId: generateRequestId()
    }
  };
}

/**
 * Creates a response action.
 */
function response(requestId, result) {
  let error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return {
    type: actionTypes.RESPONSE,
    payload: result,
    error,
    meta: {
      requestId: requestId
    }
  };
}

/**
 * Action to signify a REST request has encountered an authorization error.
 * @param  {BasicError} error
 * @return {Action}
 */
function authorizationError(error) {
  return {
    error: true,
    type: actionTypes.AUTHORIZATION_ERROR,
    payload: error
  };
}

/***/ }),

/***/ 6249:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _merge2 = _interopRequireDefault(__webpack_require__(9612));
var _utils = __webpack_require__(70720);
var _selectors = __webpack_require__(46942);
// Other plugins.

/**
 * Request API factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context - The factory context.
 * @return {Object} Request API.
 */
function createAPI(container) {
  const {
    logManager,
    context,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('REQUEST');
  const requestApi = {
    /**
     * The 'request' namespace (within the 'api' type) is used to make network requests to the server.
     *
     * @public
     * @namespace request
     */

    /**
     * Send a request to the underlying REST service with the appropriate configuration and authentication.
     * This is a wrapper on top of the browser's [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/fetch)
     * and behaves very similarly but using SDK configuration for the base URL and authentication as well
     * as SDK logging.
     *
     * @public
     * @memberof request
     * @method fetch
     * @param {string} resource The full path of the resource to fetch from the underlying service. This should include any REST version
     *                          or user information. This path will be appended to the base URL according to SDK configuration.
     * @param {RequestInit} init An object containing any custom settings that you want to apply to the request. See [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/fetch)
     *                           for a full description and defaults.
     * @return {Promise<Response>} A promise for a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object.
     * @example
     * // Send a REST request to the server
     * // Create a request options object following [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/fetch)
     * const requestOptions = {
     *   method: 'POST',
     *   body: JSON.stringify({
     *     test: 123
     *   })
     * }
     *
     * // Note that you will need to subscribe for the `custom` service in order to
     * // receive notifications from the `externalnotification` service.
     * const response = await client.request.fetch('/rest/version/1/user/xyz@test.com/externalnotification', requestOptions)
     */
    fetch: async function (resource) {
      let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      log.debug(API_LOG_TAG + 'fetch: ', resource);
      const state = context.getState();
      const platform = (0, _selectors.getPlatform)(state);
      const requestInfo = (0, _selectors.getRequestInfo)(state, platform);
      const options = requestInfo.requestOptions;
      requestInfo.requestOptions = (0, _merge2.default)(init, options);
      requestInfo.platform = platform;
      // Do request
      return await (0, _utils.fetchResource)(resource, requestInfo);
    }
  };
  return {
    request: requestApi
  };
}

/***/ }),

/***/ 10714:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.REQUEST_ERROR = void 0;
/**
 * An error occurred with server authorization.
 *
 * This event will be emitted anytime a REST request to the server is rejected
 *    due to an authorization issue. This may occur for invalid credentials or
 *    expired tokens, depending on which form of authentication the application
 *    has chosen to use.
 * @public
 * @memberof api
 * @requires restAuthorization
 * @event request:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 */
const REQUEST_ERROR = exports.REQUEST_ERROR = 'request:error';

/***/ }),

/***/ 65696:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _name = _interopRequireDefault(__webpack_require__(3205));
var _api = _interopRequireDefault(__webpack_require__(6249));
var _default = exports["default"] = {
  name: _name.default,
  createAPI: _api.default
};

/***/ }),

/***/ 3205:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
/**
 * This interface is for an request plugin.
 * @type {string}
 */
const name = 'requests';
var _default = exports["default"] = name;

/***/ }),

/***/ 50647:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.customAgentVersionHeaderSuffix = customAgentVersionHeaderSuffix;
exports.injectAgentVersionHeader = injectAgentVersionHeader;
/**
 * Retrieves the flag which specifies wether or not this SDK should use a custom header as part of any requests being sent to server.
 * This custom header refers to the current agent version,
 * but it may also contain additional custom information (see customAgentVersionHeaderSuffix).
 * @param {Object} state  The current Redux state object.
 * @return {boolean} True if custom header should be used, false otherwise.
 */
function injectAgentVersionHeader(state) {
  return state.config.requests.injectAgentVersionHeader;
}

/**
 * Retrieves a custom suffix value which specifies any extra information that can be appended to the custom header.
 * This custom header is sent by the SDK, as part of any requests being sent to server.
 * @param {Object} state  The current Redux state object.
 * @return {string} The suffix value.
 */
function customAgentVersionHeaderSuffix(state) {
  return state.config.requests.customAgentVersionHeaderSuffix;
}

/***/ }),

/***/ 87569:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = makeRequest;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(24923));
var _logs = __webpack_require__(43862);
var _utils = __webpack_require__(25189);
const _excluded = ["url", "queryParams", "responseType"]; // Other plugins.
// Utils.
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * The possible response data types that can be handled.
 */
const responseTypes = Object.freeze({
  json: 'json',
  blob: 'blob',
  text: 'text',
  none: 'none'
});

/**
 * Make a request with the specified options. The options is very similar to the options passed to the GlobalFetch
 * method except that is also accepts the url as part of the options.
 * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Request
 *
 * Currently this processes the request and assumes nothing about the response.
 * - If the response has a body, it will always be parsed and forwarded on.
 *      - If no body, then use an empty object in its place.
 * - If the fetch succeeded, the response "results" will always be forwarded on,
 *      even if the response is outside of the 200-299 range.
 *      - Because some backends provide more detailed error info as part of the body,
 *        rather than just the response status.
 * - If the fetch fails, return with the fetch failure information.
 *
 * @param {Object} options Options to make the request with.
 * @param {string} options.url The URL to make the request to.
 * @param {Object} [options.queryParams] The parameters to be added to the query string
 * @param {string} [options.responseType='json] The expected data type of the response body.
 * @param {Blob|BufferSource|FormData|UrlSearchParams|string} [options.body] The request body
 * @return {Promise} A promise that resolves with a custom response object.
 */
async function makeRequest(options, requestId) {
  const log = _logs.logManager.getLogger('REQUEST', requestId);

  /*
   * Check the provided options to ensure they are valid before making the request.
   */
  const error = validateOptions(options);
  if (error) {
    log.info(error.result.message);
    return error;
  }

  // Extract and remove the non-fetch API properties.
  const {
      url,
      queryParams,
      responseType = 'json'
    } = options,
    fetchOptions = (0, _objectWithoutProperties2.default)(options, _excluded);

  // Grab that last part of the URL (after the last /) to be logged.
  let endUrl = url.match(/([^/]*)$/)[0];
  // Cut it short if it's too long, since this should be human-readable.
  endUrl = endUrl.length > 15 ? endUrl.substring(0, 15) + '...' : endUrl;
  log.info(`Making ${fetchOptions.method} ${endUrl} request.`);
  let response;
  /*
   * Make the request. Scenarios to check for:
   *  1. Fetch failed.
   *  2. Fetch succeeded and is ok, with no response body.
   *  3. Fetch succeeded and is ok, with expected response type.
   *  4. Fetch succeeded and is ok, with unexpected response type.
   *  5. Fetch succeeded but is not ok.
   */
  try {
    response = await fetch(url + (0, _utils.toQueryString)(queryParams), fetchOptions);
  } catch (err) {
    // Scenario 1: Fetch failed.
    log.info(`Failed to make request, caused by ${err.message}`);
    return makeResponse({
      error: 'FETCH'
    }, {
      code: err.name,
      message: err.message
    });
  }

  // Basic information for the request result.
  const result = {
    ok: response.ok,
    code: response.status,
    message: response.statusText
  };
  if (response.ok) {
    if (response.status === 204) {
      /*
       * A `204 (No Content)` response indicates a success, but with no content to return.
       * Avoid parsing the response because there isn't one.
       */
      // Scenario 2: Response is ok, with no response body.
      log.info(`Finished request with successful response (status ${response.status}).`);
      return makeResponse(undefined, _objectSpread({
        body: {}
      }, result));
    }
    const data = await parseBody(response, responseType);
    if (data instanceof Error) {
      // Scenario 4: Response is ok, with an unexpected type.
      log.error(`Failed to parse with response type: ${responseType}. Error: ${data}`);
      return makeResponse({
        error: 'REQUEST'
      }, {
        code: data.name,
        message: data.message
      });
    } else {
      // Scenario 3: Response is ok, with an expected type.
      log.info(`Finished request with successful response (status ${response.status}).`);
      return makeResponse(undefined, _objectSpread({
        body: data
      }, result));
    }
  } else {
    // Scenario 5: Response is not ok.
    let contentType;
    // Check the Content-Type of the response.
    try {
      contentType = await response.headers.get('content-type');
    } catch (err) {
      log.debug(`Failed to get content-type:${err.message}.`);
    }
    /*
     * Handle a SPiDR special-case error where the response body is a HTML page...
     * Throw away the body and simply report it as 'Forbidden'.
     */
    if (response.status === 403 && contentType.includes('html')) {
      return makeResponse({
        error: 'REQUEST'
      }, result);
    }

    /*
     * Try to parse the response as JSON, and if successful, include
     * it in the returned error. otherwise, provide an empty object instead.
     */
    let responseBody;
    try {
      responseBody = await response.json();
      if (response.status === 503) {
        let retryValue;
        if (responseBody && responseBody.subscribeResponse) {
          // Try to get the retry value from the body of the response.
          // If it is in the body, then its value is a number
          retryValue = responseBody.subscribeResponse.retryAfter;
        } else if (responseBody && responseBody.authorizationResponse) {
          // This is the case where request has been initiated as part of an anonymous call.
          retryValue = responseBody.authorizationResponse.retryAfter;
        }
        let retryAfter; // the final value to be used
        if (retryValue) {
          retryAfter = retryValue; // should already be in milli seconds
        } else {
          // Try to get the retry value from `Retry-After` Header of the response.
          // This is the case when 503 response comes from an HTTP reverse proxy/load balancer node.
          try {
            // If provided as part of 'Retry-After' Header, its value will always be provided as a string
            retryValue = await response.headers.get('retry-after');
          } catch (err) {
            log.debug(`Failed to get retry-after:${err.message}.`);
          }
          if (retryValue) {
            // We have a value (either from body or from header of that reply).
            if (retryValue.endsWith(' GMT')) {
              // It is provided as `HTTP-date` format,
              // according to Standards spec: https://www.rfc-editor.org/rfc/rfc9110.html#section-10.2.3
              // If so, convert it to `number` format.
              const futureDate = new Date(retryValue);
              retryAfter = futureDate.getTime() - Date.now(); // milliseconds
            } else {
              // it is provided in header as seconds
              retryAfter = retryValue * 1000; // automatic convertion from string to number, in milliseconds
            }
          }
        }

        // Ensure that no matter where it comes from, we always have the final value(s) saved in the parsed body,
        // as this is always used for later decision making.
        // NOTE: No guarantees on the existence of retryAfter,
        //       as HTTP reverse proxy/load balancer does not guarantee to provide one
        //       (see `SPiDR REST Overload Controls - Functional Description` spec).
        if (retryAfter && retryAfter > 0) {
          // retry value is available & valid.
          // return the same body for both link & anonymous rquest.
          responseBody = {
            subscribeResponse: {
              statusCode: 503,
              retryAfter
            }
          };
        } else {
          // The spec says that if we got a 503 but with no retryAfter available, then treat the reply as 500 error.
          responseBody = {
            subscribeResponse: {
              statusCode: 500
            }
          };
        }
      }
    } catch (err) {
      responseBody = {};
      log.debug('Failed to parse response:', err.message);
    }
    return makeResponse({
      error: 'REQUEST'
    }, _objectSpread({
      body: responseBody
    }, result));
  }
}

/**
 * Checks for the provided options to be considered valid before making the
 *    request. If an option is invalid, an error response will be returned.
 * @param  {Object} options
 * @return {Response|undefined}
 */
function validateOptions(options) {
  const {
    url,
    responseType
  } = options;
  if (!url || typeof url !== 'string') {
    const invalidUrlMessage = `Invalid request url; expected url of type string but received ${url} instead`;
    return makeResponse({
      error: 'REQUEST_URL',
      message: invalidUrlMessage
    });
  }

  /*
   * If an expected responseType was provided, it should be one of the types
   *    that we know how to handle.
   */
  if (responseType && !responseTypes.hasOwnProperty(responseType)) {
    const invalidResponseType = 'Cannot make request; responseType value was invalid.';
    return makeResponse({
      error: 'RESPONSE_TYPE',
      message: invalidResponseType
    });
  }
}

/**
 * Get the body from the response depending on our expected content-type.
 * @return {Body|Error}
 */
async function parseBody(response, expectedType) {
  /**
   * The SDK should only be parsing the responses as is expected without checking the content type of the response.
   * This is deterministic depending on the `responseType` passed in to the request through the request options.
   */
  let responseBody = {};
  try {
    switch (expectedType) {
      case responseTypes.json:
        responseBody = await response.json();
        break;
      case responseTypes.blob:
        responseBody = await response.blob();
        break;
      case responseTypes.text:
        responseBody = await response.text();
        break;
      case responseTypes.none:
        // Do not parse the response
        break;
      default:
        // This should be unreachable code.
        throw Error('Assertion failed');
    }
  } catch (e) {
    // Note: We get here if we have a successful request but the server sent us unexpected data.
    // We need to treat this as an error case because we can no longer enforce a contract with the
    // code making the request.
    //
    // If the code gets here the issue is either with the server not sending us expected data, or with
    // the calling code that told us to expect the wrong data.

    return e;
  }
  return responseBody;
}

/**
 * Make a response object that will  have the same structure every time
 * regardless of the server response.
 *
 * @param {Object} apiResponse API related response data
 * @param {string} apiResponse.error This should be a string indicating an error if the request fails due to an invalid request.
 * @param {string} apiResponse.message This should be a string with more details about the api error.
 * @param {Object} httpResponse This will contain the response data from the server.
 * @param {Object} httpResponse.body The response body data from the server.
 * @param {boolean} httpResponse.ok Indicates if the request was considered a success by the server.
 * @param {Object} httpResponse.code The HTTP status code for the request.
 * @param {Object} httpResponse.message A message describing the server response.
 * @return {Object} An object containing API and/or server response details.
 */
function makeResponse() {
  let apiResponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let httpResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    body: httpResponse.body,
    error: apiResponse.error,
    result: {
      ok: Boolean(httpResponse.ok),
      code: httpResponse.code,
      message: apiResponse.message || httpResponse.message
    }
  };
}

/***/ }),

/***/ 35669:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequestHelper;
exports.logFakeAction = logFakeAction;
var _omit2 = _interopRequireDefault(__webpack_require__(81053));
var actions = _interopRequireWildcard(__webpack_require__(55839));
var eventTypes = _interopRequireWildcard(__webpack_require__(10714));
var authorizations = _interopRequireWildcard(__webpack_require__(55689));
var _makeRequest = _interopRequireDefault(__webpack_require__(87569));
var _utils = __webpack_require__(70720);
var _selectors = __webpack_require__(46942);
var _version = __webpack_require__(10825);
var _utils2 = __webpack_require__(25189);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Request plugin.

// Other plugins.

// Helpers.

// Libraries.

/**
 * Request helper factory function.
 * @method createRequestHelper
 * @param  {Object} container The bottle container.
 * @return {Function} The request function.
 */
function createRequestHelper(container) {
  const {
    emitEvent,
    context,
    logManager
  } = container;
  return async function doRequest(options) {
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const platform = (0, _selectors.getPlatform)(context.getState());

    // Merge the default request options from state into the provided options.
    //    The provided options take priority.
    const defaultOptions = requestInfo.requestOptions;
    options = (0, _utils2.mergeValues)(defaultOptions, options);
    const action = actions.request(options);
    // Dispatch a request action for backwards compatability
    context.dispatch(action);
    const log = logManager.getLogger('REQUEST', action.meta.requestId);
    const logOptions = (0, _utils.sanitizeRequest)(action.payload);
    log.debug(`Making REST request ${action.meta.requestId}.`, logOptions);

    // Make the request based on the action
    const result = await (0, _makeRequest.default)(action.payload, action.meta.requestId);
    log.debug(`Received REST response ${action.meta.requestId}.`, result);

    // If the platform was specified and this is not a 3.X build, perform the
    //    authorization check side-effect.
    if (platform && !(0, _version.getVersion)().startsWith('3')) {
      // Call the 'authorization' function specific for this platform.
      //    They're all named ${platform}Authorization so it's easier to call them.
      const error = authorizations[`${platform}Authorization`](result);
      if (error) {
        emitEvent(eventTypes.REQUEST_ERROR, {
          error
        });
      }
    }

    // Dispatch a response action for backwards compatability
    context.dispatch(actions.response(action.meta.requestId, result, !!result.error));
    return result;
  };
}

/**
 * Workaround for logging an action without dispatching it.
 *
 * The Log plugin will automatically log any action that is dispatched, but in
 *    some cases we don't want to dispatch an action anymore. For backwards-
 *    compatibility, the action still needs to be logged. This function logs an
 *    action as if it were dispatched.
 *
 * Caveat: The action shouldn't update state (since then it _should_ be dispatched),
 *    since the prev/next state logs would then be incorrect.
 */
function logFakeAction(_ref, action) {
  let {
    getState,
    container
  } = _ref;
  const log = container.logManager.getLogger('ACTION');
  const logState = getState().config.logs;
  const {
    logActions,
    logLevel
  } = logState;

  // If logActions are falsy, don't log the action.
  if (!logActions) {
    return;
  }

  /*
   * Action log options:
   *  - collapsed: Whether to use group or groupCollapsed.
   *  - actionOnly: Whether to log the 'prev state' and 'next state'.
   *  - exposePayloads: Whether to log the payloads or not.
   *  - logLevel: Whether to log any action/state details.
   */
  const {
    collapsed,
    actionOnly,
    exposePayloads
  } = logActions;
  const groupMethod = collapsed ? 'groupCollapsed' : 'group';
  const hidePayload = exposePayloads === false || action.meta && action.meta.isSensitive;
  const actionToLog = hidePayload ? (0, _omit2.default)('payload', action) : action;
  log[groupMethod](`action ${action.type} @ ${getTime()} (in 0.00 ms)`);
  if (logLevel === 'DEBUG') {
    if (actionOnly) {
      log.debug('action    ', actionToLog);
    } else {
      log.debug('prev state', getState());
      log.debug('action    ', actionToLog);
      // Assume the action does not update state, so use the same state value.
      log.debug('next state', getState());
    }
  }
  log.groupEnd();
}

/*
 * Helper function.
 * Get a timestamp formatted in the specific way that redux-logger uses for actions.
 * Code copy/pasted from redux-logger: https://github.com/LogRocket/redux-logger/blob/master/src/helpers.js
 */
function getTime() {
  const time = new Date();
  const repeat = (str, times) => new Array(times + 1).join(str);
  const pad = (num, maxLength) => repeat('0', maxLength - num.toString().length) + num;
  return `${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`;
}

/***/ }),

/***/ 70720:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fetchResource = fetchResource;
exports.getCommonOptions = getCommonOptions;
exports.getCpaasAgentHeaderValue = getCpaasAgentHeaderValue;
exports.sanitizeRequest = sanitizeRequest;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _selectors = __webpack_require__(50647);
var _selectors2 = __webpack_require__(46942);
var _logs = __webpack_require__(43862);
var _version = __webpack_require__(10825);
var _utils = __webpack_require__(25189);
var _effects = __webpack_require__(27422);
// Request plugin.

// Other plugins.

// Utils.

// Libraries.

const log = _logs.logManager.getLogger('REQUEST');

/**
 * Helper function to compile the common headers/options for a REST request.
 * @method getCommonOptions
 * @param  {string} url The URL to be used for the request.
 * @return {Object}
 */
function* getCommonOptions(url) {
  const platform = yield (0, _effects.select)(_selectors2.getPlatform);
  const requestInfo = yield (0, _effects.select)(_selectors2.getRequestInfo, platform);
  const useCustomHeader = yield (0, _effects.select)(_selectors.injectAgentVersionHeader);
  const customSuffix = yield (0, _effects.select)(_selectors.customAgentVersionHeaderSuffix);

  // Start off with whatever options were set by the Auth plugin.
  //    The authentication headers / token will be there if they are set.
  const options = requestInfo.requestOptions || {};

  // Ensure there is a headers object.
  options.headers = options.headers || {};

  // Add the common headers.
  options.headers['Content-Type'] = 'application/json';
  options.headers.Accept = 'application/json';

  // If enabled, add the 'Agent Version' header to the options.
  if (useCustomHeader) {
    let headerValue = getCpaasAgentHeaderValue(platform, url);
    if (customSuffix) {
      // If a custom suffix value was provided as well, then use it.
      headerValue += ' ' + customSuffix;
    }
    options.headers['X-Cpaas-Agent'] = headerValue;
  }
  return options;
}

/**
 * Determine and return the current SDK platform and version string to be used
 * with the x-Cpaas-Agent network request header field.
 * @method getCpaasAgentHeaderValue
 * @param  {string}  platform Which platform is currently being used.
 * @param  {string}  url The url for the request being made.
 * @return {string}  A string representation of the platform and version the SDK is using.
 */
function getCpaasAgentHeaderValue(platform, url) {
  // Assume request is for Link platform, by default.
  let headerValue = `link-js-sdk/${(0, _version.getVersion)()}`;

  // Check if request is for callMe service.
  // (callMe service uses Link platform for call requests)
  if (url && url.includes('/anonymous/')) {
    headerValue = `callme-js-sdk/${(0, _version.getVersion)()}`;
  }
  return headerValue;
}

/**
 * Prepares a REST request options object for logging by removing passwords
 * and parses the body string into an object that can be interacted with in console.
 * @method sanitizeRequest
 * @param {Object} options An object containing any custom settings that you want to
 *                         apply to the request. See [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/fetch)
 *                         or a full description and defaults.
 * @return {Object} A sanitized REST request options object that can be safely logged.
 */
function sanitizeRequest(options) {
  const logOptions = (0, _cloneDeep2.default)(options);
  // When logging the Auth header, cut it off so that we can see the type of
  //    token but not the token itself. Depending on the type, it can contain
  //    a password.
  const authHeader = logOptions.headers && logOptions.headers.Authorization;
  if (authHeader) {
    logOptions.headers.Authorization = authHeader.substring(0, 6) + '...';
  }

  // If the rest request body is a string, try to parse it as JSON and store
  // it as an object so it can be interacted with in the console
  const body = logOptions.body;
  if (body) {
    try {
      logOptions.body = JSON.parse(body);
    } catch (e) {
      // Noop, leave the body in whatever format it was in.
    }
  }
  return logOptions;
}

/**
 * Send a REST request to Link with the appropriate configuration.
 * @method fetchResource
 * @param {string} resource The path of the resource to fetch from the underlying service. This path will be appended
 *                          to the base URL according to SDK configuration.
 * @param {Object} requestInfo An object containing any custom settings that you want to apply to the request. See [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/fetch)
 *                             for a full description and defaults.
 * @return {Promise<Response>} A promise for a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object.
 */
async function fetchResource(resource, requestInfo, module) {
  const {
    requestOptions
  } = requestInfo;

  // If the app doesn't prepend the '/' we should add it.
  if (resource.charAt() !== '/') {
    resource = `/${resource}`;
  }
  const url = `${requestInfo.baseURL}${resource}`;
  const logOptions = sanitizeRequest(requestOptions);
  log.debug('Making REST request', logOptions);
  const queryParams = requestInfo.requestOptions.queryParams || {};
  let queryString = (0, _utils.toQueryString)(queryParams);
  // Check resource passed in for any existing query params
  if (resource.includes('?')) {
    queryString = queryString.replace('?', '&');
  }
  const response = await fetch(url + queryString, requestOptions);
  log.debug('Received REST response', response);
  return response;
}

/***/ }),

/***/ 26991:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = sipEvents;
var _interface = __webpack_require__(55854);
var _api = _interopRequireDefault(__webpack_require__(8931));
var _operations = _interopRequireDefault(__webpack_require__(15697));
var _requests = _interopRequireDefault(__webpack_require__(24268));
var _intervals = _interopRequireDefault(__webpack_require__(30091));
var _actionTypes = __webpack_require__(9148);
// Sip Events plugin.

// Other plugins.

/**
 * Sip Events Plugin Factory.
 * @method sipEvents
 * @return {Object} Sip Events plugin.
 */
function sipEvents() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Register the component factory functions to the bottle.
  bottle.factory('SipEventsAPI', _api.default);
  bottle.factory('SipEventsOperations', _operations.default);
  bottle.factory('SipEventsRequests', _requests.default);
  bottle.factory('SipEventsIntervals', _intervals.default);

  /*
   * After the SDK has been initialized, start listening for SIP Event
   *    notifications. Route them to the `receiveEvent` operation to be handled.
   */
  bottle.defer(container => {
    // Take notification actions that MAY be for sip events.
    function receiveEventNotifyPattern(action) {
      return action.type === _actionTypes.NOTIFICATION_RECEIVED && action.payload.notificationMessage.hasOwnProperty('genericNotificationParams');
    }
    container.Notifications.takeEveryAction(receiveEventNotifyPattern, action => {
      container.SipEventsOperations.receiveEvent(action.payload.notificationMessage);
    });
  });
  const capabilities = ['sipEvents'];
  return {
    capabilities,
    name: _interface.name,
    reducer: _interface.reducer
  };
}

/***/ }),

/***/ 98144:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SIP_EVENT_UPDATE_FINISH = exports.SIP_EVENT_UPDATE = exports.SIP_EVENT_UNSUBSCRIBE_FINISH = exports.SIP_EVENT_UNSUBSCRIBE = exports.SIP_EVENT_SUBSCRIBE_FINISH = exports.SIP_EVENT_SUBSCRIBE = exports.SIP_EVENT_RECEIVED = void 0;
const PREFIX = '@@KANDY/';
const SIP_EVENT_SUBSCRIBE = exports.SIP_EVENT_SUBSCRIBE = PREFIX + 'SIP_EVENT_SUBSCRIBE';
const SIP_EVENT_SUBSCRIBE_FINISH = exports.SIP_EVENT_SUBSCRIBE_FINISH = PREFIX + 'SIP_EVENT_SUBSCRIBE_FINISH';
const SIP_EVENT_UPDATE = exports.SIP_EVENT_UPDATE = PREFIX + 'SIP_EVENT_UPDATE';
const SIP_EVENT_UPDATE_FINISH = exports.SIP_EVENT_UPDATE_FINISH = PREFIX + 'SIP_EVENT_UPDATE_FINISH';
const SIP_EVENT_UNSUBSCRIBE = exports.SIP_EVENT_UNSUBSCRIBE = PREFIX + 'SIP_EVENT_UNSUBSCRIBE';
const SIP_EVENT_UNSUBSCRIBE_FINISH = exports.SIP_EVENT_UNSUBSCRIBE_FINISH = PREFIX + 'SIP_EVENT_UNSUBSCRIBE_FINISH';
const SIP_EVENT_RECEIVED = exports.SIP_EVENT_RECEIVED = PREFIX + 'SIP_EVENT_RECEIVED';

/***/ }),

/***/ 15705:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sipEventReceived = sipEventReceived;
exports.sipEventSubscribe = sipEventSubscribe;
exports.sipEventSubscribeFinish = sipEventSubscribeFinish;
exports.sipEventUnsubscribe = sipEventUnsubscribe;
exports.sipEventUnsubscribeFinish = sipEventUnsubscribeFinish;
exports.sipEventUpdate = sipEventUpdate;
exports.sipEventUpdateFinish = sipEventUpdateFinish;
var actionTypes = _interopRequireWildcard(__webpack_require__(98144));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Helper function for formatting _FINISH actions.
function finishActionHelper(actionType, _ref) {
  let {
    response,
    error,
    eventType
  } = _ref;
  return {
    type: actionType,
    error: !!error,
    payload: error ? {
      error,
      eventType
    } : response
  };
}

/**
 * Represents a request to subscribe to a specific sip event.
 * @method sipEventSubscribe
 * @param  {string} eventType
 * @param  {Array}  subscribeUserList
 * @param  {string} clientCorrelator
 * @param  {Object} customParameters
 * @returns {Object} A flux standard action.
 */
function sipEventSubscribe(eventType, subscribeUserList, clientCorrelator, customParameters) {
  return {
    type: actionTypes.SIP_EVENT_SUBSCRIBE,
    payload: {
      eventType,
      subscribeUserList,
      clientCorrelator,
      customParameters
    }
  };
}

/**
 * Represents the response/error of a sip event subscription request.
 * @method sipEventSubscribeFinish
 * @param  {Object} $0
 * @param  {Object} $0.response Information about the subscription response.
 * @param  {BasicError} $0.error An error object, in the case of an issue.
 * @param  {string} $0.eventType Type type of sip event.
 * @returns {Object} A flux standard action.
 */
function sipEventSubscribeFinish(_ref2) {
  let {
    response,
    error,
    eventType
  } = _ref2;
  return finishActionHelper(actionTypes.SIP_EVENT_SUBSCRIBE_FINISH, {
    response,
    error,
    eventType
  });
}

/**
 * Represents a request to update a sip event subscription or resubscribe for it.
 * @method sipEventUpdate
 * @param  {string} eventType
 * @param  {Object} userLists
 * @param  {Object} customParameters
 * @returns {Object} A flux standard action.
 */
function sipEventUpdate(eventType) {
  let userLists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let customParameters = arguments.length > 2 ? arguments[2] : undefined;
  let isResub = arguments.length > 3 ? arguments[3] : undefined;
  return {
    type: actionTypes.SIP_EVENT_UPDATE,
    payload: {
      eventType,
      subscribeUserList: userLists.subscribeUserList || [],
      unsubscribeUserList: userLists.unsubscribeUserList || [],
      customParameters
    },
    meta: {
      isResub
    }
  };
}

/**
 * Represents the response/error of a sip event update/resub request.
 * @method sipEventUpdateFinish
 * @param  {Object} $0
 * @param  {Object} $0.response Information about the update/resub response.
 * @param  {BasicError} $0.error An error object, in the case of an issue.
 * @param  {string} $0.eventType Type type of sip event.
 * @returns {Object} A flux standard action.
 */
function sipEventUpdateFinish(_ref3) {
  let {
    response,
    error,
    eventType
  } = _ref3;
  return finishActionHelper(actionTypes.SIP_EVENT_UPDATE_FINISH, {
    response,
    error,
    eventType
  });
}

/**
 * Represents a request to unsubscribe from sip event subscriptions.
 * @method sipEventUnsubscribe
 * @param  {string} eventType The sip event subscription to unsubscribe from.
 * @returns {Object} A flux standard action.
 */
function sipEventUnsubscribe(eventType) {
  return {
    type: actionTypes.SIP_EVENT_UNSUBSCRIBE,
    payload: eventType
  };
}

/**
 * Represents the response/error of a sip event unsubscribe request.
 * @method sipEventUnsubscribeFinish
 * @param  {Object} $0
 * @param  {Object} $0.response Information about the unsubscribe response.
 * @param  {BasicError} $0.error An error object, in the case of an issue.
 * @param  {string} $0.eventType Type type of sip event.
 * @returns {Object} A flux standard action.
 */
function sipEventUnsubscribeFinish(_ref4) {
  let {
    response,
    error,
    eventType
  } = _ref4;
  return finishActionHelper(actionTypes.SIP_EVENT_UNSUBSCRIBE_FINISH, {
    response,
    error,
    eventType
  });
}

/**
 * Represents that a sip event notification has been received.
 * @method sipEventReceived
 * @param  {Object} sipEvent
 * @param {string} callId
 * @returns {Object} A flux standard action.
 */
function sipEventReceived(sipEvent, callId) {
  return {
    type: actionTypes.SIP_EVENT_RECEIVED,
    payload: {
      event: sipEvent,
      eventType: sipEvent.eventType,
      callId
    }
  };
}

/***/ }),

/***/ 8931:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _selectors = __webpack_require__(83238);
var _eventTypes = __webpack_require__(81898);
/* eslint-disable no-warning-comments */
/**
 *  The SIP Events feature allows an application to communicate with a SIP network integrated
 *      with their WebRTC Gateway instance. The SIP network may generate custom events intended
 *      for an application, which can be handled with the SDK's `sip` namespace.
 *
 * Usage of SIP Events is dependent on your WebRTC Gateway instance. The types of SIP Events can
 *    be different based on configurations and components, often being part of a custom
 *    solution. As such, the SIP Events feature is presented in a generic manner to be
 *    flexible for any possible events.
 *
 * An example of a common SIP event is "SIP presence". When a user is connected to a SIP phone,
 *    the network may generate "phone presence" events when the user starts and ends a call
 *    (eg. 'On Call', 'Available'). Applications can subscribe to receive these events for
 *    specific users.
 *
 * A SIP event may either be solicited or unsolicited. Solicited events, such as the "presence"
 *    example above, requires the application to subscribe for the event. See the
 *    {@link sip.subscribe sip.subscribe API} for more information about solicited events.
 *    Unsolicited events have no prerequisites for being received.
 *
 * @public
 * @requires sipEvents
 * @namespace sip
 */
/* eslint-enable no-warning-comments */

/**
 * Sip Events API factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @return {Object} Available public APIs for sipEvents.
 */
function createAPI(container) {
  const {
    context,
    emitEvent,
    SipEventsOperations: operations,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('SIPEVENTS');
  const sipEventsApi = {
    /**
     * Creates a subscription for a SIP event.
     *
     * A subscription is required to receive SIP notifications for solicited events. Before
     *    creating a SIP subscription, the service for the event type must have been
     *    provisioned as part of the user subscription using the {@link services.subscribe}
     *    API.
     *
     * Only one SIP subscription per event type can exist at a time. A subscription can
     *    watch for events from multiple users at once. Users can be added to or removed
     *    from a subscription using the {@link sip.update sip.update} API at any time.
     *
     * The SDK will emit a {@link sip.event:sip:subscriptionChange sip:subscriptionChange}
     *    event when the operations completes. The {@link sip.getDetails} API can be used
     *    to retrieve the current information about a subscription.
     *
     * The SDK will emit a {@link sip.event:sip:eventsChange sip:eventsChange} event when
     *    a SIP event is received.
     * @public
     * @static
     * @method subscribe
     * @requires sipEvents
     * @memberof sip
     * @param  {string} eventType The name of the SIP event.
     * @param  {Array<string>} subscribeUserList The list of users to receive events about.
     * @param  {string} clientCorrelator Unique identifier for a client device.
     * @param  {Array<call.CustomParameter>} [customParameters] Custom SIP header parameters for the SIP backend.
     * @example
     * // Provision the service for the specific SIP event during user subscription.
     * //   This is required before a SIP subscription for the event can be created.
     * const services = ['call', 'event:presence', ...]
     * client.services.subscribe(services)
     *
     * // Subscribe to receive SIP presence events from two users.
     * client.sip.subscribe('event:presence', ['userOne@example.com', 'userTwo@example.com'], 'clientId123')
     *
     * // Subscribe for SIP events with a custom parameter.
     * const customParameters = [{
     *    name: 'X-nt-GUID',
     *    value: 'GUID123abc'
     * }]
     * client.sip.subscribe('event:presence', subscribeUserList, 'clientId123', customParameters)
     */
    async subscribe(eventType, subscribeUserList, clientCorrelator) {
      let customParameters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      log.debug(API_LOG_TAG + 'sip.subscribe: ', eventType, subscribeUserList, clientCorrelator, customParameters);
      try {
        await operations.subscribe(eventType, subscribeUserList, clientCorrelator, customParameters);
      } catch (error) {
        emitEvent(_eventTypes.EVENT_ERROR, {
          error
        });
        return;
      }
      emitEvent(_eventTypes.EVENT_SUBSCRIPTION_CHANGED, {
        eventType,
        change: 'newSubscription',
        subscribedUsers: subscribeUserList
      });
    },
    /**
     * Updates an existing SIP event subscription.
     *
     * Allows for adding or removing users from the subscription, and for changing the
     *    custom parameters of the subscription.
     *
     * The SDK will emit a {@link sip.event:sip:subscriptionChange sip:subscriptionChange}
     *    event when the operations completes. The {@link sip.getDetails} API can be used
     *    to retrieve the current information about a subscription.
     * @public
     * @static
     * @method update
     * @requires sipEvents
     * @memberof sip
     * @param  {string} eventType The name of the SIP event.
     * @param  {Object} userLists
     * @param  {Array<string>}  userLists.subscribeUserList List of users to add to the subscription.
     * @param  {Array<string>}  userLists.unsubscribeUserList List of users to remove from the subscription. If all users are removed, the event subscription will be deleted.
     * @param  {Array<call.CustomParameter>} [customParameters] Custom SIP header parameters for the SIP backend.
     * @example
     * // Add a user to an existing subscription.
     * const userLists = {
     *    subscribedUserList: ['userThree@example.com']
     * }
     * client.sip.update('event:presence', userLists)
     *
     * // Simultaneously add and remove users from the subscription.
     * const userLists = {
     *    subscribedUserList: ['userThree@example.com'],
     *    unsubscribeUserList: ['userOne@example.com']
     * }
     * client.sip.update('event:presence', userLists)
     */
    async update(eventType, userLists) {
      let customParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      log.debug(API_LOG_TAG + 'sip.update: ', eventType, userLists, customParameters);
      try {
        await operations.update(eventType, userLists, customParameters);
      } catch (error) {
        emitEvent(_eventTypes.EVENT_ERROR, {
          error
        });
        return;
      }
      emitEvent(_eventTypes.EVENT_SUBSCRIPTION_CHANGED, {
        eventType,
        change: 'updateSubscription',
        subscribeUserList: userLists.subscribeUserList || [],
        unsubscribeUserList: userLists.unsubscribeUserList || []
      });
    },
    /**
     * Deletes an existing SIP event subscription.
     *
     * The SDK will emit a {@link sip.event:sip:subscriptionChange sip:subscriptionChange}
     *    event when the operations completes.
     *
     * Subscription details will no longer be available using the {@link sip.getDetails}
     *    API after it has been unsubscribed from.
     * @public
     * @static
     * @method unsubscribe
     * @requires sipEvents
     * @memberof sip
     * @param  {string} eventType The name of the SIP event.
     * @example
     * // Delete a SIP subscription.
     * client.sip.unsubscribe('event:presence')
     */
    async unsubscribe(eventType) {
      log.debug(API_LOG_TAG + 'sip.unsubscribe: ', eventType);
      try {
        await operations.unsubscribe(eventType);
      } catch (error) {
        emitEvent(_eventTypes.EVENT_ERROR, {
          error
        });
        return;
      }
      emitEvent(_eventTypes.EVENT_SUBSCRIPTION_CHANGED, {
        eventType,
        change: 'unsubscribe'
      });
    },
    /**
     * Retrieve information about a SIP event subscription.
     *
     * The SDK will track which users are included as part of the subscription and
     *    previous notifications received. Each subscription will include a unique ID.
     * @public
     * @static
     * @method getDetails
     * @requires sipEvents
     * @memberof sip
     * @param  {string} [eventType] The name of a SIP event. If not provided, will retrieve
     *    information for all SIP subscriptions.
     * @return {Object} SIP subscription information. If `eventType` was not provided, will
     *    return an object namespaced by event types.
     * @example
     * // Retrieve information about a single SIP subscription.
     * const { subscribedUsers, notifications } = client.sip.getDetails('event:presence')
     *
     * // Retrieve information about all current SIP subscriptions.
     * const subscriptions = client.sip.getDetails()
     * const { subscribedUsers, notifications } = subscriptions['event:presence']
     */
    getDetails(eventType) {
      const {
        getState
      } = context;
      log.debug(API_LOG_TAG + 'sip.getDetails: ', eventType);
      return (0, _selectors.getSipEventInfo)(getState(), eventType);
    }
  };

  // Namespace the API.
  return {
    sip: sipEventsApi
  };
}

/***/ }),

/***/ 81898:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.EVENT_SUBSCRIPTION_CHANGED = exports.EVENT_RECEIVED = exports.EVENT_ERROR = void 0;
/**
 * A change has occurred to a SIP subscription.
 *
 * This event can be emitted when a new SIP subscription is created ({@link sip.subscribe}
 *    API), an existing subscription is updated ({@link sip.update} API), or has been
 *    deleted ({@link sip.unsubscribe} API). The `change` parameter on the event indicates
 *    which scenario caused the event.
 *
 * When users are added or removed from a subscription through a new subscription or an update,
 *    the `subscribedUsers` and `unsubscribedUsers` parameters will indicate the users added
 *    and removed, respectively.
 *
 * The {@link sip.getDetails} API can be used to retrieve the current information about
 *    a subscription.
 *
 * @public
 * @requires sipEvents
 * @memberof sip
 * @event sip:subscriptionChange
 * @param {Object} params
 * @param {string} params.eventType The name of the SIP event.
 * @param {string} params.change The change operation that triggered the event.
 * @param {Array<string>} [params.subscribedUsers] List of users added to the subscription
 *    as part of the change.
 * @param {Array<string>} [params.unsubscribedUsers] List of users removed from the
 *    subscription as part of the change.
 */
const EVENT_SUBSCRIPTION_CHANGED = exports.EVENT_SUBSCRIPTION_CHANGED = 'sip:subscriptionChange';

/**
 * An error has occurred during a SIP event operation.
 *
 * @public
 * @requires sipEvents
 * @memberof sip
 * @event sip:error
 * @param {Object} params
 * @param {api.BasicError} params.error The Basic error object.
 * @param {string} params.eventType The name of the SIP event.
 * @example
 * // Listen for the event being emitted.
 * client.on('sip:error', (params) => {
 *    // Handle the error based on the information.
 *    const { code, message } = params.error
 *    ...
 * })
 */
const EVENT_ERROR = exports.EVENT_ERROR = 'sip:error';

/**
 * A SIP event notification has been received.
 *
 * The `event` parameter is the full notification received from the network. The format
 *    of the notification is dependant on its event type. The SDK does not do any
 *    pre-processing of this data.
 * @public
 * @requires sipEvents
 * @memberof sip
 * @event sip:eventsChange
 * @param {Object} params Information about the notification.
 * @param {string} params.eventType The name of the SIP event.
 * @param {string} params.eventId A unique ID for the event notification.
 * @param {Object} params.event The full event object.
 * @param {Object} params.links
 * @param {string} [params.links.callId] The ID of the call this SIP event links to.
 * @example
 * // Listen for the event being emitted.
 * client.on('sip:eventsChange', (params) => {
 *    // Gather the SIP info specific to the event.
 *    const sipInfo = params.event.genericNotificationParams
 *
 *    // Handle the data based on the event type.
 *    if (params.eventType === 'event:presence') {
 *        const { data, from } = sipInfo
 *        ...
 *    }
 * })
 */
const EVENT_RECEIVED = exports.EVENT_RECEIVED = 'sip:eventsChange';

/***/ }),

/***/ 55854:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "api", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducer.default;
  }
}));
var _api = _interopRequireDefault(__webpack_require__(8931));
var _reducer = _interopRequireDefault(__webpack_require__(13902));
// Import the components of the interface.

const name = exports.name = 'sipEvents';

/***/ }),

/***/ 13902:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _without2 = _interopRequireDefault(__webpack_require__(43214));
var _union2 = _interopRequireDefault(__webpack_require__(38959));
var _omit2 = _interopRequireDefault(__webpack_require__(81053));
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var actionTypes = _interopRequireWildcard(__webpack_require__(98144));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// Libraries.

const reducers = {};
reducers[actionTypes.SIP_EVENT_SUBSCRIBE_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      // Add a new sip event section to state.
      [action.payload.eventType]: {
        sessionData: action.payload.sessionData,
        subscribedUsers: action.payload.subscribedUsers
      }
    });
  }
};
reducers[actionTypes.SIP_EVENT_UPDATE_FINISH] = {
  next(state, action) {
    let subscribedUsers = state[action.payload.eventType].subscribedUsers;
    // Add the new subscribed users.
    subscribedUsers = (0, _union2.default)(action.payload.subscribeUserList, subscribedUsers);
    // Remove the unsubscribed users.
    subscribedUsers = (0, _without2.default)(action.payload.unsubscribeUserList, subscribedUsers);

    // Update the subscribed users for the sip event section.
    if (subscribedUsers.length === 0) {
      // If there are no subscribed users for this session, the session is deleted.
      const newState = _objectSpread({}, state);
      delete newState[action.payload.eventType];
      return newState;
    } else {
      return _objectSpread(_objectSpread({}, state), {}, {
        [action.payload.eventType]: _objectSpread(_objectSpread({}, state[action.payload.eventType]), {}, {
          subscribedUsers
        })
      });
    }
  }
};
reducers[actionTypes.SIP_EVENT_UNSUBSCRIBE_FINISH] = {
  next(state, action) {
    // Remove the specified sip event section.
    return (0, _omit2.default)(action.payload.eventType, state);
  }
};
reducers[actionTypes.SIP_EVENT_RECEIVED] = function (state, action) {
  // Ensure everything is defined.
  const eventInfo = state[action.payload.eventType] || {};
  const notifications = eventInfo.notifications || [];
  // Concat the notification to the specified sip event section.
  return _objectSpread(_objectSpread({}, state), {}, {
    [action.payload.eventType]: _objectSpread(_objectSpread({}, state[action.payload.eventType]), {}, {
      notifications: (0, _concat2.default)(notifications, action.payload)
    })
  });
};
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 83238:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getSipEventInfo = getSipEventInfo;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
/**
 * Retrieves information about a sip event.
 * @method getSipEventInfo
 * @param  {string} eventType
 * @return {Object}
 */
function getSipEventInfo(state, eventType) {
  if (eventType) {
    return (0, _cloneDeep2.default)(state.sipEvents[eventType]);
  } else {
    return (0, _cloneDeep2.default)(state.sipEvents);
  }
}

/***/ }),

/***/ 30091:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createIntervals;
var _selectors = __webpack_require__(83238);
var _errors = __webpack_require__(83437);
// sipEvents plugin

// Other plugins

/**
 * sipEvents intervals factory function.
 * @method createIntervals
 * @param {Object} container The bottle container.
 * @return {Object} Available intervals for sipEvents
 */
function createIntervals(container) {
  const {
    context,
    logManager,
    createInterval
  } = container;
  const log = logManager.getLogger('SIPEVENTS');

  // Interval operations for sip event subscriptions
  const sipIntervals = {};

  /**
   * Check if a specific interval is currently running.
   * @method isRunning
   * @param {string} eventType The sip event type to check.
   * @return {boolean} The interval for this specific sip event type is running or not.
   */
  function isRunning(eventType) {
    if (!eventType || typeof eventType !== 'string') {
      throw new Error('Invalid eventType argument, eventType must be a string.');
    }
    return !!sipIntervals[eventType];
  }

  /**
   * Stop a specific interval.
   * @method stop
   * @param {string} eventType The sip event type to have it's interval stopped.
   */
  function stop(eventType) {
    if (sipIntervals[eventType]) {
      sipIntervals[eventType].stop();
      delete sipIntervals[eventType];
    }
  }

  /**
   * Start a new interval timer for resubscribing to sip events
   * @method startResubInterval
   * @param {string} eventType The sip event type to start an interval resubscription timer for.
   * @param {number} expires The time until this subscription will expire.
   */
  function startResubInterval(eventType, expires) {
    const {
      SipEventsOperations: operations
    } = container;
    const {
      getState
    } = context;
    if (isRunning(eventType)) {
      throw new Error(`There's already an interval running for ${eventType}.`);
    }
    if (typeof expires !== 'number') {
      throw new Error('The value passed for the expires argument must be a number.');
    }
    const resubDelay = expires * 1000 / 2;
    const update = () => {
      const eventInfo = (0, _selectors.getSipEventInfo)(getState(), eventType);
      if (eventInfo) {
        log.info(`Re-subscribing for sip ${eventType}.`);
        try {
          // Resub for eventType with empty user list, no custom params and isResub=true
          operations.update(eventType, {}, null, true);
        } catch (e) {
          if (e.code === _errors.sipEventCodes.NOT_SUBSCRIBED) {
            // No subscription for this eventType was found. We should stop trying to resubscribe. NOTE: the error has already
            // been dispatched by the sipEvents update operation.
            stop(eventType);
          }
        }
      }
    };
    sipIntervals[eventType] = createInterval(update, resubDelay);
    sipIntervals[eventType].start();
  }
  return {
    // Interval operations
    isRunning,
    stop,
    startResubInterval
  };
}

/***/ }),

/***/ 15697:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _includes2 = _interopRequireDefault(__webpack_require__(34803));
var actions = _interopRequireWildcard(__webpack_require__(15705));
var eventTypes = _interopRequireWildcard(__webpack_require__(81898));
var _selectors = __webpack_require__(83238);
var _selectors2 = __webpack_require__(48944);
var _selectors3 = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // sipEvents plugin
// Other plugins
/**
 * sipEvents Operations factory function.
 * @method createOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for sipEvents.
 */
function createOperations(container) {
  const {
    context,
    emitEvent,
    logManager,
    SipEventsRequests: requests,
    SipEventsIntervals: intervals
  } = container;
  const log = logManager.getLogger('SIPEVENTS');

  /**
   * Operation for subscribing to specified Sip Events.
   * @method sipEventSubscribe
   * @return {Object} Result of sipEvent subscription operation.
   */
  async function subscribe(eventType, subscribeUserList, clientCorrelator, customParameters) {
    const {
      dispatch,
      getState
    } = context;

    // Dispatch an sipEventSubscribe action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.sipEventSubscribe(eventType, subscribeUserList, clientCorrelator, customParameters));

    // TODO: Have the client correlator be provided as a config, not through the API.
    log.debug(`Subscribing for sip ${eventType}.`, clientCorrelator);

    // Determine if the user is subscribed to the specified sip event.
    const subscribedServices = (0, _selectors2.getSubscribedServices)(getState());
    const sipEvents = subscribedServices.filter(service => service.startsWith('event:'));
    if (!(0, _includes2.default)(eventType, sipEvents)) {
      log.info(`Cannot subscribe to sip ${eventType}; service was not provisioned during user subscription.`);
      const error = new _errors.default({
        code: _errors.sipEventCodes.NOT_PROVISIONED,
        message: 'Cannot subscribe to sip event; service was not provisioned during user subscription.'
      });
      dispatch(actions.sipEventSubscribeFinish({
        error,
        eventType
      }));
      throw error;
    }

    // Use the same subscription duration as the user subscription.
    const {
      expires
    } = (0, _selectors2.getSubscriptionInfo)(getState());
    try {
      const result = await requests.subscribe(eventType, subscribeUserList, clientCorrelator, customParameters, expires);
      log.info(`Successfully subscribed to sip event ${eventType}.`);
      const finishAction = actions.sipEventSubscribeFinish({
        response: _objectSpread(_objectSpread({}, result.body.eventSubscriptionResponse), {}, {
          eventType: eventType,
          subscribedUsers: subscribeUserList
        })
      });

      // Start operation to handle resubscriptions.
      startSipEventResub(eventType, finishAction.payload.expires);
      dispatch(finishAction);
    } catch (error) {
      dispatch(actions.sipEventSubscribeFinish({
        error,
        eventType
      }));
      throw error;
    }
  }

  /**
   * Operation to start a sip event resubscription interval.
   * @method startSipEventResub
   * @param {string} eventType The event to start a resubscription interval for.
   * @param {number} expires How long before this subscription ends.
   */
  function startSipEventResub(eventType, expires) {
    intervals.startResubInterval(eventType, expires);
  }

  /**
   * Operation to stop a sip event resubscription interval.
   * @method stopSipEventResub
   * @param {string} eventType The event to stop a resubscription interval for.
   */
  function stopSipEventResub(eventType) {
    if (intervals.isRunning(eventType)) {
      intervals.stop(eventType);
    }
  }

  /**
   * Saga to unsubscribe from [all currently subscribed] sip events.
   * @method sipEventUnsubscribe
   */
  async function unsubscribe(eventType) {
    const {
      dispatch,
      getState
    } = context;

    // Dispatch an sipEventUnsubscribe action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.sipEventUnsubscribe(eventType));
    log.debug(`Unsubscribing from sip event subscriptions: ${eventType}.`);
    const eventInfo = (0, _selectors.getSipEventInfo)(getState(), eventType);
    if (!eventInfo) {
      log.info(`Cannot unsubscribe from sip event ${eventType}; no subscription exists.`);
      const error = new _errors.default({
        code: _errors.sipEventCodes.NOT_SUBSCRIBED,
        message: `Cannot unsubscribe from ${eventType}; no subscription found.`
      });
      dispatch(actions.sipEventUnsubscribeFinish({
        error,
        eventType
      }));
      throw error;
    }
    try {
      await requests.unsubscribe(eventType, eventInfo);
      log.info(`Successfully unsubscribed from sip ${eventType}.`);
      const finishAction = actions.sipEventUnsubscribeFinish({
        response: {
          eventType
        }
      });

      // Stop the resubscription interval for this eventType
      stopSipEventResub(eventType);
      dispatch(finishAction);
    } catch (error) {
      dispatch(actions.sipEventUnsubscribeFinish({
        error,
        eventType
      }));
      throw error;
    }
  }

  /**
   * Operation to update/resubscribe to a subscribed sip event.
   * @method sipEventUpdate
   * @param  {string} eventType The name of the SIP event.
   * @param  {Object} userLists
   * @param  {Array<string>}  userLists.subscribeUserList List of users to add to the subscription.
   * @param  {Array<string>}  userLists.unsubscribeUserList List of users to remove from the subscription. If all users are removed, the event subscription will be deleted.
   * @param  {Array<call.CustomParameter>} [customParameters] Custom SIP header parameters for the SIP backend.
   * @param {boolean} [isResub=false] Boolean to indicate if the update is due to subscription.
   * @return {Object} Result of sipEvent update operation.
   */
  async function update(eventType, userLists) {
    let customParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let isResub = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const {
      dispatch,
      getState
    } = context;
    const action = actions.sipEventUpdate(eventType, userLists, customParameters);
    // Dispatch a sipEventUpdate action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(action);
    log.debug(`Updating sip event subscription: ${eventType}.`);
    const eventInfo = (0, _selectors.getSipEventInfo)(getState(), eventType);
    if (!eventInfo) {
      let error;
      if (isResub) {
        // Don't need to resub, since we're not subscribed anymore.
        // TODO: Tech-Debt: BasicError isn't very useful for these scenarios. The emitted event provides
        //      the BasicError, except there's no (easy to use) info indicating _which_ event was being
        //      acted on. BasicError needs the ability to provide extra information.
        error = new _errors.default({
          code: _errors.sipEventCodes.NOT_SUBSCRIBED,
          message: `Cannot resubscribe for ${eventType} subscription; user not subscribed.`
        });
      } else {
        // Error: Not subscribed to this sip event. Cannot update.
        error = new _errors.default({
          code: _errors.sipEventCodes.NOT_SUBSCRIBED,
          message: `Cannot update subscription for ${eventType}; user not subscribed.`
        });
      }
      dispatch(actions.sipEventUpdateFinish({
        error,
        eventType
      }));
      throw error;
    }
    try {
      const {
        subscribeUserList,
        unsubscribeUserList
      } = userLists;

      // Only include user lists in the request body if there are entries.
      const validUserLists = {};
      if (subscribeUserList && subscribeUserList.length > 0) {
        validUserLists.subscribeUserList = subscribeUserList;
      }
      if (unsubscribeUserList && unsubscribeUserList.length > 0) {
        validUserLists.unsubscribeUserList = unsubscribeUserList;
      }
      if (!customParameters) customParameters = [];
      const eventSubscriptionResponse = await requests.update(eventType, eventInfo, validUserLists, customParameters);
      if (eventSubscriptionResponse) {
        log.info(`Updated sip event subscription: ${eventType}.`);

        // Dispatch sipEventUpdateFinish action for backwards-compatible of action logs.
        //     This does not affect state or emit an event.
        dispatch(actions.sipEventUpdateFinish({
          response: _objectSpread(_objectSpread({}, eventSubscriptionResponse), {}, {
            eventType,
            subscribeUserList: subscribeUserList || [],
            unsubscribeUserList: unsubscribeUserList || []
          })
        }));
      }
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(actions.sipEventUpdateFinish({
        error,
        eventType
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }

  /**
   * Operation to handle a received SIP event.
   *
   * @method receiveEvent
   * @param {Object} notification
   * @param {string} notification.eventId
   * @param {string} notification.eventType
   * @param {Object} notification.genericNotificationParams
   * @return {undefined}
   */
  function receiveEvent(notification) {
    // Determine which sip events the user is subscribed/connected for.
    const subscribedServices = (0, _selectors2.getSubscribedServices)(context.getState());
    const sipEvents = subscribedServices.filter(service => service.startsWith('event:'));
    const genericNotification = notification.genericNotificationParams;
    let callId = '';
    /*
     * Check if the notification's sessiondataType (if it exists) is of type call.
     * If it is, then the sessionData field of the notification is a WebRTC Gateway's Call ID.
     * We can then map that KL Call ID to an SDK Call ID (if it exists) and attach that to the
     * sip event we emit to the application.
     */
    if (genericNotification.sessionDataType && genericNotification.sessionDataType === 'call') {
      // Look at our existing calls to find the SDK Call ID (if any) that corresponds to the sessiondata
      const targetcall = (0, _selectors3.getCallByWrtcsSessionId)(context.getState(), genericNotification.sessionData);
      if (!targetcall) {
        log.warn('Call associated with received SIP notification cannot be found.');
      } else {
        callId = targetcall.id;
      }
    }

    /*
     * Determine which scenario we received this notification in:
     *  - Provisioned and subscribed: Application subscribed for the event during user subscription,
     *      and created a SIP subscription for it.
     *  - Provisioned, not subscribed: Application subscribed for the event during user subscription,
     *      but the SDK does not have a SIP subscription for it.
     *  - Unsolicited: Application has no user or SIP subscription for the event.
     *
     * We want to emit the notification in all scenarios, so this check is mainly for logging purposes.
     */
    if (sipEvents.includes(notification.eventType)) {
      const eventInfo = (0, _selectors.getSipEventInfo)(context.getState(), notification.eventType);

      // Determine if there is a SIP subscription for this sip event in state.
      if (eventInfo) {
        // User subscribed to sip event, with a SIP subscription found in state.
        log.info(`Received solicited SIP event notification of type ${notification.eventType}.`, notification);
      } else {
        // User subscribed to sip event, but no SIP subscription found.
        //    This is assumed to be an edge-case where the SDK lost the SIP subscription info.
        log.info(`Received solicited SIP event notification for untracked event of type ${notification.eventType}.`, notification);
      }
    } else {
      // User not subscribed to sip event.
      log.info(`Received unsolicited SIP event notification of type ${notification.eventType}.`, notification);
    }

    // Dispatch an action to update state.
    context.dispatch(actions.sipEventReceived(notification, callId));

    // Always emit the notification to the application.
    emitEvent(eventTypes.EVENT_RECEIVED, {
      eventType: notification.eventType,
      eventId: notification.eventId,
      links: {
        callId: callId
      },
      event: notification
    });
  }
  return {
    // API operations:
    subscribe,
    unsubscribe,
    update,
    startSipEventResub,
    stopSipEventResub,
    // Notification handlers.
    receiveEvent
  };
}

/***/ }),

/***/ 24268:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Other plugins
/**
 * sipEvents REST Requests factory function.
 * Defines the REST interface between the SDK and KL's sip REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for sipEvents.

 /**
 * SIP Events Link REST Requests factory function.
 * Defines the REST interface between the SDK and KL's SIP Event REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for SIP Events.
 */
function createRequests(container) {
  const {
    context,
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('SIPEVENTS');
  async function subscribe(eventType, subscribeUserList, clientCorrelator, customParameters, expires) {
    const {
      getState
    } = context;
    const {
      server,
      username
    } = (0, _selectors.getConnectionInfo)(getState());
    const requestOptions = {};
    requestOptions.method = 'POST';
    requestOptions.url = `${server.protocol}://${server.server}:${server.port}/` + `rest/version/${server.version}/` + `user/${username}/` + 'eventSubscription';
    requestOptions.body = {
      eventSubscriptionRequest: {
        subscribeUserList,
        clientCorrelator,
        eventType,
        expires
      }
    };
    if (customParameters.length) {
      requestOptions.body.eventSubscriptionRequest.customParameters = customParameters;
    }
    requestOptions.body = JSON.stringify(requestOptions.body);
    const response = await sendRequest(requestOptions);
    const {
      body,
      error,
      result
    } = response;
    if (error) {
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.eventSubscriptionResponse;
        const message = `Failed to subscribe to sip event ${eventType}, ` + `status code ${statusCode}`;
        log.info(message);
        throw new _errors.default({
          code: _errors.sipEventCodes.UNKNOWN_ERROR,
          message
        });
      } else {
        // Handler errors from the request helper.
        const {
          message
        } = result;
        const errMsg = `SIP event subscription request failed: ${message}.`;
        log.info(errMsg);
        throw new _errors.default({
          code: _errors.sipEventCodes.UNKNOWN_ERROR,
          message: errMsg
        });
      }
    }
    return response;
  }
  async function unsubscribe(eventType, eventInfo) {
    const {
      getState
    } = context;
    const {
      server,
      username
    } = (0, _selectors.getConnectionInfo)(getState());
    const requestOptions = {};
    requestOptions.method = 'DELETE';
    requestOptions.responseType = 'none';
    requestOptions.url = `${server.protocol}://${server.server}:${server.port}/` + `rest/version/${server.version}/` + `user/${username}/` + `eventSubscription/${eventInfo.sessionData}`;
    const response = await sendRequest(requestOptions);
    const {
      body,
      error,
      result
    } = response;
    if (error) {
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.eventSubscriptionResponse;
        const message = `Failed to unsubscribe from sip event ${eventType}, ` + `status code ${statusCode}`;
        log.info(message);
        throw new _errors.default({
          code: _errors.sipEventCodes.UNKNOWN_ERROR,
          message
        });
      } else {
        // Handler errors from the request helper.
        const {
          message
        } = result;
        const errMsg = `SIP event unsubscription request failed: ${message}.`;
        log.info(errMsg);
        throw new _errors.default({
          code: _errors.sipEventCodes.UNKNOWN_ERROR,
          message: errMsg
        });
      }
    }
    return response;
  }

  /**
   * KL REST Request to update a SIP event subscription.
   * @method update
   * @param  {string} eventType The name of the SIP event.
   * @param  {string} eventInfo The name of the SIP event.
   * @param  {Object} userLists
   * @param  {Array<string>}  userLists.subscribeUserList List of users to add to the subscription.
   * @param  {Array<string>}  userLists.unsubscribeUserList List of users to remove from the subscription. If all users are removed, the event subscription will be deleted.
   * @param  {Array<call.CustomParameter>} [customParameters] Custom SIP header parameters for the SIP backend.
   * @return {Object} Result of sipEvent update request.
   * @throws {BasicError} Throws an error if the REST request fails.
   * @throws {BasicError} Throws an error if the server responds with auth issue.
   * @throws {BasicError} Throws an error if the server responds with bad request.
   * @throws {BasicError} Throws an error if the server responds with forbidden service.
   */
  async function update(eventType, eventInfo, userLists, customParameters) {
    const {
      getState
    } = context;
    const {
      server,
      username
    } = (0, _selectors.getConnectionInfo)(getState());
    const requestOptions = {};
    requestOptions.method = 'PUT';
    requestOptions.url = `${server.protocol}://${server.server}:${server.port}/` + `rest/version/${server.version}/` + `user/${username}/` + `eventSubscription/${eventInfo.sessionData}`;
    requestOptions.body = JSON.stringify({
      eventSubscriptionRequest: _objectSpread(_objectSpread({}, userLists), {}, {
        eventType,
        customParameters,
        expires: eventInfo.expires
      })
    });
    const response = await sendRequest(requestOptions);
    const {
      body,
      error,
      result
    } = response;
    if (error) {
      let error;
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.eventSubscriptionResponse;
        log.info(`Failed to update sip event subscription; ${eventType}, ` + `status code ${statusCode}`);
        error = new _errors.default({
          code: _errors.sipEventCodes.UNKNOWN_ERROR,
          message: `Failed to update to sip event subscription; ${eventType}, ` + `status code ${statusCode}`
        });
      } else {
        // Handler errors from the request helper.
        const {
          message
        } = result;
        log.info(`SIP event update subscription request failed: ${message}.`);
        error = new _errors.default({
          code: _errors.sipEventCodes.UNKNOWN_ERROR,
          message: `SIP event update subscription request failed: ${message}.`
        });
      }
      throw error;
    } else {
      // Request was successful.
      return body.eventSubscriptionResponse;
    }
  }
  return {
    // Operation requests.
    subscribe,
    unsubscribe,
    update
  };
}

/***/ }),

/***/ 43265:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SUBSCRIPTION_STATE = exports.OPERATIONS = exports.MINIMUM_EXPIRY_SUBSCRIPTION_INTERVAL = exports.DISCONNECT_REASONS = void 0;
/**
 * Possible subscription states.
 * @name SUBSCRIPTION_STATE
 * @type {Object}
 */
const SUBSCRIPTION_STATE = exports.SUBSCRIPTION_STATE = {
  FULL: 'FULL',
  PARTIAL: 'PARTIAL',
  NONE: 'NONE'
};

/**
 * Possible disconnect reasons.
 * @name DISCONNECT_REASONS
 * @type {Object}
 */
const DISCONNECT_REASONS = exports.DISCONNECT_REASONS = {
  GONE: 'GONE',
  LOST_CONNECTION: 'LOST_CONNECTION',
  WS_OVERRIDDEN: 'WS_OVERRIDDEN'
};

/**
 * Possible operations.
 * @name OPERATIONS
 * @type {Object}
 */
const OPERATIONS = exports.OPERATIONS = {
  SUBSCRIBE: 'SUBSCRIBE',
  UNSUBSCRIBE: 'UNSUBSCRIBE'
};

/**
 * This is the minimum allowed value based on which, any outstanding services subscription can be refreshed.
 * Any user provided `subscription.expires` interval is always compared against this value,
 * to ensure it does not go below this minimum.
 */
const MINIMUM_EXPIRY_SUBSCRIPTION_INTERVAL = exports.MINIMUM_EXPIRY_SUBSCRIPTION_INTERVAL = 60000; // in milliseconds

/***/ }),

/***/ 27190:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UNSUBSCRIBE_FINISHED = exports.UNSUBSCRIBE = exports.SUBSCRIBE_FINISHED = exports.SUBSCRIBE = exports.RESUBSCRIPTION_FINISHED = exports.REGISTER_SUB_SERVICE = exports.PLUGIN_UNSUBSCRIPTION_FINISHED = exports.PLUGIN_UNSUBSCRIPTION = exports.PLUGIN_SUBSCRIPTION_FINISHED = exports.PLUGIN_SUBSCRIPTION = exports.CHANNEL_OPENED = exports.CHANNEL_CLOSED = void 0;
const prefix = '@@KANDY/SUBSCRIPTION/';
const SUBSCRIBE = exports.SUBSCRIBE = prefix + 'SUBSCRIBE';
const SUBSCRIBE_FINISHED = exports.SUBSCRIBE_FINISHED = prefix + 'SUBSCRIBE_FINISHED';
const UNSUBSCRIBE = exports.UNSUBSCRIBE = prefix + 'UNSUBSCRIBE';
const UNSUBSCRIBE_FINISHED = exports.UNSUBSCRIBE_FINISHED = prefix + 'UNSUBSCRIBE_FINISHED';
const RESUBSCRIPTION_FINISHED = exports.RESUBSCRIPTION_FINISHED = prefix + 'RESUBSCRIPTION_FINISHED';
const REGISTER_SUB_SERVICE = exports.REGISTER_SUB_SERVICE = prefix + 'REGISTER_SUB_SERVICE';
const PLUGIN_SUBSCRIPTION = exports.PLUGIN_SUBSCRIPTION = prefix + 'PLUGIN_SUBSCRIPTION';
const PLUGIN_SUBSCRIPTION_FINISHED = exports.PLUGIN_SUBSCRIPTION_FINISHED = prefix + 'PLUGIN_SUBSCRIPTION_FINISHED';
const PLUGIN_UNSUBSCRIPTION = exports.PLUGIN_UNSUBSCRIPTION = prefix + 'PLUGIN_UNSUBSCRIPTION';
const PLUGIN_UNSUBSCRIPTION_FINISHED = exports.PLUGIN_UNSUBSCRIPTION_FINISHED = prefix + 'PLUGIN_UNSUBSCRIPTION_FINISHED';
const CHANNEL_OPENED = exports.CHANNEL_OPENED = prefix + 'CHANNEL_OPENED';
const CHANNEL_CLOSED = exports.CHANNEL_CLOSED = prefix + 'CHANNEL_CLOSED';

/***/ }),

/***/ 44295:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.channelClosed = channelClosed;
exports.channelOpened = channelOpened;
exports.doPluginSubscriptions = doPluginSubscriptions;
exports.doPluginUnsubscriptions = doPluginUnsubscriptions;
exports.registerService = registerService;
exports.reportSubscriptionFinished = reportSubscriptionFinished;
exports.reportUnsubscriptionFinished = reportUnsubscriptionFinished;
exports.resubscribeFinished = resubscribeFinished;
exports.subscribe = subscribe;
exports.subscribeFinished = subscribeFinished;
exports.unsubscribe = unsubscribe;
exports.unsubscribeFinished = unsubscribeFinished;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(27190));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Helper function for formatting actions.
 * Ensures that actions follow an expectable format.
 * @method actionFormatter
 * @param  {string}  actionType   [description]
 * @param  {Object} [payload={}] The action payload.
 * @param  {BasicError} [payload.error] For an error action, the error should be provided.
 * @param  {Object} [meta={}] The action meta data.
 * @return {Object}
 */
function actionFormatter(actionType) {
  let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return {
    type: actionType,
    payload: _objectSpread({}, payload),
    error: !!payload.error,
    meta: _objectSpread({}, meta)
  };
}

/**
 * Represents a request to subscribe to services and connect to a notification
 * channel.
 * @method subscribe
 * @param  {Array}   services  An array containing the request services.
 * @param {Object} [options] Any parameters that aren't credentials.
 * @return {Object}            A flux standard action.
 */
function subscribe() {
  let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let options = arguments.length > 1 ? arguments[1] : undefined;
  return actionFormatter(actionTypes.SUBSCRIBE, _objectSpread({
    services
  }, options));
}

/**
 * Indicates that the subscription process has finished.
 * @method subscribeFinished
 * @param  {Object}  subscriptions  An object representing the subscriptions.
 * @param  {string}  type                 The type of notificationChannel for this subscription.
 * @param  {Object}  error                An error object.
 * @param  {Object}  platform             The platform being used.
 * @return {Object}                       A flux standard action.
 */
function subscribeFinished(_ref, platform) {
  let {
    subscriptions,
    type,
    error
  } = _ref;
  return actionFormatter(actionTypes.SUBSCRIBE_FINISHED, {
    subscriptions,
    type,
    error
  }, {
    platform
  });
}

/**
 * A request to unsubscribe from services.
 * @method unsubscribe
 * @param  {Array} services A list of services.
 * @param  {string} type The type of notificationChannel.
 * @return {Object} A flux standard action.
 */
function unsubscribe() {
  let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let type = arguments.length > 1 ? arguments[1] : undefined;
  return actionFormatter(actionTypes.UNSUBSCRIBE, {
    services,
    type
  });
}

/**
 * A notice that unsubscription has finished.
 * @method unsubscribeFinished
 * @param  {string} type The type of notificationChannel.
 * @param  {Object} [error] An error object.
 * @param  {string} [reason] The reason for the unsubscribe, if abnormal.
 * @param  {Object}  platform             The platform being used.
 * @return {Object} A flux standard action.
 */
function unsubscribeFinished(_ref2, platform) {
  let {
    type,
    error,
    reason,
    retryAfter
  } = _ref2;
  const payload = retryAfter ? {
    type,
    error,
    reason,
    retryAfter
  } : {
    type,
    error,
    reason
  };
  return actionFormatter(actionTypes.UNSUBSCRIBE_FINISHED, payload, {
    platform
  });
}

/**
 * Action creator representing the finish of a resubscription request.
 * Payload mirrors a resubscription finished action.
 *
 * @method resubscribeFinished
 * @param {Object} $0
 * @param {string} [$0.error] An error message. Only present if an error occurred.
 * @param {string} [$0.attemptNum] The attempt number of this resubscription.
 * @param {string} platform The backend platform we are currently on.
 * @return {Object} A flux standard action.
 */
function resubscribeFinished(_ref3, platform) {
  let {
    error,
    attemptNum
  } = _ref3;
  var action = {
    type: actionTypes.RESUBSCRIPTION_FINISHED,
    meta: {
      platform
    }
  };
  if (error) {
    action.error = true;
    action.payload = error;
    action.payload.attemptNum = attemptNum;
  } else {
    action.payload = {
      attemptNum
    };
  }
  return action;
}

/**
 * Signifies that a plugin has subscription logic for certain services.
 * @method registerService
 * @param  {Array}  [services=[]] A list of services.
 * @return {Object} A flux standard action.
 */
function registerService() {
  let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return actionFormatter(actionTypes.REGISTER_SUB_SERVICE, {
    services
  });
}

/**
 * Indicates that the subscription plugin expects plugins to subscribe
 * for the specified services.
 * @method doPluginSubscriptions
 * @param  {Array<Object>}  services The list of services that should be subscribed to.
 * @param  {string} type The type of notification channel for these subscriptions.
 * @return {Object} A flux standard action.
 */
function doPluginSubscriptions(services, type) {
  return actionFormatter(actionTypes.PLUGIN_SUBSCRIPTION, {
    services,
    type
  });
}

/**
 * Indicates that a plugin has finished a subscription for the specified service.
 * @method reportSubscriptionFinished
 * @param  {Object} params
 * @param  {string} params.service The service that the subscription was for.
 * @param  {string} params.type The type of notification channel for this subscription.
 * @param  {Object} params.subscription The subscription response from the backend.
 * @param  {BasicError} [params.error] An error object.
 * @return {Object} A flux standard action.
 */
function reportSubscriptionFinished(_ref4) {
  let {
    service,
    type,
    subscription,
    error
  } = _ref4;
  const subscriptionId = subscription ? subscription.resourceURL.split('/subscriptions/')[1] : null;
  return actionFormatter(actionTypes.PLUGIN_SUBSCRIPTION_FINISHED, _objectSpread(_objectSpread({}, subscription), {}, {
    subscriptionId: subscriptionId,
    service,
    channelType: type,
    error
  }));
}

/**
 * Indicates that the subscription plugin expects plugins to unsubscribe
 * for the specified services.
 * @method doPluginUnsubscriptions
 * @param  {Array}  services The list of services that should be unsubscribed.
 * @param  {string} type The type of notification channel for these unsubscriptions.
 * @return {Object} A flux standard action.
 */
function doPluginUnsubscriptions(services, type) {
  return actionFormatter(actionTypes.PLUGIN_UNSUBSCRIPTION, {
    services,
    type
  });
}

/**
 * Indicates that a plugin has finished an unsubscription for the specified service.
 * @method reportUnsubscriptionFinished
 * @param  {Object} params
 * @param  {string} params.service The service that the unsubscription was for.
 * @param  {string} params.type The type of notification channel for this unsubscription.
 * @param  {BasicError} [params.error] An error object.
 * @return {Object} A flux standard action.
 */
function reportUnsubscriptionFinished(_ref5) {
  let {
    service,
    type,
    error
  } = _ref5;
  return actionFormatter(actionTypes.PLUGIN_UNSUBSCRIPTION_FINISHED, {
    service,
    channelType: type,
    error
  });
}

/**
 * Indicates that a notification channel has been opened / created.
 * @method channelOpened
 * @param {Object} channelInfo Data about the notification channel.
 * @param {string} type The type of notification channel.
 * @return {Object} A flux standard action.
 */
function channelOpened(channelInfo, type) {
  return actionFormatter(actionTypes.CHANNEL_OPENED, _objectSpread({}, channelInfo), {
    type
  });
}

/**
 * Indicates that a notification channel has been closed / deleted.
 * @method channelClosed
 * @param {string} type The type of notification channel.
 * @return {Object} A flux standard action.
 */
function channelClosed(type) {
  return actionFormatter(actionTypes.CHANNEL_CLOSED, {}, {
    type
  });
}

/***/ }),

/***/ 20308:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var actions = _interopRequireWildcard(__webpack_require__(44295));
var eventTypes = _interopRequireWildcard(__webpack_require__(36826));
var _selectors = __webpack_require__(48944);
var _selectors2 = __webpack_require__(46942);
var _constants = __webpack_require__(49833);
var _utils = __webpack_require__(25189);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * The 'services' namespace allows an application to manage how they wish the SDK to
 *    receive communications from the platform. An application can subscribe to
 *    services in order to receive updates about that service for the current
 *    user. A feature generally requires a subscription for its service to be
 *    fully functional.
 *
 * The services an application can subscribe to are based on the features
 *    included in the SDK. The list of available services can be retrieved
 *    using the {@link services.getSubscriptions} API. These values can be used
 *    with the {@link services.subscribe} API.
 *
 * The channel used for subscriptions is the method for receiving the service
 *    updates. The recommended channel is `websocket`, where the SDK is able to
 *    handle receiving the updates internally. Alternate channel methods, if a
 *    websocket cannot be used, will be available in the future.
 *
 * @public
 * @namespace services
 */

/**
 * The ServiceDescriptor type defines the format for specifying how to subscribe for a certain service.
 * This is the service configuration object that needs to be passed (as part of an array of configuration objects) when calling
 * the {@link services.subscribe} function.
 * Only some plugins (`call`, `messaging` and `presence`) support such configuration object that needs to be passed
 * to the subscribe function.
 *
 * @public
 * @static
 * @typedef {Object} ServiceDescriptor
 * @property {string} service The name of the available service user wants to subscribe to.
 * The available service names are `chat`, `presence`, `call` and `smsinbound`.
 *
 * @property {Object} [params] An object containing any additional parameters required for subscribing to that service.
 * This is an optional property as not all service subscriptions require it.
 * @memberof services
 * @example
 * // Subscribe to chat, presence & call services on a WebSocket channel.
 * client.services.subscribe([
 *    {service: 'chat'},
 *    {service: 'presence'},
 *    {service: 'call'},
 * ], 'websocket')
 */

/**
 * The SmsInboundServiceParams type defines the additional information when subscribing to SMS inbound service.
 * This is the configuration object that needs to be passed as the value for the {@link services.ServiceDescriptor ServiceDescriptor.params} property.
 *
 * @public
 * @static
 * @typedef {Object} SmsInboundServiceParams
 * @memberof services
 * @property {string} destinationAddress An E164 formatted DID number.
 *     The subscription created will provide notifications for inbound SMS messages destined for this address.
 * @example
 * // Subscribe to smsinbound service on a WebSocket channel.
 * client.services.subscribe([
 *    {service: 'smsinbound', params: {destinationAddress: '+18001234567'}}
 * ], 'websocket')
 */

// Subscription plugin.

// Auth plugin.

// Constants

// Libraries

// Errors

/**
 * Service API. All functions in this plugin are part of the 'services' namespace.
 * @method api
 * @param  {Function} params
 * @param  {Function} params.dispatch - The redux store's dispatch function.
 * @param  {Function} params.getState - The redux store's getState function.
 * @return {Object} api - The subscription API object.
 */
function createAPI(container) {
  const {
    context,
    SubscriptionIntervals,
    SubscriptionOperations: operations,
    logManager,
    API_LOG_TAG,
    emitEvent
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');
  const subscriptionApi = {
    /**
     * Subscribes to platform notifications for an SDK service.
     *
     * Extra configuration can be provide as an additional object parameter.
     * Currently only a "forceLogOut" flag can be supplied in this object.
     *
     * For push notifications on link, please see {@link notifications.registerPush}
     *
     * The SDK currently only supports the `websocket` channel as a subscription
     *    type.
     *
     * When calling this API, SDK emits a {@link services.event:subscription:change subscription:change} event, each time there is a change in subscriptions.
     *
     * Upon getting such event, existing subscriptions can be retrieved using the
     *    {@link services.getSubscriptions} API.
     *
     * @public
     * @static
     * @memberof services
     * @requires subscription
     * @method subscribe
     * @param {Array<string | services.ServiceDescriptor>} services A list of service configurations.
     * @param {Object} [options] The options object for non-credential options.
     * @param {boolean} [options.forceLogOut] Force the oldest connection to log out if too many simultaneous connections. Link only.
     * @param {string} [options.type='websocket'] The method of how to receive service updates.
     * @param {string} [options.clientCorrelator] Unique ID for the client. This is used by the platform to identify an instance of the application used by the specific device.
     * @return {undefined}
     *  @example
     * // Subscribe for chat and SMS services.
     * client.services.subscribe(['call', 'IM'], {forceLogOut: true, clientCorrelator: 'abc123'})
     */
    async subscribe(services) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      log.debug(API_LOG_TAG + 'services.subscribe: ', services, options.type);
      // For backwards compatibility, we need to check if the 2nd parameter
      // is a string and if it's a valid notification type, then convert
      // it to the new api format
      if (typeof options === 'string' && (options === _constants.notificationTypes.WEBSOCKET || options === _constants.notificationTypes.PUSH)) {
        options = {
          type: options
        };
      }
      if (!options.type) {
        options.type = _constants.notificationTypes.WEBSOCKET;
      }
      const userInfo = (0, _selectors2.getUserInfo)(context.getState());
      if (userInfo && (userInfo.username || userInfo.accessToken)) {
        // Normalize services array
        services = (0, _utils.normalizeServices)(services);
        context.dispatch(actions.subscribe(services, options));
        emitEvent(eventTypes.SUB_CHANGE, {
          reason: undefined
        });
        try {
          // The flow will call one of the two operations: subscribe OR updateSubscription
          const result = await operations.subscriptionFlow({
            services,
            options
          });
          if (result) {
            // result returned by a new subcription or an updated subscription
            context.dispatch(actions.subscribeFinished({
              subscriptions: result.subscriptions
            }, result.platform));
            const payload = result.retryAfter ? {
              reason: result.reason,
              retryAfter: result.retryAfter
            } : {
              reason: result.reason
            };
            emitEvent(eventTypes.SUB_CHANGE, payload);

            // We have a sucessful subscription, so start the resubscription interval
            // so that we automatically update our subscription, when it expires.
            SubscriptionIntervals.resubInterval.startResubInterval();
          } else {
            const error = new _errors.default({
              message: 'Failed user subscription.',
              code: _errors.subscriptionCodes.GENERIC_ERROR
            });
            context.dispatch(actions.subscribeFinished({
              error
            }));
            emitEvent(eventTypes.SUB_ERROR, {
              error
            });
          }
        } catch (error) {
          context.dispatch(actions.subscribeFinished({
            error
          }));
          emitEvent(eventTypes.SUB_ERROR, {
            error
          });
        }
      } else {
        // TODO: Directly emit error event - see KJS-1756
      }
    },
    /**
     * Cancels existing subscriptions for platform notifications.
     *
     * When calling this API, SDK emits a {@link services.event:subscription:change subscription:change} event, each time there is a change in subscriptions.
     *
     * Upon getting such event, existing subscriptions can be retrieved using the
     *    {@link services.getSubscriptions} API. The `subscribed` values are the
     *    services that can be unsubscribed from.
     *
     * @public
     * @static
     * @memberof services
     * @method unsubscribe
     * @param {Array<string>} services A list of subscribed service names.
     * @param {string} [type='websocket'] The method of how the service updates
     *    are being received.
     * @example
     * // Unsubscribe from chat and SMS services.
     * const services = [ 'chat', 'smsinbound' ]
     *
     * client.services.unsubscribe(services)
     */
    async unsubscribe(services) {
      let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.notificationTypes.WEBSOCKET;
      log.debug(API_LOG_TAG + 'services.unsubscribe: ', services, type);
      const userInfo = (0, _selectors2.getUserInfo)(context.getState());
      if (userInfo && (userInfo.accessToken || userInfo.username)) {
        context.dispatch(actions.unsubscribe(services, type));
        emitEvent(eventTypes.SUB_CHANGE, {
          reason: undefined
        });
        try {
          // Compare the current services against what is being unsubscribe to figure out if partial or full.
          const activeServices = (0, _selectors.getSubscribedServices)(context.getState());
          const remainingServices = activeServices.filter(serv => !services.includes(serv));
          const isPartial = remainingServices.length > 0;

          // The flow will call one of the two operations: unsubscribe OR updateSubscription
          // There is no extected result returned to API
          const result = await operations.subscriptionFlow(services);
          const platform = (0, _selectors.getSubscriptionPlatform)(context.getState());
          // Depending if it was a partial or full unsubscribe, we need to update state differently.
          // TODO: Have the `unsubscribeFinished` action be able to handle both partial&full scenarios.
          if (isPartial) {
            context.dispatch(actions.subscribeFinished({
              subscriptions: result.subscriptions
            }, result.platform));
          } else {
            //We successfuly unsubscribed from all services, so stop the resubscription interval.
            SubscriptionIntervals.resubInterval.stopResubInterval();
            context.dispatch(actions.unsubscribeFinished({}, platform));
          }
          emitEvent(eventTypes.SUB_CHANGE, {});
          log.info('Successfully unsubscribed from all services.');
        } catch (error) {
          context.dispatch(actions.unsubscribeFinished({
            error
          }));
          emitEvent(eventTypes.SUB_ERROR, {
            error
          });
        }
      } else {
        // TODO: Directly emit error event - see KJS-1756
      }
    },
    /**
     * Retrieves information about currently subscribed services and available services.
     * The data returned by this API is a snapshot of the SDK's current local subscription state.
     * The data does indicate whether there was an ongoing subscription at the time this API was called.
     * If a subscription is in fact in progress, the user should not take decisions based on this snapshot, as the subscription is not yet complete.
     *
     * To be notified when any subscription(s) did change/complete, listen for {@link services.event:subscription:change subscription:change} events.
     *
     * The `available` values are the SDK's services that an application can
     *    subscribe to receive notifications about. A feature generally
     *    requires a subscription to its service in order to be fully functional.
     *
     * The `subscribed` values are the SDK's services that the application has
     *    an active subscription for. Services are subscribed to using the
     *    {@link services.subscribe} API.
     *
     * @public
     * @static
     * @memberof services
     * @method getSubscriptions
     * @return {Object} Lists of subscribed and available services.
     * @example
     * // Get the lists of services.
     * const services = client.services.getSubscriptions()
     *
     * // Ensure that there were no pending subscriptions at the time
     * // we called getSubscriptions API.
     * if (!services.isPending) {
     *   // Figure out which available services don't have a subscription.
     *   const notSubscribed = services.available.filter(service => {
     *     return !services.subscribed.includes(service)
     *   })
     *
     *   // Subscribe for all not-yet-subscribed services.
     *   client.services.subscribe(notSubscribed)
     * }
     *
     */
    getSubscriptions() {
      log.debug(API_LOG_TAG + 'services.getSubscriptions');
      return {
        subscribed: (0, _selectors.getSubscribedServices)(context.getState()),
        available: (0, _selectors.getRegisteredServices)(context.getState()),
        isPending: context.getState().subscription.isPending
      };
    }
  };
  return {
    services: subscriptionApi
  };
}

/***/ }),

/***/ 36826:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SUB_RESUB = exports.SUB_ERROR = exports.SUB_CHANGE = void 0;
/**
 * Subscription information has changed.
 *
 * The updated subscription information can be retrieved using the
 *    {@link services.getSubscriptions} API.
 * @public
 * @memberof services
 * @event subscription:change
 * @param {Object} params
 * @param {string} [params.reason] When unsolicited, the reason for the change is provided.
 *   Reason can be one of the following values:
 *   'GONE' - When Connection was terminated by the server.
 *   'LOST_CONNECTION' - When internet connection was lost.
 *   'WS_OVERRIDDEN' - When websocket was overridden by the server.
 *
 * If the `reason` parameter is provided, this means the subscription has been lost unexpectedly
 * and the application will need to handle the next steps.
 * The `reason` will explain why the subscription has been lost so that the scenario can be handled appropriately.
 */
const SUB_CHANGE = exports.SUB_CHANGE = 'subscription:change';

/**
 * An error occurred during a subscription operation.
 *
 * The subscription information can be retrieved using the
 *    {@link services.getSubscriptions} API.
 *
 * Below are some common errors related to service subscriptions.
 *
 *  * `authentication:1`  - "Authorization failed with server. Please check credentials. Status code: 4`" - Invalid credentials.
 *  * `authentication:3`  - "No subscription found for "X", can't unsubscribe" - The requested service is not currently subscribed.
 *  * `authentication:3`  - "No subscription found, can't unsubscribe." - There are no active subscriptions.
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 19" - Too many active sessions with the requested user.
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 37" - Invalid service string.
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 38" - Invalid characters in client correlator.
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 39" - Session does not exist anymore.
 *  * `authentication:12` - "No services found in configuration." - No services found in SDK configuration.
 *
 * The following errors indicate an issue with the user account or temporary backend issue. They may require help from support or a delay before being retried.
 *
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 9"
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 17"
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 26"
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 27"
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 54"
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 62"
 *  * `authentication:4`  - "Failed to subscribe user. Status Code 63"
 *  * `authentication:13` - "Failed to subscribe user. Status Code 53"
 *
 *  For a more detailed look into subscription errors and handling recommendations,
 *   please refer to the "Handling Subscription Errors" tutorial.
 * @public
 * @memberof services
 * @requires subscription
 * @event subscription:error
 * @param {Object} params
 * @param {Object} params.error A Basic error object, representing the error that occurred.
 */
const SUB_ERROR = exports.SUB_ERROR = 'subscription:error';

/**
 * An attempt to extend the current user's subscription was made.
 *
 * In a failure scenario, the current user is still connected, and further
 * resubscription attempts will be made, but may become disconnected if the
 * session expires.
 * @public
 * @memberof services
 * @event subscription:resub
 * @param {Object} params
 * @param {number} params.attemptNum The attempt number of this resubscription.
 * @param {boolean} params.isFailure Whether the resubscription failed or not.
 * @param {api.BasicError} [params.error] The Basic error object.
 */
const SUB_RESUB = exports.SUB_RESUB = 'subscription:resub';

/***/ }),

/***/ 81301:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAPI", ({
  enumerable: true,
  get: function () {
    return _api.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _reducers = _interopRequireDefault(__webpack_require__(54097));
var _api = _interopRequireDefault(__webpack_require__(20308));
const name = exports.name = 'subscription';

/***/ }),

/***/ 54097:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _remove2 = _interopRequireDefault(__webpack_require__(58009));
var actionTypes = _interopRequireWildcard(__webpack_require__(27190));
var _constants = __webpack_require__(49833);
var _constants2 = __webpack_require__(43265);
var _constants3 = __webpack_require__(72916);
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Constants
// Other plugins.
// Libraries.
/* State Structure
    subscription: {
        notificationChannels: { // An object with key values pairs for channelType -> channelInfo
            [Websocket] : { ... }, // Channel Info taken directly from UC response.
            [Push]      : { ... }
        }
    }
 */

const defaultState = {
  // Information about the open notification channels.
  notificationChannels: {},
  // The list of active subscriptions.
  subscriptions: [],
  // The list of services that plugins can subscribe to.
  registeredServices: [],
  // Whether a subscription change is currently in progress.
  isPending: false,
  // The operation that is currently pending.
  pendingOperation: null
};
const reducers = {};

// Helper function for changing the pending value.
function pendingChange(value, operation) {
  return (state, action) => {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: value,
      pendingOperation: operation
    });
  };
}
// Change isPending depending on the start/finish of subscriptions.
reducers[actionTypes.SUBSCRIBE] = pendingChange(true, {
  operation: _constants2.OPERATIONS.SUBSCRIBE,
  startTime: Date.now()
});
reducers[actionTypes.UNSUBSCRIBE] = pendingChange(true, {
  operation: _constants2.OPERATIONS.UNSUBSCRIBE,
  startTime: Date.now()
});
reducers[actionTypes.SUBSCRIBE_FINISHED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      pendingOperation: null,
      error: undefined,
      platform: action.meta.platform,
      subscriptions: action.payload.subscriptions || state.subscriptions
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      pendingOperation: null,
      error: action.payload
    });
  }
};

/*
 * Remove subscriptions that are in the unsubscriptions list
 */
reducers[actionTypes.UNSUBSCRIBE_FINISHED] = {
  next(state, action) {
    const newState = _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      pendingOperation: null
    });

    /*
     * Check if we are using link platform and clear the subscription array
     */
    if (action.meta.platform === _constants.platforms.LINK) {
      newState.subscriptions = [];
    }

    /*
     * If connectivity was lost, remove all subscriptions to reflect that we
     *    aren't receiving anything from them.
     * In "normal" scenarios, other reducers handle the subscriptions state.
     */
    if (action.payload.reason === _constants3.DISCONNECT_REASONS.LOST_CONNECTION) {
      newState.subscriptions = [];
    }
    return newState;
  },
  throw(state) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      pendingOperation: null
    });
  }
};

/*
 * When a plugin reports a successful subscription, store it in state.
 */
reducers[actionTypes.PLUGIN_SUBSCRIPTION_FINISHED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      subscriptions: state.subscriptions.concat(action.payload)
    });
  }
};

/*
 * When a plugin reports a successful unsubscription, remove it from state.
 */
reducers[actionTypes.PLUGIN_UNSUBSCRIPTION_FINISHED] = {
  next(state, action) {
    function removeSubscription(subscription) {
      return subscription.channelType === action.payload.channelType && subscription.service === action.payload.service;
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      subscriptions: (0, _remove2.default)(removeSubscription)(state.subscriptions)
    });
  }
};

/*
 * Store the services that plugins can subscribe to in state.
 */
reducers[actionTypes.REGISTER_SUB_SERVICE] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      // TODO: Worry about duplicate services?
      registeredServices: state.registeredServices.concat(action.payload.services)
    });
  }
};

/*
 * Store the new notification channel into state.
 * Assumption: A channel of the same type should NOT already exist.
 */
reducers[actionTypes.CHANNEL_OPENED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      notificationChannels: _objectSpread(_objectSpread({}, state.notificationChannels), {}, {
        [action.meta.type]: action.payload
      })
    });
  }
};

/*
 * Remove the notification channel info when it has been closed.
 */
reducers[actionTypes.CHANNEL_CLOSED] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      notificationChannels: _objectSpread(_objectSpread({}, state.notificationChannels), {}, {
        [action.meta.type]: undefined
      })
    });
  }
};

/**
 * Subscription Interface reducer
 * @method reducer
 * @param  {Object}  state - The current redux state.
 * @param  {Object}  action - A flux standard action.
 * @return {Object}  - The new redux state.
 * @example
 * Subscription state structure example; connected.
 * subscriptionState = {
 *
 * }
 */
const reducer = (0, _reduxActions.handleActions)(reducers, defaultState);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 48944:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getPendingOperation = getPendingOperation;
exports.getRegisteredServices = getRegisteredServices;
exports.getServiceUnavailableMaxRetries = getServiceUnavailableMaxRetries;
exports.getSubscribedServices = getSubscribedServices;
exports.getSubscriptionConfig = getSubscriptionConfig;
exports.getSubscriptionExpiry = getSubscriptionExpiry;
exports.getSubscriptionInfo = getSubscriptionInfo;
exports.getSubscriptionPlatform = getSubscriptionPlatform;
exports.getSubscriptions = getSubscriptions;
exports.getWebsocketConfig = getWebsocketConfig;
exports.getWebsocketId = getWebsocketId;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _selectors = __webpack_require__(46942);
var _utils = __webpack_require__(25189);
// Auth selectors for backwards compatibility.

// Utilities.

/**
 * Retrieves the config options provided by the subscription plugin.
 * NOTE: This won't work with the old auth/subscription config on link.
 * It will work with the new auth/subscription config on link.
 * @method getSubscriptionConfig
 * @return {Object}
 */
function getSubscriptionConfig(state) {
  return (0, _cloneDeep2.default)(state.config.subscription);
}

/**
 * Retrieves the maximum number of times this client will attempt to subscribe, while getting a
 * 'Service Unavailable' response from backend.
 * @method getServiceUnavailableMaxRetries
 * @param {Object} state Current state object.
 * @return {number}
 */
function getServiceUnavailableMaxRetries(state) {
  return state.config.subscription.serviceUnavailableMaxRetries;
}

/**
 * Retrieves the list of services that plugins have registered for.
 * @method getRegisteredServices
 * @return {Array}
 */
function getRegisteredServices(state) {
  return (0, _cloneDeep2.default)(state.subscription.registeredServices);
}

/**
 * Retrieve the list of services with current subscriptions.
 * @method getSubscribedServices
 * @param {string} type the type of subscription we want to get specifically
 * @return {Array}
 */
function getSubscribedServices(state, type) {
  const info = getSubscriptionInfo(state);
  // For backwards compatibility, make sure that this is an array. It isn't when
  //    the old Auth plugin is being used (eg. Link v3.X).
  let subscriptions = Array.isArray(info) ? info : [info];

  // If a type was specified, filter out subscriptions of other types.
  if (type) {
    subscriptions = subscriptions.filter(subscription => subscription.channelType === type);
  }

  // Massage the subscriptions to be a list of service names.

  // For Link, subscription.service is an array of strings (all services).
  // Process the subscriptions in a way that will provide an array of strings in
  //    both cases.
  return subscriptions.reduce((acc, currentSub) => {
    return acc.concat(currentSub.service);
  }, []);
}

/**
 * Retrieves the subscription information.
 * @method getSubscriptionInfo
 * @return {Object}
 */
function getSubscriptionInfo(state) {
  if (state.subscription) {
    return (0, _cloneDeep2.default)(state.subscription.subscriptions);
  } else {
    // For backwards compatibility, also check if the authentication substate
    //    has subscription info. It will have the info when the oldAuth plugin
    //    is being used (eg. Link v3.X).
    // Warning: This returns an object, unlike the above which returns an array.
    return (0, _cloneDeep2.default)((0, _selectors.getSubscriptionInfo)(state));
  }
}

/**
 * Retrieve the list of subscriptions matching a given channel type and service name.
 * @method getSubscriptions
 * @param {string} service the name of the service we want to get specifically (e.g. smsinbound)
 * @param {string} type the type of communication channel we want to get specifically (e.g. websocket)
 * @return {Array}
 */
function getSubscriptions(state, service, type) {
  let subscriptions = state.subscription.subscriptions;
  subscriptions = subscriptions.filter(subscription => subscription.service === service && subscription.channelType === type);
  return (0, _cloneDeep2.default)(subscriptions);
}

/**
 * Retrieve the subscription expiry time from config.
 * @method getSubscriptionExpiry
 * @return {number}
 */
function getSubscriptionExpiry(state) {
  const subConfig = state.config.subscription;
  const authConfig = state.config.authentication;

  // In order to maintain backwards compatibility with the auth plugin config
  // we need to first check if this setting is provided in the authentication plugin
  // config, and if not use the one from subscription plugin.  We need to check
  // authentication config first because if no value is provided in the subscription
  // plugin, a default value will be used and we don't want that if one is provided in
  // the authentication plugin.
  const expires = authConfig.subscription && authConfig.subscription.expires ? authConfig.subscription.expires : subConfig.expires;
  return expires;
}

/**
 * Retrieve the websocket info from config. We merge the websocket config
 * from auth plugin with the one from subscription plugin giving precedence to
 * the websocket config in auth plugin since we need to maintain backwards compatibility
 * with the old format config.
 * @method getSubscriptionExpiry
 * @return {number}
 */
function getWebsocketConfig(state) {
  const subConfig = state.config.subscription;
  const authConfig = state.config.authentication;

  // In order to support legacy configurations, we need to do the following:
  // Take the values (including defaults) from subscription config.  Merge into
  // that any client provided values from the authentication config.  All keys existing
  // in authentication config will overwrite those from subscription config.  However,
  // since defaults are not set for websocket in the authentication plugin, only client
  // provided values for websocket will be used from authentication config and defaults
  // will come from the subscription plugin.
  return (0, _utils.mergeValues)(subConfig.websocket, authConfig.websocket);
}

/**
 * Gets the websocket id being used by a current subscription.
 * @method getWebsocketId
 * @param {Object} state   Redux state.
 * @param {string} service The service name to get the websocket ID from.
 * @returns {string|undefiend} The websocket ID if it exists.
 */
function getWebsocketId(state, service) {
  let subscriptions = getSubscriptionInfo(state);
  // For backwards compatibility, make sure that this is an array. It isn't for
  //    CallMe since it uses the old Auth pluginb style.
  subscriptions = Array.isArray(subscriptions) ? subscriptions : [subscriptions];
  let sub;
  if (service) {
    // Find the subscription for this service.
    sub = subscriptions.find(sub => sub.service === 'service' || sub.service.includes(service));
  } else {
    // Just get the first subscription.
    sub = subscriptions[0];
  }
  if (sub && typeof sub.notificationChannel === 'string') {
    // Get anything after /websocket/ in the string. The ID should be after it.
    const websocketId = sub.notificationChannel.split('/websocket/')[1];
    return websocketId;
  } else {
    // There is no subscription/websocket for this service.
  }
}

/*
 * Return the pending operation if one is pending.
 * @method getPendingOperation
 * @return {string}
 */
function getPendingOperation(state) {
  return state.subscription.pendingOperation;
}

/**
 * Retrieves the platform associated with the existing subscription information.
 * @method getSubscriptionPlatform
 * @return {string}
 */
function getSubscriptionPlatform(state) {
  if (state.subscription) {
    return state.subscription.platform;
  }
}

/***/ }),

/***/ 66342:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "subscribe", ({
  enumerable: true,
  get: function () {
    return _subscribe.default;
  }
}));
Object.defineProperty(exports, "unsubscribe", ({
  enumerable: true,
  get: function () {
    return _unsubscribe.default;
  }
}));
Object.defineProperty(exports, "updateSubscription", ({
  enumerable: true,
  get: function () {
    return _update.default;
  }
}));
var _subscribe = _interopRequireDefault(__webpack_require__(67994));
var _unsubscribe = _interopRequireDefault(__webpack_require__(87711));
var _update = _interopRequireDefault(__webpack_require__(10974));

/***/ }),

/***/ 72203:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseSpidrServices = parseSpidrServices;
var _constants = __webpack_require__(43265);
/**
 * Uses the requested and received WebRTC Gateway [subscription] services to determine
 *      the SDK subscription status for each service.
 * @method parseSpidrServices
 * @param  {Array}  requested The list of requested WebRTC Gateway services.
 * @param  {Array}  received The list of received WebRTC Gateway services.
 * @return {Object} Information about the SDK's subscriptions.
 */
function parseSpidrServices(requested, received) {
  // UC platform is not case-sensitive (Link is), so filter without caring about case.
  const upperReceived = received.map(service => service.toUpperCase());

  // Find the missing services.
  const missing = requested.filter(function (reqService) {
    // If the requested service was received (not caring about case),
    //      it is not missing.
    return upperReceived.indexOf(reqService.toUpperCase()) === -1;
  });
  const subscriptions = {
    requested,
    received,
    missing,
    status: 'UNKNOWN',
    services: {}
  };

  // Determine the overall subscription status.
  if (received.length === 0) {
    subscriptions.status = _constants.SUBSCRIPTION_STATE.NONE;
  } else if (received.length > 0 && missing.length > 0) {
    subscriptions.status = _constants.SUBSCRIPTION_STATE.PARTIAL;
  } else if (received.length > 0 && requested.length === received.length) {
    subscriptions.status = _constants.SUBSCRIPTION_STATE.FULL;
  } else {
    // Should never reach this case.
  }

  // List the individual service statuses.
  received.forEach(function (service) {
    subscriptions.services[service] = true;
  });
  missing.forEach(function (service) {
    subscriptions.services[service] = false;
  });
  return subscriptions;
}

/***/ }),

/***/ 67994:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerFeature;
var _request = _interopRequireDefault(__webpack_require__(46892));
var _operation = _interopRequireDefault(__webpack_require__(35123));
function registerFeature(bottle) {
  bottle.factory('SubscriptionRequests.subscribe', container => {
    return (0, _request.default)(bottle.container);
  });
  bottle.factory('SubscriptionOperations.subscribe', container => {
    return (0, _operation.default)(bottle.container);
  });
}

/***/ }),

/***/ 35123:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(27190));
var _selectors = __webpack_require__(46942);
var _actions = __webpack_require__(35770);
var _selectors2 = __webpack_require__(53951);
var _actions2 = __webpack_require__(69897);
var _actionTypes2 = __webpack_require__(53202);
var _utils = __webpack_require__(25189);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _constants = __webpack_require__(49833);
var _selectors3 = __webpack_require__(48944);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Subscription plugin.
// Auth plugin
// Connectivity Plugin
// import * as connEventTypes from '../../../../connectivity/interface/eventTypes'
// Utilities
// Errors
// Constants
/**
 * Operation factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `subscribe` operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    SubscriptionOperations: operations,
    SubscriptionRequests: requests,
    Notifications
    //, emitEvent
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');
  // This is an Link plugin.
  const platform = _constants.platforms.LINK;
  function webSocketConnectedPattern(action) {
    // Wait for the web socket to be connected by listening for action type: WS_CONNECT_FINISHED
    return action.type === _actionTypes2.WS_CONNECT_FINISHED && action.meta.platform === platform;
  }

  /**
   * Operation for subscribing to a given set of services on the Link backend.
   * Performs the workflow of connecting/subscribing to WebRTC Gateway services.
   *
   * @method subscribe
   * @param {Array<string | services.ServiceDescriptor>} services A list of service configurations.
   * @param {Object} [options] The options object for non-credential options.
   * @return {Object} If success, this is the response from backend containing the names of subscribed services.
   * @throws {BasicError} Throws an error if parameters are invalid or REST request fails.
   */
  async function subscribe(services, options) {
    log.info(`Initiating subscription for services: ${services}`);
    if (!services || services.length === 0) {
      // Error scenario: No services specified.
      throw new _errors.default({
        code: _errors.subscriptionCodes.NO_SERVICE_PROVIDED,
        message: 'No service provided'
      });
    }
    try {
      // Retrieve the connection info
      const authConfig = (0, _selectors.getAuthConfig)(context.getState());

      // Retrieve the connection info.
      const linkConnection = (0, _selectors.getConnectionInfo)(context.getState());

      // Get the configured expiry value for subscriptions
      const expires = (0, _selectors3.getSubscriptionExpiry)(context.getState());
      services = services.map(subscription => subscription.service);
      let response;
      let attemptNum = 1; // keeps count of how many subscription requests we sent so far
      const maxReAttempts = (0, _selectors3.getServiceUnavailableMaxRetries)(context.getState());

      // 1 + : there will be one initial attempt followed by up to a maximum number of re-attempts.
      while (attemptNum <= 1 + maxReAttempts) {
        // Don't `resubscribe` (which is a PUT request) on any subsequent requests.
        // Rather use `subscribe` which uses the same REST request (i.e. POST)
        response = await requests.subscribe(authConfig, expires, linkConnection, services, options);
        if (response.error) {
          //  we check if subsequent errors are also 503s (after so many tries)
          if (response.error.code === _errors.authCodes.LINK_SUBSCRIBE_UNAVAILABLE && response.retryAfter) {
            if (attemptNum === 1 + maxReAttempts) {
              // Trigger the usual action in case of failure & abort right away.
              // NOTE: This action won't mention the fact that we tried so many times,
              // as it should be transparent to the application level.

              // Just the log would include this info, to help in debugging.
              log.debug(`Subscription failed: ${response.error} after ${attemptNum - 1} re-attempts.`);
              throw response.error; // we will catch it below
            }

            // Wait for either the subscribe delay or a disconnect action, whichever comes first.
            const result = await Promise.race([(0, _utils.delay)(response.retryAfter), Notifications.takeAction(actionTypes.UNSUBSCRIBE_FINISHED)]);
            if (result && result.actionType && result.actionType === actionTypes.UNSUBSCRIBE_FINISHED) {
              // User decided to unsubscribe before we attempted to make another `subscribe` request.
              // Abort any subscriptions & don't trigger any failure because it is really a user cancellation.
              return;
            } else {
              // If the delay expired first, attempt another `subscribe` request by
              // incrementing our attempts count.
              // We got a 503 error, but we're still allowed to retry our `subscribe` request.
              // We also won't log any of these intermediary 503 errors, since we'll make yet another attempt.
              attemptNum++;
            }
          } else {
            // We got an error other than 503 (or the 503 did not have a retryAfter value).
            // Either way, we treat it as a final error as it should mark the end of our attempts.
            if (attemptNum > 1) {
              log.debug(`Subscription subsequently failed: ${response.error} (after getting an initial 503 response).`);
            } else {
              // We got an error the first time we tried to subscribe.
              log.debug(`Subscription failed: ${response.error}`);
            }
            throw response.error; // we will catch it below
          }
        } else {
          // We got a succesul response to our latest `subscribe` request,
          // so cancel any further `subscribe` attempts.
          break;
        }
      } // end of while loop

      const hmacToken = linkConnection.requestOptions.headers['x-token'];

      // If used HMAC token for authentication
      if (hmacToken) {
        // Subsequent requests must not have the x-token header and must have the x-session header.
        // Need to delete the x-token header for subsequent requests to work.
        if (response.subscriptionParams) {
          context.dispatch((0, _actions.updateHmacToken)(response.subscriptionParams.sessionId, platform));

          // Above action distaches no event
        } else {
          const error = new _errors.default({
            message: 'Failed user subscription.',
            code: _errors.authCodes.LINK_SUBSCRIBE_FAIL
          });
          throw error; // we will catch it below
        }
      }

      // Keep track of service subscription information.
      const subscription = _objectSpread(_objectSpread({}, response.subscriptionParams), {}, {
        servicesInfo: response.servicesInfo,
        url: response.subscription
      });
      const {
        webSocketOAuthMode
      } = (0, _selectors2.getConnectivityConfig)(context.getState());
      const params = {};
      const bearerAccessToken = linkConnection.bearerAccessToken;
      const accessToken = linkConnection.accessToken;
      if (bearerAccessToken && webSocketOAuthMode === 'query') {
        // If using bearerAccessToken, set the param token property to its value
        params.access_token = bearerAccessToken;
      } else if (accessToken) {
        // If using an access token from UC, set the property. Note it's different than bearerAccess
        params.token = accessToken;
      }

      // Need to create a new object, rather than adding `url` to
      // connectionInfo in order to prevent state mutation.
      // Format the response to pass off to the connectivity plugin.
      const websocketConfig = (0, _selectors3.getWebsocketConfig)(context.getState());
      const websocketInfo = {
        protocol: 'wss',
        server: websocketConfig.server,
        port: websocketConfig.port,
        url: subscription.notificationChannel,
        params: params
      };
      // Request the websocket connection.
      context.dispatch((0, _actions2.wsAttemptConnect)(websocketInfo, platform));

      // Above action issues WS_CHANGE event, so in redesign we need to explicitly trigger it.
      //
      // TODO: Uncomment this event when connectivity plugin is redesigned and the
      // 'mapEvents(eventsMap)' is removed from src/connectivity/common/base.js
      // because right now, wsAttemptConnect action already issues WS_CAHNGE event.
      // emitEvent(connEventTypes.WS_CHANGE, { platform })

      // Block execution here until this operation is notified that WS_CONNECT_FINISHED action
      // was triggered and a result is returned (i.e. WebSocket is open or there was an error).
      // (Any errors thrown by the takeAction will be caught below)
      const wsOpenOrError = await Notifications.takeAction(webSocketConnectedPattern);

      // Check for error in the result.
      if (wsOpenOrError.error) {
        // Clean up our subscription on the backend
        await operations.unsubscribe(subscription);
        throw wsOpenOrError.payload; // will be caught below
      }
      log.info(`Subscribed to the following services: ${subscription.service}`);

      // SUBSCRIBE_FINISHED action (with no error) will be invoked once this operation returns,
      // so return the subscription object
      return {
        subscriptions: [subscription],
        platform
      };
    } catch (error) {
      // Any errors enountered by the subscribe operation will be caught here
      log.debug(`Subscription failed: ${error.message}`);
      // Delegate to API: the API will trigger a subscribeFinished action containing this error.
      throw error;
    }
  }
  return subscribe;
}

/***/ }),

/***/ 46892:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequest;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _utils = __webpack_require__(25189);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _services = __webpack_require__(4025);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Request factory function.
 * @method createRequest
 * @param  {Object} container The bottle container.
 * @return {Function} The `subscribe` REST operation.
 */
function createRequest(container) {
  const {
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');

  /**
   * KL REST Request to subscribe for various backend services.
   * @method subscribe
   * @param {Object} authConfig Configuration from the auth plugin.
   * @param {number} expires Length in time to keep subscription.
   * @param  {Object} connection Server information.
   * @param {Array<string | services.ServiceDescriptor>} services A list of service configurations.
   * @param {Object} [options] The options object for non-credential options.
   * @return {Object} Subscription response containing the list of subscribed service names.
   * @throws {BasicError} Throws an error if the REST request fails.
   */
  async function subscribe(authConfig, expires, connection, services) {
    let extras = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    const subscribeType = authConfig.isAnonymous ? 'anonymous' : 'user';
    let requestOptions = {};
    requestOptions.method = 'POST';
    requestOptions.url = `${connection.server.protocol}://${connection.server.server}:${connection.server.port}` + `/rest/version/${connection.server.version}` + `/${subscribeType}/${connection.username}/subscription`;
    requestOptions.body = JSON.stringify({
      subscribeRequest: {
        expires: expires,
        service: services,
        localization: authConfig.localization || 'English_US',
        useTurn: authConfig.useTurn || true,
        notificationType: authConfig.notificationType || 'WebSocket',
        supported: ['RingingFeedback'],
        forceLogOut: (extras.forceLogOut || false).toString(),
        clientCorrelator: extras.clientCorrelator
      }
    });

    // If there were any extra request options, merge them into the
    //      options for this request. Priority is for the options defined here.
    requestOptions = (0, _utils.mergeValues)(extras, requestOptions);
    const response = await sendRequest(requestOptions);
    const {
      body,
      error,
      result
    } = response;
    if (error) {
      let errorCode = _errors.authCodes.LINK_SUBSCRIBE_FAIL;
      if (body) {
        let statusCode;
        let retryAfter;
        /*
         * In some cases, the response is not wrapped in a `subscribeResponse`
         *    property. This seems to be when using a pre-provisioned user (stored
         *    as part of KL?) rather than a dynamically created user (retrieved
         *    from AS?).
         * Reference: ABE-23981 (and KAA-1937)
         */
        if (body.statusCode && body.reason) {
          statusCode = body.statusCode;
          if (statusCode === 503) {
            retryAfter = body.retryAfter;
            errorCode = _errors.authCodes.LINK_SUBSCRIBE_UNAVAILABLE;
          }
        } else if (body.subscribeResponse) {
          statusCode = body.subscribeResponse.statusCode;
          if (statusCode === 503) {
            retryAfter = body.subscribeResponse.retryAfter;
            errorCode = _errors.authCodes.LINK_SUBSCRIBE_UNAVAILABLE;
          }
        }
        log.debug(`Failed user subscription with status code ${statusCode}.`);

        // Handle errors from the server.
        const errorInfo = {
          message: `Failed to subscribe user. Status Code: ${statusCode}.`,
          code: errorCode
        };
        const returnValue = {
          // TODO: Better error; more info.
          error: new _errors.default(errorInfo)
        };
        if (retryAfter && retryAfter > 0) {
          returnValue.retryAfter = retryAfter;
        }
        return returnValue;
      } else {
        log.debug('Failed user subscription.', result.message);
        // Handle errors from the request plugin.
        return {
          // TODO: Better error; more info.
          error: new _errors.default({
            message: `Subscribe request failed: ${result.message}.`,
            // TODO: Shared error codes.
            code: errorCode
          })
        };
      }
    } else {
      // Request was successful.
      const subscribeResponse = body.subscribeResponse;
      const subscribedServices = subscribeResponse.subscriptionParams.service;
      const servicesInfo = (0, _services.parseSpidrServices)(services, subscribedServices);
      log.debug(`Subscribed user. Service subscription status: ${servicesInfo.status}`);
      return _objectSpread({
        error: false,
        servicesInfo
      }, subscribeResponse);
    }
  }
  return subscribe;
}

/***/ }),

/***/ 87711:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerFeature;
var _request = _interopRequireDefault(__webpack_require__(90269));
var _operation = _interopRequireDefault(__webpack_require__(46918));
function registerFeature(bottle) {
  bottle.factory('SubscriptionRequests.unsubscribe', container => {
    return (0, _request.default)(bottle.container);
  });
  bottle.factory('SubscriptionOperations.unsubscribe', container => {
    return (0, _operation.default)(bottle.container);
  });
}

/***/ }),

/***/ 46918:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _selectors = __webpack_require__(48944);
var _selectors2 = __webpack_require__(46942);
var _selectors3 = __webpack_require__(53951);
var _actions = __webpack_require__(69897);
var _actionTypes = __webpack_require__(53202);
var _constants = __webpack_require__(49833);
// Auth Plugin

// Connectivity Plugin

// Constants

/**
 * Operation factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `subscribe` operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    SubscriptionRequests: requests,
    Notifications
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');
  // This is an Link plugin.
  const platform = _constants.platforms.LINK;
  function webSocketDisconnectedPattern(action) {
    // Wait for the web socket to be connected by listening for action type: WS_CONNECT_FINISHED
    return (action.type === _actionTypes.WS_DISCONNECT_FINISHED || action.type === _actionTypes.WS_ERROR) && action.meta.platform === platform;
  }

  /**
   * Operation for unsubscribing from given set of services on the Link backend.
   * Performs the workflow of disconnecting/unsubscribing from the WebRTC Gateway services.
   *
   * @method unsubscribe
   * @param {Object} The current subscription information (which contains a list of subscribed services).
   * @return {undefined}
   * @throws {BasicError} Throws an error if REST request fails.
   */
  async function unsubscribe(subscription) {
    log.info('Unsubscribing from existing subscription:', subscription);
    if (!subscription) {
      // Retrieve needed info from the store.
      subscription = (0, _selectors.getSubscriptionInfo)(context.getState());
    }
    // Since link will only ever have 1 subscription object in
    // this array, we can take the first element and use it directly
    subscription = subscription[0];
    const connection = (0, _selectors2.getConnectionInfo)(context.getState());

    // If the above info is not present, we probably got a disconnect mid-connection attempt.
    if (subscription && connection) {
      // If the info is in the store we can go ahead and unsubscribe.
      // We don't care about the return value, because we are going to clean-up
      //    the subscription in state either way.
      try {
        await requests.unsubscribe(connection, subscription.url);
        const wsState = (0, _selectors3.getConnectionState)(context.getState(), platform);
        if (wsState.connected) {
          const promise = Notifications.takeAction(webSocketDisconnectedPattern);

          // disconnect from the websocket
          context.dispatch((0, _actions.wsDisconnect)(undefined, platform));

          // the above action triggers no event

          // Block execution here until this operation is notified that WS_DISCONNECT_FINISHED action
          // was triggered (or the WS_ERROR action). i.e. the promise was fullfilled.
          await promise;
        }
      } catch (error) {
        log.debug(`Unsubscription failed: ${error.message}`);
        throw error;
      }
    }
  }
  return unsubscribe;
}

/***/ }),

/***/ 90269:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequest;
var _errors = _interopRequireDefault(__webpack_require__(83437));
// Errors

/**
 * Request factory function.
 * @method createRequest
 * @param  {Object} container The bottle container.
 * @return {Function} The `unsubscribe` REST operation.
 */
function createRequest(container) {
  const {
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');

  /**
   * KL REST Request to unsubscribe from various backend services
   * using the supplied subscription info.
   * @method unsubscribe
   * @param  {Object}    connection Server information for the service in use.
   * @param  {string}    connection.server Server information for generating the URL.
   * @param  {string}    connection.requestOptions Common request options to be added.
   * @param  {string}    subscriptionURL URL of the user's subscription instance.
   */
  async function unsubscribe(connection, subscriptionURL) {
    const requestOptions = {};
    requestOptions.method = 'DELETE';
    requestOptions.url = `${connection.server.protocol}://${connection.server.server}:${connection.server.port}` + subscriptionURL;

    // Send the unsubscribe request.
    const response = await sendRequest(requestOptions);
    const {
      body,
      error,
      result
    } = response;

    /*
     * No matter what the response was, we still want to handle the user as
     *    unsubscribed afterwards. If the request fails, there isn't a point to
     *    keep the user subscribed since they want to unsubscribe anyway.
     * For debug purposes, log what the response was but handle it as a success.
     */
    if (error) {
      if (body && body.subscribeResponse) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.subscribeResponse;
        log.debug(`Encountered error unsubscribing user with status code ${statusCode}.`);
        throw new _errors.default({
          message: `Failed to unsubscribe. Status Code: ${statusCode}`,
          code: statusCode
        });
      } else {
        // Handle errors from the request helper.
        const {
          message,
          code
        } = result;
        log.debug('Encountered error unsubscribing user.', message);
        throw new _errors.default({
          message,
          code
        });
      }
    } else {
      // Request was successful.
      log.debug('User unsubscribed successfully.');
    }
  }
  return unsubscribe;
}

/***/ }),

/***/ 10974:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerFeature;
var _request = _interopRequireDefault(__webpack_require__(3038));
var _operation = _interopRequireDefault(__webpack_require__(527));
function registerFeature(bottle) {
  bottle.factory('SubscriptionRequests.resubscribe', container => {
    return (0, _request.default)(bottle.container);
  });
  bottle.factory('SubscriptionOperations.updateSubscription', container => {
    return (0, _operation.default)(bottle.container);
  });
}

/***/ }),

/***/ 527:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _union2 = _interopRequireDefault(__webpack_require__(38959));
var _selectors = __webpack_require__(48944);
var _selectors2 = __webpack_require__(46942);
var _constants = __webpack_require__(49833);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Subscription plugin
// Auth plugin
// Constants
// Utils

/**
 * Operation factory function.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `update subscription` operation.
 */
function createOperation(container) {
  const {
    context,
    logManager,
    SubscriptionRequests: requests
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');
  // This is an Link plugin.
  const platform = _constants.platforms.LINK;

  /**
   * Operation for updating services belonging to an existing subscription on the Link backend.
   * In both failure and success scenarios, this operation will trigger a "subscribe finish" action
   * whose payload contains the end result.
   *
   * @method updateSubscription
   * @param {Array} newServices The new set of services that require a subscription update.
   * @param {boolean} addService If true, then a union between existing services and these new services will be performed and the resulting set
   *   will be used in requesting a service update on the backend.
   *   If false, then the subscription update request will be made only for these new services.
   *   Therefore, if there were existinging subscribed services that are not part of new set, then subscription for those services will be discarded.
   * @return {Object}
   */
  async function updateSubscription(newServices) {
    let addService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    log.info('Updating subscription using new services: ', newServices);
    const connection = (0, _selectors2.getConnectionInfo)(context.getState());
    const subscription = (0, _selectors.getSubscriptionInfo)(context.getState());
    const services = newServices.map(subscription => subscription.service);
    if (addService) {
      subscription[0].service = (0, _union2.default)(services, subscription[0].service);
    } else {
      subscription[0].service = subscription[0].service.filter(service => services.includes(service));
    }
    try {
      //  Use the resubscribe request to update the subscription. The endpoint is for both.
      const response = await requests.resubscribe(connection, subscription);
      // Keep track of service subscription information.
      const updatedSubscription = _objectSpread(_objectSpread({}, response.subscriptionParams), {}, {
        servicesInfo: response.servicesInfo,
        url: response.subscription
      });
      log.info(`Subscribed to the following services: ${subscription[0].service}`);

      // Upon returning this to subscriptionFlow (which returns it to API),
      // the API will then trigger the associated action & event
      return {
        subscriptions: [updatedSubscription],
        platform
      };
    } catch (error) {
      log.debug(`Subscription failed: ${error.message}`);
      // Throw the error. The API will catch it and dispatch appropriate action & event
      throw error;
    }
  }
  return updateSubscription;
}

/***/ }),

/***/ 3038:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequest;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _services = __webpack_require__(72203);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Other plugins.
/**
 * Request factory function.
 * @method createRequest
 * @param  {Object} container The bottle container.
 * @return {Function} The `unsubscribe` REST operation.
 */
function createRequest(container) {
  const {
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');

  /**
   * REST Request to resubscribe for existing backend services
   * using the supplied subscription info.
   * @method resubscribe
   * @param  {Object}    connection Server information for the service in use.
   * @param  {string}    connection.server Server information for generating the URL.
   * @param  {string}    connection.requestOptions Common request options to be added.
   * @param  {Object}    subscription Information about the subscription instance.
   * @param  {number}    subscription.expires - The time (in seconds) until subscription expiry.
   * @param  {Array}     subscription.service - The SPiDR services to resubscribe to.
   * @param  {Array}     subscription.url - The URL of the user's subscription instance.
   * @return {Object}    Resubscription response.
   */
  async function resubscribe(connection, _ref) {
    let [subscription] = _ref;
    const requestOptions = {};
    requestOptions.method = 'PUT';
    if (subscription.clientCorrelator) {
      requestOptions.url = `${connection.server.protocol}://${connection.server.server}:${connection.server.port}` + `/rest/version/${connection.server.version}` + `/user/${connection.username}/subscription/clientCorrelator/${subscription.clientCorrelator}`;
    } else {
      requestOptions.url = `${connection.server.protocol}://${connection.server.server}:${connection.server.port}` + subscription.url;
    }
    // TODO: Don't hardcode the defaults here. Should be shared with
    //      the subscribe request as well.
    requestOptions.body = JSON.stringify({
      subscribeRequest: {
        expires: subscription.expires,
        service: subscription.service,
        localization: subscription.localization || 'English_US',
        useTurn: subscription.useTurn || true,
        notificationType: subscription.notificationType || 'WebSocket',
        supported: ['RingingFeedback']
      }
    });

    // Send the subscription update request.
    const response = await sendRequest(requestOptions);
    const {
      body,
      error,
      result
    } = response;
    if (error) {
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.subscribeResponse;
        log.debug(`Failed to update user subscription with status code ${statusCode}.`);
        let message, errorCode;
        if (result.code === 404 && statusCode === 39) {
          /*
           * Special case: Status code 39 means the subscription does not exist (ie.
           *    the request 404'd). We want to treat this error differently because
           *    it is a "subscription gone" scenario and we need to clear the
           *    SDK's subscription info.
           */
          message = `Subscription no longer exists. Code ${statusCode}.`;
          // TODO: We shouldn't be assigning arbitrary codes to BasicError (ie. only
          //    use the codes pre-defined) because the application also gets access
          //    to this, but we don't have a good way to pass specific error info
          //    around for side-effects (ie. subscription gone).
          errorCode = statusCode;
        } else {
          message = `Failed to update user subscription with status code ${statusCode}.`;
          errorCode = _errors.authCodes.LINK_UPDATE_SUBSCRIPTION_FAIL;
        }

        // TODO: Better error; more info.
        throw new _errors.default({
          message,
          code: errorCode
        });
      } else {
        // Handle errors from the request helper.
        const {
          message
        } = result;
        log.debug('User subscription update request failed.', message);

        // TODO: Better error; more info.
        throw new _errors.default({
          message: `Update subscription request failed.: ${message}.`,
          // TODO: Shared error codes.
          code: _errors.authCodes.LINK_UPDATE_SUBSCRIPTION_FAIL
        });
      }
    } else {
      // Request was successful.
      const resubResponse = body.subscribeResponse;
      if (resubResponse.statusCode === 0 || resubResponse.statusCode === 2) {
        const subscribedServices = resubResponse.subscriptionParams.service;
        const servicesInfo = (0, _services.parseSpidrServices)(subscription.service, subscribedServices);
        log.debug(`Resubscribed user. Service resubscription status: ${servicesInfo.status}`);

        // Success.
        return _objectSpread({
          error: false,
          servicesInfo
        }, resubResponse);
      } else {
        // Unknown statusCode, consider as failure.
        throw new _errors.default({
          message: `Unknown error; statusCode: ${resubResponse.statusCode}.`,
          code: _errors.authCodes.LINK_UPDATE_SUBSCRIPTION_FAIL
        });
      }
    }
  }
  return resubscribe;
}

/***/ }),

/***/ 27114:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = subscriptionFactory;
var _interface = __webpack_require__(81301);
var actionTypes = _interopRequireWildcard(__webpack_require__(27190));
var _constants = __webpack_require__(43265);
var _subscriptionFlow = _interopRequireDefault(__webpack_require__(90537));
var _onWebsocketOverridden = _interopRequireDefault(__webpack_require__(7466));
var _onSubscriptionGone = _interopRequireDefault(__webpack_require__(10836));
var _onConnectionLost = _interopRequireDefault(__webpack_require__(81157));
var features = _interopRequireWildcard(__webpack_require__(66342));
var initIntervals = _interopRequireWildcard(__webpack_require__(93669));
var _actions = __webpack_require__(44295);
var _actions2 = __webpack_require__(43424);
var _actionTypes2 = __webpack_require__(9148);
var connectivityActionTypes = _interopRequireWildcard(__webpack_require__(53202));
var _utils = __webpack_require__(25189);
var _validation = __webpack_require__(42850);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// The interface to follow.

// Subscription operations registered by the plugin initialization itself

// Features (which includes Operations + Requests)

// Intervals

// Actions

// State setters.

// Notifications Plugin

// Connectivity Plugin

// Utilities.

// Parse and/or Validate

/**
 * Subscription plugin factory.
 * @method subscriptionFactory
 * @param {Object} options - Configuration options for subscription. See above.
 * @return {Object} bottle - The bottle container.
 */
function subscriptionFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  const minExpiryInSec = _constants.MINIMUM_EXPIRY_SUBSCRIPTION_INTERVAL / 1000;

  /**
   * Configuration options for the Subscription feature.
   * @public
   * @name config.subscription
   * @memberof config
   * @instance
   * @param {Object} subscription Subscription config.
   * @param {number} [subscription.expires=3600] The amount of time (in seconds) for which to keep subscription up and alive. Cannot be less than minimum threshold of 60 seconds.
   * @param {number} [subscription.serviceUnavailableMaxRetries=3] The maximum number of times this client will retry in order to subscribe for a
   * given service, while getting 'Service Unavailable' from backend.
   * @param {Object} subscription.websocket
   * @param {string} subscription.websocket.server Hostname of the server to be used for websocket notifications.
   * @param {string} [subscription.websocket.protocol=wss] Protocol to be used for websocket notifications.
   * @param {Number} [subscription.websocket.port=443] Port to be used for websocket notifications.
   */
  const defaultOptions = {
    expires: 3600,
    // seconds
    serviceUnavailableMaxRetries: 3,
    websocket: {
      protocol: 'wss',
      port: 443
    }
  };

  // config validation
  const v8nValidation = _validation.validation.schema({
    expires: _validation.validation.positive().greaterThanOrEqual(minExpiryInSec),
    serviceUnavailableMaxRetries: _validation.validation.positive(),
    websocket: _validation.validation.schema({
      server: _validation.validation.string(),
      protocol: _validation.validation.string(),
      port: _validation.validation.positive()
    })
  });
  const parseOptions = (0, _validation.parse)('subscription', v8nValidation);
  options = (0, _utils.mergeValues)(defaultOptions, options);
  parseOptions(options);

  /*
   * Init function to setup the Subscription plugin.
   * @param {Object} container The bottle container.
   */
  function initPlugin(container) {
    const {
      context
    } = container;
    if (options.expires < minExpiryInSec) {
      // Update the config to use correct value
      options.expires = minExpiryInSec;
    }

    // Send the provided options to the store.
    // This will be `state.config[name]`.
    context.dispatch((0, _actions2.update)(options, _interface.name));

    // Register the all services.
    context.dispatch((0, _actions.registerService)(['call', 'Presence', 'IM']));

    // Take notifications about the websocket being 'overridden'.
    function receiveOverriddenNotificationPattern(action) {
      return action.type === _actionTypes2.NOTIFICATION_RECEIVED && action.payload.notificationMessage && action.payload.notificationMessage.eventType === 'websocketOverridden';
    }
    container.Notifications.takeEveryAction(receiveOverriddenNotificationPattern, action => {
      // The handling does not need anything from the incoming action itself, as all info is obtained from state.
      const {
        SubscriptionOperations: operations
      } = container;
      // Call our operation which was registered under the name of: onWebsocketOverridden
      // which maps to calling 'handleWebSocketOverridden' operation
      operations.onWebsocketOverridden();
    });

    // Take notifications about the subscription being 'gone'.
    function receiveSubscriptionGoneNotificationPattern(action) {
      return action.type === _actionTypes2.NOTIFICATION_RECEIVED && action.payload.notificationMessage && action.payload.notificationMessage.eventType === 'gone';
    }
    container.Notifications.takeEveryAction(receiveSubscriptionGoneNotificationPattern, action => {
      const {
        SubscriptionOperations: operations
      } = container;
      // Call our operation which was registered under the name of: onSubscriptionGone
      // which maps to calling 'receiveNotificationMessage' operation
      operations.onSubscriptionGone(action.payload.notificationMessage);
    });

    // Take "resubscription failed" actions caused by the subscription not existing.
    function receiveResubGoneSubscriptionPattern(action) {
      return action.type === actionTypes.RESUBSCRIPTION_FINISHED && action.error &&
      // Magic number: 39 is KL's statusCode for "resource does not exist".
      action.payload.code === 39;
    }
    container.Notifications.takeEveryAction(receiveResubGoneSubscriptionPattern, action => {
      const {
        SubscriptionOperations: operations
      } = container;
      // Call our operation which was registered under the name of: onSubscriptionGone
      // which maps to calling 'receiveNotificationMessage' operation
      operations.onSubscriptionGone(action.payload.notificationMessage);
    });

    // Take connectivity.WS_RECONNECT_FAILED actions
    function receiveConnectionLostPattern(action) {
      return action.type === connectivityActionTypes.WS_RECONNECT_FAILED;
    }
    container.Notifications.takeEveryAction(receiveConnectionLostPattern, action => {
      const {
        SubscriptionOperations: operations
      } = container;
      // Call our operation which was registered under the name of: onConnectionLost
      // which maps to calling 'handleLossOfConnection' operation
      operations.onConnectionLost();
    });
  }

  // Register the component factory functions to the bottle.
  bottle.factory('SubscriptionAPI', _interface.createAPI);

  // Register the main operation which controls the subscription flow
  bottle.factory('SubscriptionOperations.subscriptionFlow', container => {
    return (0, _subscriptionFlow.default)(bottle.container);
  });

  // Register the operation that handles a 'websocket overwritten' notification
  bottle.factory('SubscriptionOperations.onWebsocketOverridden', container => {
    return (0, _onWebsocketOverridden.default)(bottle.container);
  });

  // Register the operation that handles either a 'subscription gone' notification or
  // a 'resubscription failed' notification caused by the subscription not existing.
  bottle.factory('SubscriptionOperations.onSubscriptionGone', container => {
    return (0, _onSubscriptionGone.default)(bottle.container);
  });

  // Register the operation that handles a 'loss of connection' notification
  bottle.factory('SubscriptionOperations.onConnectionLost', container => {
    return (0, _onConnectionLost.default)(bottle.container);
  });

  // Initialize the plugin features with the bottle scope.
  for (const name in features) {
    features[name](bottle);
  }

  // Initialize intervals
  for (const name in initIntervals) {
    initIntervals[name](bottle);
  }
  bottle.defer(initPlugin);
  return {
    capabilities: ['subscription'],
    reducer: _interface.reducer,
    name: _interface.name
  };
}

/***/ }),

/***/ 93669:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = registerIntervals;
var _resubscribe = _interopRequireDefault(__webpack_require__(38835));
/**
 * Register intervals with the bottle. This will make it available on the
 *    top-level container under its namespace.
 */
function registerIntervals(bottle) {
  bottle.factory('SubscriptionIntervals.resubInterval', () => {
    return (0, _resubscribe.default)(bottle.container);
  });
}

/***/ }),

/***/ 38835:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createInterval;
var _selectors = __webpack_require__(48944);
var actions = _interopRequireWildcard(__webpack_require__(44295));
var _constants = __webpack_require__(43265);
var _selectors2 = __webpack_require__(46942);
var _eventTypes = __webpack_require__(36826);
var _constants2 = __webpack_require__(49833);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Subscription plugin.

// Auth Plugin

// Constants

/**
 * Subscription plugin's resubscription interval factory function.
 * @method createInterval
 * @param {Object} container The bottle container.
 * @return {Object} Available interval for Subscription's resubscription.
 */
function createInterval(container) {
  const {
    context,
    createInterval,
    SubscriptionRequests,
    emitEvent
  } = container;

  // Interval function for resubscription
  let resubInterval;

  // Number of retry attemps
  let attemptNum = 1;

  /**
   * Check if the interval is running.
   * @method isRunning
   * @return {boolean} The interval is running or not.
   */
  function isRunning() {
    return !!resubInterval;
  }

  /**
   * Start the interval.
   * @param { function } update The update function to be called at regular interval of time.
   * @param { number }   expires The subscription expiry value (in seconds), as provided from SDK configuration.
   * @method start
   */
  function start(update, expires) {
    // Set the delay to 50% of the interval between now and when the subscription expires for the first attempt,
    // 25% for the second attempt, etc
    let resubDelay = expires * 1000 / Math.pow(2, attemptNum);
    const halfwayInterval = _constants.MINIMUM_EXPIRY_SUBSCRIPTION_INTERVAL / 2;
    // Don't try to resub more often than every halfwayInterval seconds.
    resubDelay = resubDelay > halfwayInterval ? resubDelay : halfwayInterval;

    // Create a randomized version for 'resubDelay' value (each time we resubscribe) and
    // use that random value instead.
    // In this case, if the provided 'resubDelay' value is x,
    // the final chosen value will be a random value between (0.8 * x) and (1.2 * x)
    const lowerLimit = resubDelay * 0.8;
    const upperLimit = resubDelay * 1.2;
    // Random between 1 and (upper - lower)
    const randomVal = Math.floor(Math.random() * (upperLimit - lowerLimit) + 1);
    resubInterval = createInterval(update, lowerLimit + randomVal);
    resubInterval.start();
  }

  /**
   * Stop the interval.
   * @method stop
   */
  function stop() {
    if (resubInterval) {
      resubInterval.stop();
      resubInterval = undefined;
    }
  }

  /**
   * Start a new interval timer for resubscribing to services.
   * It extends the lifetime of a subscription, therefore,
   * it should be called either when SUBSCRIBE_FINISH action (with no error) is triggered
   * or when the RESUBSCRIPTION_FINISHED action is triggered.
   * - 'subscribeFinished' action is called from either 'subscribe' or 'updateSubscription' operations,
   *   therefore those two operations will start this function.
   * - 'resubscribeFinished' action is called from within this function, therefore its internal update
   *   function will be called from within.
   *
   * @method startResubInterval
   * @throws {Error} If the interval is already running.
   */
  async function startResubInterval() {
    if (isRunning()) {
      stop();
    }
    const conn = (0, _selectors2.getConnectionInfo)(context.getState());
    const subscription = (0, _selectors.getSubscriptionInfo)(context.getState());
    // Check if we actually have a subscription and if not, just stop interval
    if (!subscription || !subscription[0]) {
      stop();
    }

    // Update our subscription
    async function update() {
      try {
        // calls the request that was registered with the bottle in
        // "features/update/request.js"
        await SubscriptionRequests.resubscribe(conn, subscription);
        context.dispatch(actions.resubscribeFinished({
          attemptNum
        }, _constants2.platforms.LINK));
        emitEvent(_eventTypes.SUB_RESUB, {
          attemptNum,
          isFailure: false
        });
      } catch (error) {
        if (error.code === 39) {
          // Server replied with 'no resource available' so outstanding subscription is no longer valid.
          // Therefore, no point into continuing with automatic re-subscription.
          stop();

          // If we got this error code, for all purposes we can consider that we're NOT subscribed,
          // so trigger the unsubscribe action.
          // This action should clear the subscriptions array in state.
          context.dispatch(actions.unsubscribeFinished({
            reason: _constants.DISCONNECT_REASONS.GONE
          }, _constants2.platforms.LINK));
          emitEvent(_eventTypes.SUB_CHANGE, {
            isFailure: true,
            reason: _constants.DISCONNECT_REASONS.GONE
          });
          return;
        }

        // It is just a temporary error during re-subscription,
        // so we'll try again to resubscribe when interval expires.
        context.dispatch(actions.resubscribeFinished({
          error,
          attemptNum
        }, _constants2.platforms.LINK));
        emitEvent(_eventTypes.SUB_RESUB, {
          attemptNum,
          isFailure: true
        });

        // Increment our attempts
        attemptNum++;
      }
    }

    // Start the interval as long as we have an existing subscription
    if (subscription.length > 0) {
      start(update, subscription[0].expires);
    }
  }

  /**
   * Stop the resubscription interval.
   * @method stopResubInterval
   */
  function stopResubInterval() {
    if (resubInterval) {
      resubInterval.stop();
      resubInterval = undefined;
    }
  }
  return {
    startResubInterval,
    stopResubInterval
  };
}

/***/ }),

/***/ 81157:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(44295));
var eventTypes = _interopRequireWildcard(__webpack_require__(36826));
var _constants = __webpack_require__(43265);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Subscription plugin.

/**
 * Operation factory function responsible for handling the 'connection lost' notification.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The 'handling of loss of connection' operation.
 */
function createOperation(container) {
  const {
    context,
    emitEvent,
    SubscriptionIntervals
  } = container;
  async function handleLossOfConnection() {
    // Stop the automatic re-subscription interval.
    SubscriptionIntervals.resubInterval.stopResubInterval();
    context.dispatch(actions.unsubscribeFinished({
      reason: _constants.DISCONNECT_REASONS.LOST_CONNECTION
    }));

    // Dispatch an event with same payload, for backwards compatibility.
    emitEvent(eventTypes.SUB_CHANGE, {
      reason: _constants.DISCONNECT_REASONS.LOST_CONNECTION
    });
  }
  return handleLossOfConnection;
}

/***/ }),

/***/ 10836:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(44295));
var eventTypes = _interopRequireWildcard(__webpack_require__(36826));
var _selectors = __webpack_require__(48944);
var _constants = __webpack_require__(43265);
var _selectors2 = __webpack_require__(53951);
var _actionTypes = __webpack_require__(53202);
var _actions2 = __webpack_require__(69897);
var _constants2 = __webpack_require__(49833);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Subscription plugin.

// Connectivity Plugin

// Constants

/**
 * Operation factory function responsible for handling the 'subscription gone'
 * or the 'resubscription failed' notifications.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The handling of a 'subscription gone or failed resubscription' operation.
 */
function createOperation(container) {
  const {
    context,
    emitEvent,
    Notifications,
    SubscriptionIntervals
  } = container;

  // This is an Link plugin.
  const platform = _constants2.platforms.LINK;
  function webSocketDisconnectedPattern(action) {
    // Wait for the web socket to be connected by listening for action type: WS_CONNECT_FINISHED
    return (action.type === _actionTypes.WS_DISCONNECT_FINISHED || action.type === _actionTypes.WS_ERROR) && action.meta.platform === platform;
  }
  async function receiveNotificationMessage(notificationMessage) {
    // Dispatch an action to disconnect the websocket (and let the connectivity
    //      plugin know we expect it to be disconnected).
    const wsState = (0, _selectors2.getConnectionState)(context.getState(), platform);
    if (wsState.connected) {
      const promise = Notifications.takeAction(webSocketDisconnectedPattern);

      // disconnect from the websocket
      context.dispatch((0, _actions2.wsDisconnect)(undefined, platform));

      // the above action triggers no event

      // Block execution here until this operation is notified that WS_DISCONNECT_FINISHED action
      // was triggered (or the WS_ERROR action). i.e. the promise was fullfilled.
      await promise;
    }

    // Dispatch a disconnect finished action to trigger "user disconnected" logic.
    // Ignore the GONE notification if an unsubscribe operation is pending as the unsubscribe saga will trigger the subscribe:change event already.
    const pendingOperation = (0, _selectors.getPendingOperation)(context.getState());
    if (pendingOperation && pendingOperation.operation === _constants.OPERATIONS.UNSUBSCRIBE) {
      return;
    }
    // Stop the automatic re-subscription interval, since any further attempts will fail,
    //  as server side no longer keeps the old subscription reference.
    // User will have to manually re-subscribe at this time.
    SubscriptionIntervals.resubInterval.stopResubInterval();
    const content = notificationMessage && notificationMessage.retryAfter ? {
      reason: _constants.DISCONNECT_REASONS.GONE,
      retryAfter: notificationMessage.retryAfter
    } : {
      reason: _constants.DISCONNECT_REASONS.GONE
    };
    context.dispatch(actions.unsubscribeFinished(content, platform));

    // Dispatch an event with same payload, for backwards compatibility.
    emitEvent(eventTypes.SUB_CHANGE, {
      reason: _constants.DISCONNECT_REASONS.GONE
    });
  }
  return receiveNotificationMessage;
}

/***/ }),

/***/ 7466:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var actions = _interopRequireWildcard(__webpack_require__(44295));
var eventTypes = _interopRequireWildcard(__webpack_require__(36826));
var _constants = __webpack_require__(43265);
var _selectors = __webpack_require__(53951);
var _actionTypes = __webpack_require__(53202);
var _actions2 = __webpack_require__(69897);
var _constants2 = __webpack_require__(49833);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Subscription plugin.

// Connectivity Plugin

// Constants

/**
 * Operation factory function responsible for handling the 'web socket overwridden' notification.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The 'handling of web socket overridden' operation.
 */
function createOperation(container) {
  const {
    context,
    emitEvent,
    Notifications,
    SubscriptionIntervals
  } = container;

  // This is an Link plugin.
  const platform = _constants2.platforms.LINK;
  function webSocketDisconnectedPattern(action) {
    // Wait for the web socket to be connected by listening for action type: WS_CONNECT_FINISHED
    return (action.type === _actionTypes.WS_DISCONNECT_FINISHED || action.type === _actionTypes.WS_ERROR) && action.meta.platform === platform;
  }
  async function handleWebSocketOverridden() {
    // Dispatch an action to disconnect the websocket (and let the connectivity
    //      plugin know we expect it to be disconnected).
    const wsState = (0, _selectors.getConnectionState)(context.getState(), platform);
    if (wsState.connected) {
      const promise = Notifications.takeAction(webSocketDisconnectedPattern);

      // disconnect from the websocket
      context.dispatch((0, _actions2.wsDisconnect)(undefined, platform));

      // the above action triggers no event

      // Block execution here until this operation is notified that WS_DISCONNECT_FINISHED action
      // was triggered (or the WS_ERROR action). i.e. the promise was fullfilled.
      await promise;
    }

    // Stop the automatic re-subscription interval.
    SubscriptionIntervals.resubInterval.stopResubInterval();

    // Dispatch a disconnect finished action to trigger "user disconnected" logic.
    context.dispatch(actions.unsubscribeFinished({
      reason: _constants.DISCONNECT_REASONS.WS_OVERRIDDEN
    }, platform));

    // Dispatch an event with same payload, for backwards compatibility.
    emitEvent(eventTypes.SUB_CHANGE, {
      reason: _constants.DISCONNECT_REASONS.WS_OVERRIDDEN
    });
  }
  return handleWebSocketOverridden;
}

/***/ }),

/***/ 90537:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperation;
var _difference2 = _interopRequireDefault(__webpack_require__(94815));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var actionTypes = _interopRequireWildcard(__webpack_require__(27190));
var _selectors = __webpack_require__(48944);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Subscription plugin.

// Errors

/**
 * Operation factory function responsible for controlling the subscription flow.
 * @method createOperation
 * @param  {Object} container The bottle container.
 * @return {Function} The `subscription flow` operation.
 */
function createOperation(container) {
  const {
    context,
    SubscriptionOperations: operations,
    Notifications,
    logManager
  } = container;
  const log = logManager.getLogger('SUBSCRIPTION');

  /**
   * Entry point for ALL subscription change actions.
   * Handles SUBSCRIBE & UNSUBSCRIBE incoming actions and calls the appropriate operation.
   * In the case of a subscribe or update subscription request, it also watches over the progress by checking wether
   * operation suceeded or there was an error.
   * It triggers the appropriate action and event for either success or failure scenario.
   * @method subscriptionFlow
   * @param {Object|Array} info The info needed for a subscribe Or unsubscribe operation.
   */
  async function subscriptionFlow(info) {
    if (!(info instanceof Array)) {
      // it's a subscribe request
      const {
        services,
        options
      } = info;

      // Check if we have an existing subscription
      const subscription = (0, _selectors.getSubscriptionInfo)(context.getState());
      let finishOrCancel;

      // Check what we have in Redux state at the time we got the SUBSCRIBE action
      if (!subscription || !subscription[0]) {
        // No existing subscription, make a new subscription request
        // Fork off and try to connect/subscribe by calling 'subscribe' operation.
        // Call the operation just like the API calls it, except we don't await.
        // The 'services' param is already normalized and
        // 'options' param contains the type, clientCorrelator & forceLogOut.
        finishOrCancel = await Promise.race([operations.subscribe(services, options), Notifications.takeAction(actionTypes.UNSUBSCRIBE)]);
      } else {
        // Existing subscription found, update our subscription.
        // Fork off and try to update subscription by calling 'updateSubscription' operation
        // by not waiting for it. 'services' param is already normalized.
        finishOrCancel = await Promise.race([operations.updateSubscription(services, true), Notifications.takeAction(actionTypes.UNSUBSCRIBE)]);
      }

      /**
       * This if block covers 2 of the 3 flows of subscribe / unsubscribe.
       * 1. The first block covers what happens when we receive an UNSUBSCRIBE action before we finish connecting.
       *        IE UNSUBSCRIBE comes before a SUBSCRIBE_FINISHED.
       * 2. The second scenario covers what happens when we get a successful SUBSCRIBE_FINISHED event before any UNSUBSCRIBE events.
       * 3. The third scenario is not explicitly covered here. That scenario is when we received a SUBSCRIBE_FINISHED event with an error before any unsubscribe events.
       *      In this case, there is nothing that we explicitly have to do, since a SUBSCRIBE_FINISHED event with an error doesn't place anything into the state.
       *      Therefore there is no real cleanup for us to do in this scenario. We then want to wait for the next SUBSCRIBE (which we do via the next iteration).
       **/
      // In the case when updateSubscription operation finishes first, there will be no finishOrCancel returned.
      if (finishOrCancel && finishOrCancel.type === actionTypes.UNSUBSCRIBE) {
        // We got unsubscribe request before 'subscribe' operation (or 'updateSubscription' operation)
        // had a chance to finish. Therefore cancel the operation by forking the 'unsubscribe' operation.
        operations.unsubscribe();
      } else {
        // In the case of subscribe or updateSubscription operations finishing first, we need to return the result to API.
        // The API will then dispatch SUBSCRIBE_FINISHED action.
        return finishOrCancel;
      }
    } else {
      // it's for an unsubscribe request
      // Check if we have an existing subscription
      const subscription = (0, _selectors.getSubscriptionInfo)(context.getState());
      if (subscription && subscription[0]) {
        // Remove all services from our subscribed services if they are present
        const updatedServices = subscription[0].service.filter(service => !info.includes(service));
        if (updatedServices.length === 0) {
          // All services are being unsubscribed, so call 'unsubscribe' operation.
          // Wait for 'unsubscribe' operation to finish so that when it returns,
          // the API will dispatch the UNSUBSCRIBE_FINISHED action
          await operations.unsubscribe();
        } else if ((0, _isEmpty2.default)((0, _difference2.default)(subscription[0].service, updatedServices))) {
          // We don't have a subscription for any of the services requesting unsubscribing
          // No subscription found
          const error = new _errors.default({
            message: `No subscription found for ${JSON.stringify(info)}, can't unsubscribe.`,
            code: _errors.authCodes.LINK_UNSUBSCRIBE_FAIL
          });
          log.debug(`Unsubscribe failed: ${error.message}`);
          //  The API will dispatch the action + event
          throw error;
        } else {
          // Some services are being unsubscribed, update our subscription
          info = updatedServices.map(service => {
            return {
              service: service
            };
          });

          // Fork off the 'updateSubscription' operation
          return await operations.updateSubscription(info, false);
        }
      } else {
        // No subscription found
        const error = new _errors.default({
          message: "No subscription found, can't unsubscribe.",
          code: _errors.authCodes.LINK_UNSUBSCRIBE_FAIL
        });
        log.debug(`Unsubscribe failed: ${error.message}`);
        //  The API will dispatch the action + event
        throw error;
      }
    }
  }
  return subscriptionFlow;
}

/***/ }),

/***/ 67705:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UPDATE_CONTACT_FINISH = exports.UPDATE_CONTACT = exports.SEARCH_DIRECTORY_FINISH = exports.SEARCH_DIRECTORY = exports.REMOVE_CONTACT_FINISH = exports.REMOVE_CONTACT = exports.REFRESH_CONTACTS_FINISH = exports.REFRESH_CONTACTS = exports.FETCH_USER_FINISH = exports.FETCH_USER = exports.FETCH_CONTACT_FINISH = exports.FETCH_CONTACT = exports.ADD_CONTACT_FINISH = exports.ADD_CONTACT = void 0;
const prefix = '@@KANDY/';

/**
 * Contact Actions
 *
 * Action types associated with the operations of methods on the contacts namespace
 */
const ADD_CONTACT = exports.ADD_CONTACT = prefix + 'ADD_CONTACT';
const ADD_CONTACT_FINISH = exports.ADD_CONTACT_FINISH = prefix + 'ADD_CONTACT_FINISH';
const REFRESH_CONTACTS = exports.REFRESH_CONTACTS = prefix + 'REFRESH_CONTACTS';
const REFRESH_CONTACTS_FINISH = exports.REFRESH_CONTACTS_FINISH = prefix + 'REFRESH_CONTACTS_FINISH';
const REMOVE_CONTACT = exports.REMOVE_CONTACT = prefix + 'REMOVE_CONTACT';
const REMOVE_CONTACT_FINISH = exports.REMOVE_CONTACT_FINISH = prefix + 'REMOVE_CONTACT_FINISH';
const UPDATE_CONTACT = exports.UPDATE_CONTACT = prefix + 'UPDATE_CONTACT';
const UPDATE_CONTACT_FINISH = exports.UPDATE_CONTACT_FINISH = prefix + 'UPDATE_CONTACT_FINISH';
const FETCH_CONTACT = exports.FETCH_CONTACT = prefix + 'FETCH_CONTACT';
const FETCH_CONTACT_FINISH = exports.FETCH_CONTACT_FINISH = prefix + 'FETCH_CONTACT_FINISH';

/**
 * User Actions
 *
 * Action types associated with the operations of methods on the users namespace
 */
const FETCH_USER = exports.FETCH_USER = prefix + 'FETCH_USER';
const FETCH_USER_FINISH = exports.FETCH_USER_FINISH = prefix + 'FETCH_USER_FINISH';
const SEARCH_DIRECTORY = exports.SEARCH_DIRECTORY = prefix + 'SEARCH_DIRECTORY';
const SEARCH_DIRECTORY_FINISH = exports.SEARCH_DIRECTORY_FINISH = prefix + 'SEARCH_DIRECTORY_FINISH';

/***/ }),

/***/ 49323:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addContact = addContact;
exports.addContactFinish = addContactFinish;
exports.fetchContact = fetchContact;
exports.fetchContactFinish = fetchContactFinish;
exports.refreshContacts = refreshContacts;
exports.refreshContactsFinish = refreshContactsFinish;
exports.removeContact = removeContact;
exports.removeContactFinish = removeContactFinish;
exports.updateContact = updateContact;
exports.updateContactFinish = updateContactFinish;
var actionTypes = _interopRequireWildcard(__webpack_require__(67705));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Refresh the contact list.
 * @returns {Object} A flux standard action representing the REFRESH_CONTACTS action.
 */
function refreshContacts() {
  return {
    type: actionTypes.REFRESH_CONTACTS,
    payload: null
  };
}

/**
 * The finishing action which follows the REFRESH_CONTACTS action
 * @param {Object} $0
 * @param  {Array} [$0.contacts] An array of contact objects.
 * @param  {Object} [$0.error] An error object. Only present if an error occurred.
 * @returns {Object} A flux standard action representing the REFRESH_CONTACTS_FINISH action.
 */
function refreshContactsFinish(_ref) {
  let {
    contacts,
    error
  } = _ref;
  return {
    type: actionTypes.REFRESH_CONTACTS_FINISH,
    payload: error || contacts,
    error: Boolean(error)
  };
}

/**
 * Adds a contact to the Address Book
 * @param {Object} contact The contact object.
 * @returns {Object} A flux standard action representing the ADD_CONTACT action.
 */
function addContact(contact) {
  return {
    type: actionTypes.ADD_CONTACT,
    payload: contact
  };
}

/**
 * The finishing action which follows the ADD_CONTACT action
 * @param {Object} $0
 * @param {Object} [$0.contact] The contact object.
 * @param {Object} [$0.error] An error object. Only present if an error occurred.
 * @returns {Object} A flux standard action representing the ADD_CONTACT_FINISH action.
 */
function addContactFinish(_ref2) {
  let {
    contact,
    error
  } = _ref2;
  return {
    payload: error || contact,
    error: Boolean(error),
    type: actionTypes.ADD_CONTACT_FINISH
  };
}

/**
 * Fetch a contact from the user's personal address book
 * @param {string} contactId The ID of the contact to be fetched
 * @returns {Object} A flux standard action representing the FETCH_CONTACT action.
 */
function fetchContact(contactId) {
  return {
    type: actionTypes.FETCH_CONTACT,
    payload: contactId
  };
}

/**
 * The finishing action which follows a FETCH_CONTACT action
 * @param {Object} $0
 * @param {Object} [$0.contact] The contact object.
 * @param {Object} [$0.error] A Basic error object
 * @returns {Object} A flux standard action representing the FETCH_CONTACT_FINISH action.
 */
function fetchContactFinish(_ref3) {
  let {
    contact,
    error
  } = _ref3;
  return {
    type: actionTypes.FETCH_CONTACT_FINISH,
    payload: error || contact,
    error: Boolean(error)
  };
}

/**
 * Removes a contact from the Address Book
 * @param {string} contactId The id of the contact whom it has been requested to delete from the address book
 * @returns {Object} A flux standard action representing the REMOVE_CONTACT action.
 */
function removeContact(contactId) {
  return {
    type: actionTypes.REMOVE_CONTACT,
    payload: contactId
  };
}

/**
 * The finishing action which follows a REMOVE_CONTACT action
 * @param {Object} $0
 * @param {string} [$0.contactId] The id of the contact whom it has been requested to delete from the address book
 * @param {Object} [$0.error] An error object. Only present if an error occurred.
 * @returns {Object} A flux standard action representing the REMOVE_CONTACT_FINISH action.
 */
function removeContactFinish(_ref4) {
  let {
    contactId,
    error
  } = _ref4;
  return {
    type: actionTypes.REMOVE_CONTACT_FINISH,
    payload: contactId || error,
    error: !!error
  };
}

/**
 * Updates the data for a contact in the Address Book
 * @param {Object} contact The contact object. The contact object must include the ID of the contact being targeted for an update action.
 * @returns {Object} A flux standard action representing the UPDATE_CONTACT action.
 */
function updateContact(contact) {
  return {
    type: actionTypes.UPDATE_CONTACT,
    payload: contact
  };
}

/**
 * The finishing action which follows a UPDATE_CONTACT action
 * @param {Object} $0
 * @param {Object} [$0.contact] The contact object.
 * @param {Object} [$0.error] A Basic error object
 * @returns {Object} A flux standard action representing the UPDATE_CONTACT_FINISH action.
 */
function updateContactFinish(_ref5) {
  let {
    contact,
    error
  } = _ref5;
  return {
    type: actionTypes.UPDATE_CONTACT_FINISH,
    payload: error || contact,
    error: !!error
  };
}

/***/ }),

/***/ 11287:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fetchUser = fetchUser;
exports.fetchUserFinish = fetchUserFinish;
exports.searchDirectory = searchDirectory;
exports.searchDirectoryFinish = searchDirectoryFinish;
var actionTypes = _interopRequireWildcard(__webpack_require__(67705));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 *
 * @param {string} userId The URI uniquely identifying the user.
 * @returns {Object} A flux standard action representing the FETCH_USER action
 */
function fetchUser(userId) {
  return {
    type: actionTypes.FETCH_USER,
    payload: userId
  };
}

/**
 * Create a finish action to follow a FETCH_USER action.
 *
 * @param {Object} user A user object
 * @param {Object} [error] An error object.
 * @returns {Object} A flux standard action representing the USER_FETCH_FINISH action.
 */
function fetchUserFinish(user, error) {
  return {
    type: actionTypes.FETCH_USER_FINISH,
    payload: error || user,
    error: Boolean(error)
  };
}

/**
 * Create an action that searches the directory.
 *
 * @param {Object} filters Query filter options.
 * @param {string} [filters.name] Matches firstName or lastName.
 * @param {string} [filters.firstName] Matches firstName.
 * @param {string} [filters.lastName] Matches lastName.
 * @param {string} [filters.userName] Matches userName.
 * @param {string} [filters.phoneNumber] Matches phoneNumber.
 * @param {Object} [options] Sorting options
 * @param {string} [options.sortBy] The attribute upon which to sort results. This can be any of the above listed filters which describe a user attribute.
 * @param {string} [options.order] Order by which to return results. Can be one of "asc" or "desc".
 * @param {number} [options.max] The maximum number of results to return.
 * @param {string} [options.next] The pointer for a chunk of results, which may be returned from other a previous query.
 * @returns {Object} A flux standard action representing the SEARCH_DIRECTORY action.
 */
function searchDirectory(filters, options) {
  return {
    type: actionTypes.SEARCH_DIRECTORY,
    payload: {
      filters,
      options
    }
  };
}

/**
 * Create a finish action to follow the SEARCH_DIRECTORY action.
 *
 * @param {Object} $0 A dictionary object of parameters
 * @param {Array} [$0.users] The user objects
 * @param {Object} [$0.error] An error object.
 * @returns {Object} A flux standard action representing the DIRECTORY_CHANGED action.
 */
function searchDirectoryFinish(_ref) {
  let {
    users,
    error
  } = _ref;
  return {
    type: actionTypes.SEARCH_DIRECTORY_FINISH,
    payload: error || users,
    error: Boolean(error)
  };
}

/***/ }),

/***/ 41232:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = contactsAPI;
var _selectors = __webpack_require__(45741);
var eventTypes = _interopRequireWildcard(__webpack_require__(46268));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Users plugin.

function contactsAPI(container) {
  /**
   * The 'contacts' namespace allows users to store personal contacts to their account.
   *
   * @public
   * @namespace contacts
   */

  const {
    context,
    emitEvent,
    UsersOperations: operations,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('USERS');
  return {
    /**
     * Add a contact to a user's personal address book.
     * Will trigger the `contacts:new` event.
     *
     * @public
     * @memberof contacts
     * @method add
     * @requires addContactAsFriend
     * @param {Object} contact The contact object.
     * @param {string} contact.primaryContact The primary userId for the contact
     * @param {string} contact.contactId The contact's unique contact ID
     * @param {string} [contact.firstName] The contact's first name
     * @param {string} [contact.lastName] The contact's last name
     * @param {string} [contact.photoUrl] The URL address identifying location of user's picture
     * @param {string} [contact.emailAddress] The contact's email address
     * @param {string} [contact.homePhone] The contact's home phone number
     * @param {string} [contact.workPhone] The contact's business phone number
     * @param {string} [contact.mobilePhone] The contact's mobile phone number
     * @param {string} [contact.conferenceURL] Conference URL and access code for this user's address book entry
     * @param {string} [contact.fax] The user's fax number
     * @param {string} [contact.pager] The user's pager number
     * @param {string} [contact.groupList] The name of the contact list for which to add this contact to ("friends" by default)
     * @param {boolean} [contact.friendStatus] Indicates whether or not the contact is a friend of the user
     */
    async add(contact) {
      log.debug(API_LOG_TAG + 'contacts.add: ', contact);
      let contactData;
      try {
        contactData = await operations.addContact(contact);
      } catch (error) {
        emitEvent(eventTypes.CONTACTS_ERROR, {
          error
        });
        return;
      }

      // addContact succeeded
      emitEvent(eventTypes.CONTACTS_CHANGE, {
        contactData
      });
      emitEvent(eventTypes.CONTACTS_CHANGE, {});
    },
    /**
     * Retrieves local information about a contact.
     *
     * @public
     * @memberof contacts
     * @method get
     * @param {string} contactId The unique contact ID of the contact.
     * @return {Object} Contact information.
     */
    get(contactId) {
      log.debug(API_LOG_TAG + 'contacts.get: ', contactId);
      return (0, _selectors.getContact)(context.getState(), contactId);
    },
    /**
     * Retrieves local information about all contacts.
     *
     * @public
     * @memberof contacts
     * @method getAll
     * @return {Array} List of contact information.
     */
    getAll() {
      log.debug(API_LOG_TAG + 'contacts.getAll');
      return (0, _selectors.getContacts)(context.getState());
    },
    /**
     * Refreshes the local information about contacts. This will get new contacts from the platform.
     * Will trigger the `contacts:change` event.
     *
     * @public
     * @memberof contacts
     * @method refresh
     */
    refresh() {
      log.debug(API_LOG_TAG + 'contacts.refresh');
      let contactData;
      try {
        contactData = operations.refreshContacts();
      } catch (error) {
        emitEvent(eventTypes.CONTACTS_ERROR, {
          error
        });
        return;
      }

      // refreshContacts succeeded
      emitEvent(eventTypes.CONTACTS_CHANGE, {
        contactData
      });
    },
    /**
     * Remove a contact from a personal address book.
     * Will trigger the `contacts:change` event.
     *
     * @public
     * @memberof contacts
     * @method remove
     * @param  {string} id The Id of the contact that will be removed.
     */
    async remove(id) {
      log.debug(API_LOG_TAG + 'contacts.remove: ', id);
      let contactId;
      try {
        contactId = await operations.removeContact(id);
      } catch (error) {
        emitEvent(eventTypes.CONTACTS_ERROR, {
          error
        });
        return;
      }

      // removeContact succeeded
      emitEvent(eventTypes.CONTACTS_CHANGE, {
        contactId
      });
    },
    /**
     * Update a contact from the user's personal address book.
     * Will trigger the `contacts:change` event.
     *
     * @public
     * @memberof contacts
     * @method update
     * @requires addContactAsFriend
     * @param {Object} contact The contact object.
     * @param {string} contact.primaryContact The primary userId for the contact
     * @param {string} contact.contactId The contact's unique contact ID
     * @param {string} [contact.firstName] The contact's first name
     * @param {string} [contact.lastName] The contact's last name
     * @param {string} [contact.photoUrl] The URL address identifying location of user's picture
     * @param {string} [contact.emailAddress] The contact's email address
     * @param {string} [contact.homePhone] The contact's home phone number
     * @param {string} [contact.workPhone] The contact's business phone number
     * @param {string} [contact.mobilePhone] The contact's mobile phone number
     * @param {string} [contact.conferenceURL] Conference URL and access code for this user's address book entry
     * @param {string} [contact.fax] The user's fax number
     * @param {string} [contact.pager] The user's pager number
     * @param {string} [contact.groupList] The name of the contact list for which to add this contact to ("friends" by default)
     * @param {boolean} [contact.friendStatus] Indicates whether or not the contact is a friend of the user
     */
    async update(contact) {
      log.debug(API_LOG_TAG + 'contacts.update: ', contact);
      let contactData;
      try {
        contactData = await operations.updateContact(contact);
      } catch (error) {
        emitEvent(eventTypes.CONTACTS_ERROR, {
          error
        });
        return;
      }
      // updateContact succeeded
      emitEvent(eventTypes.CONTACTS_CHANGE, {
        contactData
      });
    },
    /**
     * Fetch a contact from the user's personal address book.
     * Will trigger the `contacts:change` event.
     *
     * @public
     * @memberof contacts
     * @method fetch
     * @param  {string} id The unique contact ID of the contact.
     */
    async fetch(id) {
      log.debug(API_LOG_TAG + 'contacts.fetch: ', id);
      let contact;
      try {
        contact = await operations.fetchContact(id);
      } catch (error) {
        emitEvent(eventTypes.CONTACTS_ERROR, {
          error
        });
        return;
      }
      // fetchContact succeeded
      emitEvent(eventTypes.CONTACTS_CHANGE, {
        contact
      });
    }
  };
}

/***/ }),

/***/ 27865:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _users = _interopRequireDefault(__webpack_require__(68248));
var _contacts = _interopRequireDefault(__webpack_require__(41232));
/**
 * Users API factory function.
 * Defines the interface between the application and the SDK's Users APIs.
 * Users APIs are organized by their namespacing since it comprises of both `users` and `contacts`.
 * @method createAPI
 * @param {Object} container The bottle container.
 * @returns {Object} Available public APIs for Users.
 */
function createAPI(container) {
  return {
    contacts: (0, _contacts.default)(container),
    user: (0, _users.default)(container)
  };
}

/***/ }),

/***/ 68248:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = usersApi;
var _selectors = __webpack_require__(45741);
var _eventTypes = __webpack_require__(46268);
// Users plugin.

function usersApi(container) {
  const {
    context,
    emitEvent,
    UsersOperations: operations,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('USERS');

  /**
   * The 'user' namespace allows access to user information for users within the same domain.
   *
   * @public
   * @namespace user
   */

  /**
   * The User data object.
   *
   * @public
   * @static
   * @typedef {Object} User
   * @memberof user
   * @property {user.UserID} userId The User ID of the user.
   * @property {string} emailAddress The email address of the user.
   * @property {string} firstName The first name of the user.
   * @property {string} lastName The last name of the user.
   * @property {string} photoURL The URL to get the photo of the user.
   * @property {string} buddy Whether the user is a "buddy". Values can be "true" or "false".
   */

  return {
    /**
     * Fetches information about a User.
     *
     * The SDK will emit a {@link user.event:users:change users:change}
     *    event after the operation completes. The User's information will then
     *    be available.
     *
     * Information about an available User can be retrieved using the
     *    {@link user.get} API.
     *
     * @public
     * @static
     * @memberof user
     * @method fetch
     * @param {string} userId The User ID of the user.
     */
    async fetch(userId) {
      log.debug(API_LOG_TAG + 'user.fetch: ', userId);
      let usersData;
      try {
        usersData = await operations.fetchUser(userId);
        if (usersData) {
          emitEvent(_eventTypes.USERS_CHANGE, {
            results: [usersData]
          });
        }
      } catch (error) {
        emitEvent(_eventTypes.USERS_ERROR, {
          error
        });
      }
    },
    /**
     * Retrieves information about a User, if available.
     *
     * See the {@link user.fetch} and {@link user.search} APIs for details about
     *    making Users' information available.
     *
     * @public
     * @static
     * @memberof user
     * @method get
     * @param {user.UserID} userId The User ID of the user.
     * @returns {user.User} The User object for the specified user.
     */
    get(userId) {
      log.debug(API_LOG_TAG + 'user.get: ', userId);
      return (0, _selectors.getUser)(context.getState(), userId);
    },
    /**
     * Retrieves information about all available Users.
     *
     * See the {@link user.fetch} and {@link user.search} APIs for details about
     *    making Users' information available.
     *
     * @public
     * @static
     * @memberof user
     * @method getAll
     * @returns {Array<user.User>} An array of all the User objects.
     */
    getAll() {
      log.debug(API_LOG_TAG + 'user.getAll');
      return (0, _selectors.getUsers)(context.getState());
    },
    /**
     * Searches the domain's directory for Users.
     *
     * Directory searching only supports one filter. If multiple filters are provided, only one of the filters will be used for the search.
     * A search with no filters provided will return all users.
     *
     * The SDK will emit a {@link user.event:directory:change directory:change}
     *    event after the operation completes. The search results will be
     *    provided as part of the event, and will also be available using the
     *    {@link user.get} and {@link user.getAll} APIs.
     *
     * @public
     * @static
     * @memberof user
     * @method search
     * @requires limitedSearch
     * @param {Object} filters The filter options for the search.
     * @param {user.UserID} [filters.userId] Matches the User ID of the user.
     * @param {string} [filters.name] Matches the firstName or lastName.
     * @param {string} [filters.firstName] Matches the firstName.
     * @param {string} [filters.lastName] Matches the lastName.
     * @param {string} [filters.userName] Matches the userName.
     * @param {string} [filters.phoneNumber] Matches the phoneNumber.
     */

    /**
     * Searches the domain's directory for Users.
     *
     * The SDK will emit a {@link user.event:directory:change directory:change}
     *    event after the operation completes. The search results will be
     *    provided as part of the event, and will also be available using the
     *    {@link user.get} and {@link user.getAll} APIs.
     *
     * @public
     * @static
     * @memberof user
     * @method search
     * @requires advancedSearch
     * @param {Object} filters The filter options for the search.
     * @param {user.UserID} [filters.userId] Matches the User ID of the user.
     * @param {string} [filters.name] Matches the firstName or lastName.
     * @param {string} [filters.firstName] Matches the firstName.
     * @param {string} [filters.lastName] Matches the lastName.
     * @param {string} [filters.userName] Matches the userName.
     * @param {string} [filters.phoneNumber] Matches the phoneNumber.
     * @param {Object} [options] Sorting options.
     * @param {string} [options.sortBy] The User property to sort the results by. This can be any of the above listed filters.
     * @param {string} [options.order] Order in which results are returned. Can be either "asc" or "desc".
     * @param {number} [options.max] The maximum number of results to return.
     * @param {string} [options.next] The pointer for a chunk of results, which may be returned from a previous query.
     */
    async search() {
      let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      log.debug(API_LOG_TAG + 'user.search: ', filters, options);
      let searchData;
      try {
        searchData = await operations.searchDirectory(filters, options);
      } catch (error) {
        emitEvent(_eventTypes.DIRECTORY_ERROR, {
          error
        });
        return;
      }
      // searchDirectory succeeded
      emitEvent(_eventTypes.DIRECTORY_CHANGE, {
        results: searchData
      });
    }
  };
}

/***/ }),

/***/ 46268:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.USERS_ERROR = exports.USERS_CHANGE = exports.DIRECTORY_ERROR = exports.DIRECTORY_CHANGE = exports.CONTACTS_NEW = exports.CONTACTS_ERROR = exports.CONTACTS_CHANGE = void 0;
// Contacts actions
/**
 * A new contact has been added to the address book.
 * @public
 * @memberof contacts
 * @event contacts:new
 * @param {Object} contact The new contact.
 */
const CONTACTS_NEW = exports.CONTACTS_NEW = 'contacts:new';

/**
 * An error occurred while performing a contact operation.
 * @public
 * @memberof contacts
 * @event contacts:error
 * @param {Object} params
 * @param {Object} params.error The Basic error object.
 */
const CONTACTS_ERROR = exports.CONTACTS_ERROR = 'contacts:error';

/**
 * The contacts list has changed.
 * @public
 * @memberof contacts
 * @event contacts:change
 * @example
 * client.on('contacts:change', function () {
 *    // Get the updated list of contacts.
 *    const contacts = client.contacts.getAll()
 *    ...
 * })
 */
const CONTACTS_CHANGE = exports.CONTACTS_CHANGE = 'contacts:change';

// Users actions
/**
 * The directory has changed.
 * @public
 * @static
 * @memberof user
 * @event directory:change
 * @param {Object} params
 * @param {Array<user.User>} params.results The Users' information returned by the
 *    operation.
 */
const DIRECTORY_CHANGE = exports.DIRECTORY_CHANGE = 'directory:change';

/**
 * An error occurred while performing a directory operation.
 * @public
 * @memberof user
 * @event directory:error
 * @param {Object} params
 * @param {Object} params.error The Basic error object.
 */
const DIRECTORY_ERROR = exports.DIRECTORY_ERROR = 'directory:error';

/**
 * A change has occurred in the users list
 * @public
 * @static
 * @memberof user
 * @event users:change
 * @param {Object} params
 * @param {Array<user.User>} params.results The Users' information returned by the
 *    operation.
 */
const USERS_CHANGE = exports.USERS_CHANGE = 'users:change';

/**
 * An error occurred while retrieving the user information
 * @public
 * @static
 * @memberof user
 * @event users:error
 * @param {Object} params
 * @param {Object} params.error params.error The Basic error object.
 */
const USERS_ERROR = exports.USERS_ERROR = 'users:error';

/***/ }),

/***/ 75923:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createAPI", ({
  enumerable: true,
  get: function () {
    return _index.default;
  }
}));
exports.name = void 0;
Object.defineProperty(exports, "reducer", ({
  enumerable: true,
  get: function () {
    return _reducers.default;
  }
}));
var _index = _interopRequireDefault(__webpack_require__(27865));
var _reducers = _interopRequireDefault(__webpack_require__(97285));
// Import the components of the interface.

/**
 * This interface is for a users plugin.
 * @type {string}
 */
const name = exports.name = 'users';

// Export the interface as a single object.

/***/ }),

/***/ 1724:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _unset2 = _interopRequireDefault(__webpack_require__(61505));
var actionTypes = _interopRequireWildcard(__webpack_require__(67705));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
const contactsPendingReducer = {
  next(state) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: true
    });
  }
};
reducers[actionTypes.ADD_CONTACT] = contactsPendingReducer;
reducers[actionTypes.REFRESH_CONTACTS] = contactsPendingReducer;
reducers[actionTypes.FETCH_CONTACT] = contactsPendingReducer;
reducers[actionTypes.UPDATE_CONTACT] = contactsPendingReducer;
reducers[actionTypes.ADD_CONTACT_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      contacts: _objectSpread(_objectSpread({}, state.contacts), {}, {
        [action.payload.contactId]: action.payload
      }),
      isPending: false
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      errors: state.errors.concat(action.payload)
    });
  }
};
reducers[actionTypes.REFRESH_CONTACTS_FINISH] = {
  next(state, action) {
    const contacts = {};
    for (const contact of action.payload) {
      contacts[contact.contactId] = contact;
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      contacts: contacts,
      isPending: false
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      errors: state.errors.concat(action.payload)
    });
  }
};
reducers[actionTypes.FETCH_CONTACT_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      contacts: _objectSpread(_objectSpread({}, state.contacts), {}, {
        [action.payload.contactId]: action.payload
      }),
      isPending: false
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      errors: state.errors.concat(action.payload)
    });
  }
};
reducers[actionTypes.REMOVE_CONTACT_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      contacts: (0, _unset2.default)(action.payload, state.contacts),
      // Remove the property from state.contacts whose key is equal to action.payload
      isPending: false
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      errors: state.errors.concat(action.payload)
    });
  }
};
reducers[actionTypes.UPDATE_CONTACT_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      contacts: _objectSpread(_objectSpread({}, state.contacts), {}, {
        [action.payload.contactId]: action.payload
      }),
      isPending: false
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      errors: state.errors.concat(action.payload)
    });
  }
};
var _default = exports["default"] = reducers;

/***/ }),

/***/ 97285:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _contacts = _interopRequireDefault(__webpack_require__(1724));
var _users = _interopRequireDefault(__webpack_require__(22047));
var _reduxActions = __webpack_require__(68305);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/*
 * Combine all of reducers into a single reducer, defaulting to an empty Object for each
 * substate of contacts and users
 */
const reducer = (0, _reduxActions.handleActions)(_objectSpread(_objectSpread({}, _contacts.default), _users.default), {
  errors: [],
  contacts: {},
  users: {},
  isPending: true
});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 22047:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(67705));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const reducers = {};
reducers[actionTypes.FETCH_USER_FINISH] = {
  next(state, action) {
    const user = action.payload;
    return _objectSpread(_objectSpread({}, state), {}, {
      users: _objectSpread(_objectSpread({}, state.users), {}, {
        [user.primaryContact]: user
      }),
      isPending: false
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      errors: state.errors.concat(action.payload)
    });
  }
};
reducers[actionTypes.SEARCH_DIRECTORY_FINISH] = {
  next(state, action) {
    const users = {};
    for (const user of action.payload) {
      users[user.primaryContact] = user;
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      users: _objectSpread(_objectSpread({}, state.users), users),
      isPending: false
    });
  },
  throw(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      isPending: false,
      errors: state.errors.concat(action.payload)
    });
  }
};
var _default = exports["default"] = reducers;

/***/ }),

/***/ 45741:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getContact = getContact;
exports.getContacts = getContacts;
exports.getUser = getUser;
exports.getUsers = getUsers;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
/*
 * Redux-saga selector functions.
 * Used with the `select` effect in sagas to Retrieves
 *      specific portions of the state.
 */

/**
 * Gets the contacts from state.
 * @method getContacts
 * @return {Object}
 */
function getContacts(state) {
  return (0, _cloneDeep2.default)(state.users.contacts);
}

/**
 * Gets a contact from the state whose ID matches the supplied parameter
 * @method getContact
 * @return {Object}
 */
function getContact(state, id) {
  return (0, _cloneDeep2.default)(state.users.contacts[id]);
}

/**
 * Gets the users from state.
 * @method getUsers
 * @return {Array<User>} An array of all the User objects.
 */
function getUsers(state) {
  const allUsers = (0, _cloneDeep2.default)(state.users.users);
  return Object.values(allUsers);
}

/**
 * Gets the users from state.
 * @method getUser
 * @return {Object}
 */
function getUser(state, name) {
  return (0, _cloneDeep2.default)(state.users.users[name]);
}

/***/ }),

/***/ 29175:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = usersFactory;
var _interface = __webpack_require__(75923);
var _operations = _interopRequireDefault(__webpack_require__(28042));
var _requests = _interopRequireDefault(__webpack_require__(65960));
/**
 * Users service plugin factory.
 * Provides the SDK with the 'Users' feature.
 * @method usersFactory
 */
function usersFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // Register the component factory functions to the bottle.
  bottle.factory('UsersAPI', _interface.createAPI);
  bottle.factory('UsersOperations', _operations.default);
  bottle.factory('UsersRequests', _requests.default);
  return {
    capabilities: ['addContactAsFriend', 'limitedSearch'],
    name: _interface.name,
    reducer: _interface.reducer
  };
}

/***/ }),

/***/ 28042:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var actions = _interopRequireWildcard(__webpack_require__(11287));
var contactsActions = _interopRequireWildcard(__webpack_require__(49323));
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Users' Actions
/**
 * Users Operations factory function for Link.
 * @method createOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for Users plugin.
 */
function createOperations(container) {
  const {
    context,
    logManager,
    UsersRequests: requests
  } = container;
  const log = logManager.getLogger('USERS');

  // see SPiDR 4.3 REST API Documentation - 12.11.3
  function searchTypeInteger(searchType) {
    switch (searchType) {
      case 'first_name':
      case 'firstName':
      case 'FIRSTNAME':
        return 1;
      case 'last_name':
      case 'lastName':
      case 'LASTNAME':
        return 2;
      case 'name':
      case 'NAME':
        return 3;
      case 'phone_number':
      case 'phoneNumber':
      case 'PHONENUMBER':
        return 4;
      case 'user_id':
      case 'userId':
      case 'USERID':
      case 'user_name':
      case 'userName':
      case 'USERNAME':
        return 5;
    }
  }

  /**
   * remoteContactFromLocal
   *
   * At the time of development, `nickName` is the property by which contact resources are keyed in the back end.
   * Since the manner in which a `nickName` is used and regarded in common practice suggests that it can be changed,
   * we are exposing it as a property named `contactId` and informing developers that this is a unique property.
   * This function is used to normalize the naming convention when preparing contact data to be sent for a REST request.
   *
   * @param {Object} contact A contact object
   */
  function remoteContactFromLocal(contact) {
    if ('contactId' in contact) {
      contact.nickname = contact.contactId;
      delete contact.contactId;
    }
    // We must remove all empty values, as the back end servicing Link does not permit them
    for (const prop in contact) {
      if (!contact[prop] || contact[prop].length === 0) {
        delete contact[prop];
      }
    }
    return contact;
  }

  /**
   * localContactFromRemote
   *
   * Convert a contact object from the back end format used in REST calls, to the format maintained in the state
   *
   * @param {Object} contact A contact object
   */
  function localContactFromRemote(contact) {
    if ('nickname' in contact) {
      contact.contactId = contact.nickname;
      delete contact.nickname;
    }
    return contact;
  }

  /**
   * Operation to fetch information about a user.
   * @method fetchUser
   * @param {string} userId The User ID of the user.
   * @returns {Object} The user data associated with userId.
   * @throws {Error} An error if request fails.
   */
  async function fetchUser(userId) {
    const {
      dispatch
    } = context;

    // Dispatch a fetch action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.fetchUser(userId));
    const body = {
      searchCriteria: userId,
      searchType: searchTypeInteger('user_id')
    };
    try {
      const connection = (0, _selectors.getConnectionInfo)(context.getState());
      const directory = await requests.getDirectory(connection, body);
      if (directory.length > 0) {
        // Update state by dispatching an action
        dispatch(actions.fetchUserFinish(directory[0]));
        return directory[0];
      } else {
        log.debug('Fetch user request was successful, but result was empty');
      }
    } catch (error) {
      // Dispatch an error action for backwards-compatible of action logs.
      //     This does not affect state or emit an event.
      dispatch(actions.fetchUserFinish(error));
      throw error;
    }
  }

  /**
   * Operation to update a contact in the address book.
   * @method updateContact
   * @param {Object} contact The contact that needs to be updated.
   * @returns {Object} The updated contact.
   * @throws {Error} An error if this operation fails.
   */
  async function updateContact(contact) {
    const {
      dispatch
    } = context;

    // Dispatch updateContact action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(contactsActions.updateContact(contact));
    if (!contact || (0, _isEmpty2.default)(contact)) {
      log.info('Could not update contact; invalid input.');

      // TODO: check and throw the proper error code.
      const validationError = new _errors.default({
        code: _errors.usersCodes.INVALID_PARAM,
        message: 'Could not update contact(s); invalid input.'
      });

      // Dispatch the failure action. This is for logging backwards compatibility.
      dispatch(contactsActions.updateContactFinish({
        error: validationError
      }));

      // Throw the error, so it makes it back to the API.
      throw validationError;
    }
    try {
      const contactRestObject = remoteContactFromLocal(_objectSpread({}, contact));
      const contactData = {
        addressBookRequest: {
          addressBookEntries: [contactRestObject]
        }
      };
      const result = await requests.contactRequest({
        extraURL: 'contacts/' + contact.contactId,
        body: JSON.stringify(contactData),
        method: 'PUT'
      });
      if (result) {
        // Dispatch updateContactFinish action for backwards-compatible of action logs.
        //     This does not affect state or emit an event.
        dispatch(contactsActions.updateContactFinish({
          contact
        }));
        return contact;
      }
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(contactsActions.updateContactFinish({
        error
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }

  /**
   * Operation to add a contact to the address book.
   * @method addContact
   * @param {Object} contact the contact to be added.
   * @returns {Object} The added contact.
   * @throws {Error} An error if request fails.
   */
  async function addContact(contact) {
    const {
      dispatch
    } = context;

    // Dispatch addContact action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(contactsActions.addContact(contact));
    log.info('Attempting to add contact(s):', contact);
    if (!contact || (0, _isEmpty2.default)(contact)) {
      log.info('Could not add contact(s); invalid input.');

      // TODO: check and throw the proper error code.
      const validationError = new _errors.default({
        code: _errors.usersCodes.INVALID_PARAM,
        message: 'Could not add contact(s); invalid input.'
      });

      // Dispatch the failure action. This is for logging backwards compatibility.
      dispatch(contactsActions.addContactFinish({
        error: validationError
      }));

      // Throw the error, so it makes it back to the API.
      throw validationError;
    }
    try {
      const contactData = {
        addressBookRequest: {
          addressBookEntries: [remoteContactFromLocal(_objectSpread({}, contact))]
        }
      };
      const result = await requests.contactRequest({
        extraURL: 'contacts/',
        body: JSON.stringify(contactData),
        method: 'POST'
      });
      let localContact = {};
      if (result) {
        localContact = localContactFromRemote(result);

        // Dispatch addContactFinish action for backwards-compatible of action logs.
        //     This does not affect state or emit an event.
        dispatch(contactsActions.addContactFinish({
          contact: localContact
        }));
      }
      return localContact;
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(contactsActions.addContactFinish({
        error
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }

  /**
   * Operation to refresh the state's contacts by fetching the latest contacts from the user's address book.
   * @method refreshContacts
   * @returns {Object} The latest local contacts from the user's address book.
   * @throws {Error} An error if request fails.
   */
  async function refreshContacts() {
    const {
      dispatch
    } = context;
    try {
      // Dispatch refreshContacts action for backwards-compatible of action logs.
      //     This does not affect state or emit an event.
      dispatch(contactsActions.refreshContacts());
      const res = await requests.contactRequest({
        method: 'GET'
      });
      let contacts = [];
      if (res) {
        contacts = res.result.addressBookEntries ? res.result.addressBookEntries.map(localContactFromRemote) : [];

        // Dispatch refreshContactsFinish action for backwards-compatible of action logs.
        //     This does not affect state or emit an event.
        dispatch(contactsActions.refreshContactsFinish({
          contacts
        }));
      }
      return contacts;
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(contactsActions.refreshContactsFinish({
        error
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }

  /**
   * Operation to remove contact with specified id.
   * @method removeContact
   * @param {string} id The ID of the contact to be removed.
   * @returns {Object} The ID associated with removed contact.
   * @throws {Error} An error if request fails.
   */
  async function removeContact(id) {
    const {
      dispatch
    } = context;

    // Dispatch removeContact action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(contactsActions.removeContact(id));
    log.info('Attempting to remove the contact: ', id);
    if (!id) {
      log.info('Could not remove contact; invalid id.');

      // TODO: check and throw the proper error code.
      const validationError = new _errors.default({
        code: _errors.usersCodes.INVALID_PARAM,
        message: 'Could not remove contact; invalid id.'
      });

      // Dispatch the failure action. This is for logging backwards compatibility.
      dispatch(contactsActions.removeContactFinish({
        error: validationError
      }));

      // Throw the error, so it makes it back to the API.
      throw validationError;
    }
    try {
      const result = await requests.contactRequest({
        extraURL: 'contacts/' + encodeURIComponent(id),
        method: 'DELETE'
      });
      let contactId = '';
      if (result) {
        // Dispatch removeContactFinish action for backwards-compatible of action logs.
        //     This does not affect state or emit an event.
        dispatch(contactsActions.removeContactFinish({
          contactId: id
        }));
        contactId = id;
      }
      return contactId;
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(contactsActions.removeContactFinish({
        error
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }

  /**
   * Operation to fetch a contact from the user's Personal Address Book.
   * @method fetchContact
   * @param {string} id The ID of the contact to be retrieved.
   * @returns {Object} The contact associated with the provided ID.
   * @throws {Error} An error if request fails.
   */
  async function fetchContact(id) {
    const {
      dispatch
    } = context;

    // Dispatch fetchContact action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(contactsActions.fetchContact(id));
    log.info('Attempting to fetch the contact: ', id);
    if (!id) {
      log.info('Could not fetch contact; invalid id.');

      // TODO: check and throw the proper error code.
      const validationError = new _errors.default({
        code: _errors.usersCodes.INVALID_PARAM,
        message: 'Could not fetch contact; invalid id.'
      });

      // Dispatch the failure action. This is for logging backwards compatibility.
      dispatch(contactsActions.fetchContactFinish({
        error: validationError
      }));

      // Throw the error, so it makes it back to the API.
      throw validationError;
    }
    try {
      const result = await requests.contactRequest({
        extraURL: `contacts/${id}`,
        method: 'GET'
      });
      if (result) {
        const contact = localContactFromRemote(result.result.addressBookEntries[0]);

        // Dispatch fetchContactFinish action for backwards-compatible of action logs.
        //     This does not affect state or emit an event.
        dispatch(contactsActions.fetchContactFinish({
          contact
        }));
        return contact;
      }
    } catch (error) {
      // Dispatch the failure action. This is for action logs backwards compatibility.
      dispatch(contactsActions.fetchContactFinish({
        error
      }));

      // Rethrow the error so it makes it back to the API.
      throw error;
    }
  }

  /**
   * Triggers a directory search using certain search criteria.
   *
   * @param {Object} filters The filters used for narrowing down the results
   * @param {Object} options The formatting parameters specifying how the result should be returned (e.g. sorted in ascending order, etc)
   * @returns {Object} A map of users that match the criteria specified by `filters`.
   * @throws {Error} An error if request fails.
   */
  async function searchDirectory(filters, options) {
    const {
      dispatch
    } = context;

    // Dispatch a search action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(actions.searchDirectory(filters, options));
    let type;
    // Look for first defined filter provided
    for (const filter in filters) {
      if (filters.hasOwnProperty(filter) && filters[filter]) {
        type = filter;
        break;
      }
    }
    log.debug(`Using criteria '${type}' with value '${filters[type]}' to search directory.`);
    const body = {
      searchCriteria: filters[type],
      searchType: searchTypeInteger(type)
    };
    try {
      const connection = (0, _selectors.getConnectionInfo)(context.getState());
      const users = await requests.getDirectory(connection, body);
      const usersData = users.map(localUserFromRemote);
      dispatch(actions.searchDirectoryFinish({
        users: usersData
      }));
      return usersData;
    } catch (error) {
      // Dispatch an error action for backwards-compatible of action logs.
      //     This does not affect state or emit an event.
      dispatch(actions.searchDirectoryFinish({
        error
      }));
      throw error;
    }
  }

  /**
   * localUserFromRemote
   *
   * Converts a user object from the back end format used in REST calls, to the format maintained in the state.
   * In particular, it ensures that the user object has a `userId` property,
   * as this is the property by which users are keyed in our state.
   *
   * @param {Object} user A user object
   * @returns {Object} The user object
   */
  function localUserFromRemote(user) {
    return _objectSpread(_objectSpread({}, user), {}, {
      userId: user.primaryContact || user.userId
    });
  }
  return {
    // API operations:
    fetchUser,
    addContact,
    removeContact,
    updateContact,
    fetchContact,
    searchDirectory,
    refreshContacts
  };
}

/***/ }),

/***/ 65960:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createRequests;
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var _selectors = __webpack_require__(46942);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Other plugins.

/**
 * Users Link REST Requests factory function.
 * Defines the REST interface between the SDK and KL's Users REST APIs.
 * @method createRequests
 * @param  {Object} container The bottle container.
 * @return {Object} Available requests for Users.
 */
function createRequests(container) {
  const {
    context,
    logManager,
    sendRequest
  } = container;
  const log = logManager.getLogger('USERS');
  async function getDirectory(conn) {
    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const version = conn.server.version;
    var url = `${conn.server.protocol}://${conn.server.server}:${conn.server.port}/rest/version/${version}/user/${conn.username}/directory`;
    const queryParams = {};
    if (params.searchType) {
      queryParams.criteria = params.searchCriteria;
      queryParams.criteriaType = params.searchType;
    } else if (params.searchCriteria) {
      queryParams.criteria = params.searchCriteria;
    }
    const method = 'GET';
    const response = await sendRequest({
      url,
      queryParams,
      method
    });
    const {
      error,
      result,
      body
    } = response;
    if (error) {
      if (body) {
        // Handle errors from the server.
        const {
          statusCode
        } = body.directory;
        log.debug(`Failed to search directory with status code ${statusCode}.`);
        // TODO: Proper errors.
        throw new _errors.default({
          code: statusCode,
          message: `Failed to search directory; status ${statusCode}.`
        });
      } else {
        // Handle errors from the request helper.
        const {
          message
        } = result;
        log.debug(`Directory search request failed: ${message}`);
        // TODO: Proper errors.
        throw new _errors.default({
          message: `Directory search request failed: ${message}`
        });
      }
    } else {
      if (body && body.directory.statusCode === 0) {
        // Request was successful.
        return body.directory.directoryItems || [];
      } else {
        // Unknown case.
        log.debug('Unknown error case for directory search.');
        throw new _errors.default({
          message: 'Unknown error.'
        });
      }
    }
  }
  async function contactRequest() {
    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const requestInfo = (0, _selectors.getRequestInfo)(context.getState());
    const version = requestInfo.version;
    const {
      extraURL,
      method
    } = params;
    let url;
    if (extraURL) {
      url = `${requestInfo.baseURL}/rest/version/${version}/user/${requestInfo.username}/addressbook/${extraURL}`;
    } else {
      url = `${requestInfo.baseURL}/rest/version/${version}/user/${requestInfo.username}/addressbook`;
    }
    const options = {
      method,
      url,
      body: params.body
    };

    // TODO: Update usersCodes to reflect the proper errors' codes.
    const bodyStatusCodeMap = {
      4: _errors.usersCodes.REFRESH_CONTACTS_FAIL,
      // not authenticated
      27: _errors.usersCodes.REFRESH_CONTACTS_FAIL,
      // bad request
      35: _errors.usersCodes.REFRESH_CONTACTS_FAIL // bad request
    };
    const HTTPStatusCodes = {
      FORBIDDEN: 403
    };

    // Credentials not set. Therefore, request is not sent (unauthorized issue).
    if (!requestInfo.username) {
      const message = 'Failed to add contact; user not authenticated (credentials not set).';
      log.info(message);
      throw new _errors.default({
        code: _errors.usersCodes.REFRESH_CONTACTS_FAIL,
        message
      });
    }
    const response = await sendRequest(options);
    const {
      body,
      error,
      result
    } = response;
    if (!error) {
      const {
        addressBookResponse
      } = body;
      log.info(`${method} contact(s) performed successfully; Status code: ${addressBookResponse.statusCode}`);
      return {
        result: addressBookResponse || {}
      };
    }
    let errorCode = '';
    let errorMessage = '';
    if (!(0, _isEmpty2.default)(body)) {
      // Handle responses with a body status code (errors from the server).
      const {
        statusCode
      } = body.addressBookResponse;
      errorMessage = `Failed to ${method} contact(s). Status Code ${statusCode}`;
      errorCode = bodyStatusCodeMap[statusCode] || _errors.usersCodes.UNKNOWN;
    } else {
      // Handle responses without a body status code. HTTP status code is checked to determine the error.
      // Either REST request issues or unknown server issues.
      const {
        code,
        message
      } = result;
      errorMessage = `Failed to ${method} contact(s); ${message}.`;
      errorCode = code === HTTPStatusCodes.FORBIDDEN ? _errors.usersCodes.REFRESH_CONTACTS_FAIL : _errors.usersCodes.UNKNOWN;
    }
    log.info(errorMessage);
    throw new _errors.default({
      code: errorCode,
      message: errorMessage
    });
  }
  return {
    // Operation requests.
    getDirectory,
    contactRequest
  };
}

/***/ }),

/***/ 81425:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = watchDeviceEvents;
var _actions = __webpack_require__(37992);
var eventTypes = _interopRequireWildcard(__webpack_require__(46215));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Webrtc plugin.

/**
 * Sets up listeners for events emitted from the Webrtc-stack's Device Manager.
 *
 * Events received from the Webrtc-stack are used to:
 *    1) Create actions to update SDK state about Webrtc-layer changes.
 *    2) Sometimes create events to emit to the application to reflect the changes
 *        to SDK state.
 *
 * The actions and events are passed to a "handler" which knows what to do with
 *    them in the current context (ie. not always direct dispatch/emit).
 * @method watchDeviceEvents
 * @param {Object} manager The WebRTC Device Manager.
 * @param {Function} handler Function for handling actions and events.
 */
function watchDeviceEvents(manager, handler) {
  // Manager event handlers.
  /**
   * @method change
   * @param {boolean} [actionOnly] True if this event should not be emitted to the application.
   */
  const change = actionOnly => {
    // Get the latest devices after they changed, then emit the device list
    //  upwards.
    manager.checkDevices().then(devices => {
      const devicesChangedAction = _actions.deviceActions.devicesChanged(devices);
      const devicesChangedEvent = actionOnly ? undefined : {
        type: eventTypes.DEVICES_CHANGED,
        args: {}
      };
      handler(devicesChangedAction, devicesChangedEvent);
    });
  };
  manager.on('change', change);

  // Return an unsubscribe function that removes all event listeners.
  const unsubscribe = () => {
    manager.off('change', change);
  };
  return unsubscribe;
}

/***/ }),

/***/ 59720:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createHandler = createHandler;
exports["default"] = watchManagers;
var _devices = _interopRequireDefault(__webpack_require__(81425));
var _trackManager = _interopRequireDefault(__webpack_require__(51418));
var _sessionManager = _interopRequireDefault(__webpack_require__(81313));
var _mediaManager = _interopRequireDefault(__webpack_require__(84954));
var _eventTypes = __webpack_require__(46215);
var webrtcActionTypes = _interopRequireWildcard(__webpack_require__(1371));
var _eventTypes2 = __webpack_require__(55166);
var _selectors = __webpack_require__(11430);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Manager channels.

// Webrtc plugin.

// Other plugins.

/**
 * Function that connects the Webrtc-stack's events directly to the SDK.
 *
 * Sets up all of the "manager channels" to listen for Webrtc-stack events
 *    and passes in a "handler" for what the manager channels should do with
 *    actions/events generated from the Webrtc-stack events.
 * @method watchManagers
 * @param {Object} container The bottle container.
 */
function watchManagers(container) {
  const {
    WebRTC
  } = container;

  // Create a function to handle the actions/events that come from the webrc
  //    channels. In this context, they can be directly dispatched / emitted.
  const messageHandler = createHandler(container);

  // These functions return unsubscribe functions to turn off the event listeners
  // TODO: These events should be unsubscribed from gracefully along with SDK destruction.
  //  However, there is no mechanism to easily allow that currently.
  (0, _devices.default)(WebRTC.devices, messageHandler);
  (0, _trackManager.default)(WebRTC.track, messageHandler);
  (0, _mediaManager.default)(WebRTC.media, messageHandler);
  (0, _sessionManager.default)(WebRTC.sessionManager, messageHandler);
}

/**
 * Factory for webrtc-stack message handler function.
 * @name createHandler
 * @param {Object} container
 * @return {Function} Message handler function.
 */
function createHandler(container) {
  /**
   * Logic for handling a message received from the webrtc-stack.
   * @param {Object} message
   * @param {Object} [message.action]
   * @param {Object} [message.event]
   * @return {undefined}
   */
  return function handleMessage(action, event) {
    // All messages from the webrtc-stack are expected to be formatted as an
    //    action or event.

    if (action) {
      /*
       * Check if there is a call-level event associated with this action.
       * This is for actions that require access to SDK data (rather than only
       *    webrtc-stack data). This is the first point that the message from
       *    the webrtc-stack has access to the `container`.
       */
      const callEvent = getAssociatedCallEvent(container.context, action);
      container.context.dispatch(action);
      if (callEvent) {
        container.emitEvent(callEvent.type, callEvent.args);
      }
    }
    if (event) {
      container.emitEvent(event.type, event.args);
    }
  };
}

/**
 * Map function between actions and associated events.
 * @param {Object} context
 * @param {Object} action
 * @return {Event|undefined}
 */
function getAssociatedCallEvent(context, action) {
  switch (action.type) {
    case webrtcActionTypes.SESSION_ICE_CONNECTION_STATE_CHANGE:
      {
        const call = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), action.payload.id);
        if (call) {
          return {
            type: _eventTypes2.MEDIA_CONNECTION_CHANGE,
            args: {
              callId: call.id,
              previous: {
                state: call.mediaConnectionState
              }
            }
          };
        }
        break;
      }
    case webrtcActionTypes.SESSION_TRACK_ENDED:
      {
        const {
          trackId,
          local,
          isUnsolicited,
          id
        } = action.payload;
        if (local && isUnsolicited) {
          const call = (0, _selectors.getCallByWebrtcSessionId)(context.getState(), id);
          return {
            type: _eventTypes.TRACK_ENDED,
            args: {
              callId: call.id,
              trackId,
              isLocal: local
            }
          };
        }
        break;
      }
  }
}

/***/ }),

/***/ 96023:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = watchMediaEvents;
var _actions = __webpack_require__(37992);
// Webrtc plugin.

/**
 * Sets up event listeners for a Media's events.
 * The events are turned into actions and dispatched
 *    to be handled by redux.
 * @method watchMediaEvents
 * @param {Object} media A Media object.
 * @param {Object} handler Handler function for handling actions and events.
 */
function watchMediaEvents(media, handler) {
  // Media received a new track.
  const newTrack = _ref => {
    let {
      mediaId,
      trackId
    } = _ref;
    // Pass the action to the handler to be handled as appropriate
    const mediaNewTrackAction = _actions.mediaActions.mediaNewTrack(mediaId, {
      trackId
    });
    handler(mediaNewTrackAction);
  };
  const trackEnded = _ref2 => {
    let {
      mediaId,
      trackId
    } = _ref2;
    // Pass the action to the handler to be handled as appropriate
    const mediaTrackEndedAction = _actions.mediaActions.mediaTrackEnded(mediaId, {
      trackId
    });
    handler(mediaTrackEndedAction);
  };
  const unsubscribe = () => {
    media.off('media:stopped', unsubscribe);
    media.off('track:new', newTrack);
    media.off('track:ended', trackEnded);
  };

  // If the media is stopped we will turn off event listeners for this media.
  //  The Media Manager will handle updating state with the media "remove" event that gets emitted
  //  following media "stopped" events.
  media.on('media:stopped', unsubscribe);
  media.on('track:new', newTrack);
  media.on('track:ended', trackEnded);
  return unsubscribe;
}

/***/ }),

/***/ 84954:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = watchMediaManagerEvents;
var _actions = __webpack_require__(37992);
var _media = _interopRequireDefault(__webpack_require__(96023));
// Webrtc plugin.

/**
 * Sets up event listeners for Media Manager events. The events are turned into
 *    actions and dispatched to be handled by redux.
 * @method watchMediaManagerEvents
 * @param {Object} manager The Media Manager.
 * @param {Object} handler Handler function for handling actions and events.
 */
function watchMediaManagerEvents(manager, handler) {
  const newMedia = id => {
    const media = manager.get(id);

    // If it is a new Media, watch for its events.
    (0, _media.default)(media, handler);

    // Pass the action to the handler to be handled as appropriate
    const detached = media.getTracks().some(track => track.isDetached());
    const newMediaAction = _actions.mediaActions.newMedia(id, {
      local: media.getState().isLocal,
      detached,
      tracks: media.getTracks().map(track => track.id)
    });
    handler(newMediaAction);
  };
  const removedMedia = id => {
    // Pass the action to the handler to be handled as appropriate
    const removedMediaAction = _actions.mediaActions.removedMedia(id);
    handler(removedMediaAction);
  };
  manager.on('media:new', newMedia);
  manager.on('media:removed', removedMedia);
  const unsubscribe = () => {
    manager.off('media:new', newMedia);
    manager.off('media:removed', removedMedia);
  };
  return unsubscribe;
}

/***/ }),

/***/ 72227:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = watchSessionEvents;
var _actions = __webpack_require__(37992);
// Webrtc plugin.

/**
 * Sets up event listeners for a Session's events.
 * The events are turned into actions and dispatched
 *    to be handled by redux elsewhere.
 * @method watchSessionEvents
 * @param {Object} session The Session object.
 * @param {Object} handler Handler function for handling actions and events.
 */
function watchSessionEvents(session, handler) {
  // Session received a new track.
  const newTrack = _ref => {
    let {
      local,
      trackId
    } = _ref;
    // Pass the action to the handler to be handled as appropriate
    const newTrackAction = _actions.sessionActions.sessionNewTrack(session.id, {
      local,
      trackId
    });
    handler(newTrackAction);
  };
  const trackEnded = _ref2 => {
    let {
      local,
      trackId,
      isUnsolicited
    } = _ref2;
    /**
     * When a track has ended,
     * update redux state's webrtc.session.localTracks/remoteTracks array
     * by removing the specified trackId.
     * ('local' boolean will determine whether to update localTracks or remoteTracks)
     */
    handler(_actions.sessionActions.sessionTrackEnded(session.id, {
      local,
      trackId,
      isUnsolicited
    }));
  };
  const trackReplaced = _ref3 => {
    let {
      oldTrackId,
      trackId
    } = _ref3;
    // Pass the action to the handler to be handled as appropriate
    const trackReplacedAction = _actions.sessionActions.sessionTrackReplaced(session.id, {
      oldTrackId,
      trackId
    });
    handler(trackReplacedAction);
  };
  const iceConnectionStateChange = obj => {
    // Pass the action to the handler to be handled as appropriate
    const iceConnectionStateChangeAction = _actions.sessionActions.sessionIceConnectionStateChange(session.id, {
      iceConnectionState: obj.iceConnectionState
    });
    handler(iceConnectionStateChangeAction);
  };
  const iceCandidateCollected = obj => {
    // Pass the action to the handler to be handled as appropriate
    const iceCandidateCollectedAction = _actions.sessionActions.sessionIceCandidateCollected(session.id, obj);
    handler(iceCandidateCollectedAction);
  };
  const iceGatheringStateChange = obj => {
    // Pass the action to the handler to be handled as appropriate
    const iceGatheringStateChangeAction = _actions.sessionActions.sessionIceGatheringStateChange(session.id, obj);
    handler(iceGatheringStateChangeAction);
  };
  const iceCollectionScheduledCheck = obj => {
    // Pass the action to the handler to be handled as appropriate
    const iceCollectionScheduledCheckAction = _actions.sessionActions.sessionIceCollectionScheduledCheck(session.id, obj);
    handler(iceCollectionScheduledCheckAction);
  };

  // Listen for when audio files end (from `insertAudio` API).
  const audioFileEnded = isSuccess => {
    handler(_actions.sessionActions.sessionAudioEnded(session.id, {
      error: !isSuccess
    }));
  };
  session.on('new:track', newTrack);
  session.on('track:ended', trackEnded);
  session.on('track:replaced', trackReplaced);
  session.on('peer:iceConnectionStateChange', iceConnectionStateChange);
  session.on('peer:iceGatheringStateChange', iceGatheringStateChange);
  session.on('peer:iceCandidateCollected', iceCandidateCollected);
  session.on('peer:iceCollectionScheduledCheck', iceCollectionScheduledCheck);
  session.on('audioFileEnded', audioFileEnded);
  const unsubscribe = () => {
    session.off('new:track', newTrack);
    session.off('track:ended', trackEnded);
    session.off('track:replaced', trackReplaced);
    session.off('peer:iceConnectionStateChange', iceConnectionStateChange);
    session.off('peer:iceGatheringStateChange', iceGatheringStateChange);
    session.off('peer:iceCandidateCollected', iceCandidateCollected);
    session.off('peer:iceCollectionScheduledCheck', iceCollectionScheduledCheck);
    session.off('audioFileEnded', audioFileEnded);
  };
  return unsubscribe;
}

/***/ }),

/***/ 81313:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = watchSessionManagerEvents;
var _actions = __webpack_require__(37992);
var _session = _interopRequireDefault(__webpack_require__(72227));
// Webrtc plugin.

/**
 * Sets up event listeners for Session Manager Events.
 * The events are turned into actions and dispatched
 *    to be handled by redux elsewhere.
 * @method watchSessionManagerEvents
 * @param {Object} manager The webRTC Session Manager.
 * @param {Object} handler Handler function for handling actions and events.
 */
function watchSessionManagerEvents(manager, handler) {
  // Handle new Session.
  const sessionAdded = id => {
    const session = manager.get(id);
    const state = session.getState();
    delete state.id;

    // If it is a new Session, watch for its events.
    (0, _session.default)(session, handler);

    // Pass the action to the handler to be handled as appropriate
    const sessionAddedAction = _actions.sessionActions.sessionAdded(id, state);
    handler(sessionAddedAction);
  };

  // Handle Sessions ending.
  const sessionRemoved = id => {
    // Pass the action to the handler to be handled as appropriate
    const sessionRemovedAction = _actions.sessionActions.sessionRemoved(id);
    handler(sessionRemovedAction);
  };
  manager.on('session:new', sessionAdded);
  manager.on('session:removed', sessionRemoved);
  const unsubscribe = () => {
    manager.off('session:new', sessionAdded);
    manager.off('session:removed', sessionRemoved);
  };
  return unsubscribe;
}

/***/ }),

/***/ 80027:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = watchTrackEvents;
var _actions = __webpack_require__(37992);
var eventTypes = _interopRequireWildcard(__webpack_require__(46215));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Libraries.

/**
 * Sets up event listeners for a Track object's events.
 * The events simply dispatch actions to be handled by redux.
 * @method watchTrackEvents
 * @param {Object} track A Track object.
 * @param {Object} handler Handler function for handling actions and events.
 */
function watchTrackEvents(track, handler) {
  // The track source (which affected the track identified by trackId) was muted.
  // An example of a track source is a physical media device such as:
  // microphone or camera.
  const trackSourceMuted = trackData => {
    const trackSourceMutedAction = _actions.trackActions.trackSourceMuted([trackData.trackId], {
      mediaId: trackData.mediaId,
      isLocal: trackData.isLocal
    });
    const trackSourceMutedEvent = {
      type: eventTypes.TRACK_SOURCE_MUTED,
      args: {
        trackIds: [trackData.trackId],
        trackId: trackData.trackId,
        isLocal: trackData.isLocal,
        id: trackData.mediaId
      }
    };
    // Pass the action and event to the handler to be handled as appropriate
    handler(trackSourceMutedAction, trackSourceMutedEvent);
  };

  // The track source (which affected the track identified by trackId) was unmuted.
  const trackSourceUnmuted = trackData => {
    const trackSourceUnmutedAction = _actions.trackActions.trackSourceUnmuted([trackData.trackId], {
      mediaId: trackData.mediaId,
      isLocal: trackData.isLocal
    });
    const trackSourceUnmutedEvent = {
      type: eventTypes.TRACK_SOURCE_UNMUTED,
      args: {
        trackIds: [trackData.trackId],
        trackId: trackData.trackId,
        isLocal: trackData.isLocal,
        id: trackData.mediaId
      }
    };
    // Pass the action and event to the handler to be handled as appropriate
    handler(trackSourceUnmutedAction, trackSourceUnmutedEvent);
  };
  const unsubscribe = () => {
    track.off('ended', unsubscribe);
    track.off('muted', trackSourceMuted);
    track.off('unmuted', trackSourceUnmuted);
  };

  // If the track is ended we will turn off event listeners for the track object.
  //  The trackManager will handle updating state with the track "remove" event that gets emitted
  //  following track "ended" events.
  track.on('ended', unsubscribe);
  track.on('muted', trackSourceMuted);
  track.on('unmuted', trackSourceUnmuted);
  return unsubscribe;
}

/***/ }),

/***/ 51418:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = watchTrackManagerEvents;
var _actions = __webpack_require__(37992);
var _eventTypes = __webpack_require__(46215);
var _track = _interopRequireDefault(__webpack_require__(80027));
// Call plugin.

/**
 * Sets up event listeners for Track Manager Events.
 * The events are turned into actions and dispatched
 *    to be handled by redux.
 * @method watchTrackManagerEvents
 * @param {Object} manager The webRTC Track Manager.
 * @param {Object} handler Handler function for handling actions and events.
 */
function watchTrackManagerEvents(manager, handler) {
  // Handler for new tracks
  const trackAdded = id => {
    const track = manager.get(id);
    const state = track.getState();

    // Translate the track state from native WebRTC to SDK style.
    // This is to change the "muted" property to be what people generally know
    //    "muted" to be.
    state.sourceMuted = state.muted;
    state.muted = !state.enabled;
    delete state.enabled;
    delete state.id;

    // Set up event listeners for the added track
    (0, _track.default)(track, handler);

    // Pass the action to the handler to be handled as appropriate
    const trackAddedAction = _actions.trackActions.trackAdded(id, state);
    handler(trackAddedAction);
  };

  // Handler for removed/ended tracks
  const trackRemoved = id => {
    // Pass the action to the handler to be handled as appropriate
    const trackRemovedAction = _actions.trackActions.trackRemoved(id);
    // Check if track is detached and emit a 'track ended' event if it is
    const track = manager.get(id);
    const trackEndedEvent = track.isDetached() ? {
      type: _eventTypes.TRACK_ENDED,
      args: {
        trackId: id,
        isLocal: true,
        detached: true
      }
    } : undefined;
    handler(trackRemovedAction, trackEndedEvent);
  };

  // Listen for track add or remove events
  manager.on('add', trackAdded);
  manager.on('remove', trackRemoved);

  // Return an unsubscribe function that removes all event listeners.
  const unsubscribe = () => {
    manager.off('add', trackAdded);
    manager.off('remove', trackRemoved);
  };
  return unsubscribe;
}

/***/ }),

/***/ 49169:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = webrtcPlugin;
exports.initLogLevel = initLogLevel;
exports.initWebrtc = initWebrtc;
var _interface = _interopRequireDefault(__webpack_require__(63982));
var _index = _interopRequireDefault(__webpack_require__(2233));
var _media = _interopRequireDefault(__webpack_require__(89695));
var _logs = _interopRequireDefault(__webpack_require__(84318));
var _webrtc = _interopRequireDefault(__webpack_require__(992));
var _actions = __webpack_require__(37992);
var _channels = _interopRequireDefault(__webpack_require__(59720));
var _middleware = _interopRequireDefault(__webpack_require__(40017));
var _logs2 = __webpack_require__(43862);
var _selectors = __webpack_require__(13751);
var _kandyWebrtc = _interopRequireWildcard(__webpack_require__(15203));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Webrtc plugin.

// Other plugins.

// Libraries.

const log = _logs2.logManager.getLogger('WEBRTC');

/**
 * WebRTC plugin factory.
 * @method webrtcPlugin
 */
function webrtcPlugin() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  const {
    mediaDevices,
    peerConnection
  } = (0, _kandyWebrtc.getWebRTCSupportCapabilities)();
  if (!mediaDevices || !peerConnection) {
    log.warn('Calls are not supported on this platform due to lack of WebRTC support. Media APIs will not be available.');
    return;
  }

  // Initialize the webRTC.
  const webRTC = (0, _kandyWebrtc.default)();

  // Register the component factory functions to the bottle.
  bottle.factory('WebRTCAPI', _index.default);
  bottle.factory('WebRTCMediaOperations', _media.default);
  bottle.factory('WebRTCLogOperations', _logs.default);
  bottle.factory('WebRTCOperations', _webrtc.default);

  // Register the WebRTC stack to the bottle. This lets other component access it.
  bottle.factory('WebRTC', () => webRTC.managers);

  // Register a function to check browser info after SDK initialization has finished.
  bottle.defer(initWebrtc);

  // Configure the WebRTC stack's log level on SDK initialization.
  bottle.defer(initLogLevel);

  // Register a function to start listening for events from the WebRTC managers after SDK initialization has finished.
  bottle.defer(_channels.default);
  return {
    name: 'webrtc',
    reducer: _interface.default.reducer,
    middleware: _middleware.default
  };
}

/**
 * WebRTC initialization function to check and set browser details.
 * @method initWebrtc
 * @param {Object} container The bottle container.
 */
function initWebrtc(container) {
  const {
    logManager,
    context
  } = container;
  const log = logManager.getLogger('WEBRTC');

  // Use the webRTC stack to check the browser details.
  const details = (0, _kandyWebrtc.getBrowserDetails)();
  log.info(`Browser details: ${details.browser}, version ${details.version}.`);
  context.dispatch(_actions.miscActions.setBrowserDetails(details));
}

/**
 * WebRTC initialization function to set the log level on SDK initialization
 * @method initLogLevel
 * @param  {Object} container The bottle container.
 */
function initLogLevel(container) {
  const {
    context,
    WebRTCLogOperations: operations
  } = container;
  // Get the WEBRTC logger's level.
  const level = (0, _selectors.getLevel)(context.getState(), 'WEBRTC');
  // Call the "set log level" saga for the WEBRTC logger, pretending that we
  //    received an action updating its level.
  operations.updateLogLevel({
    payload: {
      WEBRTC: level
    }
  });
}

/***/ }),

/***/ 1371:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UNMUTE_TRACKS_FINISH = exports.UNMUTE_TRACKS = exports.TRACK_SOURCE_UNMUTED = exports.TRACK_SOURCE_MUTED = exports.TRACK_REMOVED = exports.TRACK_ADDED = exports.SET_BROWSER_DETAILS = exports.SESSION_TRACK_REPLACED = exports.SESSION_TRACK_ENDED = exports.SESSION_REMOVED = exports.SESSION_NEW_TRACK = exports.SESSION_ICE_GATHERING_STATE_CHANGE = exports.SESSION_ICE_CONNECTION_STATE_CHANGE = exports.SESSION_ICE_COLLECTION_SCHEDULED_CHECK = exports.SESSION_ICE_CANDIDATE_COLLECTED = exports.SESSION_AUDIO_ENDED = exports.SESSION_ADDED = exports.RENDER_TRACKS_FINISH = exports.RENDER_TRACKS = exports.REMOVE_TRACKS_FINISH = exports.REMOVE_TRACKS = exports.MUTE_TRACKS_FINISH = exports.MUTE_TRACKS = exports.MEDIA_TRACK_ENDED = exports.MEDIA_REMOVED = exports.MEDIA_NEW_TRACK = exports.MEDIA_NEW = exports.MEDIA_CHANGE = exports.INITIALIZE_DEVICES_FINISH = exports.INITIALIZE_DEVICES = exports.DEVICES_CHANGE = void 0;
const prefix = '@@KANDY/WEBRTC/';

/**
 * Device action types.
 */
const DEVICES_CHANGE = exports.DEVICES_CHANGE = prefix + 'DEVICES/CHANGE';
const INITIALIZE_DEVICES = exports.INITIALIZE_DEVICES = prefix + 'INITIALIZE_DEVICES';
const INITIALIZE_DEVICES_FINISH = exports.INITIALIZE_DEVICES_FINISH = prefix + 'INITIALIZE_DEVICES_FINISH';

/**
 * Track action types.
 */
const trackPrefix = prefix + 'TRACK/';
const TRACK_ADDED = exports.TRACK_ADDED = trackPrefix + 'ADDED';
const TRACK_REMOVED = exports.TRACK_REMOVED = trackPrefix + 'REMOVED';
const RENDER_TRACKS = exports.RENDER_TRACKS = trackPrefix + 'RENDER';
const RENDER_TRACKS_FINISH = exports.RENDER_TRACKS_FINISH = trackPrefix + 'RENDER_FINISH';
const REMOVE_TRACKS = exports.REMOVE_TRACKS = trackPrefix + 'REMOVE';
const REMOVE_TRACKS_FINISH = exports.REMOVE_TRACKS_FINISH = trackPrefix + 'REMOVE_FINISH';
const MUTE_TRACKS = exports.MUTE_TRACKS = trackPrefix + 'MUTE';
const MUTE_TRACKS_FINISH = exports.MUTE_TRACKS_FINISH = trackPrefix + 'MUTE_FINISH';
const UNMUTE_TRACKS = exports.UNMUTE_TRACKS = trackPrefix + 'UNMUTE';
const UNMUTE_TRACKS_FINISH = exports.UNMUTE_TRACKS_FINISH = trackPrefix + 'UNMUTE_FINISH';
const TRACK_SOURCE_MUTED = exports.TRACK_SOURCE_MUTED = trackPrefix + 'SOURCE_MUTED';
const TRACK_SOURCE_UNMUTED = exports.TRACK_SOURCE_UNMUTED = trackPrefix + 'SOURCE_UNMUTED';

/**
 * Session action types.
 */
const sessionPrefix = prefix + 'SESSION/';
const SESSION_ADDED = exports.SESSION_ADDED = sessionPrefix + 'ADDED';
const SESSION_REMOVED = exports.SESSION_REMOVED = sessionPrefix + 'REMOVED';
const SESSION_NEW_TRACK = exports.SESSION_NEW_TRACK = sessionPrefix + 'NEW_TRACK';
const SESSION_TRACK_ENDED = exports.SESSION_TRACK_ENDED = sessionPrefix + 'TRACK_ENDED';
const SESSION_TRACK_REPLACED = exports.SESSION_TRACK_REPLACED = sessionPrefix + 'TRACK_REPLACED';

// Audio file from the `insertAudio` API has ended.
const SESSION_AUDIO_ENDED = exports.SESSION_AUDIO_ENDED = sessionPrefix + 'AUDIO_ENDED';

// Peer events
const SESSION_ICE_CONNECTION_STATE_CHANGE = exports.SESSION_ICE_CONNECTION_STATE_CHANGE = sessionPrefix + 'ICE_CONNECTION_STATE_CHANGE';
const SESSION_ICE_GATHERING_STATE_CHANGE = exports.SESSION_ICE_GATHERING_STATE_CHANGE = sessionPrefix + 'ICE_GATHERING_STATE_CHANGE';
const SESSION_ICE_CANDIDATE_COLLECTED = exports.SESSION_ICE_CANDIDATE_COLLECTED = sessionPrefix + 'ICE_CANDIDATE_COLLECTED';
const SESSION_ICE_COLLECTION_SCHEDULED_CHECK = exports.SESSION_ICE_COLLECTION_SCHEDULED_CHECK = sessionPrefix + 'ICE_CANDIDATE_SCHEDULED_CHECK';

/**
 * Media action types.
 */
const mediaPrefix = prefix + 'MEDIA/';
const MEDIA_NEW = exports.MEDIA_NEW = mediaPrefix + 'NEW';
const MEDIA_REMOVED = exports.MEDIA_REMOVED = mediaPrefix + 'REMOVED';
const MEDIA_CHANGE = exports.MEDIA_CHANGE = mediaPrefix + 'CHANGE';
const MEDIA_NEW_TRACK = exports.MEDIA_NEW_TRACK = mediaPrefix + 'NEW_TRACK';
const MEDIA_TRACK_ENDED = exports.MEDIA_TRACK_ENDED = mediaPrefix + 'TRACK_ENDED';

/**
 * Misc. action types.
 */
const SET_BROWSER_DETAILS = exports.SET_BROWSER_DETAILS = prefix + 'SET_BROWSER_DETAILS';

/***/ }),

/***/ 61547:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.devicesChanged = devicesChanged;
exports.initializeDevice = initializeDevice;
exports.initializeDeviceFinish = initializeDeviceFinish;
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Webrtc plugin.

function devicesChanged(devices) {
  return {
    type: actionTypes.DEVICES_CHANGE,
    payload: devices
  };
}
function initializeDevice(browserConstraints) {
  return {
    type: actionTypes.INITIALIZE_DEVICES,
    payload: browserConstraints
  };
}

/**
 * The finishing action which follows the INITIALIZE_DEVICES action
 * @param {Object} $0
 * @param {Object} [$0.devices] The device object.
 * @param {Object} [$0.error] An error object. Only present if an error occurred.
 * @returns {Object} A flux standard action representing the INITIALIZE_DEVICES_FINISH action.
 */
function initializeDeviceFinish(_ref) {
  let {
    devices,
    error
  } = _ref;
  return {
    payload: error || devices,
    error: Boolean(error),
    type: actionTypes.INITIALIZE_DEVICES_FINISH
  };
}

/***/ }),

/***/ 37992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.trackActions = exports.sessionActions = exports.miscActions = exports.mediaActions = exports.deviceActions = void 0;
var deviceActionsImport = _interopRequireWildcard(__webpack_require__(61547));
var trackActionsImport = _interopRequireWildcard(__webpack_require__(33757));
var sessionActionsImport = _interopRequireWildcard(__webpack_require__(57423));
var mediaActionsImport = _interopRequireWildcard(__webpack_require__(39479));
var miscActionsImport = _interopRequireWildcard(__webpack_require__(78480));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Apparently the following doesn't work:
//      export * as newName from './place';
// So import everything from each file, then re-export.
const deviceActions = exports.deviceActions = deviceActionsImport;
const trackActions = exports.trackActions = trackActionsImport;
const sessionActions = exports.sessionActions = sessionActionsImport;
const mediaActions = exports.mediaActions = mediaActionsImport;
const miscActions = exports.miscActions = miscActionsImport;

/***/ }),

/***/ 39479:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mediaNewTrack = mediaNewTrack;
exports.mediaTrackEnded = mediaTrackEnded;
exports.newMedia = newMedia;
exports.removedMedia = removedMedia;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Webrtc plugin.
// Libraries.

function mediaActionHelper(type, id) {
  let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  const action = {
    type,
    payload: _objectSpread(_objectSpread({}, payload), {}, {
      id
    })
  };

  // Only have meta and error properties on the action if they're needed.
  if (!(0, _isEmpty2.default)(meta)) {
    action.meta = meta;
  }
  if (payload.error) {
    action.error = true;
  }
  return action;
}
function newMedia(id, params) {
  return mediaActionHelper(actionTypes.MEDIA_NEW, id, params);
}
function removedMedia(id, params) {
  return mediaActionHelper(actionTypes.MEDIA_REMOVED, id, params);
}
function mediaNewTrack(id, params) {
  return mediaActionHelper(actionTypes.MEDIA_NEW_TRACK, id, params);
}
function mediaTrackEnded(id, params) {
  return mediaActionHelper(actionTypes.MEDIA_TRACK_ENDED, id, params);
}

/***/ }),

/***/ 78480:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setBrowserDetails = setBrowserDetails;
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Webrtc plugin.

/**
 * Action creator
 * @method setBrowserDetails
 * @param  {Object} details
 * @param  {string} details.browser
 * @param  {number} details.version
 * @return {Object} A Flux-Standard-action.
 */
function setBrowserDetails(details) {
  return {
    type: actionTypes.SET_BROWSER_DETAILS,
    payload: details
  };
}

/***/ }),

/***/ 57423:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sessionAdded = sessionAdded;
exports.sessionAudioEnded = sessionAudioEnded;
exports.sessionIceCandidateCollected = sessionIceCandidateCollected;
exports.sessionIceCollectionScheduledCheck = sessionIceCollectionScheduledCheck;
exports.sessionIceConnectionStateChange = sessionIceConnectionStateChange;
exports.sessionIceGatheringStateChange = sessionIceGatheringStateChange;
exports.sessionNewTrack = sessionNewTrack;
exports.sessionRemoved = sessionRemoved;
exports.sessionTrackEnded = sessionTrackEnded;
exports.sessionTrackReplaced = sessionTrackReplaced;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isEmpty2 = _interopRequireDefault(__webpack_require__(8288));
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
// Libraries.

function sessionActionHelper(type, id) {
  let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  const action = {
    type,
    payload: _objectSpread(_objectSpread({}, payload), {}, {
      id
    })
  };

  // Only have meta and error properties on the action if they're needed.
  if (!(0, _isEmpty2.default)(meta)) {
    action.meta = meta;
  }
  if (payload.error) {
    action.error = true;
  }
  return action;
}
function sessionAdded(id, params) {
  return sessionActionHelper(actionTypes.SESSION_ADDED, id, params);
}
function sessionRemoved(id, params) {
  return sessionActionHelper(actionTypes.SESSION_REMOVED, id, params);
}
function sessionNewTrack(id, params) {
  return sessionActionHelper(actionTypes.SESSION_NEW_TRACK, id, params);
}
function sessionTrackEnded(id, params) {
  return sessionActionHelper(actionTypes.SESSION_TRACK_ENDED, id, params);
}
function sessionTrackReplaced(id, params) {
  return sessionActionHelper(actionTypes.SESSION_TRACK_REPLACED, id, params);
}
function sessionIceConnectionStateChange(id, params) {
  return sessionActionHelper(actionTypes.SESSION_ICE_CONNECTION_STATE_CHANGE, id, params);
}
function sessionIceGatheringStateChange(id, params) {
  return sessionActionHelper(actionTypes.SESSION_ICE_GATHERING_STATE_CHANGE, id, params);
}
function sessionIceCandidateCollected(id, params) {
  return sessionActionHelper(actionTypes.SESSION_ICE_CANDIDATE_COLLECTED, id, params);
}
function sessionIceCollectionScheduledCheck(id, params) {
  return sessionActionHelper(actionTypes.SESSION_ICE_COLLECTION_SCHEDULED_CHECK, id, params);
}

/*
 * Action to signify that an audio file has ended. Dispatched at the end of the
 *    `insertAudio` Session method.
 */
function sessionAudioEnded(id, params) {
  return {
    type: actionTypes.SESSION_AUDIO_ENDED,
    payload: _objectSpread({
      id
    }, params),
    error: Boolean(params.error)
  };
}

/***/ }),

/***/ 33757:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.muteTracks = muteTracks;
exports.muteTracksFinish = muteTracksFinish;
exports.removeTracks = removeTracks;
exports.removeTracksFinish = removeTracksFinish;
exports.renderTracks = renderTracks;
exports.renderTracksFinish = renderTracksFinish;
exports.trackAdded = trackAdded;
exports.trackRemoved = trackRemoved;
exports.trackSourceMuted = trackSourceMuted;
exports.trackSourceUnmuted = trackSourceUnmuted;
exports.unmuteTracks = unmuteTracks;
exports.unmuteTracksFinish = unmuteTracksFinish;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Call plugin.
function trackManagerHelper(type, trackId) {
  let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return {
    type,
    payload: _objectSpread(_objectSpread({}, payload), {}, {
      trackId
    }),
    meta
  };
}
function trackAdded(trackId, params) {
  return trackManagerHelper(actionTypes.TRACK_ADDED, trackId, params);
}
function trackRemoved(trackId, params) {
  return trackManagerHelper(actionTypes.TRACK_REMOVED, trackId, params);
}
function trackHelper(type) {
  let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const action = {
    type,
    payload,
    meta
  };
  if (payload.error) {
    action.error = true;
  }
  return action;
}
function muteTracks(trackIds) {
  return trackHelper(actionTypes.MUTE_TRACKS, trackIds);
}
function muteTracksFinish(trackIds, params) {
  return trackHelper(actionTypes.MUTE_TRACKS_FINISH, _objectSpread({
    trackIds: trackIds
  }, params));
}
function unmuteTracks(trackIds) {
  return trackHelper(actionTypes.UNMUTE_TRACKS, trackIds);
}
function unmuteTracksFinish(trackIds, params) {
  return trackHelper(actionTypes.UNMUTE_TRACKS_FINISH, _objectSpread({
    trackIds: trackIds
  }, params));
}
function trackSourceMuted(trackIds, params) {
  return trackHelper(actionTypes.TRACK_SOURCE_MUTED, _objectSpread({
    trackIds: trackIds
  }, params));
}
function trackSourceUnmuted(trackIds, params) {
  return trackHelper(actionTypes.TRACK_SOURCE_UNMUTED, _objectSpread({
    trackIds: trackIds
  }, params));
}
function renderTracks(trackIds, params) {
  return trackHelper(actionTypes.RENDER_TRACKS, _objectSpread({
    trackIds
  }, params));
}
function renderTracksFinish(trackIds, params) {
  return trackHelper(actionTypes.RENDER_TRACKS_FINISH, _objectSpread({
    trackIds
  }, params));
}
function removeTracks(trackIds, params) {
  return trackHelper(actionTypes.REMOVE_TRACKS, _objectSpread({
    trackIds
  }, params));
}
function removeTracksFinish(trackIds, params) {
  return trackHelper(actionTypes.REMOVE_TRACKS_FINISH, _objectSpread({
    trackIds
  }, params));
}

/***/ }),

/***/ 2233:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _isPlainObject2 = _interopRequireDefault(__webpack_require__(1449));
var _selectors = __webpack_require__(30105);
var _media = _interopRequireDefault(__webpack_require__(45662));
// Webrtc plugin.

// Namespaced APIs.

/**
 * WebRTC API factory function.
 * @method createAPI
 * @param  {Object} container The bottle container.
 * @param  {Object} container.context The factory context.
 * @return {Object} API.
 */
function createAPI(container) {
  const {
    context,
    logManager,
    API_LOG_TAG,
    WebRTCOperations: operations
  } = container;
  const log = logManager.getLogger('WEBRTC');
  const mediaApi = (0, _media.default)(container);

  /**
   * Retrieve information about the browser being used.
   *
   * Browser information being defined indicates that the browser supports
   *    basic webRTC scenarios.
   * @public
   * @memberof api
   * @method getBrowserDetails
   * @return {Object} Object containing `browser` and `version` information.
   * @example
   * const details = client.getBrowserDetails()
   *
   * log(`Browser in use: ${details.browser}, version ${details.version}.`)
   */
  function getBrowserDetails() {
    log.debug(API_LOG_TAG + 'getBrowserDetails');
    return (0, _selectors.getBrowserDetails)(context.getState());
  }

  /**
   * Set up provided WebRTC functionality proxies on top of WebRTC to enable
   * WebRTC call features on platforms that would otherwise not support them.
   * @private
   * @method setupProxy
   * @param {Object} proxies The WebRTC proxies.
   */
  function setupProxy(proxies) {
    log.debug(API_LOG_TAG + 'webrtc.setupProxy');
    if (!(0, _isPlainObject2.default)(proxies)) {
      log.error('Provided proxies is not an appropriate object.');
      return;
    }
    operations.setupProxies(proxies);
  }

  /**
   * Teardown all WebRTC functionality proxies that were set on top of WebRTC.
   * @private
   * @method teardownProxy
   */
  async function teardownProxy() {
    log.debug(API_LOG_TAG + 'webrtc.teardownProxy');
    await operations.teardownProxies();
  }
  return {
    media: mediaApi,
    getBrowserDetails,
    webrtc: {
      setupProxy,
      teardownProxy
    }
  };
}

/***/ }),

/***/ 45662:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMediaAPI;
var _selectors = __webpack_require__(30105);
var eventTypes = _interopRequireWildcard(__webpack_require__(46215));
var _utils = __webpack_require__(25189);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Webrtc plugin.

// Other plugins.

/**
 * Media related APIs.
 * @method mediaAPI
 * @param  {Function} dispatch Redux dispatch.
 * @param  {Function} getState Redux getState.
 * @return {Object}
 */
function createMediaAPI(container) {
  const {
    context,
    WebRTCMediaOperations: operations,
    logManager,
    API_LOG_TAG,
    emitEvent
  } = container;
  const log = logManager.getLogger('MEDIA');
  return {
    /**
     * Retrieves the available media devices for use.
     *
     * The {@link media.event:devices:change devices:change} event will be
     *    emitted when the available media devices have changed.
     *
     * @public
     * @static
     * @memberof media
     * @method getDevices
     * @return {Object} The lists of camera, microphone, and speaker devices.
     */
    getDevices() {
      log.debug(API_LOG_TAG + 'media.getDevices');
      return (0, _selectors.getDevices)(context.getState());
    },
    /**
     * Retrieves an available Media object with a specific Media ID.
     * @public
     * @static
     * @memberof media
     * @method getById
     * @param  {string} mediaId The ID of the Media to retrieve.
     * @return {call.MediaObject} A Media object.
     */
    getById(mediaId) {
      log.debug(API_LOG_TAG + 'media.getById: ', mediaId);
      return (0, _selectors.getMediaById)(context.getState(), mediaId);
    },
    /**
     * Retrieve an available Track object with a specific Track ID.
     * @public
     * @static
     * @memberof media
     * @method getTrackById
     * @param  {string} trackId The ID of the Track to retrieve.
     * @return {call.TrackObject} A Track object.
     */
    getTrackById(trackId) {
      log.debug(API_LOG_TAG + 'media.getTrackById: ', trackId);
      return (0, _selectors.getTrackById)(context.getState(), trackId);
    },
    /**
     * Requests permission to access media devices on the end-user's machine.
     *
     * This API will trigger the browser to ask the end-user for permission to
     *    access their camera and/or microphone. These permissions are
     *    needed for the SDK to read information about the devices (the label,
     *    for example) and for using the devices for a call.
     *
     * If the browser does not yet have permission, it will prompt the end-user
     *    with a small pop-up window, giving the user a chance to allow/deny the
     *    permissions. The behaviour of this pop-up window differs slightly
     *    based on the browser; it may automatically save the user's decision
     *    (such as in Chrome and Safari) or it may require the user to choose
     *    whether their decision should be saved (such as in Firefox).
     *
     * This API is not required for proper usage of media and/or calls, but
     *    helps to prepare a user before a call is made or received. It allows
     *    an application to prompt the user for device permissions when it is
     *    convenient for them, rather than during call setup. If the user saves
     *    their decision, they will not be prompted again when the SDK accesses
     *    those devices for a call.
     *
     * For device information, the {@link media.getDevices} API will retrieve
     *    the list of media devices available for the SDK to use. If this list
     *    is empty, or is missing information, it is likely that the browser
     *    does not have permission to access the device's information. We
     *    recommend using the {@link media.initializeDevices} API in this
     *    scenario if you would like to allow the end-user to select which
     *    device(s) they would like to use when they make a call, rather than
     *    using the system default.
     *
     * The SDK will emit a {@link media.event:devices:change devices:change}
     *    event when the operation is successful or a
     *    {@link media.event:devices:error devices:error} event if an error is
     *    encountered.
     * @public
     * @static
     * @memberof media
     * @method initializeDevices
     * @param {Object} [constraints]
     * @param {boolean} [constraints.audio=true] Whether to ask for audio device permissions.
     * @param {boolean} [constraints.video=true] Whether to ask for video device permissions.
     * @example
     * // The SDK will ask for both audio and video permissions by default.
     * client.media.initializeDevices()
     *
     * // The SDK will only ask for audio permissions.
     * client.media.initializeDevices({ audio: true, video: false })
     */
    async initializeDevices(constraints) {
      log.debug(API_LOG_TAG + 'media.initializeDevices: ', constraints);
      const browserConstraints = {
        audio: constraints === undefined ? true : constraints.audio,
        video: constraints === undefined ? true : constraints.video
      };
      try {
        await operations.initializeDevices(browserConstraints);
      } catch (error) {
        emitEvent(eventTypes.INITIALIZE_DEVICES_ERROR, {
          error
        }); // error is the payload
        return;
      }
      emitEvent(eventTypes.DEVICES_CHANGED, {}); // empty payload.
    },
    /**
     * Create local media Tracks.
     * @public
     * @static
     * @memberof media
     * @method createLocalMedia
     * @param {Object} mediaConstraints Collection of constraints for each media type.
     * @param {boolean|Object} [mediaConstraints.audio] Native media constraints for audio.
     * @param {boolean|Object} [mediaConstraints.video] Native media constraints for video.
     * @returns {Promise} Resolves with an array of objects containing both a media type and a media object.
     * @throws {BasicError} Throws a USER_MEDIA_ERROR error if any any other media type other than audio, video or screen is passed in mediaConstraints.
     * @throws {BasicError} Throws a USER_MEDIA_ERROR error if provided constraints cannot be fulfilled.
     * @throws {BasicError} Throws a USER_MEDIA_ERROR error if it fails to get media for other reasons.
     * @example
     * // Create detached media for your local video
     * const medias = await client.media.createLocalMedia({ video: true })
     */
    async createLocalMedia(mediaConstraints) {
      log.debug(`${API_LOG_TAG}media.createLocalMedia: `, mediaConstraints);
      const medias = await operations.createLocal(mediaConstraints, true);
      return medias.map(media => {
        return {
          type: media.type,
          media: (0, _selectors.getMediaById)(context.getState(), media.media.id)
        };
      });
    },
    /**
     * Get local media Tracks.
     * @public
     * @static
     * @memberof media
     * @method getLocalMedia
     * @returns {Promise} Resolves with an array of objects containing both a media type and a media object.
     * @example
     * await client.media.createLocalMedia({ video: true })
     * // Get all detached tracks
     * const medias = await client.media.getLocalMedia()
     */
    async getLocalMedia() {
      log.debug(API_LOG_TAG + 'media.getLocalMedia');
      const medias = await operations.getLocalMedia();
      return medias.map(media => {
        return {
          type: media.type,
          media: (0, _selectors.getMediaById)(context.getState(), media.media.id)
        };
      });
    },
    /**
     * Dispose local media Tracks.
     * @public
     * @static
     * @memberof media
     * @method disposeLocalMedia
     * @param {string} trackId An id to a track to be cleaned up.
     * @returns {Promise<undefined>}
     * @throws {BasicError} An error indicating that trackId must be defined.
     * @throws {BasicError} An error indicating that the track that is to be disposed is in use by a call.
     * @throws {BasicError} An error indicating that the track that is to be disposed was not created locally.
     */
    async disposeLocalMedia(trackId) {
      log.debug(API_LOG_TAG + 'media.disposeLocalMedia: ' + trackId);
      await operations.disposeLocalMedia(trackId);
    },
    /**
     * Render Media Tracks in a container.
     *
     * The container is specified by providing a CSS selector string that
     *    corresponds to the HTMLElement to act as the container.
     * @public
     * @static
     * @memberof media
     * @method renderTracks
     * @param  {Array<string>} trackIds List of Track IDs to be rendered.
     * @param  {string} cssSelector A CSS selector string that uniquely
     *    identifies an element. Ensure that special characters are properly
     *    escaped.
     * @param  {Object} [options] Additional options for rendering the tracks.
     * @param  {string} [options.speakerId] The speaker's Device ID to use for audio tracks.
     * @example
     * // When a Call receives a new track, render it.
     * client.on('call:tracksAdded', function (params) {
     *    params.trackIds.forEach(trackId => {
     *      const track = client.media.getTrackById(trackId)
     *      const container = track.isLocal ? localContainer : remoteContainer
      *      // Render the Call's new track when it first becomes available.
     *      client.media.renderTracks([ trackId ], container)
     *    }
     * })
     */
    async renderTracks(trackIds, cssSelector) {
      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      log.debug(API_LOG_TAG + 'media.renderTracks: ', trackIds, (0, _utils.logCssSelector)(cssSelector), options);
      let retValue;
      try {
        retValue = await operations.renderTracks(trackIds, cssSelector, options);
      } catch (error) {
        emitEvent(eventTypes.TRACK_RENDERED, {
          trackIds: error.filteredTrackIds,
          error: error.basicError
        });
        return;
      }
      emitEvent(eventTypes.TRACK_RENDERED, retValue);
    },
    /**
     * Remove Media Tracks from a container.
     *
     * The container is specified by providing a CSS selector string that
     *    corresponds to the HTMLElement to act as the container.
     * @public
     * @static
     * @memberof media
     * @method removeTracks
     * @param  {Array<string>} trackIds List of Track IDs to stop being rendered.
     * @param  {string} cssSelector A CSS selector string that uniquely
     *    identifies an element. Ensure that special characters are properly
     *    escaped.
     */
    async removeTracks(trackIds, cssSelector) {
      log.debug(API_LOG_TAG + 'media.removeTracks: ', trackIds, (0, _utils.logCssSelector)(cssSelector));
      await operations.removeTracks(trackIds, cssSelector);
    },
    /**
     * Mutes the specified Tracks.
     *
     * This API prevents the media of the specified Tracks from being rendered. Audio
     *     Tracks will become silent and video Tracks will be a black frame.
     * This does not stop media from being received by those Tracks. The media simply
     *     cannot be used by the application while the Track is muted.
     *
     * If a local Track being sent in a Call is muted, the Track will be
     *    noticeably muted for the remote user. If a remote Track received in a
     *    call is muted, the result will only be noticeable locally.
     *
     * This mute operation acts on those specified Tracks directly.
     * It does not act on the active Call as a whole.
     *
     * The SDK will emit a {@link media.event:media:muted media:muted} event
     *    when a Track has been muted.
     * @public
     * @static
     * @memberof media
     * @method muteTracks
     * @param  {Array<string>} trackIds List of Track IDs.
     */
    async muteTracks(trackIds) {
      log.debug(API_LOG_TAG + 'media.muteTracks: ', trackIds);
      let affectedTrackIds;
      try {
        affectedTrackIds = await operations.muteTracks(trackIds);
      } catch (error) {
        // TODO: Remove duplication of data in payload of this event
        emitEvent(eventTypes.TRACKS_MUTED, {
          trackIds: error.trackIds,
          tracks: error.trackIds,
          error: error.basicError
        });
        return;
      }
      // TODO: Remove duplication of data in payload of this event
      emitEvent(eventTypes.TRACKS_MUTED, {
        trackIds: affectedTrackIds,
        tracks: affectedTrackIds
      });
    },
    /**
     * Unmutes the specified Tracks.
     *
     * Media will resume its normal rendering for the Tracks.
     * Like the 'muteTracks' API, this unmute operation acts on those specified Tracks directly.
     * Therefore it does not act on active Call as a whole.
     *
     * The SDK will emit a {@link media.event:media:unmuted media:unmuted} event
     *    when a Track has been unmuted.
     * @public
     * @static
     * @memberof media
     * @method unmuteTracks
     * @param  {Array<string>} trackIds List of Track IDs.
     */
    async unmuteTracks(trackIds) {
      log.debug(API_LOG_TAG + 'media.unmuteTracks: ', trackIds);
      let affectedTrackIds;
      try {
        affectedTrackIds = await operations.unmuteTracks(trackIds);
      } catch (error) {
        // TODO: Remove duplication of data in payload of this event
        emitEvent(eventTypes.TRACKS_UNMUTED, {
          trackIds: error.trackIds,
          tracks: error.trackIds,
          error: error.basicError
        });
        return;
      }
      // TODO: Remove duplication of data in payload of this event
      emitEvent(eventTypes.TRACKS_UNMUTED, {
        trackIds: affectedTrackIds,
        tracks: affectedTrackIds
      });
    }
  };
}

/***/ }),

/***/ 46215:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.TRACK_SOURCE_UNMUTED = exports.TRACK_SOURCE_MUTED = exports.TRACK_RENDERED = exports.TRACK_ENDED = exports.TRACKS_UNMUTED = exports.TRACKS_MUTED = exports.INITIALIZE_DEVICES_ERROR = exports.DEVICES_CHANGED = void 0;
/**
 * The media devices available for use have changed.
 *
 * Information about the available media devices can be retrieved using the
 *    {@link media.getDevices} API.
 *
 * @public
 * @static
 * @memberof media
 * @event devices:change
 * @example
 * // Listen for changes to available media devices.
 * client.on('devices:change', function () {
 *    // Retrieve the latest media device lists.
 *    const devices = client.media.getDevices()
 * })
 */
const DEVICES_CHANGED = exports.DEVICES_CHANGED = 'devices:change';

/**
 * An error occurred while trying to access media devices.
 *
 * The most common causes of this error are when the browser does not have
 *    permission from the end-user to access the devices, or when the browser
 *    cannot find a media device that fulfills the
 *    {@link call.MediaConstraint MediaConstraint(s)} that was provided.
 *
 * @public
 * @static
 * @memberof media
 * @event devices:error
 * @param {Object} params
 * @param {Error} params.error The Basic error object.
 */
const INITIALIZE_DEVICES_ERROR = exports.INITIALIZE_DEVICES_ERROR = 'devices:error';

/**
 * The specified Tracks have been muted.
 *
 * A Track can be muted using the {@link media.muteTracks} API.
 * @public
 * @memberof media
 * @event media:muted
 * @param {Object} params
 * @param {Array<string>} params.tracks The list of Tracks that were muted.
 */
const TRACKS_MUTED = exports.TRACKS_MUTED = 'media:muted';

/**
 * The specified Tracks have been unmuted.
 *
 * A Track can be unmuted using the {@link media.unmuteTracks}
 *    API.
 * @public
 * @memberof media
 * @event media:unmuted
 * @param {Object} params
 * @param {Array<string>} params.tracks The list of Tracks that were unmuted.
 */
const TRACKS_UNMUTED = exports.TRACKS_UNMUTED = 'media:unmuted';

/**
 * The specified Track has had its media source muted.
 *
 * The Track is still active, but is not receiving media any longer. An audio
 *    track will be silent and a video track will be a black frame. It is
 *    possible for the track to start receiving media again (see the
 *    {@link media.event:media:sourceUnmuted media:sourceUnmuted} event).
 *
 * This event is generated outside the control of the SDK. This will predominantly
 *    happen for a remote track during network issues, where media will lose frames
 *    and be "choppy". This may also happen for a local track if the browser or
 *    end-user stops allowing the SDK to access the media device, for example.
 * @public
 * @static
 * @memberof media
 * @event media:sourceMuted
 * @param {Object} params
 * @param {string} params.trackId The track that is affected as a result of media source being muted.
 */
const TRACK_SOURCE_MUTED = exports.TRACK_SOURCE_MUTED = 'media:sourceMuted';

/**
 * The specified Track has started receiving media from its source once again.
 *
 * The Track returns to the state before it was muted (see the
 *    {@link media.event:media:sourceMuted media:sourceMuted} event), and will
 *    be able to display video or play audio once again.
 *
 * This event is generated outside the control of the SDK, when the cause of the
 *    media source being muted had been undone.
 * @public
 * @static
 * @memberof media
 * @event media:sourceUnmuted
 * @param {Object} params
 * @param {string} params.trackId The track that is affected as a result of media source being unmuted.
 */
const TRACK_SOURCE_UNMUTED = exports.TRACK_SOURCE_UNMUTED = 'media:sourceUnmuted';

/**
 * The specified Track has been rendered into an element.
 *
 * @public
 * @static
 * @memberof media
 * @event media:trackRendered
 * @param {Object} params
 * @param {Array<string>} params.trackIds The list of track id's that were rendered.
 * @param {string} params.selector The css selector used to identify the element the track is rendered into.
 * @param {api.BasicError} [params.error] An error object, if the operation was not successful.
 */
const TRACK_RENDERED = exports.TRACK_RENDERED = 'media:trackRendered';

/**
 * A local Track has ended unexpectedly. The Track may still be part of a Call but
 *    has become disconnected from its media source and is not recoverable.
 *
 * This event is emitted when an action other than an SDK operation stops the
 *    track. The most comon scenarios are when a device being used for a Call
 *    disconnects, any local tracks (such as audio from a bluetooth headset's
 *    microphone or video from a USB camera) from that device will be ended.
 *    Another scenario is for screensharing, where some browsers provide the
 *    ability to stop screensharing directly rather than through an SDK operation.
 *
 * When a local track ends this way, it will still be part of the Call but will
 *    not have any media. The track can be removed from the call with the
 *    {@link call.removeMedia} API so the remote side of the Call knows the track
 *    has stopped, or the track can be replaced with a new track using the
 *    {@link call.replaceTrack} API to prevent any interruption.
 * @public
 * @static
 * @memberof media
 * @event media:trackEnded
 * @param {Object} params
 * @param {Object} params.trackId The Track that has ended.
 * @param {Object} params.callId The ID of the Call the Track is used in.
 */
const TRACK_ENDED = exports.TRACK_ENDED = 'media:trackEnded';

/***/ }),

/***/ 63982:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _api = _interopRequireDefault(__webpack_require__(2233));
var _reducers = _interopRequireDefault(__webpack_require__(14279));
var _default = exports["default"] = {
  name: 'webrtc',
  api: _api.default,
  reducer: _reducers.default
};

/***/ }),

/***/ 84697:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Libraries.

/**
 * The devices substate keeps tracks the of the media devices available for use.
 */
const reducers = {};

// Replace old devices with newly checked devices.
reducers[actionTypes.SET_BROWSER_DETAILS] = {
  next(state, action) {
    return action.payload;
  }
};
const reducer = (0, _reduxActions.handleActions)(reducers, {});
var _default = exports["default"] = reducer;

/***/ }),

/***/ 85144:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Call plugin.

// Libraries.

/**
 * The devices substate keeps tracks the of the media devices available for use.
 */
const reducers = {};

// Replace old devices with newly checked devices.
reducers[actionTypes.DEVICES_CHANGE] = {
  next(state, action) {
    return action.payload;
  }
};

// Replace with newly checked devices.
reducers[actionTypes.INITIALIZE_DEVICES_FINISH] = {
  next(state, action) {
    return action.payload;
  }
};

// The initial state of the reducer.
const defaultState = {
  camera: [],
  microphone: [],
  speaker: []
};
const reducer = (0, _reduxActions.handleActions)(reducers, defaultState);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 14279:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
var _devices = _interopRequireDefault(__webpack_require__(85144));
var _media = _interopRequireDefault(__webpack_require__(57815));
var _tracks = _interopRequireDefault(__webpack_require__(2546));
var _sessions = _interopRequireDefault(__webpack_require__(10544));
var _browser = _interopRequireDefault(__webpack_require__(84697));
/**
 * Webrtc plugin top-level reducer.
 * @method reducer
 * @param  {Object} [state={}]
 * @param  {Object} action
 * @return {Object}
 */
function _default() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;
  return {
    devices: (0, _devices.default)(state.devices, action),
    tracks: (0, _tracks.default)(state.tracks, action),
    sessions: (0, _sessions.default)(state.sessions, action),
    media: (0, _media.default)(state.media, action),
    browser: (0, _browser.default)(state.browser, action)
  };
}

/***/ }),

/***/ 57815:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _remove2 = _interopRequireDefault(__webpack_require__(58009));
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Webrtc plugin.
// Libraries.
// Top-tier reducers: Handles the whole state.
const reducers = {};

// Add the new media object to state.
reducers[actionTypes.MEDIA_NEW] = {
  next(state, action) {
    return (0, _concat2.default)(state, _objectSpread({}, action.payload));
  }
};

// Remove the media object from state.
reducers[actionTypes.MEDIA_REMOVED] = {
  next(state, action) {
    const removeMedia = media => media.id === action.payload.id;
    return (0, _remove2.default)(removeMedia)(state);
  }
};

// Media-tier reducers: Handles only a specific portion of the substate.
const mediaReducers = {};
mediaReducers[actionTypes.MEDIA_NEW_TRACK] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      tracks: (0, _concat2.default)(state.tracks, [action.payload.trackId])
    });
  }
};

// Remove specified track from media state.
mediaReducers[actionTypes.MEDIA_TRACK_ENDED] = {
  next(state, action) {
    const removeTrack = trackId => trackId === action.payload.trackId;
    return _objectSpread(_objectSpread({}, state), {}, {
      tracks: (0, _remove2.default)(removeTrack, state.tracks)
    });
  }
};
const mediaReducer = (0, _reduxActions.handleActions)(mediaReducers, {});
const specificMediaActions = (0, _reduxActions.combineActions)(actionTypes.MEDIA_NEW_TRACK, actionTypes.MEDIA_TRACK_ENDED);
reducers[specificMediaActions] = (state, action) => {
  return state.map(media => {
    if (media.id === action.payload.id) {
      return mediaReducer(media, action);
    } else {
      return media;
    }
  });
};

/*
 * Combine all of top-tier reducers into a single reducer,
 *      each with a default state of an empty array.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, []);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 10544:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _remove2 = _interopRequireDefault(__webpack_require__(58009));
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Webrtc plugin.
// Libraries.
const reducers = {};
reducers[actionTypes.SESSION_ADDED] = {
  next(state, action) {
    return (0, _concat2.default)(state, action.payload);
  }
};
reducers[actionTypes.SESSION_REMOVED] = {
  next(state, action) {
    const removeSession = session => session.id === action.payload.id;
    return (0, _remove2.default)(removeSession)(state);
  }
};
const sessionReducers = {};
sessionReducers[actionTypes.SESSION_NEW_TRACK] = {
  next(state, action) {
    if (action.payload.local) {
      return _objectSpread(_objectSpread({}, state), {}, {
        localTracks: state.localTracks.includes(action.payload.trackId) ? state.localTracks : (0, _concat2.default)(state.localTracks, [action.payload.trackId])
      });
    } else {
      return _objectSpread(_objectSpread({}, state), {}, {
        remoteTracks: state.remoteTracks.includes(action.payload.trackId) ? state.remoteTracks : (0, _concat2.default)(state.remoteTracks, [action.payload.trackId])
      });
    }
  }
};
sessionReducers[actionTypes.SESSION_TRACK_ENDED] = {
  next(state, action) {
    const removeTrack = trackId => trackId === action.payload.trackId;
    if (action.payload.local) {
      return _objectSpread(_objectSpread({}, state), {}, {
        localTracks: (0, _remove2.default)(removeTrack, state.localTracks)
      });
    } else {
      return _objectSpread(_objectSpread({}, state), {}, {
        remoteTracks: (0, _remove2.default)(removeTrack, state.remoteTracks)
      });
    }
  }
};
sessionReducers[actionTypes.SESSION_TRACK_REPLACED] = {
  next(state, action) {
    // Remove old track id if it still exists
    const removeTrack = trackId => trackId === action.payload.oldTrackId;
    const newLocalTracks = (0, _remove2.default)(removeTrack, state.localTracks);
    // Add new track id if it doesn't exist
    if (newLocalTracks.indexOf(action.payload.trackId) === -1) {
      newLocalTracks.push(action.payload.trackId);
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      localTracks: newLocalTracks
    });
  }
};
const sessionReducer = (0, _reduxActions.handleActions)(sessionReducers, {});
const specificSessionActions = (0, _reduxActions.combineActions)(actionTypes.SESSION_NEW_TRACK, actionTypes.SESSION_TRACK_ENDED, actionTypes.SESSION_TRACK_REPLACED);
reducers[specificSessionActions] = (state, action) => {
  return state.map(session => {
    if (session.id === action.payload.id) {
      return sessionReducer(session, action);
    } else {
      return session;
    }
  });
};

/*
 * Combine all of top-tier reducers into a single reducer,
 *      each with a default state of an empty array.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, []);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 2546:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _remove2 = _interopRequireDefault(__webpack_require__(58009));
var _concat2 = _interopRequireDefault(__webpack_require__(12462));
var actionTypes = _interopRequireWildcard(__webpack_require__(1371));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Webrtc plugin.
// Libraries.
const reducers = {};

// Add the new Track to state.
reducers[actionTypes.TRACK_ADDED] = {
  next(state, action) {
    return (0, _concat2.default)(state, action.payload);
  }
};

/*
  Bad Workaround: Don't remove the Track information from state when it is
    removed. Instead, just mark it as "ended".

  When a track is removed from a Call, the application only gets the trackId. If
    they try to get the track with that ID, it will not exist in state. This means
    the application cannot unrender the track if they rely on the Track state
    (eg. isLocal or media kind).

  A better alternative would be to remove the Track from state when the Call it
    is used for ends. That would allow the "call:tracksRemoved" event access to
    the state before they were removed so it could include that information
    (instead of the app needing to re-get it).
  That does not work, though, because this reducer does not have access to the Call
    state (meaning we can't figure out which Session was used for the Call to figure
    out which Tracks were in that Session...) and the "end call" action itself doesn't
    have the information needed either.

  So leave it in state instead to make sure the application can access it. This
    should be fixed when the Callstack and WebrtcStack work together better instead
    of the WebrtcStack just emitting all events as soon as something changes at the
    lower-level WebRTC.
*/
reducers[actionTypes.TRACK_REMOVED] = {
  next(state, action) {
    return state.map(track => {
      if (action.payload.trackId === track.trackId) {
        return _objectSpread(_objectSpread({}, track), {}, {
          state: 'ended'
        });
      } else {
        return track;
      }
    });
  }
};

// Store the selector used for rendering the track.
reducers[actionTypes.RENDER_TRACKS_FINISH] = {
  next(state, action) {
    return state.map(track => {
      if (action.payload.trackIds.includes(track.trackId)) {
        return _objectSpread(_objectSpread({}, track), {}, {
          containers: (0, _concat2.default)(track.containers, action.payload.selector)
        });
      } else {
        return track;
      }
    });
  }
};

// Remove the selector used for rendering the track.
reducers[actionTypes.REMOVE_TRACKS_FINISH] = {
  next(state, action) {
    // TODO: Only remove one container (instead of all that match)?
    const removeContainer = container => container === action.payload.selector;
    return state.map(track => {
      if (action.payload.trackIds.includes(track.trackId)) {
        return _objectSpread(_objectSpread({}, track), {}, {
          containers: (0, _remove2.default)(removeContainer)(track.containers)
        });
      } else {
        return track;
      }
    });
  }
};

// TODO: Update this on an action from the track channel?
reducers[actionTypes.MUTE_TRACKS_FINISH] = {
  next(state, action) {
    return state.map(track => {
      if (action.payload.trackIds.includes(track.trackId)) {
        return _objectSpread(_objectSpread({}, track), {}, {
          muted: true
        });
      } else {
        return track;
      }
    });
  }
};
reducers[actionTypes.UNMUTE_TRACKS_FINISH] = {
  next(state, action) {
    return state.map(track => {
      if (action.payload.trackIds.includes(track.trackId)) {
        return _objectSpread(_objectSpread({}, track), {}, {
          muted: false
        });
      } else {
        return track;
      }
    });
  }
};
reducers[actionTypes.TRACK_SOURCE_MUTED] = {
  next(state, action) {
    return state.map(track => {
      if (action.payload.trackIds.includes(track.trackId)) {
        return _objectSpread(_objectSpread({}, track), {}, {
          sourceMuted: true
        });
      } else {
        return track;
      }
    });
  }
};
reducers[actionTypes.TRACK_SOURCE_UNMUTED] = {
  next(state, action) {
    return state.map(track => {
      if (action.payload.trackIds.includes(track.trackId)) {
        return _objectSpread(_objectSpread({}, track), {}, {
          sourceMuted: false
        });
      } else {
        return track;
      }
    });
  }
};

/*
 * Combine all of top-tier reducers into a single reducer,
 *      each with a default state of an empty array.
 */
const reducer = (0, _reduxActions.handleActions)(reducers, []);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 30105:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getBrowserDetails = getBrowserDetails;
exports.getDevices = getDevices;
exports.getMedia = getMedia;
exports.getMediaById = getMediaById;
exports.getSessionById = getSessionById;
exports.getSessions = getSessions;
exports.getTrackById = getTrackById;
exports.getTracks = getTracks;
/**
 * Retrieves media devices available on the system.
 * @method getDevices
 * @param  {Object} state Redux state.
 * @return {Object}
 */
function getDevices(state) {
  return state.webrtc.devices;
}

/**
 * Session selectors.
 */
function getSessions(state) {
  return state.webrtc.sessions;
}
function getSessionById(state, sessionId) {
  return getSessions(state).find(session => session.id === sessionId);
}

/**
 * Track selectors.
 */
function getTracks(state) {
  return state.webrtc.tracks;
}
function getTrackById(state, trackId) {
  return getTracks(state).find(track => track.trackId === trackId);
}

/**
 * Media selectors.
 * Handles retrieving data from the `state.webrtc.media` substate.
 */

/**
 * Get the list of all media this session.
 * @method getMedia
 * @param  {Object} state Redux state.
 * @return {Array} A list of all media objects.
 */
function getMedia(state) {
  return state.webrtc.media;
}

/**
 * Get a specific media object.
 * @method getMediaById
 * @param  {Object} state Redux state.
 * @param  {string} mediaId The media to retrieve.
 * @return {Object} A media object.
 */
function getMediaById(state, mediaId) {
  return getMedia(state).find(media => media.id === mediaId);
}

/**
 * Retrieves information about the browser.
 * @method getBrowserDetails
 * @param  {Object} state Redux state.
 * @return {Object}
 */
function getBrowserDetails(state) {
  return state.webrtc.browser;
}

/***/ }),

/***/ 40017:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMiddleware;
var _actionTypes = __webpack_require__(91913);
/**
 * WebRTC middleware factory function.
 * @method createMiddleware
 * @param {Object} context The factory context.
 * @return {Function} A redux middleware.
 */
function createMiddleware(context) {
  const logOperations = context.container.WebRTCLogOperations;
  /**
   * Redux middleware: Watch for specific actions and trigger operations
   *   when we see them.
   */
  return next => action => {
    /**
     * Let the action happen as it is received.
     *
     * The WebRTC middleware operations are not side-effects, they are
     *   relevant to the operation being performed. As such they can
     *   happen when necessary without waiting for other operations.
     */

    // WebRTC doesn't act on any other actions.
    if (action.type === _actionTypes.LEVELS_CHANGE) {
      // When an action to change log levels is dispatched, WebRTC plugin should deal with it
      logOperations.updateLogLevel(action);
    }
    if (action.type === _actionTypes.HANDLERS_CHANGE) {
      // When an action to change log handlers is dispatched, WebRTC plugin should deal with it
      logOperations.updateLogHandler(action);
    }
    return next(action);
  };
}

/***/ }),

/***/ 84318:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createLogOperations;
/**
 * WebRTC Log Operations factory function.
 * @method createLogOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for WebRTC logs.
 */
function createLogOperations(container) {
  const {
    WebRTC
  } = container;
  const webrtcLogManager = WebRTC.logs;

  /**
   * Functionality operation for "update webrtc log level" actions.
   * @method updateLogLevel
   * @param  {Object} action A "log level change" action.
   */
  async function updateLogLevel(action) {
    // If the WebRTC log level was changed, update the WebRTC stack's loggers.
    if (action.payload.WEBRTC) {
      await webrtcLogManager.setLevel(action.payload.WEBRTC);
      const loggers = await webrtcLogManager.getLoggers();
      loggers.map(logger => logger.setLevel(action.payload.WEBRTC));
    }
  }

  /**
   * Functionality operation for "update webrtc log handler" actions.
   * @method updateLogHandler
   * @param  {Object} action A "log handler change" action.
   */
  async function updateLogHandler(action) {
    // If the WebRTC log handler was changed, update the WebRTC stack's loggers.
    if (action.payload.WEBRTC) {
      await webrtcLogManager.setHandler(action.payload.WEBRTC);
      const loggers = await webrtcLogManager.getLoggers();
      loggers.map(logger => logger.setHandler(action.payload.WEBRTC));
    }
  }
  return {
    // Operations
    updateLogLevel,
    updateLogHandler
  };
}

/***/ }),

/***/ 89695:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createMediaOperations;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _isString2 = _interopRequireDefault(__webpack_require__(49775));
var _isUndefined2 = _interopRequireDefault(__webpack_require__(73346));
var _actions = __webpack_require__(37992);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _utils = __webpack_require__(25189);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Webrtc plugin.
// Other plugins.
// Libraries.

/**
 * WebRTC Media Operations factory function.
 * @method createMediaOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for WebRTC Media.
 */
function createMediaOperations(container) {
  const {
    WebRTC,
    context,
    logManager
  } = container;
  const log = logManager.getLogger('MEDIA');

  /**
   * Create local Media object(s).
   * The underlying WebRTC APIs used are getUserMedia and getDisplayMedia.
   * See https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
   *    for more information.
   * @method createLocal
   * @async
   * @param  {Object} mediaConstraints Collection of constraints for each media type.
   * @param  {MediaStreamConstraints} mediaConstraints.audio Native media contraints for audio.
   * @param  {MediaStreamConstraints} mediaConstraints.video Native media constraints for video.
   * @param  {MediaStreamConstraints} mediaConstraints.screen Native media constraints for display (screen).
   * @param {boolean} detached Specifies if the track is detached and can be used with or without a call.
   * @return {Array<Object>} List of objects containing the media type and the media itself.
   * @throws {BasicError} Throws a USER_MEDIA_ERROR error if any any other media type other than audio, video or screen is passed in mediaConstraints.
   * @throws {BasicError} Throws a USER_MEDIA_ERROR error if provided constraints cannot be fulfilled.
   * @throws {BasicError} Throws a USER_MEDIA_ERROR error if it fails to get media for other reasons.
   */
  async function createLocal(mediaConstraints) {
    let detached = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    log.debug('Getting media with constraints: ', mediaConstraints);

    // Only allow media types 'audio', 'video', and 'screen'
    if (!mediaConstraints || !Object.keys(mediaConstraints).every(mediaType => ['audio', 'video', 'screen', 'medias'].includes(mediaType))) {
      throw new _errors.default({
        code: _errors.callCodes.USER_MEDIA_ERROR,
        message: `mediaConstraints must be an object containing at least one of the following media types (and only these types): 'audio', 'video', and 'screen'`
      });
    }
    const medias = [];
    try {
      if (mediaConstraints.screen) {
        const screenShareConstraints = {
          video: mediaConstraints.screen
        };
        const screenShareMedia = await WebRTC.media.createLocalScreen(screenShareConstraints, detached);
        medias.push({
          type: 'screen',
          media: screenShareMedia
        });
      }
      if (mediaConstraints.audio) {
        const audioConstraints = {
          audio: mediaConstraints.audio
        };
        const audioMedia = await WebRTC.media.createLocal(audioConstraints, detached);
        medias.push({
          type: 'audio',
          media: audioMedia
        });
      }
      if (mediaConstraints.video) {
        const videoConstraints = {
          video: mediaConstraints.video
        };
        const videoMedia = await WebRTC.media.createLocal(videoConstraints, detached);
        medias.push({
          type: 'video',
          media: videoMedia
        });
      }
    } catch (err) {
      let errMessage;
      if (err.name === 'OverconstrainedError') {
        errMessage = `Failed to get media due to constraint: ${err.constraint}.`;
      } else {
        errMessage = `Failed to get media => Name: ${err.name}; Error Message :${err.message}.`;
      }
      log.info(errMessage);

      // Clean up successful media object when there is partial media failure.
      for (const eachMedia of medias) {
        await eachMedia.media.stop();
      }
      const errorObj = new _errors.default({
        message: errMessage,
        code: _errors.callCodes.USER_MEDIA_ERROR
      });
      throw errorObj;
    }
    return medias;
  }

  /**
   * Get local media.
   * @method getLocalMedia
   * @return {Promise} Resolves to a list of objects containing the media type and the media itself.
   */
  async function getLocalMedia() {
    log.debug('Getting local media');
    const mediaIds = await WebRTC.media.getAll();
    const detachedMedias = [];
    for (const mediaId of mediaIds) {
      const media = await WebRTC.media.get(mediaId);
      if (media) {
        const tracks = await media.getTracks();
        for (const track of tracks) {
          const trackState = await track.getState();
          if (trackState.detached) {
            detachedMedias.push({
              type: trackState.kind,
              media
            });
            break;
          }
        }
      }
    }
    return detachedMedias;
  }

  /**
   * Dispose local media.
   * @method disposeLocalMedia
   * @param {string} trackId A track identifier to dispose of from media.
   * @throws {BasicError} An error indicating that trackId must be defined.
   * @throws {BasicError} An error indicating that the track that is to be disposed is in use by a session.
   * @throws {BasicError} An error indicating that the track that is to be disposed was not created locally.
   */
  async function disposeLocalMedia(trackId) {
    const {
      dispatch
    } = context;
    if (!trackId) {
      throw new _errors.default({
        message: 'Track id is `undefined`. You must pass an existing track id to dispose of the associated track.',
        code: _errors.webrtcCodes.INVALID_PARAM
      });
    }
    let disposedTrack = await WebRTC.track.get(trackId);
    if (!disposedTrack) {
      throw new _errors.default({
        message: `Either ${trackId} is not a valid track id type or track does not exist.`,
        code: _errors.webrtcCodes.INVALID_TRACK_ID
      });
    }

    // Check if the track is in use by a session
    const sessions = await WebRTC.sessionManager.getAll();
    sessions.forEach(session => {
      const tracks = session.localTracks;
      // throw an error if the track is in use by a session
      if (tracks.find(track => track.id === trackId)) {
        throw new _errors.default({
          message: `Can't dispose track: ${trackId}. It's in use by session: ${session.id}`,
          code: _errors.webrtcCodes.TRACK_IN_USE
        });
      }
    });
    if (disposedTrack) {
      const detached = await disposedTrack.isDetached();
      if (detached) {
        await disposedTrack.stop();
      } else {
        throw new _errors.default({
          message: `Can't dispose track: ${trackId}. Track was not created locally.`,
          code: _errors.webrtcCodes.TRACK_NOT_LOCAL
        });
      }
    }

    // Update the track in state to 'ended'
    dispatch(_actions.trackActions.trackRemoved(trackId));
  }

  /**
   * Render Tracks in a specified container.
   * @method renderTracks
   * @param  {Array} trackIds A list of track IDs.
   * @param  {Object} selector A CSS selector string that uniquely identifies an element.
   * @param  {Object} [options] Additional options for rendering the tracks.
   * @param  {string} [options.speakerId] The speaker's Device ID to use for audio tracks.
   */
  async function renderTracks(trackIds, selector, options) {
    const {
      dispatch
    } = context;
    // Dispatch the associated action for backwards-compatibility
    dispatch(_actions.trackActions.renderTracks(trackIds, _objectSpread({
      selector
    }, options)));

    // Get the tracks that are to be rendered.
    const tracks = await WebRTC.track.getTracks(trackIds);
    const filteredTracks = tracks.filter(track => !(0, _isUndefined2.default)(track));
    let payload = {};

    // Each of trackIds, selector and speakerId must be present in order to render a track
    if (trackIds &&
    // trackIds is an array
    trackIds instanceof Array &&
    // trackIds is not empty
    trackIds.length > 0 &&
    // selector is not empty
    selector && (
    // selector is a string or a DOM element
    // (note: We can't use instanceof here since elements part of another window are not of the same instance as window.Element)
    (0, _isString2.default)(selector) || 'tagName' in selector)) {
      log.info(`Rendering track(s) in element ${(0, _utils.logCssSelector)(selector)}.`, trackIds);

      // Render the tracks.
      await Promise.all(filteredTracks.map(async track => {
        await WebRTC.renderer.renderTrack(track, selector, options.speakerId);
      }));
      log.info('Finished rendering track(s).', filteredTracks.map(track => track.id));
      payload = {
        selector
      };
    } else {
      const message = 'Failed to render tracks. One of trackIds or cssSelector is missing from request.';
      log.info(message, filteredTracks.map(track => track.id));
      payload.error = new _errors.default({
        message,
        code: _errors.webrtcCodes.INVALID_PARAM
      });

      // Include the filtered track IDs in the error to ensure complete backwards compability with the event that is emitted
      // Since the error event also includes only the filtered track ids
      const error = {
        basicError: payload.error,
        filteredTrackIds: filteredTracks.map(track => track.id)
      };

      // Report operation done.
      dispatch(_actions.trackActions.renderTracksFinish(filteredTracks.map(track => track.id), payload));
      throw error;
    }

    // Report operation done.
    dispatch(_actions.trackActions.renderTracksFinish(filteredTracks.map(track => track.id), payload));
    return {
      trackIds: filteredTracks.map(track => track.id),
      selector
    };
  }

  /**
   * Stop Tracks from being rendered in a specified container.
   * @method removeTracks
   * @param  {Array} trackIds A list of track IDs.
   * @param  {Object} selector A CSS selector string that uniquely identifies an element.
   */
  async function removeTracks(trackIds, selector) {
    const {
      dispatch
    } = context;
    // Dispatch the associated action for backwards-compatibility
    dispatch(_actions.trackActions.removeTracks(trackIds, {
      selector
    }));
    log.info(`Removing track(s) from element ${(0, _utils.logCssSelector)(selector)}.`, trackIds);

    // Remove the tracks.
    await Promise.all(trackIds.map(async id => {
      await WebRTC.renderer.unrenderTrack(id, selector);
    }));
    log.info('Finished removing track(s).', trackIds);

    // Report operation done.
    dispatch(_actions.trackActions.removeTracksFinish(trackIds, {
      selector
    }));
  }

  /**
   * Mute certain tracks.
   * @method muteTracks
   * @param  {Array} trackIds A list of track IDs.
   * @return {Array} The list of track IDs which were muted.
   */
  async function muteTracks(trackIds) {
    const {
      dispatch
    } = context;
    // Dispatch the associated action for backwards-compatibility
    dispatch(_actions.trackActions.muteTracks(trackIds));
    log.info('Muting track(s).', trackIds);
    if (trackIds &&
    // trackIds is an array
    trackIds instanceof Array &&
    // trackIds is not empty
    trackIds.length > 0) {
      // Get the tracks that are to be muted.
      const allTracks = await WebRTC.track.getTracks();
      const tracks = allTracks.filter(track => trackIds.includes(track.id));

      // Mute the tracks
      Promise.all(tracks.map(track => track.mute()));
      const affectedTrackIds = tracks.map(track => track.id);
      log.info('Finished muting track(s).', affectedTrackIds);

      // Report operation done.
      dispatch(_actions.trackActions.muteTracksFinish(affectedTrackIds));
      return affectedTrackIds;
    } else {
      const message = 'Failed to mute tracks. trackIds is missing (or empty) from request.';
      log.info(message, trackIds);
      const payload = {};
      payload.error = new _errors.default({
        message,
        code: _errors.webrtcCodes.INVALID_PARAM
      });

      // Report operation done, but with a failure.
      dispatch(_actions.trackActions.muteTracksFinish(trackIds, payload));
      const error = {
        basicError: payload.error,
        trackIds
      };
      throw error;
    }
  }

  /**
   * Unmute certain tracks.
   * @method unmuteTracks
   * @param  {Array} trackIds A list of track IDs.
   * @return {Array} The list of track IDs which were unmuted.
   */
  async function unmuteTracks(trackIds) {
    const {
      dispatch
    } = context;
    // Dispatch the associated action for backwards-compatibility
    dispatch(_actions.trackActions.unmuteTracks(trackIds));
    log.info('Unmuting track(s).', trackIds);
    if (trackIds &&
    // trackIds is an array
    trackIds instanceof Array &&
    // trackIds is not empty
    trackIds.length > 0) {
      // Get the tracks that are to be unmuted.
      const allTracks = await WebRTC.track.getTracks();
      const tracks = allTracks.filter(track => trackIds.includes(track.id));

      // Unmute the tracks
      Promise.all(tracks.map(track => track.unmute()));
      const affectedTrackIds = tracks.map(track => track.id);
      log.info('Finished unmuting track(s).', affectedTrackIds);

      // Report operation done.
      dispatch(_actions.trackActions.unmuteTracksFinish(affectedTrackIds));
      return affectedTrackIds;
    } else {
      const message = 'Failed to unmute tracks. trackIds is missing (or empty) from request.';
      log.info(message, trackIds);
      const payload = {};
      payload.error = new _errors.default({
        message,
        code: _errors.webrtcCodes.INVALID_PARAM
      });

      // Report operation done, but with a failure.
      dispatch(_actions.trackActions.unmuteTracksFinish(trackIds, payload));
      const error = {
        basicError: payload.error,
        trackIds
      };
      throw error;
    }
  }

  /**
   * Initialize the media devices.
   * @method initializeDevices
   * @param  {Oject} browserConstraints The media constraints
   */
  async function initializeDevices(browserConstraints) {
    const {
      dispatch
    } = context;
    // Dispatch the associated action for backwards-compatibility
    dispatch(_actions.deviceActions.initializeDevice(browserConstraints));
    try {
      // 'browserConstraints' param is optional, so no need to up front validation
      const devices = await WebRTC.devices.setupDeviceInitialization(browserConstraints);
      if (devices.error) {
        // Throw this error (we'll catch it below)
        throw devices;
      } else {
        log.info('Successfully initialized devices.', devices);

        // Dispatch the associated action for backwards-compatibility
        dispatch(_actions.deviceActions.initializeDeviceFinish({
          devices
        }));
      }
    } catch (error) {
      log.info(`Encountered error while initializing devices: ${error.message}.`);

      // Dispatch the associated action for backwards-compatibility
      dispatch(_actions.deviceActions.initializeDeviceFinish({
        error
      }));
      throw error;
    }
  }
  return {
    createLocal,
    getLocalMedia,
    disposeLocalMedia,
    renderTracks,
    removeTracks,
    muteTracks,
    unmuteTracks,
    initializeDevices
  };
}

/***/ }),

/***/ 992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createWebRTCOperations;
var _isPlainObject2 = _interopRequireDefault(__webpack_require__(1449));
var _devices = __webpack_require__(61547);
var _eventTypes = __webpack_require__(46215);
/**
 * WebRTC Operations factory function.
 * @method createWebRTCOperations
 * @param  {Object} container The bottle container.
 * @return {Object} Available operations for WebRTC Media.
 */
function createWebRTCOperations(container) {
  const {
    logManager,
    WebRTC,
    emitEvent,
    context
  } = container;
  const log = logManager.getLogger('WEBRTC');
  const replacedManagers = {};
  const addedManagerEventHandlers = {};

  /**
   * Operation to setup provided proxies on the WebRTC Stack.
   * @method setupProxies
   * @param {Object} proxies The provided WebRTC functionality proxies.
   * @throws {Error} An error if the operation fails.
   */
  function setupProxies(proxies) {
    log.info('Setting up external proxies in WebRTC.');

    // Set proxy methods in WebRTC
    if ((0, _isPlainObject2.default)(proxies)) {
      WebRTC.webrtcManager.setProxies(proxies);
    }

    // Replace managers with any provided managers
    if (proxies.managers) {
      Object.keys(proxies.managers).forEach(manager => {
        // Store the original manager in order to be able to revert later.
        // Make sure we don't get rid of the original manager if the manager is already replaced.
        if (!(manager in replacedManagers)) {
          replacedManagers[manager] = WebRTC[manager];
        }
        // Replace the original manager with the new one.
        WebRTC[manager] = proxies.managers[manager];
        log.debug(`Replaced WebRTC ${manager} manager with proxy version.`);
      });
    }

    // Setup additional event handlers for any managers
    if (proxies.managerEventHandlers) {
      Object.keys(proxies.managerEventHandlers).forEach(manager => {
        if (manager in WebRTC) {
          proxies.managerEventHandlers[manager].forEach(handler => {
            WebRTC[manager].on(handler.eventName, handler.eventFn);
            log.debug(`Added new '${handler.eventName}' event handler on ${manager} manager.`);
          });
          // Store these as added event handlers in order to be able to revert later.
          addedManagerEventHandlers[manager] = proxies.managerEventHandlers[manager];
        } else {
          log.debug(`Provided '${manager}' manager is not a WebRTC manager, skipping event handler proxies.`);
        }
      });
    }
    log.info('Successfully set up external proxies in WebRTC.');
  }

  /**
   * Operation to teardown proxies set on the WebRTC Stack.
   * @method teardownProxies
   * @throws {Error} An error if the operation fails.
   */
  async function teardownProxies() {
    log.info('Tearing down all external proxies in WebRTC.');

    // Pass in empty proxies to the following function so that it will set empty proxies
    // in WebRTC causing current WebRTC functionality not to be overriden anymore.
    WebRTC.webrtcManager.setProxies({
      peer: {}
    });

    // Revert any previously replaced managers to the original ones.
    Object.keys(replacedManagers).forEach(manager => {
      WebRTC[manager] = replacedManagers[manager];
      // Delete the manager from the replacedManagers since it has now been reverted.
      delete replacedManagers[manager];
      log.debug(`Reverted WebRTC ${manager} manager to original version.`);
    });

    // Remove all additional event handlers set on the managers.
    Object.keys(addedManagerEventHandlers).forEach(manager => {
      addedManagerEventHandlers[manager].forEach(handler => {
        WebRTC[manager].off(handler.eventName, handler.eventFn);
        log.debug(`Removed added '${handler.eventName}' event handler from ${manager} manager.`);
      });
      delete addedManagerEventHandlers[manager];
    });
    log.info('Successfully tore down proxies in WebRTC.');
    log.info('Updating devices after teardown.');
    const devices = await WebRTC.devices.checkDevices();
    context.dispatch((0, _devices.devicesChanged)(devices));
    // Emit the event so the application knows that devices have changed.
    emitEvent(_eventTypes.DEVICES_CHANGED, {});
  }
  return {
    setupProxies,
    teardownProxies
  };
}

/***/ }),

/***/ 81074:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.jsonChannel = jsonChannel;
exports.replyChannel = replyChannel;
var _logs = __webpack_require__(43862);
// Other plugins.

const log = _logs.logManager.getLogger('CHANNEL');

/**
 * Converts a channel's send and receive to serialize messages in JSON before sending and after receiving.
 *
 * @param {Object} innerChannel The channel to convert
 */
function jsonChannel(innerChannel) {
  const jsonChannel = {
    receive: undefined,
    send(message) {
      try {
        innerChannel.send(JSON.stringify(message));
      } catch (err) {
        log.error('Failed to send JSON message over channel: ', err);
      }
    }
  };
  innerChannel.receive = function receiveJSONMessage(message) {
    try {
      if (jsonChannel.receive) {
        jsonChannel.receive(JSON.parse(message));
      }
    } catch (err) {
      log.error('Failed to receive JSON message on channel: ', err);
    }
  };
  return jsonChannel;
}

/**
 * Converts a channel with only `send` and `receive` functionality into one that
 *    also has `reply` functionality.
 * This is required by the Proxy Plugin to convert asynchronous code into
 *    synchronous code. The Proxy needs to return a value synchronously when
 *    sending data over the channel.
 * @method replyChannel
 * @param  {Object} channel
 * @return {Object} The same channel, but with a `reply` method as well.
 */
function replyChannel(channel) {
  /**
   * Track sent messages by their ID.
   * @type {Object}
   */
  const sentMessages = {};
  channel.receive = function receiveMessage(message) {
    const {
      messageId,
      data
    } = message;

    // Determine how the message needs to be handled.
    if (messageId && sentMessages[messageId]) {
      if (sentMessages[messageId].isExpired) {
        // If the reply came after the time-out, ignore the message.
        log.debug(`Received reply from timed-out message ${messageId}. Ignoring.`);
        delete sentMessages[messageId];
      } else {
        // If the message has an ID from a sent message, then it is a reply to
        //    that message. Resolve the promise associated with it.
        log.debug(`Received reply from message ${messageId}.`);
        sentMessages[messageId].resolve(data);
      }
    } else if (messageId && !sentMessages[messageId]) {
      // If the message has an ID that we don't know about, then the application
      //    will need to handle it.
      if (api.receive) {
        log.debug(`Received new message ${messageId}.`);
        api.receive(messageId, data);
      } else {
        log.error('No listener set for handling received messages.', data);
      }
    } else {
      // If the message didn't have an ID, then it wasn't from our test channel.
      log.warn('Received message without an ID on the channel; ignoring.', message);
    }
  };

  /*
   * The interface that the Proxy Plugin will use.
   */
  const api = {};

  /**
   * Send a message over the channel.
   * @method send
   * @param {string} messageId A unique ID to track the sent message.
   * @param {Object} data
   * @param {Function} [callback] Function called when a reply is received.
   */
  api.send = (messageId, data, callback) => {
    if (sentMessages[messageId]) {
      // The ID has already been used for sending a message.
      callback(null, new Error('Cannot send message; ID already used.'));
      return;
    }

    // Attach a messageId to the message.
    // This lets the remote side reply to this message by using the messageId.
    const message = {
      data,
      messageId
    };
    if (callback) {
      // If there is a callback function, then a reply is expected.
      // Wrap `send` is a promise so that we can correlate receiving a reply
      //    to the callback.
      new Promise(resolve => {
        // Race receiving the reply against a time-out.
        // 12s was chosen to be slightly longer than a valid WebRTC operation
        //    timeout (collecting ICE candidates can take 10s).
        const timeoutId = setTimeout(() => {
          log.debug(`Message ${messageId} timed-out. Failing operation.`);
          sentMessages[messageId].isExpired = true;
          callback(null, new Error('Operation timed-out; no reply from other side of channel.'));
        }, 12000);

        // Store `resolve` so we can call it call it when we receive a reply.
        sentMessages[messageId] = {
          resolve,
          timeoutId,
          isExpired: false
        };

        // Send the message over the channel.
        log.debug(`Sending new message ${messageId} with reply expected.`);
        channel.send(message);
      }).then(data => {
        // The message received a reply, so remove the reference.
        clearTimeout(sentMessages[messageId].timeoutId);
        delete sentMessages[messageId];
        if (typeof callback === 'function') {
          callback(data);
        }
      });
    } else {
      // Send the message over the channel.
      log.debug(`Sending new message ${messageId}.`);
      channel.send(message);
    }
  };

  /**
   * Listener for receiving a message from the channel.
   * @method receive
   * @param {string} messageId
   * @param {Object} data
   */
  // eslint-disable-next-line
  api.receive = undefined;

  /**
   * Send a reply to a specific received message over the channel.
   * @method reply
   * @param {string} messageId
   * @param {Object} data
   */
  api.reply = (messageId, data) => {
    // Attach the messageId to the message.
    const message = {
      data,
      messageId
    };
    log.debug(`Replying to message ${messageId}.`);
    channel.send(message);
  };
  return api;
}

/***/ }),

/***/ 49658:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = proxyFactory;
var _isFunction2 = _interopRequireDefault(__webpack_require__(62064));
var _interface = _interopRequireDefault(__webpack_require__(31500));
var _proxyStack = _interopRequireDefault(__webpack_require__(29455));
var _logs = __webpack_require__(43862);
var _kandyWebrtc = _interopRequireWildcard(__webpack_require__(15203));
var _operations = _interopRequireDefault(__webpack_require__(50458));
var _api = _interopRequireDefault(__webpack_require__(20589));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Proxy Plugin.

// Libraries.

const log = _logs.logManager.getLogger('PROXY');

/**
 * Proxy Plugin factory.
 * The Proxy Plugin is responsible for setting up the webRTC /
 *    Media Proxy within the SDK. This includes replacing the
 *    webRTC stack with a Proxy stack, providing an interface
 *    for an application to configure the Proxy stack, and,
 *    in general, bringing all of the Proxy components together.
 * @method proxyFactory
 * @return {Object} Plugin components.
 */
function proxyFactory() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let bottle = arguments.length > 1 ? arguments[1] : undefined;
  // If WebRTC is not supported, don't set up the Proxy plugin.
  const {
    mediaDevices,
    peerConnection
  } = (0, _kandyWebrtc.getWebRTCSupportCapabilities)();
  if (!mediaDevices || !peerConnection) {
    log.warn('Calls are not supported on this platform due to lack of WebRTC support. Proxy APIs will not be available.');
    return;
  }
  bottle.factory('ProxyApi', _api.default);
  bottle.factory('ProxyOperations', _operations.default);

  // Replace the WebrtcStack provided as a component to the bottle by the ProxyStack.
  bottle.decorator('WebRTC', function (webRTC) {
    /*
     * Bad workaround; required because of KJS-77.
     * The Proxy plugin will initialize its own Webrtc-stack, which means there are two of them.
     *    The original one from the webrtc plugin won't be used, but we still need to disable
     *    it listening for "device changed" events on the browser.
     */
    webRTC.devices.setListening(false);

    // Return the portion of the ProxyStack that is identical to the Webrtc-Stack.
    return proxy.managers;
  });

  // Register a function to check browser info after SDK initialization has finished.
  bottle.defer(initProxy);
  const capabilities = ['mediaProxy'];

  // Initialize a real webRTC stack.
  const webRTC = (0, _kandyWebrtc.default)();
  // Initialize the Proxy stack. The real webRTC stack is needed for
  //    when proxy-mode is disabled.
  const proxy = (0, _proxyStack.default)(webRTC);
  bottle.value('ProxyStack', proxy);
  function initProxy(container) {
    const {
      ProxyStack,
      logManager
    } = container;
    const log = logManager.getLogger('PROXY');

    // Make sure that webRTC is the Proxy Stack.
    if (!ProxyStack.setProxyMode || !(0, _isFunction2.default)(ProxyStack.setProxyMode)) {
      log.error('Cannot setup Proxy Plugin: Proxy Stack not found.');
    }
  }
  return {
    name: _interface.default.name,
    reducer: _interface.default.reducer,
    initProxy,
    capabilities
  };
}

/***/ }),

/***/ 85078:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SET_MODE_FINISH = exports.SET_MODE = exports.SET_CHANNEL_FINISH = exports.SET_CHANNEL = exports.INITIALIZE_FINISH = exports.INITIALIZE = void 0;
const PREFIX = '@@KANDY/PROXY/';
const SET_MODE = exports.SET_MODE = PREFIX + 'SET_MODE';
const SET_MODE_FINISH = exports.SET_MODE_FINISH = PREFIX + 'SET_MODE_FINISH';
const SET_CHANNEL = exports.SET_CHANNEL = PREFIX + 'SET_CHANNEL';
const SET_CHANNEL_FINISH = exports.SET_CHANNEL_FINISH = PREFIX + 'SET_CHANNEL_FINISH';
const INITIALIZE = exports.INITIALIZE = PREFIX + 'INITIALIZE';
const INITIALIZE_FINISH = exports.INITIALIZE_FINISH = PREFIX + 'INITIALIZE_FINISH';

/***/ }),

/***/ 50561:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.initializeRemote = initializeRemote;
exports.initializeRemoteFinish = initializeRemoteFinish;
exports.setChannel = setChannel;
exports.setChannelFinish = setChannelFinish;
exports.setProxyMode = setProxyMode;
exports.setProxyModeFinish = setProxyModeFinish;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(85078));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function actionHelper(type) {
  let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const action = {
    type,
    payload: _objectSpread({}, payload)
  };
  if (payload.error) {
    action.error = true;
  }
  return action;
}
function setProxyMode(value) {
  return actionHelper(actionTypes.SET_MODE, {
    value
  });
}
function setProxyModeFinish(_ref) {
  let {
    error,
    value
  } = _ref;
  return actionHelper(actionTypes.SET_MODE_FINISH, {
    error,
    value
  });
}
function setChannel(channel) {
  return actionHelper(actionTypes.SET_CHANNEL, {
    channel
  });
}
function setChannelFinish(_ref2) {
  let {
    error
  } = _ref2;
  return actionHelper(actionTypes.SET_CHANNEL_FINISH, {
    error
  });
}
function initializeRemote(config) {
  return actionHelper(actionTypes.INITIALIZE, {
    config
  });
}
function initializeRemoteFinish(_ref3) {
  let {
    error,
    browser
  } = _ref3;
  return actionHelper(actionTypes.INITIALIZE_FINISH, {
    error,
    browser
  });
}

/***/ }),

/***/ 20589:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAPI;
var _selectors = __webpack_require__(21590);
var eventTypes = _interopRequireWildcard(__webpack_require__(92871));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * The 'proxy' namespace allows for a secondary mode for making calls: proxy mode.
 * When proxy mode is enabled, the SDK will redirect webRTC / media operations from the current machine to a remote machine using a channel.
 *
 * This is an advanced feature that enables support for Calls in particular scenarios that would otherwise not support them.
 *
 * @public
 * @namespace proxy
 */

/**
 * The Channel object that the Proxy module needs to be provided.
 *
 * @public
 * @static
 * @typedef {Object} Channel
 * @memberof proxy
 * @example
 * // The channel the application uses for communicating with a remote endpoint.
 * const appChannel = ...
 *
 * // The channel the application will provide to the Proxy module for use.
 * const channel = {
 *    send: function (data) {
 *      // Any encoding / wrapping needed for a Proxy message being sent
 *      //    over the channel.
 *      appChannel.sendMessage(data)
 *    },
 *    // The Proxy module will set this function.
 *    receive: undefined
 * }
 * appChannel.on('message', data => {
 *    // Any decoding / unwrapping needed for the received message.
 *    channel.receive(data)
 * })
 *
 * client.proxy.setChannel(channel)
 */

/**
 * Channel function that the Proxy module will use to send messages to the remote side.
 * @public
 * @memberof proxy.Channel
 * @name send
 * @function
 * @param {Object} data Message to be sent over the channel.
 */

/**
 * API that the Proxy module will assign a listener function for accepting received messages.
 * This function should receive all messages sent from the remote side of the channel.
 * @public
 * @memberof proxy.Channel
 * @name receive
 * @function
 * @param {Object} data The message received from the Channel.
 */

// Proxy plugin.

/**
 * Proxy API factory function.
 * @method createAPI
 * @param {Object} container The bottle container.
 * @returns {Object} Available public APIs for Proxy.
 */
function createAPI(container) {
  const {
    context,
    emitEvent,
    ProxyOperations: operations,
    logManager,
    API_LOG_TAG
  } = container;
  const log = logManager.getLogger('PROXY');
  const proxyApi = {
    /**
     * Sets whether Call functionality should be proxied to the Remote SDK or not.
     *    When set to `true`, WebRTC operations will be proxied over a channel. When
     *    set to `false`, WebRTC operation will occur as normal on the local machine.
     *
     * Setting proxy mode is a required step for being able to use the Proxy
     *    functionality. It is recommended that this is the last step, after setting
     *    a channel and initializing the remote endpoint. Proxy mode cannot be changed if there
     *    is an on-going call.
     *
     * On completion, this API will trigger a {@link proxy.event:proxy:change proxy:change}
     *    event on success. The {@link proxy.getProxyMode} or {@link proxy.getInfo}
     *    APIs can be used to verify that proxy mode has been changed. If an error
     *    is encountered, this API will trigger a {@link proxy.event:proxy:error proxy:error}
     *    event.
     * @public
     * @static
     * @memberof proxy
     * @method setProxyMode
     * @param {boolean} value Whether proxy mode should be enabled.
     * @example
     * // On success, the `proxy.setProxyMode` API will trigger a `proxy:change` event.
     * client.on('proxy:change', params => {
     *    const isProxied = client.proxy.getProxyMode()
     *    log(`Proxy mode set to ${isProxied}.`)
     * })
     * // On error, the `proxy.setProxyMode` API will trigger a `proxy:error` event.
     * client.on('proxy:error', params => {
     *    const { code, message } = params.error
     *    log(`Failed to set proxy mode due to ${code}: ${message}.`)
     * })
     *
     * // Get the current proxy state to ensure we can set proxy mode to `true`.
     * const { proxyMode, hasChannel, remoteInitialized } = client.proxy.getInfo()
     * if (
     *    hasChannel === true && // A channel was previously provided.
     *    remoteInitialized === true && // The Remote SDK is ready.
     *    proxyMode === false && // Proxy mode is not already `true`.
     * ) {
     *    client.proxy.setProxyMode(true)
     * }
     */
    async setProxyMode(value) {
      log.debug(API_LOG_TAG + 'proxy.setProxyMode: ', value);
      try {
        await operations.setProxyMode(value);
      } catch (error) {
        emitEvent(eventTypes.PROXY_ERROR, {
          error
        });
        return;
      }
      emitEvent(eventTypes.PROXY_CHANGE);
    },
    /**
     * Retrieves the current mode for Proxy behaviour.
     *
     * When set to `true`, WebRTC operations will be proxied over a channel. When
     *    set to `false`, WebRTC operation will occur as normal on the local machine.
     *    See the {@link proxy.setProxyMode} API for more information.
     * @public
     * @static
     * @memberof proxy
     * @method getProxyMode
     * @return {boolean} Whether proxy mode is currently enabled.
     */
    getProxyMode() {
      const {
        getState
      } = context;
      log.debug(API_LOG_TAG + 'proxy.getProxyMode');
      return (0, _selectors.getProxyState)(getState()).proxyMode;
    },
    /**
     * Retrieves information about the proxy.
     * @public
     * @static
     * @memberof proxy
     * @method getInfo
     * @returns {Object} proxy Object containing information about the proxy.
     * @returns {boolean} proxy.proxyMode Current operating mode.
     * @returns {boolean} proxy.hasChannel Proxy has a channel associated with it.
     * @returns {boolean} proxy.remoteInitialized Proxy initialization state.
     * @returns {Object} proxy.browser Details for the browser the proxy is using.
     * @example
     * const proxy = client.proxy.getInfo()
     *
     * log(`Proxy Browser in use: ${proxy.browser}, mode: ${proxy.proxyMode}, channel: ${proxy.hasChannel}, initialized: ${proxy.remoteInitialized}.`)
     */
    getInfo() {
      const {
        getState
      } = context;
      log.debug(API_LOG_TAG + 'proxy.getInfo');
      return (0, _selectors.getProxyState)(getState());
    },
    /**
     * Retrieve information about the proxy's browser being used.
     * Browser information being defined indicates that the browser supports
     *    basic webRTC scenarios.
     * @public
     * @static
     * @memberof proxy
     * @method getProxyDetails
     * @return {Object} Object containing `browser` and `version` information.
     * @example
     * const details = client.proxy.getProxyDetails()
     *
     * log(`Proxy Browser in use: ${details.browser}, version ${details.version}.`)
     */
    getProxyDetails() {
      const {
        getState
      } = context;
      log.debug(API_LOG_TAG + 'proxy.getProxyDetails');
      return (0, _selectors.getProxyState)(getState()).browser;
    },
    /**
     * Sets the channel to be used while proxy mode is enabled.
     *
     * Providing a channel is a required step for being able to use the Proxy
     *    functionality. This should be the first step, before initializing the
     *    remote endpoint and setting proxy mode.
     *
     * On completion, this API will trigger a {@link proxy.event:proxy:change proxy:change}
     *    event on success. The {@link proxy.getInfo} API can be used to verify
     *    that a channel has been set. If an error is encountered, this API will
     *    trigger a {@link proxy.event:proxy:error proxy:error} event. A channel
     *    cannot be set if there is an on-going call.
     * @public
     * @static
     * @memberof proxy
     * @method setChannel
     * @param {proxy.Channel} channel See the `Channel` module for information.
     * @example
     * client.on('proxy:change', () => {
     *    const { hasChannel } = client.proxy.getInfo()
     *    log(`A channel ${hasChannel ? 'has': 'has not'} been set.`)
     * })
     * client.on('proxy:error', params => {
     *    const { code, message } = params.error
     *    log(`Encountered error ${code}: ${message}.`)
     * })
     *
     * const appChannel = ...
     * client.proxy.setChannel(appChannel)
     */
    async setChannel(channel) {
      log.debug(API_LOG_TAG + 'proxy.setChannel: ', channel);
      try {
        await operations.setChannel(channel);
      } catch (error) {
        emitEvent(eventTypes.PROXY_ERROR, {
          error
        });
        return;
      }
      emitEvent(eventTypes.PROXY_CHANGE);
    },
    /**
     * Sends an initialization message over the channel with webRTC configurations.
     *
     * Initializing the Remote SDK is a required step before being able to use the
     *    Proxy functionality. This step requires a channel having been set previously
     *    (see the {@link proxy.setChannel API}). It is recommended to perform this
     *    step before setting the proxy mode (see the {@link proxy.setProxyMode} API).
     *
     * On completion, this API will trigger a {@link proxy.event:proxy:change proxy:change}
     *    event on success. The {@link proxy.getInfo} API can be used to verify
     *    that the remote endpoint is initialized. If an error is encountered, this
     *    API will trigger a {@link proxy.event:proxy:error proxy:error} event.
     *
     * This API will perform a version-check between this SDK and the Remote SDK.
     *    Their versions must be the same, otherwise initialization will fail.
     * @public
     * @static
     * @memberof proxy
     * @method initializeRemote
     * @param  {Object} config
     * @example
     * // Get the current proxy state to ensure we can initialize the Remote SDK.
     * const { hasChannel, remoteInitialized } = client.proxy.getInfo()
     * if (
     *    hasChannel === true && // A channel was previously provided.
     *    remoteInitialized === false // The Remote SDK was not previously initializted.
     * ) {
     *    client.proxy.initializeRemote()
     * }
     */
    async initializeRemote(config) {
      log.debug(API_LOG_TAG + 'proxy.initializeRemote: ', config);
      try {
        await operations.initializeRemote(config);
      } catch (error) {
        emitEvent(eventTypes.PROXY_ERROR, {
          error
        });
        return;
      }
      emitEvent(eventTypes.PROXY_CHANGE);
    }
  };

  // Namespace the API.
  return {
    proxy: proxyApi
  };
}

/***/ }),

/***/ 92871:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PROXY_ERROR = exports.PROXY_CHANGE = void 0;
/**
 * A Proxy API has completed and changed the proxy state.
 *
 * The {@link proxy.getInfo} API can be used to retrieve the current proxy state.
 * @public
 * @memberof proxy
 * @event proxy:change
 */
const PROXY_CHANGE = exports.PROXY_CHANGE = 'proxy:change';

/**
 * A Proxy API has resulted in an error.
 *
 * The {@link proxy.getInfo} API can be used to retrieve the current proxy state.
 * @public
 * @memberof proxy
 * @event proxy:error
 * @param {Object} params
 * @param {BasicError} params.error An error with `code` and `message` information.
 */
const PROXY_ERROR = exports.PROXY_ERROR = 'proxy:error';

/***/ }),

/***/ 31500:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _api = _interopRequireDefault(__webpack_require__(20589));
var _reducers = _interopRequireDefault(__webpack_require__(12570));
/*
 * Expose the components of the Proxy Interface as a single object.
 */
var _default = exports["default"] = {
  name: 'proxy',
  api: _api.default,
  reducer: _reducers.default
};

/***/ }),

/***/ 12570:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var actionTypes = _interopRequireWildcard(__webpack_require__(85078));
var _reduxActions = __webpack_require__(68305);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Proxy plugin.
// Libraries.
// The reducer's default state.
const defaultState = {
  proxyMode: false,
  hasChannel: false,
  remoteInitialized: false,
  browser: {}
};
const reducers = {};

// Proxy Mode has changed.
reducers[actionTypes.SET_MODE_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      proxyMode: action.payload.value
    });
  }
};

// A channel has been provided.
reducers[actionTypes.SET_CHANNEL_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      hasChannel: true,
      remoteInitialized: false
    });
  }
};

// The remote side has been initialized.
reducers[actionTypes.INITIALIZE_FINISH] = {
  next(state, action) {
    return _objectSpread(_objectSpread({}, state), {}, {
      browser: action.payload.browser,
      remoteInitialized: true
    });
  }
};
const reducer = (0, _reduxActions.handleActions)(reducers, defaultState);
var _default = exports["default"] = reducer;

/***/ }),

/***/ 21590:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getProxyState = getProxyState;
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
// Libraries.

/**
 * Selector functions.
 * Used to retrieve specific portions of redux state without
 *    needing to know the structure of state.
 */

/**
 * Retrieves the Proxy Plugin state.
 * @method getProxyState
 * @param {Object} state Redux state.
 * @return {Object} Proxy plugin state.
 */
function getProxyState(state) {
  return (0, _cloneDeep2.default)(state.proxy);
}

/***/ }),

/***/ 50458:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOperations;
var _isEmpty2 = _interopRequireDefault(__webpack_require__(45455));
var _selectors = __webpack_require__(11430);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _devices = __webpack_require__(61547);
var proxyActions = _interopRequireWildcard(__webpack_require__(50561));
var webrtcEvents = _interopRequireWildcard(__webpack_require__(46215));
var _selectors2 = __webpack_require__(13751);
var _selectors3 = __webpack_require__(21590);
var _channels = __webpack_require__(59720);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Webrtc plugin.

function createOperations(container) {
  const {
    context,
    emitEvent,
    ProxyStack,
    logManager
  } = container;
  const log = logManager.getLogger('PROXY');
  function handleMessages(ProxyStack) {
    const messageHandler = (0, _channels.createHandler)(container);
    /**
     * Listen for messages received from the ProxyStack.
     *
     * These messages should be actions (and possibly accompanying events) that
     *    were generated by the Webrtc plugin's "channels" (/webrtc/channels/).
     * The listener is the "local side" of the `contextHelper` for how the SDK
     *    should handle Webrtc-stack events. The "remote side" is defined in the
     *    ProxyStack.
     */
    ProxyStack.onMessage((messageId, data) => {
      const proxyState = (0, _selectors3.getProxyState)(context.getState());
      if (!proxyState.proxyMode) {
        log.debug(`Not in Proxy mode, ignoring previous message (${messageId}).`);
      } else if (data && (data.action || data.event)) {
        log.debug(`Received event from remote webrtc stack (${data.action.type}).`);
        // Pass the message to the Webrtc plugin's handler logic.
        // All messages received should be from the webrtc-stack.
        messageHandler(data.action, data.event);
      } else {
        log.debug(`Received unknown message type; ignoring message (${messageId}).`, data);
      }
    });
  }

  /**
   * Operation to set the proxy mode for the Proxy Stack.
   * @method setProxyMode
   * @param {Object} value
   * @throws {Error} An error if the operation fails.
   */
  async function setProxyMode(value) {
    const {
      dispatch
    } = context;
    log.info(`Setting proxy mode to ${value}.`);

    // Dispatch setProxyMode action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(proxyActions.setProxyMode(value));

    // Check to see if there are any on-going calls.
    const calls = (0, _selectors.getActiveCalls)(context.getState());
    const proxyState = (0, _selectors3.getProxyState)(context.getState());
    if (calls.length > 0) {
      log.info('Cannot change proxy mode while there are on-going calls.');
      const error = new _errors.default({
        code: _errors.proxyCodes.IN_ACTIVE_CALL,
        message: 'Cannot change proxy mode while there are on-going calls.'
      });
      dispatch(proxyActions.setProxyModeFinish({
        error
      }));
      // Throw the error, so it makes it back to the API.
      throw error;
    } else if (proxyState.proxyMode === value) {
      log.info('Proxy mode already set to provided value.');
      const error = new _errors.default({
        code: _errors.proxyCodes.INVALID_PARAM,
        message: 'Proxy mode already set to provided value.'
      });
      dispatch(proxyActions.setProxyModeFinish({
        error
      }));
      throw error;
    }

    // set value on the Proxy stack
    const result = await ProxyStack.setProxyMode(value);
    const response = {
      value
    };

    // If the mode wasn't set, define an error to be included in the finish action.
    if (!result) {
      log.info(`Failed to set proxy mode to ${value}.`);

      // TODO: set a proper error code
      const error = new _errors.default({
        code: 'proxy:1',
        message: `Failed to set proxy mode to ${value}.`
      });
      response.error = error;
      dispatch(proxyActions.setProxyModeFinish(response));

      // Throw the error, so it makes it back to the API.
      throw error;
    } else {
      log.info(`Finished setting proxy mode to ${value}.`);
    }
    dispatch(proxyActions.setProxyModeFinish(response));
    if (value && !proxyState.remoteInitialized) {
      log.warn('Proxy mode has been enabled, but the Remote SDK has not been inititalized yet. Call functionality will fail in this state.');
      // Return now to prevent the rest of the operation. The "device check" message
      //    will fail and throw an error to the application.
      return;
    }

    // After Proxy mode is changed, manually update devices to ensure they are
    //    from the correct machine.
    const devices = await ProxyStack.managers.devices.checkDevices();
    if (devices.microphone && devices.camera && devices.speaker) {
      log.debug('Updating available media devices based on proxy mode change.', devices);
      // Only update state with the devices if its an actual device object.
      // If the Remote SDK is not initialized yet, it will return garbage.
      dispatch((0, _devices.devicesChanged)(devices));

      // Emit the event so the application knows that devices have changed.
      emitEvent(webrtcEvents.DEVICES_CHANGED, {});
    }
  }

  /**
   * Operation to setup the communication channel for the Proxy Stack.
   * @method setChannel
   * @param {Object} channel The communication channel.
   * @throws {Error} An error if operation fails.
   */
  async function setChannel(channel) {
    const {
      dispatch
    } = context;
    log.info('Setting channel for use in proxy mode.');

    // Dispatch setChannel action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(proxyActions.setChannel(channel));

    // Basic validation
    if (!channel || (0, _isEmpty2.default)(channel)) {
      log.info('Could not set channel; Invalid input.');
      const error = new _errors.default({
        code: _errors.proxyCodes.INVALID_PARAM,
        message: 'Could not set channel; Invalid input.'
      });
      dispatch(proxyActions.setChannelFinish({
        error
      }));
      throw error;
    }
    // Check to see if there are any on-going calls.
    const calls = (0, _selectors.getActiveCalls)(context.getState());
    if (calls.length > 0) {
      log.info('Cannot set channel while there are on-going calls.');
      const error = new _errors.default({
        code: _errors.proxyCodes.IN_ACTIVE_CALL,
        message: 'Cannot set channel while there are on-going calls.'
      });
      dispatch(proxyActions.setChannelFinish({
        error
      }));
      // Throw the error, so it makes it back to the API.
      throw error;
    }
    // set channel on the Proxy stack (i.e. not on the webRTC stack)
    const result = await ProxyStack.setChannel(channel);
    const response = {};
    // If the channel wasn't set, define an error to be included
    //    in the finish action.
    if (!result) {
      log.info('Failed to set channel for proxy mode.');
      const error = new _errors.default({
        code: _errors.proxyCodes.SET_PROXY_CHANNEL_FAIL,
        message: 'Failed to set proxy channel.'
      });
      response.error = error;
      dispatch(proxyActions.setChannelFinish(response));
      // Throw the error, so it makes it back to the API.
      throw error;
    }
    log.info('Finished setting channel for proxy mode.');
    // Channel was successfully set.
    // Listen for messages received from the channel.
    handleMessages(ProxyStack);
    dispatch(proxyActions.setChannelFinish(response));

    // Should we even care to return an empty object ?
    // API will not look at it, because if there are no errors thrown, it will consider a success.
    return response;
  }

  /**
   * Operation to initialize the remote SDK in proxy mode
   * @param {Object} config The configuration used by remote SDK during its initialization.
   * @return {Object} If successful, it returns an object indicating the browser where Remote SDK initialization took place.
   * @throws {Error} An error indicating the cause of failed initialization.
   */
  async function initializeRemote(config) {
    const {
      dispatch
    } = context;
    log.info('Initializing the Remote SDK for proxy mode.');

    // Dispatch initializeRemote action for backwards-compatible of action logs.
    //     This does not affect state or emit an event.
    dispatch(proxyActions.initializeRemote(config));

    // Get the current local log levels for the loggers that the remote end also uses.
    //    Send this as part of the init command, so the two sides are in-sync.
    const webrtcLevel = (0, _selectors2.getLevel)(context.getState(), 'WEBRTC');
    const proxyLevel = (0, _selectors2.getLevel)(context.getState(), 'PROXY');
    const channelLevel = (0, _selectors2.getLevel)(context.getState(), 'CHANNEL');
    const logLevels = {
      WEBRTC: webrtcLevel,
      PROXY: proxyLevel,
      CHANNEL: channelLevel
    };
    const result = await ProxyStack.initialize(config, logLevels);
    if (result.error) {
      log.info('Failed to initialize the Remote SDK.');
      dispatch(proxyActions.initializeRemoteFinish({
        error: result.error.message
      }));
      throw result.error;
    }
    log.info('Finished initializing the Remote SDK.');
    dispatch(proxyActions.initializeRemoteFinish({
      browser: result.browser
    }));
    return {
      browser: result.browser
    };
  }
  return {
    setProxyMode,
    initializeRemote,
    setChannel
  };
}

/***/ }),

/***/ 90198:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
var _isNull2 = _interopRequireDefault(__webpack_require__(78608));
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _model = _interopRequireDefault(__webpack_require__(82031));
var _logs = __webpack_require__(43862);
var _uuid = __webpack_require__(60130);
// Proxy plugin.

// Other plugins.

// Libraries.

/**
 * Creates an ES6 Proxy to wrap a webRTC manager.
 * @method createManagerProxy
 * @param  {Object} base The base object being wrapped.
 * @param  {boolean} base.proxyMode Whether operations should be proxied or not.
 * @param  {string} base.type The type of manager this is.
 * @param  {Object} actualManager A webRTC manager.
 * @return {Proxy}
 */
function _default(base, actualManager) {
  // Hardcode `id` as manager, since this function is only for manager proxies.
  base.id = 'manager';
  const log = _logs.logManager.getLogger('PROXY', base.type);
  log.debug(`Creating manager proxy for ${base.type}.`, base);
  return new Proxy(base, {
    /**
     * Proxy "getter" calls on the Proxy.
     * This function is called anytime a property on `base` is accessed,
     *    eg. `base.someProp`
     * @param {Object} objTarget base
     * @param {string} prop Property being accessed.
     * @param {Object} receiver The Proxy object.
     */
    get: function (objTarget, prop, receiver) {
      // If the Proxy Stack is not in proxy mode, return the property from the
      //    actual webRTC manager object.
      if (!objTarget.proxyMode || !objTarget.channel) {
        return actualManager[prop];
      }
      // Otherwise, the webRTC operation needs to be proxied over the channel.

      /*
       * Tell redux-saga that this is not a promise.
       * Otherwise it will handle it differently under-the-hood and break things.
       * Ref: github.com/redux-saga/redux-saga/blob/master/packages/is/src/index.js#L10
       */
      if (!objTarget[prop] && prop === 'then') {
        return undefined;
      }
      if (objTarget[prop]) {
        // If something that actually exists is being accessed,
        //    then return that thing.
        return objTarget[prop];
      } else {
        // Otherwise, it's probably accessing a prop that it
        //    expects to be a function. So return a function proxy.
        return new Proxy(() => {}, {
          /**
           * Proxy function calls.
           * This function is called when the dummy function is called,
           * @example
           *    const someProp = base.someProp  // Triggers the above `get`.
           *    someProp()                      // Triggers this `apply`.
           * @param  {Function} funcTarget The dummy function.
           * @param  {boolean} thisArg The `base` object wrapped by the first proxy layer.
           * @param  {Array}  args List of function parameters.
           */
          apply: function (funcTarget, thisArg, args) {
            // Assemble the webRTC command to be sent over the channel.
            const operation = {
              type: thisArg.type,
              id: thisArg.id,
              operation: prop,
              params: args
            };
            if (thisArg.proxyMode && thisArg.channel && thisArg.channel.send) {
              /*
               * All manager APIs will now return a Promise, even if they didn't
               *    before. This is needed to wait for the remote response.
               * Since sagas `yield` on these API calls, they will also wait
               *    until the promise resolves.
               */
              return new Promise((resolve, reject) => {
                // Record the time when the message is sent.
                const sentTime = Date.now();
                function callback(data, error) {
                  if (data) {
                    // Strip operation timing data out of the reply and only forward the result from the remote side.
                    const {
                      opTiming
                    } = data;
                    data = data.result;
                    if (opTiming) {
                      const receivedTime = Date.now();
                      log.debug(`Received manager ${operation.operation} response (${messageId}).`, data);

                      // If there are operation timings in the data, report them here.
                      if (opTiming) {
                        log.debug(`Remote operation ${operation.operation} timing sent: ${sentTime}, receivedRemote: ${opTiming.start}, remoteReplied: ${opTiming.end}, receivedLocal: ${receivedTime}`);
                      }
                    }
                  }

                  /**
                   * Parse the data received from the remote side.
                   */
                  function parseData(data) {
                    if (data && data.type === 'multiple') {
                      // If the response has multiple WebRTC models, each need to
                      //    be wrapped with a proxy for the Callstack.
                      const proxies = {};
                      Object.keys(data).forEach(key => {
                        if (key === 'type') {
                          // Skip.
                        } else if (Array.isArray(key)) {
                          proxies[key] = data[key].map(parseData);
                        } else {
                          proxies[key] = parseData(data[key]);
                        }
                      });
                      return proxies;
                    } else if (data && data.type) {
                      // If the response is a Webrtc model, we need to wrap it
                      //    with a proxy for the Callstack.
                      return (0, _model.default)(data, thisArg.channel);
                    } else if ((0, _isNull2.default)(data)) {
                      // The JSON codec encoder/decoder converts undefined to
                      //    null (because of JSON stringify/parse), so undo
                      //    that if the data is explicitly null value.
                      return undefined;
                    } else if (data && data.error && data.error.name) {
                      // If the response is a named error, then something was
                      //    reject or thrown on the remote side. Reconstruct it
                      //    then re-reject it to be handled by the Callstack.
                      const err = new Error();
                      // Set whatever keys,values where saved in data.error
                      for (const [key, value] of Object.entries(data.error)) {
                        err[key] = value;
                      }
                      reject(err);
                    } else {
                      return data;
                    }
                  }
                  if (error) {
                    reject(error);
                  } else if ((0, _isArray2.default)(data)) {
                    const proxies = data.map(parseData);
                    resolve(proxies);
                  } else {
                    resolve(parseData(data));
                  }
                }
                const messageId = (0, _uuid.v4)().substring(0, 8);
                log.debug(`Sending manager ${operation.operation} operation (${messageId}).`, operation);
                thisArg.channel.send(messageId, operation, callback);
              });
            }
          }
        });
      }
    }
  });
}

/***/ }),

/***/ 82031:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = modelProxy;
var _logs = __webpack_require__(43862);
var _uuid = __webpack_require__(60130);
// Other plugins.

// Libraries.

/**
 * Creates an ES6 Proxy to wrap a webRTC object.
 * @method modelProxy
 * @param  {Object}  base The base object being wrapped.
 * @param  {Channel} channel The channel to use for proxying commands.
 * @return {Proxy}   A proxied webRTC object.
 */
function modelProxy(base, channel) {
  const log = _logs.logManager.getLogger('PROXY', `${base.type}/${base.id}`);
  log.debug(`Creating model proxy for ${base.type}/${base.id}.`);
  return new Proxy(base, {
    get: function (objTarget, prop, receiver) {
      /*
       * Tell redux-saga that this is not a promise.
       * Otherwise it will handle it differently under-the-hood and break things.
       * Ref: github.com/redux-saga/redux-saga/blob/master/packages/is/src/index.js#L10
       */
      if (!objTarget[prop] && prop === 'then') {
        return undefined;
      }

      /*
       * Tell the Proxy channel (and anything else) that the original object is
       *    already a JSON object.
       * When sending this Proxy over the channel, it will try to JSON.stringify()
       *    it, which actually first tries to call toJSON on it.
       * Mimic the real toJSON with a function that returns the original object.
       */
      if (prop === 'toJSON') {
        return () => objTarget;
      }

      /**
       * The base object used to create a model's proxy may have references to
       *    other webRTC objects. We need to proxy those references as well.
       * Session: localTracks, remoteTracks, allLocalTracks
       * Media: tracks
       */
      if (['localTracks', 'allLocalTracks', 'remoteTracks', 'tracks'].includes(prop)) {
        return objTarget[prop].map(track => modelProxy(track, channel));
      }
      if (objTarget[prop]) {
        // If something that actually exists is being accessed,
        //    then return that thing.
        return objTarget[prop];
      } else {
        // Otherwise, it's probably accessing a prop that it
        //    expects to be a function. So return a function proxy.
        return new Proxy(() => {}, {
          /**
           * Proxy function calls.
           * This function is called when the dummy function is called,
           * @example
           *    const someProp = base.someProp  // Triggers the above `get`.
           *    someProp()                      // Triggers this `apply`.
           * @param  {Function} funcTarget The dummy function.
           * @param  {boolean} thisArg The `base` object wrapped by the first proxy layer.
           * @param  {Array}  args List of function parameters.
           */
          apply: function (funcTarget, thisArg, args) {
            // Assemble the webRTC command to be sent over the channel.
            const operation = {
              type: thisArg.type,
              id: thisArg.id,
              operation: prop,
              params: args
            };

            /*
             * All APIs will now return a Promise, even if they didn't
             *    before. This is needed to wait for the remote response.
             * Since sagas `yield` on these API calls, they will also wait
             *    until the promise resolves.
             */
            return new Promise((resolve, reject) => {
              // Record the time when the message is sent.
              const sentTime = Date.now();
              function callback(data, error) {
                if (data) {
                  // Strip operation timing data out of the reply and only forward the result from the remote side.
                  const {
                    opTiming
                  } = data;
                  data = data.result;
                  if (opTiming) {
                    const receivedTime = Date.now();
                    log.debug(`Received model ${operation.operation} response (${messageId}).`, data);

                    // If there are operation timings in the data, report them here.
                    if (opTiming) {
                      log.debug(`Remote operation ${operation.operation} timing sent: ${sentTime}, receivedRemote: ${opTiming.start}, remoteReplied: ${opTiming.end}, receivedLocal: ${receivedTime}`);
                    }
                  }
                }
                if (operation.operation === 'getStats') {
                  // If-block required for https://jira.rbbn.com/browse/KAA-2056
                  // The RTCStatsReport does not serialize over the wire natively
                  // So we need to reconstruct it here
                  data = new Map(data);
                }
                log.debug(`Received model response for ${messageId}.`, data);

                /**
                 * Parse the data received from the remote side.
                 */
                function parseData(data) {
                  if (data && data.type && operation.operation === 'getTracks') {
                    // If the operation we sent across was `getTracks`, then the
                    //    response data should be Webrtc model(s). We need to
                    //    wrap it with a proxy for the Callstack.
                    return modelProxy(data, channel);
                  } else if (data === null) {
                    // The JSON codec encoder/decoder converts undefined to
                    //    null (because of JSON stringify/parse), so undo
                    //    that if the data is explicitly null value.
                    return undefined;
                  } else {
                    return data;
                  }
                }
                if (error) {
                  reject(error);
                } else if (Array.isArray(data)) {
                  const proxies = data.map(parseData);
                  resolve(proxies);
                } else {
                  resolve(parseData(data));
                }
                resolve(data);
              }
              const messageId = (0, _uuid.v4)().substring(0, 8);
              log.debug(`Sending model ${operation.operation} operation (${messageId}).`, operation);
              channel.send(messageId, operation, callback);
            });
          }
        });
      }
    }
  });
}

/***/ }),

/***/ 29455:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initializeProxy;
var _manager = _interopRequireDefault(__webpack_require__(90198));
var _channel = __webpack_require__(81074);
var _logs = __webpack_require__(43862);
var _version = __webpack_require__(10825);
var _errors = _interopRequireWildcard(__webpack_require__(83437));
var _uuid = __webpack_require__(60130);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Proxy plugin.

// Other plugins.

// Libraries.

const log = _logs.logManager.getLogger('PROXY');

/**
 * Creates a Proxied webRTC Stack.
 * This Proxy Stack is the replacement for the actual webRTC stack.
 * @method initializeProxy
 * @param {Object} webRTC The local webRTC stack.
 * @return {Object} The Proxy Stack.
 */
function initializeProxy(webRTC) {
  // The base of the proxy stack.
  const base = {
    // Whether operations should be proxied.
    proxyMode: false,
    // The channel to use for proxying operations.
    channel: undefined,
    // Whether the Client side is ready.
    clientReady: false,
    // The proxied webRTC managers.
    managers: {}
  };

  /*
   * Recreate each of the actual webRTC managers as a proxied manager.
   * Creating proxies at the manager level (instead of only at the stack level)
   *    allows the Proxy Stack to be used in scenarios where the managers
   *    themselves are stored (rather than only using the stack from the top
   *    level).
   * Specifically, this allows us to use the Proxy Stack in the webRTC examples
   *    for testing outside of the SDK/redux context.
   */
  for (const manager in webRTC.managers) {
    base.managers[manager] = (0, _manager.default)({
      type: manager,
      proxyMode: base.proxyMode,
      channel: base.channel
    }, webRTC.managers[manager]);
  }

  /**
   * Sets proxy mode for the Proxy Stack.
   * @method setProxyMode
   * @param {boolean} value
   * @return {boolean} Whether the setting was successfully changed or not.
   */
  const setProxyMode = value => {
    if (typeof value !== 'boolean') {
      log.debug('Provided value is not a boolean; cannot set proxy mode.');
      return false;
    }
    log.debug('Setting proxyMode for managers to ' + value);
    base.proxyMode = value;
    for (const manProxy in base.managers) {
      base.managers[manProxy].proxyMode = value;
    }

    // While in Proxy mode, stop the local DeviceManager from
    //    listening for device change events from the browser.
    // Start listening again when taken out of Proxy mode.
    webRTC.managers.devices.setListening(!value);
    return true;
  };

  /**
   * Retrieves the current mode of the Proxy Stack.
   * @method getProxyMode
   * @return {boolean}
   */
  const getProxyMode = () => {
    return base.proxyMode;
  };

  /**
   * Sets the channel to be used for proxying operations.
   * @method setChannel
   * @param {Channel} channel
   */
  const setChannel = channel => {
    // TODO: How to unset a channel?
    // TODO: Make (more) sure its a valid channel.
    if (!channel || !channel.send) {
      log.debug('Provided channel does not support the expected interface.');
      return false;
    }
    const wrappedChannel = (0, _channel.replyChannel)((0, _channel.jsonChannel)(channel));
    base.channel = wrappedChannel;
    base.clientReady = false;
    for (const manProxy in base.managers) {
      base.managers[manProxy].channel = wrappedChannel;
    }
    return true;
  };

  /**
   * Retrieves the current channel to be used.
   * @method getChannel
   * @return {Channel}
   */
  const getChannel = () => {
    return base.channel;
  };

  /**
   * Sets the listener function for receiving messages from the channel.
   * @method setReceiver
   * @param  {Function} listener
   */
  const onMessage = listener => {
    base.channel.receive = listener;
  };

  /**
   * Attempts to initialize the Client side to be ready for use.
   * @method initialize
   * @param {Object} config WebRTC stack configuration.
   * @param {Object} logLevels  The initial log levels for the Remote end's loggers.
   * @param {string} logLevels.WEBRTC Log level for the Remote WebRTC stack.
   * @param {string} logLevels.PROXY  Log level for the Remote Proxy operations.
   */
  const initialize = (config, logLevels) => {
    // Version of the local SDK.
    const version = (0, _version.getVersion)();
    return new Promise(resolve => {
      /*
       * Validation checks:
       *    - we have not already initialized the Remote SDK,
       *    - we have a Proxy channel for sending messages.
       */
      if (base.clientReady) {
        log.debug('Cannot initialize remote: Already initialized.');
        resolve({
          error: new _errors.default({
            message: 'Remote SDK has already been initialized.',
            code: _errors.proxyCodes.INVALID_STATE
          })
        });
      } else if (!base.channel) {
        log.debug('Cannot initialize remote: Proxy channel not found.');
        resolve({
          error: new _errors.default({
            message: 'Proxy channel not found.',
            code: _errors.proxyCodes.INVALID_STATE
          })
        });
      } else {
        // Send the "initialize" message to the Remote SDK.

        const callback = (data, error) => {
          log.debug('Received initialize response.', data);
          if (error) {
            // Error Scenario: The channel itself encountered an error.
            const isTimeout = error.message.includes('timed-out');
            resolve({
              error: new _errors.default({
                message: error.message,
                code: isTimeout ? _errors.proxyCodes.TIMEOUT : _errors.proxyCodes.UNKNOWN
              })
            });
          } else if (data.error) {
            // Convert the stringified error into a BasicError instance.
            const error = new _errors.default(data.error);
            /*
             * Error scenarios:
             *    - remote SDK was already initialized,
             *    - SDK versions do not match,
             *    - generic error; should not happen.
             */
            if (error.code === _errors.proxyCodes.INVALID_STATE && data.initialized) {
              log.warn('Remote SDK responded as already initialized.');
              resolve({
                error
              });
            } else if (error.code === _errors.proxyCodes.VERSION_MISMATCH) {
              log.error('Remote SDK responded with a version mismatch error.');
              resolve({
                error
              });
            } else {
              log.info('Remote SDK responded with an error.');
              resolve({
                error
              });
            }
          } else if (data.remoteVersion !== version) {
            // Remote SDK version < 6.7.1 does not return an error for version mismatch
            log.error('Remote SDK responded with a version mismatch error.');
            resolve({
              error: new _errors.default({
                code: _errors.proxyCodes.VERSION_MISMATCH,
                message: 'Remote SDK version does not match; initialization failed.'
              })
            });
          } else if (data.initialized) {
            // The Client is now ready.
            base.clientReady = true;
            resolve({
              browser: data.browser
            });
          } else {
            // Error scenario: Message had no error, but also did not initialize
            //    the Remote SDK?
            log.debug('Remote SDK responded with an unhandled message.');
            resolve({
              error: new _errors.default({
                message: 'Unknown error; could not process response.',
                code: _errors.proxyCodes.INVALID_STATE
              })
            });
          }
        };
        const messageId = (0, _uuid.v4)();
        base.channel.send(messageId, {
          initialize: true,
          version,
          config,
          logLevels
        }, callback);
      }
    });
  };

  /**
   * Set the SDP handlers the webRTC stack should use with the pipeline.
   * @method setHandlers
   * @param  {Array} handlers List of SDP handlers.
   */
  function setHandlers(handlers) {
    webRTC.sdp.pipeline.setHandlers(handlers);
  }

  /**
   * Retrieve details about the browser.
   * Intended to only be used for retrieving the local browser details. The
   *    Proxy details are retrieved when initializing the remote SDK.
   * @method getBrowserDetails
   * @return {Object}
   */
  function getBrowserDetails() {
    // Query the local webRTC stack if we're not in proxy mode.
    if (!base.proxyMode) {
      return webRTC.getBrowserDetails();
    }
  }
  return {
    // Proxy stack specific.
    setProxyMode,
    getProxyMode,
    setChannel,
    getChannel,
    onMessage,
    // webRTC imitations.
    initialize,
    sdp: {
      pipeline: {
        setHandlers
      }
    },
    managers: base.managers,
    getBrowserDetails
  };
}

/***/ }),

/***/ 8599:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.timeLevel = exports.logMethods = exports.logLevels = exports.levelValues = void 0;
/**
 * Log levels supported by Loggers.
 * When a level is set, all logs of that level and higher will be logged.
 * @type {Object}
 */
const logLevels = exports.logLevels = {
  TRACE: 'TRACE',
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR',
  SILENT: 'SILENT'
};

/**
 * Numeric values for each log level.
 * When a level is set, all logs of that level and higher will be logged.
 * @type {Object}
 */
const levelValues = exports.levelValues = {
  TRACE: 0,
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
  SILENT: 5
};

/**
 * Supported Log methods and their set log level; `<logMethod>: <logLevel>`
 * Used to construct the logging methods on a Logger.
 * @type {Object}
 */
const logMethods = exports.logMethods = {
  // Standard methods.
  trace: logLevels.TRACE,
  debug: logLevels.DEBUG,
  info: logLevels.INFO,
  warn: logLevels.WARN,
  error: logLevels.ERROR,
  // Extra console methods.
  log: logLevels.DEBUG,
  group: logLevels.DEBUG,
  groupEnd: logLevels.DEBUG,
  groupCollapsed: logLevels.DEBUG
};

/**
 * The log level for all timer methods.
 * @type {string}
 */
const timeLevel = exports.timeLevel = logLevels.DEBUG;

/***/ }),

/***/ 17070:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.logLevels = exports.logFormatter = exports["default"] = void 0;
var _logManager = _interopRequireDefault(__webpack_require__(41018));
var _logFormatter = _interopRequireDefault(__webpack_require__(4581));
var _constants = __webpack_require__(8599);
/**
 * Package main.
 */
// Main export is the manager's factory function.
var _default = exports["default"] = _logManager.default; // Named export for the log level constants the package uses / expects.
const logLevels = exports.logLevels = _constants.logLevels;

// Default log formatter used by the defaultLogHandler
const logFormatter = exports.logFormatter = _logFormatter.default;

/***/ }),

/***/ 4581:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = defaultLogFormatter;
/**
 * Default function for the SDK to use for log formatting.
 *    Uses entry information to form a prefix.
 * @method defaultLogFormatter
 * @param  {LogEntry} entry
 */
function defaultLogFormatter(entry) {
  // Compile the meta info of the log for a prefix.
  const {
    timestamp,
    level,
    target
  } = entry;

  // Find a short name to reference which Logger this log is from.
  //    This is mostly to cut down the ID if it's too long for a human to read.
  const shortId = target.id && target.id.length > 8 ? target.id.substring(0, 6) : target.id;
  const shortName = shortId ? `${target.type}/${shortId}` : target.type;
  const logInfo = `${timestamp} - ${shortName} - ${level}`;

  // Assume that the first message parameter is a string.
  const log = entry.messages[0];
  return `${logInfo} - ${log}`;
}

/***/ }),

/***/ 40877:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = defaultLogHandler;
var _logFormatter = _interopRequireDefault(__webpack_require__(4581));
/**
 * Default function for the SDK to use for logging.
 *    Uses entry information to form a prefix, then logs to console.
 * @method defaultLogHandler
 * @param  {LogEntry} entry
 */
function defaultLogHandler(entry) {
  let {
    method
  } = entry;

  // For the time-related methods, don't actually use the console methods.
  //    The Logger already did the timing, so simply log out the info.
  if (method.includes('time')) {
    method = 'debug';
  }
  const formattedString = (0, _logFormatter.default)(entry);
  const tail = entry.messages.slice(1);
  // eslint-disable-next-line no-console
  console[method](formattedString, ...tail);
}

/***/ }),

/***/ 41018:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createManager;
var _logger = _interopRequireDefault(__webpack_require__(12476));
var _logHandler = _interopRequireDefault(__webpack_require__(40877));
var _constants = __webpack_require__(8599);
var _validation = __webpack_require__(70920);
const defaultType = Symbol('Default');

/**
 * Creates a Log Manager.
 * @method createManager
 * @param  {Object}     [options={}]
 * @param  {Function}   [options.handler]      The default log handler used for
 *    Loggers that don't have a handler set.
 * @param  {string}     [options.level='INFO'] The default log level used for
 *    Loggers that don't have a level set.
 * @return {LogManager}
 */
function createManager() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const loggers = {};

  /**
   * Mapping between a Logger `type` and their default settings. Created Loggers
   *    will use their `type` settings if they exist. Otherwise the "global"
   *    options provided during Manager creation.
   * @type {Object}
   */
  const settings = {
    [defaultType]: {
      handler: options.handler ? (0, _validation.checkHandler)(options.handler) : _logHandler.default,
      level: options.level ? (0, _validation.checkLevel)(options.level) : _constants.logLevels.INFO
    }
  };

  /**
   * Gets a specific logger. If the logger doesn't exist, a new one will be
   *    created.
   * @method getLogger
   * @param  {string} type Human-readable type/name for the logger.
   * @param  {string} [id] A unique identifier for the logger.
   * @return {Logger}
   */
  function getLogger(type) {
    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    id = String(id);

    // Combine the name and ID to create the "full" logger name.
    const loggerName = id ? `${type}-${id}` : type;
    let logger = loggers[loggerName];
    // If the logger does not exist, create a new one.
    if (!logger) {
      // This logger logs items from a specific "target".
      const target = {
        type,
        id,
        name: loggerName
      };
      const options = {
        level: getLevel(type),
        handler: getHandler(type)
      };
      logger = (0, _logger.default)(target, options);

      // Save the new logger to be returned by future getter calls.
      loggers[loggerName] = logger;
    }
    return logger;
  }

  /**
   * Gets all created loggers, or Loggers of a specific type.
   * @method getLoggers
   * @param {string} [type] The type of Loggers to retrieve.
   * @return {Array<Logger>} List of Loggers.
   */
  function getLoggers(type) {
    if (type) {
      return Object.values(loggers).filter(logger => logger.type === type);
    } else {
      return Object.values(loggers);
    }
  }

  /**
   * Sets the default `level` to be used when creating Loggers.
   *
   * Can set the level "globally" or per `type`, depending if `type` is provided
   *    or not. When set for a specific type, only Loggers of that type will use
   *    the set level. When set "globally", all Loggers without a set type will
   *    use the level as a default.
   *
   * Setting the level only affects Loggers created after that point.
   * @method setLevel
   * @param  {string} type  The type of Logger to set the option for.
   * @param  {string} level The logLevel to be set.
   * @throws Throws an error if level is not a valid log level.
   * @example
   * const manager = createManager({ level: logLevels.WARN })
   *
   * // Setting the level for a type sets it for created Loggers of that type.
   * manager.setLevel('Call', logLevels.DEBUG)
   * const logger1 = manager.getLogger('Call')
   * // logger1.getLevel() === logLevels.DEBUG
   *
   * // Loggers created of types without a set level uses the Manager's level.
   * const logger2 = manager.getLogger('Auth')
   * // logger2.getLevel() === logLevels.WARN
   *
   * // Setting the level without a type changes the Manager's level.
   * manager.setLevel(logLevels.INFO)
   * const logger3 = manager.getLogger('Messaging')
   * // logger3.getLevel() === logLevels.INFO
   *
   * // Setting the level for a type does not affect previously created Loggers.
   * manager.setLevel('Auth', logLevels.INFO)
   * // logger2.getLevel() !== logLevels.INFO
   * // logger2.getLevel() === logLevels.WARN
   */
  function setLevel(type, level) {
    // Signature can be: `setLevel(type, level)` or `setLevel(level)`.
    // Normalize the parameters to always be consistent.
    if (level === undefined) {
      level = type;
      type = defaultType;
    }

    // Ensure `settings[type]` is an object.
    if (!settings[type]) {
      settings[type] = {};
    }

    // Set the level.
    settings[type].level = (0, _validation.checkLevel)(level);
  }

  /**
   * Gets the default `level` that is used when creating Loggers.
   *
   * Can get the level used "globally" or per `type`, depending if `type` is
   *    provided or not.
   *
   * See the `setLevel` API for setting these values.
   * See the Logger APIs for getting this value for an already created Logger.
   * @method getLevel
   * @param  {string} [type] A type of Logger.
   * @return {LogLevel}
   * @example
   * const manager = createManager({ level: logLevels.WARN })
   *
   * // If a type's level has not been set, gets the "global" level.
   * // manager.getLevel('Call') === logLevels.WARN
   *
   * // If a type's level has been set, gets its level.
   * manager.setLevel('Auth', logLevels.DEBUG)
   * // manager.getLevel('Auth') === logLevels.DEBUG
   *
   * // Can get the "global" level.
   * manager.setLevel(logLevels.INFO)
   * // manager.getLevel() === logLevels.INFO
   */
  function getLevel(type) {
    // Signature can be: `getLevel(type)` or `getLevel()`.
    // Normalize the parameters to always be consistent.
    type = type || defaultType;
    return settings[type] && settings[type].level || settings[defaultType].level;
  }

  /**
   * Sets the default `handler` to be used when creating Loggers.
   *
   * Can set the handler "globally" or per `type`, depending if `type` is
   *    provided or not. When set for a specific type, only Loggers of that type
   *    will use the set handler. When set "globally", all Loggers without a set
   *    type will use the handler as a default.
   *
   * Setting the handler only affects Loggers created after that point.
   * @method setHandler
   * @param  {string}     type    The type of Logger to set the option for.
   * @param  {LogHandler} handler The log handler to be set.
   * @throws Throws an error if handler is not a function.
   * @example
   * const manager = createManager({ handler: managerHandler })
   *
   * // Setting the handler for a type sets it for created Loggers of that type.
   * manager.setHandler('Call', callHandler)
   * const logger1 = manager.getLogger('Call')
   * // logger1.getHandler() === callHandler
   *
   * // Loggers created of types without a set handler uses the Manager's handler.
   * const logger2 = manager.getLogger('Auth')
   * // logger2.getHandler() === managerHandler
   *
   * // Setting the handler without a type changes the Manager's handler.
   * manager.setHandler(newHandler)
   * const logger3 = manager.getLogger('Messaging')
   * // logger3.getHandler() === newHandler
   *
   * // Setting the handler for a type does not affect previously created Loggers.
   * manager.setHandler('Auth', authHandler)
   * // logger2.getHandler() !== authHandler
   * // logger2.getHandler() === managerHandler
   */
  function setHandler(type, handler) {
    // Signature can be: `setHandler(type, handler)` or `setHandler(handler)`.
    // Normalize the parameters to always be consistent.
    if (typeof type === 'function' && handler === undefined) {
      handler = type;
      type = defaultType;
    }

    // Ensure `settings[type]` is an object.
    if (!settings[type]) {
      settings[type] = {};
    }

    // Set the handler.
    settings[type].handler = (0, _validation.checkHandler)(handler);
  }

  /**
   * Gets the default `handler` that is used when creating Loggers.
   *
   * Can get the handler used "globally" or per `type`, depending if `type` is
   *    provided or not.
   *
   * See the `setHandler` API for setting these values.
   * See the Logger APIs for getting this value for an already created Logger.
   * @method getHandler
   * @param  {string} [type] A type of Logger.
   * @return {LogHandler}
   * @example
   * const manager = createManager({ handler: managerHandler })
   *
   * // If a type's handler has not been set, gets the "global" handler.
   * // manager.getHandler('Call') === managerHandler
   *
   * // If a type's handler has been set, gets its handler.
   * manager.setHandler('Auth', authHandler)
   * // manager.getHandler('Auth') === authHandler
   *
   * // Can get the "global" handler.
   * manager.setHandler(newHandler)
   * // manager.getHandler() === newHandler
   */
  function getHandler(type) {
    // Signature can be: `getHandler(type)` or `getHandler()`.
    // Normalize the parameters to always be consistent.
    type = type || defaultType;
    return settings[type] && settings[type].handler || settings[defaultType].handler;
  }
  return {
    getLogger,
    getLoggers,
    setLevel,
    getLevel,
    setHandler,
    getHandler
  };
}

/***/ }),

/***/ 12476:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createLogger;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _constants = __webpack_require__(8599);
var _validation = __webpack_require__(70920);
var _timer = _interopRequireDefault(__webpack_require__(66270));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Creates a Logger.
 * @method createLogger
 * @param  {Object}   target          The subject of the logs from this logger.
 * @param  {Object}   options
 * @param  {Function} options.handler The function to receive/handle log entries.
 * @param  {string}   options.level   The log level to be set.
 * @return {Logger}
 */
function createLogger(target) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // Validate provided options. Do not let invalid options be set.
  const level = (0, _validation.checkLevel)(options.level);
  const handler = (0, _validation.checkHandler)(options.handler);

  /**
   * Logger data.
   * @type {Object}
   * @property {Object}   target  Metadata about the "target" of the Logger.
   * @property {LogLevel} level   The currently set log level.
   * @property {Function} handler The currently set Log Handler.
   */
  const logger = {
    target,
    level,
    handler
  };

  /**
   * Currying function to dynamically create the Logger's logging methods.
   * @method logFunc
   * @param  {string} method   Name of the logger method to create.
   * @param  {string} logLevel The log level for the method.
   * @param  {Object} [injectables] Other values to include in the LogEntry.
   * @return {Function} A log method.
   */
  function logFunc(method, logLevel, injectables) {
    /*
     * Return the function that will be used as `log.<method>`.
     */
    return function () {
      // Compare the logged level and the configured level.
      const shouldLog = _constants.levelValues[logLevel] >= _constants.levelValues[logger.level];
      // If this entry shouldn't be logged, don't do anything.
      if (!shouldLog) {
        return;
      }

      // Create the Log Entry to be handed off to the handler.
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      const entry = _objectSpread(_objectSpread({}, injectables), {}, {
        // Meta-info about the log.
        method,
        timestamp: Date.now(),
        level: logLevel,
        target: logger.target,
        // The actual arguments logged.
        messages: [...args]
      });
      logger.handler(entry);
    };
  }

  /**
   * Sets the Logger's current log level.
   * @method setLevel
   * @param  {string} level The logLevel to be set.
   * @throws Throws an error if level is not a valid log level.
   * @example
   * logger.setLevel(logLevels.INFO)
   * logger.info('This will be logged.')
   * logger.debug('This will not be logged.')
   */
  function setLevel(level) {
    logger.level = (0, _validation.checkLevel)(level);
  }

  /**
   * Gets the Logger's current log level.
   * @method getLevel
   * @return {string} The log level.
   * @example
   * logger.setLevel(logLevels.DEBUG)
   * const level = logger.getLevel()
   * // level === logLevels.DEBUG
   */
  function getLevel() {
    return logger.level;
  }

  /**
   * Sets the Logger's current log handler.
   * @method setHandler
   * @param  {Function} handler The log handler to be set.
   * @throws Throws an error if handler is not a function.
   * @example
   * const logger = manager.getLogger('Test', '123')
   * logger.setHandler((logEntry) => {
   *    console.log(logEntry.target.name, ...logEntry.messages)
   * })
   * logger.info('I am a logged message.')
   * // logs: "Test-123 I am a logged message."
   */
  function setHandler(handler) {
    logger.handler = (0, _validation.checkHandler)(handler);
  }

  /**
   * Gets the Logger's current log handler.
   * @method getHandler
   * @return {Function} The log handler.
   * @example
   * logger.setHandler(customHandler)
   * const handler = logger.getHandler()
   * // handler === customHandler.DEBUG
   */
  function getHandler() {
    return logger.handler;
  }
  const api = {
    getHandler,
    setHandler,
    getLevel,
    setLevel,
    get type() {
      return logger.target.type;
    },
    get id() {
      return logger.target.id;
    },
    get name() {
      return logger.target.name;
    }
  };

  // For all supported log methods, create a function on the Logger for it.
  for (const method in _constants.logMethods) {
    api[method] = logFunc(method, _constants.logMethods[method]);
  }

  // Create log functions for the Timer to use.
  // Follows the same style as above logMethods, but curries it once more
  //    to align the timer parameters as needed.
  const timeLog = (message, data) => logFunc(data.event, _constants.timeLevel, {
    timer: data
  })(message);
  const timeWarn = (message, data) => logFunc('warn', _constants.logLevels.WARN, {
    timer: data
  })(message);
  const timer = (0, _timer.default)(timeLog, timeWarn);
  return _objectSpread(_objectSpread({}, api), timer);
}

/***/ }),

/***/ 66270:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createTimer;
var _validation = __webpack_require__(70920);
/**
 * Timer factory function.
 * The Timer imitates the Console's Time APIs.
 * Ref: https://developer.mozilla.org/en-US/docs/Web/API/console#Timers
 * @method createTimer
 * @param  {Function} log  Function for logging timer information.
 * @param  {Function} warn Function for warning about timer misuse.
 * @return {Timer}
 */
function createTimer(log, warn) {
  // Validate that params are a function.
  //    Uses functions as `log(message, data)`.
  (0, _validation.checkHandler)(log);
  (0, _validation.checkHandler)(warn);

  /**
   * Mapping of on-going timers; <name>: <start>.
   * @type {Object}
   */
  const timers = {};

  /**
   * Starts a timer. Logs a message to indicate it was started.
   * Logs a warning if the timer has already been started.
   * @method timeStart
   * @param  {string} name Name to identify the timer.
   */
  function time(name) {
    const now = Date.now();
    // Base info about this timer call.
    const data = {
      event: 'time',
      name
    };
    if (Object.hasOwn(timers, name)) {
      data.start = timers[name];
      warn(`Timer ${name} already started.`, data);
    } else {
      // Set the new timer.
      timers[name] = now;
      data.start = now;
      log(`Timer ${name} started.`, data);
    }
  }

  /**
   * Ends a timer. Logs a message with the elapsed time.
   * @method timeEnd
   * @param  {string} name Name to identify the timer.
   */
  function timeEnd(name) {
    const now = Date.now();
    // Base info about this timer call.
    const data = {
      event: 'timeEnd',
      name,
      start: timers[name]
    };
    if (Object.hasOwn(timers, name)) {
      const start = timers[name];
      // End the timer.
      delete timers[name];
      const elapsed = now - start;
      data.end = now;
      data.elapsed = elapsed;
      log(`Timer ${name} ended, taking ${elapsed}ms.`, data);
    } else {
      warn(`Timer ${name} has not been started.`, data);
    }
  }

  /**
   * Adds a split to the timer. Logs a message with the elapsed time so far.
   * Logs a warning if the timer has not been started.
   * @method timeSplit
   * @param  {string} name Name to identify the timer.
   */
  function timeLog(name) {
    const now = Date.now();
    // Base info about this timer call.
    const data = {
      event: 'timeLog',
      name,
      start: timers[name]
    };
    if (Object.hasOwn(timers, name)) {
      const elapsed = now - timers[name];
      data.split = now;
      data.elapsed = elapsed;
      log(`Timer ${name} split, at ${elapsed}ms so far.`, data);
    } else {
      warn(`Timer ${name} has not been started.`, data);
    }
  }
  return {
    time,
    timeEnd,
    timeLog
  };
}

/***/ }),

/***/ 70920:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.checkHandler = checkHandler;
exports.checkLevel = checkLevel;
var _constants = __webpack_require__(8599);
/**
 * Helper function to validate a "log level" string before its used in the library.
 * @method checkLevel
 * @param  {string} level A log level provided by a user.
 * @return {string}       The log level as expected by the library.
 * @throws Will throw an error if the `level` parameter is invalid.
 */
function checkLevel(level) {
  // Ensure: is defined and is a string.
  const upperLevel = level && level.toUpperCase && level.toUpperCase();

  // Ensure: is a supported log level.
  if (upperLevel && _constants.logLevels[upperLevel]) {
    return _constants.logLevels[upperLevel];
  } else {
    throw new Error('Provided level is not a valid log level.');
  }
}

/**
 * Helper function to validate a "log handler".
 * Basically just "is function" that throws an error if false.
 * @method checkHandler
 * @param  {Function} handler A log handler function, ideally.
 * @return {Function}         The same log handler function, ideally.
 * @throws Will throw an error if the `handler` provided is not a function.
 */
function checkHandler(handler) {
  if (handler && typeof handler === 'function') {
    return handler;
  } else {
    throw new Error('Provided log handler is not a function.');
  }
}

/***/ }),

/***/ 27181:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _reporter = _interopRequireDefault(__webpack_require__(68137));
/**
 * Package main.
 */
// Main export is the manager's factory function.
var _default = exports["default"] = _reporter.default;

/***/ }),

/***/ 23338:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = reportFactory;
var _isString2 = _interopRequireDefault(__webpack_require__(49775));
var _timelineEvent = _interopRequireDefault(__webpack_require__(29662));
// Utils

/**
 * Factory function to create reports.
 * @method reportFactory
 * @param {string} type The type of report to be created.
 * @param {id} The unique identifier for this new report.
 * @return {Report}
 */
function reportFactory(type, id) {
  const API_TAG = 'API invoked: ';
  // Events (for this report instance) will be appended to this timeline
  const timeline = [];
  // Data (associated with this report) will be indexed by the specific data type
  const reportData = {};
  // Computed metrics
  const metrics = [];
  // A map of metrics and the events and handlers used to compute them.
  const metricHandlers = {};

  /**
   * Add a new event to the Reports timeline.
   * @method addEvent
   * @param {string} The type of event being added.
   * @throws {Error} Throws an error if type fails to validate.
   * @return {TimelineEvent} A new TimelineEvent.
   */
  function addEvent(type) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}report.addEvent: Invalid type (${typeof type}), must be of type string.`);
    }
    const newEvent = (0, _timelineEvent.default)(type, onEventEnded);
    timeline.push(newEvent);
    return newEvent;
  }

  /**
   * Add data to the Report.
   * @method addData
   * @param {string} type The type of data being added to the Report.
   * @param {*} data The data being added to the Report.
   * @throws {Error} Throws an error if any of the two parameters fail to validate.
   * @return {undefined}
   */
  function addData(type, data) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}report.addData: Invalid type (${typeof type}), must be of type string.`);
    }
    if (data === undefined) {
      throw new Error(`${API_TAG}report.addData: No data provided.`);
    }
    reportData[type] = data;
  }

  /**
   * Find and return data added to a report.
   * @method getData
   * @param {string|undefined} key The key the for the data requested, if no key is provided return the entire data object.
   * @return {*} The data mapped to key.
   */
  function getData(key) {
    if (key) {
      return reportData[key];
    } else {
      return reportData;
    }
  }

  /**
   * Add computed metric to the Report.
   * @method addMetric
   * @param {string} type The type of metric being added to the Report.
   * @param {*} data The metric data being added to the Report.
   * @throws {Error} Throws an error if the type is not of type string.
   * @return {undefined}
   */
  function addMetric(type, data) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}report.addMetric: Invalid type (${typeof type}), must be of type string.`);
    }
    if (data === undefined) {
      throw new Error(`${API_TAG}report.addMetric: No data provided.`);
    }
    metrics.push({
      type,
      data
    });
  }

  /**
   * Update computed metric in the Report by adding the event ID which was responsible
   * for computing such metric.
   * There could be multiple events which account for the calculation (or updating)
   * of a given metric value so any time this function is called, it will add event ID to existing
   * list of event IDS.
   * @method addEventIdToMetric
   * @param {string} type The type of metric being updated in the Report.
   * @param {string} eventId The event ID, as a unique identifier.
   * @throws {Error} Throws an error if the type is not a string.
   * @throws {Error} Throws an error if the type is not found.
   * @throws {Error} Throws an error if the eventId is not a string.
   * @throws {Error} Throws an error if the eventId is not found.
   * @return {undefind}
   */
  function addEventIdToMetric(type, eventId) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}report.addEventIdToMetric: Invalid type (${typeof type}), must be of type string.`);
    }
    if (!eventId || !(0, _isString2.default)(eventId)) {
      throw new Error(`${API_TAG}report.addEventIdToMetric: Invalid eventId (${typeof eventId}), must be of type string.`);
    }
    const metric = metrics.find(metric => metric.type === type);
    if (!metric) {
      return;
    }
    if (!metric.eventIds) {
      metric.eventIds = [];
    }
    // Adding in the order the events happen.
    // (i.e. last eventId in array being the most recent one)
    metric.eventIds.push(eventId);
  }

  /**
   * Get the data for a provided metric type.
   * @method getMetric
   * @param {string} type The type of metric to return.
   * @throws {Error} Throws an error if the type is not a string.
   * @return {*} The data associated with the provided metric type.
   */
  function getMetric(type) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}report.getMetric: Invalid type (${typeof type}), must be of type string.`);
    }
    return metrics.filter(metric => metric.type === type).map(metric => metric.data);
  }

  /**
   * Register a handler to allow the user to act on specific events once they've ended.
   * @method registerMetricHandler
   * @param type {string} An identifier for the type of metric to be handled.
   * @param events {Array} An array of event types that trigger this handler.
   * @param handler {function} A function that handles the event for this metric type.
   * @throws {Error} Throws an error if any of the three parameters fail to validate.
   * @return {undefined}
   */
  function registerMetricHandler(type, events, handler) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}report.registerMetricHandler: Invalid type (${typeof type}), must be of type string.`);
    }
    if (!events) {
      throw new Error(`${API_TAG}report.registerMetricHandler: Invalid events (${typeof type}), must be a string or an array with at least one event type.`);
    }
    if (!handler || typeof handler !== 'function') {
      throw new Error(`${API_TAG}report.registerMetricHandler: Invalid handler (${typeof handler}, must be a function.)`);
    }
    if ((0, _isString2.default)(events)) {
      events = [events];
    }

    // Add/update the handler to our event handler map.
    metricHandlers[type] = {
      events,
      handler
    };
  }

  /**
   * Unregister a metric handler.
   * @method unregisterMetricHandler
   * @param type {string} An identifier for the type of metric we no longer need to report on.
   * @return {undefined}
   */
  function unregisterMetricHandler(type) {
    if (type) {
      delete metricHandlers[type];
    }
  }

  /**
   * A listener for when TimelineEvents have ended.
   * This listener will only invoke the metric handler, if the passed event had no error.
   * This way, all our calculated metric values apply only to successful scenarios.
   *
   * @method onEventEnded
   * @param {Object} event The event which has been ended.
   * @return undefined
   */
  function onEventEnded(event) {
    if (event.error) {
      // Don't allow metrics to be created for failed events.
      return;
    }
    // Check if we need to run a metric calculation handler against this event
    for (const metric in metricHandlers) {
      if (metricHandlers[metric].events.includes(event.type)) {
        // Call the provided metric handler.
        metricHandlers[metric].handler(report, event);
        // Add the event's ID to the metric.
        addEventIdToMetric(metric, event.id);
      }
    }
  }

  /**
   * Traverse the list of events and return the first one that matches the provided id.
   * @method getEvent
   * @param {string} id The id for the event being requested.
   * @return {TimelineEvent} The event with matching id.
   */
  function getEvent(id) {
    for (let i = 0; i < timeline.length; i++) {
      if (timeline[i].id === id) {
        return timeline[i];
      } else {
        const subEvent = timeline[i].getEvent(id);
        if (subEvent) {
          return subEvent;
        }
      }
    }
  }

  /**
   * Find the last event of a specific type.
   * @method findLastOngoingEvent
   * @param {Array<string>|string} [type] The type of event to search for.
   * @return {TimelineEvent} The last event matching the provided type.
   */
  function findLastOngoingEvent(type) {
    // KJS-1898: Using an alternative way for `findLast` as that prototype method is not supported in Chrome versions prior to M97.
    // TODO: Revert back to using `findLast` once our babel strategy is finalized.

    // Make a copy first, since `reverse()` will do a mutation on original array, which we don't want
    // for the rest of operatins within this report.
    const copiedTimeline = [...timeline];
    return copiedTimeline.reverse().find(event => {
      // If no type is provided return the latest ongoing event
      // If an array is provided, find the last ongoing event that is part of the array
      // If a string is provided, find that particular last ongoing event
      if (!type && !event.isEnded()) {
        return event;
      } else if (Array.isArray(type) && type.includes(event.type) && !event.isEnded()) {
        return event;
      } else if (event.type === type && !event.isEnded()) {
        return event;
      }
    });
  }

  /**
   * Return a serializable version of this Report.
   * @method getSerializable
   * @return {Object} A read-only, serializable version of the Report.
   */
  function getSerializable() {
    // We omit the functions and just return the properties.
    return {
      type,
      id,
      timeline: timeline.map(event => event.getSerializable()),
      data: reportData,
      metrics
    };
  }
  const report = {
    type,
    id,
    timeline,
    metrics,
    addEvent,
    getEvent,
    findLastOngoingEvent,
    addData,
    getData,
    addMetric,
    getMetric,
    registerMetricHandler,
    unregisterMetricHandler,
    getSerializable
  };
  return report;
}

/***/ }),

/***/ 68137:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createReporter;
var _isString2 = _interopRequireDefault(__webpack_require__(49775));
var _report = _interopRequireDefault(__webpack_require__(23338));
// Utils

/**
 * Creates a Reporter.
 * @method createReporter
 * @return {Reporter}
 */
function createReporter() {
  const API_TAG = 'API invoked: ';

  // All reports created so far, indexed by id.
  const reports = {};

  /**
   * Create a new report.
   * @method createReport
   * @param type {string} The type of report to create.
   * @param id {string} A unique identifier to represent this report.
   * @throws {Error} Throws an error if any of the two parameters fail to validate.
   * @return {Report} A new Report is returned if validation passed.
   */
  function createReport(type, id) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}reporter.createReport: Invalid type (${typeof type}), must be of type string.`);
    }
    if (!id || !(0, _isString2.default)(id)) {
      throw new Error(`${API_TAG}reporter.createReport: Invalid id (${typeof id}), must be of type string.`);
    }
    if (Object.hasOwn(reports, id)) {
      throw new Error(`${API_TAG}reporter.createReport: Cannot create report. One already exists for id: ${id}`);
    }
    // Create a blank report
    const newReport = (0, _report.default)(type, id);

    // ... and it under the id that was provided
    reports[id] = newReport;
    return newReport;
  }

  /**
   * Get a report.
   * @method getReport
   * @param {string} id A unique identifier representing a report.
   * @return {Report|undefined} The report object or undefined if no report was found for that id (or the id was invalid).
   */
  function getReport(id) {
    return reports[id];
  }

  /**
   * Delete a report.
   * @method deleteReport
   * @param {string} id A unique identifier representing a report.
   * @throws {Error} Throws an error if id fails to validate.
   * @return {undefined}
   */
  function deleteReport(id) {
    if (!id || !(0, _isString2.default)(id)) {
      throw new Error(`${API_TAG}reporter.deleteReport: Invalid id ${typeof id} (must be of type string).`);
    }
    delete reports[id];
  }
  return {
    createReport,
    getReport,
    deleteReport
  };
}

/***/ }),

/***/ 29662:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createTimelineEvent;
var _isString2 = _interopRequireDefault(__webpack_require__(49775));
var _uuid = __webpack_require__(60130);
// Utils

/**
 * Creates a TimelineEvent.
 * @method createTimelineEvent
 * @param {string} The type of event being created.
 * @return {TimelineEvent}
 */
function createTimelineEvent(type, onEventEnded, pId) {
  const start = new Date().getTime();
  const id = (0, _uuid.v4)();
  // The id of this events parent (if one exists)
  const parentId = pId;
  //  this will hold any sub-events for this event
  const timeline = [];
  // this will hold associated data for this event, indexed by type
  const eventData = {};
  // Computed metrics
  const metrics = [];
  const API_TAG = 'API invoked: ';
  /**
   * Add a new event to this events timeline.
   * @method addEvent
   * @param {string} type The type of event being added.
   * @throws {Error} Throws an error if type fails to validate.
   * @return {TimelineEvent} A new TimelineEvent.
   */
  function addEvent(type) {
    if (this.end) {
      // iF event was marked as ended, we cannot add further sub-events to it.
      throw new Error(`${API_TAG}timelineEvent.addEvent: Cannot add further sub-events. Event has been marked as ended.`);
    }
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}timelineEvent.addEvent: Invalid type (${typeof type}), must be of type string.`);
    }
    const newSubEvent = createTimelineEvent(type, onEventEnded, id);

    // Store the sub-event in the timeline beloging to parent event
    timeline.push(newSubEvent);
    return newSubEvent;
  }

  /**
   * Add data to the TimelineEvent.
   * @method addData
   * @param {string} type The type of data being added to the TimelineEvent.
   * @param {Object} data The data being added to the TimelineEvent.
   * @throws {Error} Throws an error if type fails to validate.
   * @return {undefined}
   */
  function addData(type, data) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}timelineEvent.addData: Invalid type (${typeof type}), must be of type string.`);
    }
    if (data === undefined) {
      throw new Error(`${API_TAG}timelineEvent.addData: No data provided.`);
    }
    // Add data to parent event (event if parent event has been marked as ended)
    eventData[type] = data;
  }

  /**
   * Find and return data added to a report.
   * @method getData
   * @param {string|undefined} key The key the for the data requested, if no key is provided return the entire data object.
   * @return {*} The data mapped to key.
   */
  function getData(key) {
    if (key) {
      return eventData[key];
    } else {
      return eventData;
    }
  }

  /**
   * Add computed metric to the TimelineEvent.
   * @method addMetric
   * @param {string} type The type of metric being added to the TimelineEvent.
   * @param {*} data The metric data being added to the TimelineEvent.
   * @throws {Error} Throws an error if the type is not of type string.
   * @return {undefined}
   */
  function addMetric(type, data) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}timelineEvent.addMetric: Invalid type (${typeof type}), must be of type string.`);
    }
    if (data === undefined) {
      throw new Error(`${API_TAG}timelineEvent.addMetric: No data provided.`);
    }
    metrics.push({
      type,
      data
    });
  }

  /**
   * Get the data for a provided metric type.
   * @method getMetric
   * @param {string} type The type of metric to return.
   * @throws {Error} Throws an error if the type is not a string.
   * @return {*} The data associated with the provided metric type.
   */
  function getMetric(type) {
    if (!type || !(0, _isString2.default)(type)) {
      throw new Error(`${API_TAG}timelineEvent.getMetric: Invalid type (${typeof type}), must be of type string.`);
    }
    return metrics.filter(metric => metric.type === type).map(metric => metric.data);
  }

  /**
   * Traverse the list of events and return the first one that matches the provided id.
   * @method getEvent
   * @param {string} id The id for the event being requested.
   * @return {TimelineEvent} The event with matching id.
   */
  function getEvent(id) {
    for (let i = 0; i < timeline.length; i++) {
      if (timeline[i].id === id) {
        return timeline[i];
      } else {
        const subEvent = timeline[i].getEvent(id);
        if (subEvent) {
          return subEvent;
        }
      }
    }
  }

  /**
   * Find the last event of a specific type.
   * @method findLastOngoingEvent
   * @param {string} type The type of event to search for.
   * @return {TimelineEvent} The last event matching the provided type.
   */
  function findLastOngoingEvent(type) {
    // KJS-1898: Using an alternative way for `findLast` as that prototype method is not supported in Chrome versions prior to M97.
    // TODO: Revert back to using `findLast` once our babel strategy is finalized.

    // Make a copy first, since `reverse()` will do a mutation on original array, which we don't want
    // for the rest of operatins within this report.
    const copiedTimeline = [...timeline];
    return copiedTimeline.reverse().find(event => {
      if (event.type === type && !event.isEnded()) {
        return event;
      }
    });
  }

  /**
   * End a TimelineEvent.
   * @method endEvent
   * @param {Error} An optional error object.
   *   This can be provided if there is an error by the time SDK ends this event instance.
   * @return {undefined}
   */
  function endEvent(err) {
    if (this.end) {
      // We already marked this event as ended.
      return;
    }
    if (err) {
      this.error = err;
    }
    this.end = new Date().getTime();
    onEventEnded(event);
  }

  /**
   * Check if the event has an end time.
   * @method isEnded
   * @return {boolean}
   */
  function isEnded() {
    return !!this.end;
  }

  /**
   * Set an error on the event.
   * @method setError
   * @param {Error} An error object.
   * @throws {Error} An error indicating that the event has already ended.
   * @return {undefined}
   */
  function setError(err) {
    if (this.end) {
      throw new Error("Can't set error on an event that has already ended.");
    }
    this.error = err;
  }

  /**
   * Get an error that may have been set on this event.
   * @method getError
   * @return {Error|undefined}
   */
  function getError() {
    return this.error;
  }

  /**
   * Return a serializable version of this TimelineEvent.
   * @method getSerializable
   * @return {Object} A read-only, serializable version of the TimelineEvent.
   */
  function getSerializable() {
    // We omit the functions and return just the properties.
    return {
      type,
      id,
      parentId,
      timeline: timeline.map(event => event.getSerializable()),
      data: eventData,
      metrics,
      start,
      end: this.end,
      error: this.error
    };
  }
  const event = {
    type,
    id,
    parentId,
    timeline,
    metrics,
    start,
    addEvent,
    isEnded,
    getEvent,
    findLastOngoingEvent,
    addData,
    getData,
    addMetric,
    getMetric,
    endEvent,
    setError,
    getError,
    getSerializable
  };
  return event;
}

/***/ }),

/***/ 60352:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _constants = __webpack_require__(35800);
/**
 * Configuration object for a Peer.
 * @typedef {Object} PeerConfig
 * @property {Object} [rtcConfig] Configuration for the native RTCPeerConnection.
 * @property {String} [trickleIceMode=FULL] The initial mode the Peer will use when receiving ICE candidates.
 * @property {Boolean} [removeBundling=false] Remove the a=group attribute to stop media bundling
 * @property {Function} [halfTrickleThreshold] Function that determines whether the threshold has been met when in HALF trickle mode.
 */
var _default = exports["default"] = {
  trickleIceMode: _constants.PEER.TRICKLE_ICE.FULL,
  removeBundling: false,
  halfTrickleThreshold: isPassedHalfTrickleThreshold
};
/**
 * Default function for determining whether the HALF trickle ICE threshold has
 *    been met, to start trickling ICE candidates.
 * Defines the threshold as one relay candidate being gathered.
 * @method isPassedHalfTrickleThreshold
 * @param  {String}             sdp          The local SDP of the Peer.
 * @param  {RTCIceCandidate}    iceCandidate The native candidate object that triggered this check.
 * @param  {Number}             time         The amount of time (ms) since ICE collection began.
 * @return {Boolean} Whether the "half trickle" threshold has been passed.
 */
function isPassedHalfTrickleThreshold(_ref) {
  let {
    sdp,
    iceCandidate,
    time
  } = _ref;
  const passedHalf = iceCandidate.candidate.indexOf('relay') !== -1;
  return passedHalf;
}

/***/ }),

/***/ 26947:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = onicecandidate;
var _constants = __webpack_require__(35800);
/**
 * Event wrapper for `icecandidate` event.
 * Reference: developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate
 * @method onicecandidate
 * @param  {Function} listener The listener function for the event.
 * @return {Boolean}  Whether the assignment succeeded or not.
 */
function onicecandidate(listener) {
  const {
    nativePeer,
    proxyPeer,
    config,
    iceTimer,
    emitter,
    iceCandidates,
    log
  } = this;

  /**
   * Intercept the PeerConnection onicecandidate event.
   * Handle the candidate as defined by the current trickle ICE mode config.
   * Trickle ICE scenarios:
   *   - FULL: Trickle.
   *   - HALF, pre-half: Wait for "half" or null candidate.
   *   - HALF, post-half: Trickle.
   *   - NONE: Wait for null candidate.
   */
  nativePeer.onicecandidate = event => {
    log.debug(`ICE candidate received (trickling?: ${config.trickleIceMode === _constants.PEER.TRICKLE_ICE.FULL}): `, event.candidate);

    // Keep track of all candidates gathered by this collection process.
    if (event.candidate !== null) {
      iceCandidates.push(event.candidate);
    }

    // Emit an event for the session to pick up for the ice collection check
    const elapsedTime = iceTimer.timeFromStart();
    emitter.emit('iceCandidateCollected', {
      iceCollectionDuration: elapsedTime,
      iceCandidates,
      iceGatheringState: proxyPeer.iceGatheringState,
      rtcPeerConnectionConfig: config,
      rtcLocalSessionDescription: proxyPeer.localDescription
    });
    if (config.trickleIceMode === _constants.PEER.TRICKLE_ICE.FULL) {
      // If trickling is enabled, emit an event for every ICE candidate. The
      //    Peer is already ready for negotiation at this point.
      if (event.candidate) {
        // Only trickle non-null (ie. actual) candidates.
        listener(event);
      }
    } else if (config.trickleIceMode === _constants.PEER.TRICKLE_ICE.HALF) {
      // For half trickle, only start trickling after a certain threshold.
      //    Peer will be considered ready for negotiation after that point.
      const haveHalf = config.halfTrickleThreshold({
        sdp: proxyPeer.localDescription.sdp,
        iceCandidate: event.candidate,
        time: elapsedTime
      });
      if (haveHalf) {
        log.debug('Half ICE collection process complete; ready for negotiation.');
        config.trickleIceMode = _constants.PEER.TRICKLE_ICE.FULL;
        emitter.emit('onnegotiationready');
      } else {
        log.debug("Peer's half trickle threshold not reached.");
      }
    }
  };
  return true;
}

/***/ }),

/***/ 71987:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = oniceconnectionstatechange;
/**
 * Event wrapper for `iceconnectionstatechange` event.
 * Reference: developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange
 * @method oniceconnectionstatechange
 * @param  {Function} listener The listener function for the event.
 * @return {Boolean}  Whether the assignment succeeded or not.
 */
function oniceconnectionstatechange(listener) {
  const {
    nativePeer,
    log
  } = this;
  nativePeer.oniceconnectionstatechange = function (event) {
    log.debug(`Peer received iceconnectionstatechange event: ${nativePeer.iceConnectionState}`);
    listener(event);
  };
  return true;
}

/***/ }),

/***/ 84888:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = onicegatheringstatechange;
var _constants = __webpack_require__(35800);
/**
 * Event wrapper for `icegatheringstatechange` event.
 * Reference: developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange
 * @method onicegatheringstatechange
 * @param  {Function} listener The listener function for the event.
 * @return {Boolean}  Whether the assignment succeeded or not.
 */
function onicegatheringstatechange(listener) {
  const {
    nativePeer,
    iceTimer,
    log
  } = this;

  /**
   * Intercept the PeerConnection onicegatheringstatechange event.
   * Time how long ICE collection takes and handles scenarios when it takes
   *    too long.
   */
  nativePeer.onicegatheringstatechange = event => {
    const gatheringState = event.target.iceGatheringState;
    log.debug(`Peer iceGatheringState changed to ${gatheringState}.`);
    if (gatheringState === _constants.PEER.ICE_GATHERING_STATE.GATHERING) {
      iceTimer.start();
      // TODO: Handle "ICE collection taking too long" scenario.
    } else if (gatheringState === _constants.PEER.ICE_GATHERING_STATE.COMPLETE) {
      log.debug(`Peer took ${iceTimer.timeFromStart()}ms to collect ICE candidates.`);
      iceTimer.stop();
    }
    // Bubble the event up.
    listener(event);
  };
  return true;
}

/***/ }),

/***/ 43255:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _icecandidate = _interopRequireDefault(__webpack_require__(26947));
var _iceconnectionstatechange = _interopRequireDefault(__webpack_require__(71987));
var _icegatheringstatechange = _interopRequireDefault(__webpack_require__(84888));
var _negotiationneeded = _interopRequireDefault(__webpack_require__(74974));
var _signalingstatechange = _interopRequireDefault(__webpack_require__(74239));
var _track = _interopRequireDefault(__webpack_require__(56275));
var _default = exports["default"] = {
  onicecandidate: _icecandidate.default,
  oniceconnectionstatechange: _iceconnectionstatechange.default,
  onicegatheringstatechange: _icegatheringstatechange.default,
  onnegotiationneeded: _negotiationneeded.default,
  onsignalingstatechange: _signalingstatechange.default,
  ontrack: _track.default
};

/***/ }),

/***/ 74974:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = onnegotiationneeded;
/**
 * Event wrapper for `negotiationneeded` event.
 * Reference: developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded
 * @method onnegotiationneeded
 * @param  {Function} listener The listener function for the event.
 * @return {Boolean}  Whether the assignment succeeded or not.
 */
function onnegotiationneeded(listener) {
  const {
    nativePeer,
    log
  } = this;
  nativePeer.onnegotiationneeded = function (event) {
    log.debug('Peer received negotiationneeded event.');
    listener(event);
  };
  return true;
}

/***/ }),

/***/ 74239:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = onsignalingstatechange;
/**
 * Event wrapper for `signalingstatechange` event.
 * Reference: developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange
 * @method onsignalingstatechange
 * @param  {Function} listener The listener function for the event.
 * @return {Boolean}  Whether the assignment succeeded or not.
 */
function onsignalingstatechange(listener) {
  const {
    nativePeer,
    log
  } = this;
  nativePeer.onsignalingstatechange = function (event) {
    log.debug(`Peer received signalingstatechange event: ${nativePeer.signalingState}`);
    listener(event);
  };
  return true;
}

/***/ }),

/***/ 56275:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = ontrack;
/**
 * Event wrapper for `track` event.
 * Reference: developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack
 * @method ontrack
 * @param  {Function} listener The listener function for the event.
 * @return {Boolean}  Whether the assignment succeeded or not.
 */
function ontrack(listener) {
  const {
    proxyPeer,
    nativePeer,
    trackManager,
    log
  } = this;
  nativePeer.ontrack = async event => {
    /**
     * transceiver: The RTCRtpTransceiver for this remote track. (Available in unified-plan)
     * receiver: The RTCRtpReceiver for this remote track.
     * track: The remote MediaStreamTrack.
     * streams: Array of MediaStreams the track is in.
     */
    // event object contains transceiver which already has track attached to its receiver
    const {
      track: nativeTrack,
      streams,
      transceiver
    } = event;
    log.debug(`Peer received ${nativeTrack.kind} Track ${nativeTrack.id}.`);
    if (!proxyPeer.transceivers.find(tran => tran.mid === transceiver.mid)) {
      // If we are not already tracking this Transceiver in the Peer model, then add it.
      proxyPeer.transceivers.push(transceiver);
    }

    /*
     * When the remote side adds a track, it should have an associated MediaStream
     *    which we get access to here. This allows us to listen for events on that
     *    MediaStream (important for knowing when the track has ended).
     * It's possible that the remote Sender does not have a Stream set, so we create
     *    a Stream for it. This should be considered a problematic scenario, since
     *    we rely on the remote Stream for certain events.
     * Reference: KAA-2628
     */
    let targetStream;
    if (streams.length === 0) {
      targetStream = await new MediaStream([nativeTrack]);
      log.debug('New Track is not associated with remote Stream.');
    } else {
      targetStream = streams[0];
      log.debug(`New Track is associated with remote Stream ${targetStream.id}.`);
    }

    // Convert the native MediaStreamTrack into a Track object.
    // Specify that this is not a local one (i.e. it's a remote track)
    const track = trackManager.add(nativeTrack, targetStream, false);
    listener(track);
  };
  return true;
}

/***/ }),

/***/ 89531:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = peer;
exports.setPeerProxies = setPeerProxies;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _events = _interopRequireDefault(__webpack_require__(43255));
var _methods = _interopRequireDefault(__webpack_require__(60424));
var _properties = _interopRequireDefault(__webpack_require__(1936));
var _utils = __webpack_require__(30791);
var _config = _interopRequireDefault(__webpack_require__(60352));
var _logs = __webpack_require__(88915);
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
var _timer = __webpack_require__(66564);
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /*
 * Wrapper imports.
 * Events, methods, and properties that we want to wrap/add to the native Peer.
 */ // Libraries.
// EXTERNAL PROXY CODE
let proxies;
/**
 * Function used to apply proxied functionality on top of the peer. Typically triggered by an
 * external proxy SDK.
 */
function setPeerProxies(peerProxies) {
  proxies = peerProxies;
}

/**
 * Create a Proxied Peer.
 * This Peer is a native PeerConnection that has had some new functionality
 *    added and some existing functionality "augmented". Where an event, a
 *    method, or a property has been defined (see folders), we intercept/add
 *    that functionality.
 * @method peer
 * @return {Peer}
 */
function peer(id) {
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let trackManager = arguments.length > 2 ? arguments[2] : undefined;
  const log = _logs.logManager.getLogger('Peer', id);
  config = (0, _utils.mergeValues)(_config.default, config);
  log.info('Creating new Peer.');
  const iceTimer = (0, _timer.createTimer)();
  const emitter = new _eventemitter.default();

  // Create the native Peer.
  log.debug('Creating native PeerConnection.', config.rtcConfig);
  const nativePeer = new RTCPeerConnection(config.rtcConfig, {
    optional: [{
      googDscp: true
    }]
  });

  // Add the event emitter methods to the wrapped methods as well.
  const customMethods = _objectSpread(_objectSpread(_objectSpread({}, _methods.default), proxies), {}, {
    // EXTERNAL PROXY CODE
    on: emitter.on.bind(emitter),
    off: emitter.off.bind(emitter),
    once: emitter.once.bind(emitter)
  });

  /**
   * The Peer model.
   * @typedef {Peer}
   * @property {RTCPeerConnection} peer     The native PeerConnection.
   * @property {string}            id       The unique identifier for the Peer.
   * @property {boolean}           dtlsRole The DTLS role selected for this PeerConnection. Set after the initial negotiation is completed.
   * @property {Object}            trackManager Manager that tracks all MediaStreamTracks.
   * @property {Object}            log      Logger specific to this Peer.
   * @property {Object}            iceTimer Timer tool (specifically for ICE collection).
   * @property {EventEmitter}      emitter
   * @property {Array<RTCIceCandidate>} iceCandidates Gathered candidates.
   * @property {timeoutID} [iceLoop] Reference to the on-going ICE collection loop.
   * @property {Array<RTCRtpTransceiver>} transceivers List of transceivers on the peer.
   */
  const base = {
    nativePeer,
    proxyPeer: undefined,
    id,
    dtlsRole: null,
    config,
    trackManager,
    log,
    iceTimer,
    emitter,
    iceCandidates: [],
    iceLoop: undefined,
    transceivers: []
  };

  /**
   * Create the Proxy object that will be used as the PeerConnection.
   *
   * This will intercept all `get` and `set` operations and either forward them
   *    directly to the real PeerConnection or to our wrapped operations.
   * This allows us to shim part or all of the PeerConnection's API. We can
   *    decide which operations we want to intercept while allowing others to
   *    pass through unchanged.
   */
  base.proxyPeer = new Proxy(base, {
    /**
     * Intercept "get" calls on the Proxy.
     * This function is called anytime a property on `base` is accessed,
     *    eg. `base.someProp`
     * @param {Object} target    base
     * @param {string} prop      Property being accessed.
     * @param {Object} receiver  The Proxy object.
     */
    get: function (target, prop, receiver) {
      if (typeof base.nativePeer[prop] === 'function') {
        /*
         * If a function is being accessed, determine whether we want to
         *    return the native function or our own.
         */
        if (Object.keys(customMethods).includes(prop)) {
          // Return our wrapped version of the original function.
          return customMethods[prop].bind(base);
        } else {
          // Return the original function, bound to have the original context.
          return base.nativePeer[prop].bind(base.nativePeer);
        }
      } else if (customMethods[prop] && typeof customMethods[prop] === 'function') {
        /*
         * If a non-native function is being accessed, return our custom method.
         * These are methods that are not on the native RTCPeerConnection
         *    object, but we added to the old Peer model.
         */
        // TODO: Move all of this functionality to a higher level of abstraction.
        return customMethods[prop].bind(base);
      } else if (_properties.default[prop]) {
        /*
         * If a PeerConnection property is being accessed, and we have a
         *    wrapping for it, return our wrapper property.
         */
        if (typeof _properties.default[prop] === 'function') {
          // If our property wrapper is a function, call the function and return
          //    the results.
          return _properties.default[prop].bind(base)();
        } else {
          // Otherwise, just return the original results.
          return base.nativePeer[prop];
        }
      } else if (prop !== 'nativePeer' && base[prop]) {
        /*
         * If a Peer model property, other than the peer, is being accessed,
         *    return it. The Peer model shouldn't have any properties that the
         *    PeerConnection also has (to avoid conflicts).
         */
        return base[prop];
      } else {
        // Otherwise, return the property from the PeerConnection itself.
        return base.nativePeer[prop];
      }
    },
    /**
     * Intercept "set" calls on the Proxy.
     * This function is called anytime a property on `base` is assigned,
     *    eg. `base.someProp = value`
     * @method
     * @param  {Object} target   base
     * @param  {string} prop     Property being set.
     * @param  {Any}    value    The value being set.
     * @param  {Proxy}  receiver The Proxy object.
     * @return {boolean}         Whether the assignment succeeded or not.
     */
    set: function (target, prop, value, receiver) {
      if (_events.default[prop]) {
        // If a value is being set on one of our "wrapped events", then call
        //    the "event function".
        return _events.default[prop].bind(base)(value);
      } else if (prop === 'dtlsRole') {
        /**
         * Only allow the `dtlsRole` property of the Peer model be set. The
         *    Session needs to be able to get/set this property, in the case
         *    where it recreates the Peer multiple times, so it needs to set the
         *    role to something specific.
         * Reference: KAA-1816
         */
        base.dtlsRole = value;
        return true;
      } else {
        // Otherwise, try to set the value on the native Peer.
        return Reflect.set(base.nativePeer, prop, value);
      }
    }
  });

  /**
   * For event debugging purposes, start with a dummy listener for every event.
   *    This ensures our Proxy is listening for the events (in the case nothing
   *    else is listening), so that debug information from the event wrappers
   *    are logged.
   */
  for (const eventName in _events.default) {
    base.proxyPeer[eventName] = () => {};
  }
  return base.proxyPeer;
}

/***/ }),

/***/ 54771:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = addIceCandidate;
/**
 * Add an ICE candidate to the connection.
 * @method addIceCandidate
 * @param  {RTCIceCandidate} candidate A native candidate object.
 * @return {Promise} Resolves when the candidate is successfully added.
 */
function addIceCandidate(candidate) {
  const {
    nativePeer,
    proxyPeer,
    id,
    log
  } = this;
  log.info('Adding ICE candidate.');
  return new Promise((resolve, reject) => {
    if (proxyPeer.remoteDescription.type && proxyPeer.remoteDescription.sdp) {
      nativePeer.addIceCandidate(candidate).then(resolve).catch(reject);
    } else {
      log.info('Cannot set remote ICE candidate without a remote description.');
      // TODO: Better error.
      reject(new Error(`Peer ${id} cannot set remote ICE candidate without a remote description.`));
    }
  });
}

/***/ }),

/***/ 20596:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = addTransceiver;
/**
 * Add a Transceiver to the connection.
 * @method addTransceiver
 * @param  {Track} track A Track object.
 * @return {RTCRtpTransceiver}
 */
function addTransceiver(track) {
  const {
    proxyPeer,
    nativePeer,
    log
  } = this;
  log.info(`Adding new ${track.track.kind} track.`);
  let transceiver;
  try {
    transceiver = nativePeer.addTransceiver(track.track, {
      direction: 'sendrecv',
      streams: [track.getStream()]
    });
    // Store the reference to the Transceiver on our Peer as well.
    proxyPeer.transceivers.push(transceiver);
  } catch (err) {
    // TODO: Better error handling.
    log.info(`Failed to add track: ${err.message}`);
  }

  // TODO: What to return here? Probably shouldn't expose the transceiver itself.
  return transceiver;
}

/***/ }),

/***/ 62138:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = close;
/**
 * Clean the Peer by closing the RTCPeerConnection.
 * @method close
 */
function close() {
  const {
    nativePeer,
    id,
    emitter,
    iceLoop,
    log
  } = this;
  log.info('Closing Peer.');
  if (iceLoop) {
    // Clear the ICE collection loop timeout if it exists.
    clearTimeout(iceLoop);
  }
  nativePeer.close();
  emitter.emit('peer:closed', id);
}

/***/ }),

/***/ 76613:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createAnswer;
var _constants = __webpack_require__(35800);
var _pipeline = __webpack_require__(39031);
var _handlers = __webpack_require__(4952);
/**
 * Creates an SDP answer, given that a remote offer has been set.
 * @method createAnswer
 * @param  {RTCAnswerOptions} [options={}] Options used to customize the answer.
 * @param  {Object} [options.mediaDirections] Directions to use for media.
 * @param  {string} [options.mediaDirections.audio]
 * @param  {string} [options.mediaDirections.video]
 * @return {Promise} Resolves with the answer.
 */
function createAnswer() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    nativePeer,
    config,
    dtlsRole,
    log
  } = this;
  log.info('Creating local answer.');

  // Remove options.mediaDirections.
  // This is because directions are now set in transceivers.
  delete options.mediaDirections;
  return new Promise((resolve, reject) => {
    nativePeer.createAnswer(options).then(answer => {
      const sdpHandlers = [];

      /*
       * Always include the `preventDtlsRoleChange` handler. This ensures
       *    that the SDP's DTLS role does not change during a renegotiation.
       */
      sdpHandlers.push(_handlers.preventDtlsRoleChange);
      if (config.trickleIceMode === _constants.PEER.TRICKLE_ICE.NONE) {
        // Modify the answer to claim the Peer doesn't support trickle ICE.
        sdpHandlers.push(_handlers.removeTrickleIce);
      }
      if (config.removeBundling) {
        // Modify the offer to remove media bundling
        sdpHandlers.push(_handlers.removeBundling);
      }
      if (options.mediaDirections) {
        // Modify the answer to set media directions as desired.
        sdpHandlers.push((0, _handlers.changeMediaDirection)(options.mediaDirections));
      }
      if (sdpHandlers.length > 0) {
        // Run the SDP pipeline with only these handlers.
        answer.sdp = (0, _pipeline.runPipeline)(sdpHandlers, answer.sdp, {
          type: answer.type,
          endpoint: _constants.PEER.ENDPOINT.LOCAL,
          dtlsRole: dtlsRole
        });
      }
      log.info('Finished creating local answer.');
      resolve(answer);
    }).catch(reject);
  });
}

/***/ }),

/***/ 38978:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = createOffer;
var _constants = __webpack_require__(35800);
var _pipeline = __webpack_require__(39031);
var _handlers = __webpack_require__(4952);
/**
 * Creates an SDP offer.
 * @method createOffer
 * @param  {RTCOfferOptions} [options={}] Options used to customize the offer.
 * @param  {Object} [options.mediaDirections] Directions to use for media.
 * @param  {string} [options.mediaDirections.audio]
 * @param  {string} [options.mediaDirections.video]
 * @return {Promise} Resolves with the offer.
 */
function createOffer() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    nativePeer,
    config,
    log
  } = this;
  log.info('Creating local offer.');

  // Remove options.mediaDirections.
  // This is because directions are now set in transceivers.
  delete options.mediaDirections;
  return new Promise((resolve, reject) => {
    nativePeer.createOffer(options).then(offer => {
      const sdpHandlers = [];
      if (config.trickleIceMode === _constants.PEER.TRICKLE_ICE.NONE) {
        // Modify the offer to claim the Peer doesn't support trickle ICE.
        sdpHandlers.push(_handlers.removeTrickleIce);
      }
      if (config.removeBundling) {
        // Modify the offer to remove media bundling
        sdpHandlers.push(_handlers.removeBundling);
      }
      if (options.mediaDirections) {
        // Modify the offer to set media directions as desired.
        sdpHandlers.push((0, _handlers.changeMediaDirection)(options.mediaDirections));
      }
      if (sdpHandlers.length > 0) {
        // Run the SDP pipeline with only these handlers.
        offer.sdp = (0, _pipeline.runPipeline)(sdpHandlers, offer.sdp, {
          type: offer.type,
          endpoint: _constants.PEER.ENDPOINT.LOCAL
        });
      }
      log.info('Finished creating local offer.');
      resolve(offer);
    }).catch(reject);
  });
}

/***/ }),

/***/ 76040:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = findReusableTransceiver;
/**
 * Finds a transceiver that can be reused.
 * A transceiver can be reused if it satisfies the following conditions:
 *   - it does not have a track on its sender
 *   - it has the same kind (audio or video) as what we specified
 *   - it has been used before (if it has not been used then we are not "reusing" it)
 * @method findReusableTransceiver
 * @param {string} kind The kind of transceiver to find (audio or video)
 * @returns {Object} Transceiver object that matches kind, has no sender track, and has currentDirection. Otherwise undefined.
 */
function findReusableTransceiver(kind) {
  const {
    proxyPeer
  } = this;
  const transceivers = proxyPeer.getTransceivers();
  return transceivers.find(transceiver => transceiver.sender.track == null && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === kind &&
  // Ensure the transceiver is not stopped, it could be null if negotiation has not yet complete.
  transceiver.currentDirection !== 'stopped');
}

/***/ }),

/***/ 69964:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getState;
/**
 * Retrieve a snapshot of the Peer object's current state.
 * @method getState
 * @return {Object}
 */
function getState() {
  const {
    proxyPeer,
    config,
    id
  } = this;
  return {
    id,
    config: config,
    localDesc: proxyPeer.localDescription,
    signalingState: proxyPeer.signalingState,
    localTracks: proxyPeer.localTracks,
    remoteTracks: proxyPeer.remoteTracks,
    senderTracks: proxyPeer.senderTracks
  };
}

/***/ }),

/***/ 53326:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getStats;
/**
 * Retrieve RTCStatsReport for a sender or the peerConnection.
 * @method getStats
 * @param {string} [TrackId] Return stats for peerConnection if trackId is not provided
 * @return {Promise} Resolves with the RTCStatsReport
 */
function getStats(trackId) {
  const {
    nativePeer,
    proxyPeer,
    log
  } = this;
  log.info(`Getting stats ${trackId ? 'for track.' : '.'}`);
  // If no trackId is supplied, get the stats from the RTCPeerConnection. Otherwise, find an RTCSender
  // associated with the trackId and get the stats from it.

  // Use the trackId if it was provided
  if (trackId) {
    return new Promise((resolve, reject) => {
      const senders = proxyPeer.getSenders();
      // search for a sender associated with the trackId
      const sender = senders.find(sender => sender.track.id === trackId);
      if (sender) {
        sender.getStats().then(resolve).catch(reject);
      } else {
        const errMsg = `Cannot find sender with trackId: ${trackId}`;
        log.info(errMsg);
        reject(new Error(errMsg));
      }
    });
  } else {
    // get the stats associated with the peerConnection if no trackId is supplied
    return nativePeer.getStats();
  }
}

/***/ }),

/***/ 5667:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getTransceivers;
/**
 * Retrieve the list of Transceivers on the Peer.
 * @method getTransceivers
 * @return {Array<RTCRtpTransceiver>}
 */
function getTransceivers() {
  const {
    proxyPeer
  } = this;

  // Return our Peer's saved list of transceivers instead of using the native
  //    getTransceivers API. This is for "proxied webrtc" mode, where a native
  //    API call causes delays.
  return proxyPeer.transceivers;
}

/***/ }),

/***/ 60424:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _addIceCandidate = _interopRequireDefault(__webpack_require__(54771));
var _addTransceiver = _interopRequireDefault(__webpack_require__(20596));
var _close = _interopRequireDefault(__webpack_require__(62138));
var _createAnswer = _interopRequireDefault(__webpack_require__(76613));
var _createOffer = _interopRequireDefault(__webpack_require__(38978));
var _findReusableTransceiver = _interopRequireDefault(__webpack_require__(76040));
var _getState = _interopRequireDefault(__webpack_require__(69964));
var _getStats = _interopRequireDefault(__webpack_require__(53326));
var _getTransceivers = _interopRequireDefault(__webpack_require__(5667));
var _removeTrack = _interopRequireDefault(__webpack_require__(16045));
var _replaceTrack = _interopRequireDefault(__webpack_require__(26956));
var _sendDTMF = _interopRequireDefault(__webpack_require__(14869));
var _setLocalDescription = _interopRequireDefault(__webpack_require__(27045));
var _setRemoteDescription = _interopRequireDefault(__webpack_require__(59418));
const methods = {
  addIceCandidate: _addIceCandidate.default,
  addTransceiver: _addTransceiver.default,
  close: _close.default,
  createAnswer: _createAnswer.default,
  createOffer: _createOffer.default,
  findReusableTransceiver: _findReusableTransceiver.default,
  getState: _getState.default,
  getStats: _getStats.default,
  getTransceivers: _getTransceivers.default,
  removeTrack: _removeTrack.default,
  replaceTrack: _replaceTrack.default,
  sendDTMF: _sendDTMF.default,
  setLocalDescription: _setLocalDescription.default,
  setRemoteDescription: _setRemoteDescription.default
};
var _default = exports["default"] = methods;

/***/ }),

/***/ 16045:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = removeTrack;
/**
 * Remove a Track from the connection.
 * @method removeTrack
 * @param  {string} trackId An id for a Track object.
 */
function removeTrack(trackId) {
  const {
    nativePeer,
    proxyPeer,
    log
  } = this;
  log.info(`Removing track ${trackId}.`);
  const track = proxyPeer.senderTracks.find(track => track.id === trackId);
  if (!track) {
    log.info(`Invalid track ID ${trackId}; no such track found.`);
    return;
  } else if (proxyPeer.signalingState === ' closed') {
    log.info('Peer is closed; cannot remove track.');
    return;
  }

  // Get the RtpSender for the Track we want to remove.
  const sender = proxyPeer.getSenders().filter(sender => sender.track !== null).find(sender => sender.track.id === trackId);
  nativePeer.removeTrack(sender);
}

/***/ }),

/***/ 26956:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = replaceTrack;
/**
 * Replaces a specified transceiver's sender.track.
 * @method replaceTrack
 * @param {Object} newTrack The MediaStreamTrack we want to place into the sender.
 * @param {Object} options Options for specifying which transceiver's sender should be replaced. They are ordered by priority.
 * @param {Array} [options.trackId] The track id whose transceivers we want to set the direction of.
 * @return {Object} A Promise object which is fulfilled once the track has been replaced
 */
function replaceTrack(newTrack, options) {
  const {
    proxyPeer,
    log
  } = this;
  log.info(`Replacing track ${options.trackId} with new ${newTrack.kind} track.`);
  return new Promise((resolve, reject) => {
    // Find the transceiver related to the provided track ID.
    const targetTransceiver = proxyPeer.getTransceivers().find(transceiver => transceiver.sender.track && transceiver.sender.track.id === options.trackId);
    const sender = targetTransceiver ? targetTransceiver.sender : undefined;
    if (sender) {
      sender.replaceTrack(newTrack).then(resolve).catch(error => {
        log.info(`Failed to replace track; ${error.message}`);
        reject(error);
      });
    } else {
      log.info(`Failed to replace track; could not find track ${options.trackId}.`);
      reject(new Error(`Sender for track ${options.trackId} not found.`));
    }
  });
}

/***/ }),

/***/ 14869:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = sendDTMF;
/**
 * Send DTMF tones.
 * @method sendDTMF
 * @param {Object} DTMFOptions The DTMF options.
 * @param {string} DTMFOptions.tone DTMF tone to send. Valid values are [0,1,2,3,4,5,6,7,8,9,#].
 * @param {number} DTMFOptions.duration=100 The amount of time, in milliseconds, that each DTMF tone should last.
 * @param {number} DTMFOptions.intertoneGap=70 The length of time, in milliseconds, to wait between tones.
 * @param {Object} [sendOptions] The send options.
 * @param {func} [sendOptions.callback] Optional callback for tone event .
 * @param {string} [sendOptions.trackId] The trackId of the sender to use.
 * @return {Boolean} Whether the DTMF tones were inserted
 */
function sendDTMF(_ref, _ref2) {
  let {
    tone,
    duration = 100,
    intertoneGap = 70
  } = _ref;
  let {
    callback,
    trackId
  } = _ref2;
  const {
    proxyPeer,
    log
  } = this;
  log.info('Sending DTMF tones.', tone);
  if (!proxyPeer.getSenders) {
    log.info('Failed to send tones; getSenders is not supported by this browser.');
    return false;
  }
  const senders = proxyPeer.getSenders();
  // Use the trackId if it was provided
  if (trackId) {
    const sender = senders.find(sender => sender.track.id === trackId);
    if (!sender) {
      log.info(`Failed to send tones; could not find track ${trackId}.`);
      return false;
    }
    insertDTMF(sender, tone, duration, intertoneGap, callback, log);
    return true;
  } else {
    let result;
    for (let i = 0; i < senders.length; i++) {
      result = insertDTMF(senders[i], tone, duration, intertoneGap, callback, log);
      if (result) {
        return true;
      }
    }
    log.info('Failed to send tones; could not find an appropriate track.');
    return false;
  }
}

/**
 * Helper function to sendDTMF tones .
 * @private
 * @method insertDTMF
 * @param {sender} object
 * @param {string} tone
 * @param {number} duration
 * @param {number} intertoneGap
 * @param {Function} callback
 */
function insertDTMF(sender, tone, duration, intertoneGap, callback, log) {
  /**
   * Event handler when tone is played.
   * @private
   * @method handleToneChangeEvent
   * @param  {event} event
   */
  function handleToneChangeEvent(event) {
    if (event.tone !== '') {
      log.debug('Tone played: ' + event.tone);
    } else {
      log.debug('All tones have played.');
    }
  }
  if (sender.dtmf) {
    const dtmfSender = sender.dtmf;
    if (callback) {
      dtmfSender.ontonechange = callback;
    } else {
      dtmfSender.ontonechange = handleToneChangeEvent;
    }
    try {
      dtmfSender.insertDTMF(tone, duration, intertoneGap);
      return true;
    } catch (err) {
      log.debug(err.message);
      return false;
    }
  } else {
    log.debug('The sender requires DTMF which is not support by this browser.');
    return false;
  }
}

/***/ }),

/***/ 27045:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = setLocalDescription;
var _constants = __webpack_require__(35800);
var _iceCollectionScheduledCheck = _interopRequireDefault(__webpack_require__(85846));
// Utils.

/**
 * Sets an SDP as the local description of the connection.
 * The returned Promise will resolve when the Peer is ready for negotiation,
 *    taking into account the Peer's `trickleIceMode` configuration.
 * @method setLocalDescription
 * @param  {RTCSessionDescription} sessionDesc
 * @return {Promise}
 */
function setLocalDescription(desc) {
  const {
    nativePeer,
    proxyPeer,
    config,
    id,
    emitter,
    iceTimer,
    log
  } = this;

  // TODO: SDP pipeline here.
  log.info(`Setting local description ${desc.type} in ${proxyPeer.signalingState} state.`);
  log.debug(`Setting local description ${desc.type}:`, desc.sdp);

  /**
   * Scenario: A local answer SDP is being applied to the Peer, but it does
   *    not have a selected DTLS role yet. This should occur during initial
   *    negotiation, before responding with this Peer's answer.
   * Set the local Peer's DTLS role depending on what role was generated. This
   *    role will be kept throughout all renegotiations.
   */
  if (!this.dtlsRole && desc.type === 'answer') {
    const dtlsMatch = desc.sdp.match(/a=setup:(\w*?)[\r\n]/);
    if (dtlsMatch) {
      log.debug(`Selecting DTLS role ${dtlsMatch[1]}.`);
      this.dtlsRole = dtlsMatch[1];
    }
  }
  return new Promise((resolve, reject) => {
    // We always want to wait for the PeerConnection to be ready for
    //    negotiation before resolving setLocalDescription.
    // Each trickle ICE option (FULL/HALF/NONE) emits "negotiation ready" event once.
    emitter.once('onnegotiationready', () => {
      if (iceTimer.isStarted()) {
        // In a HALF trickle scenario, the Peer will be ready for negotiation
        //    before ICE collection has completed. Log that timing.
        log.debug(`Took ${iceTimer.timeFromStart()}ms to collect ICE candidates before negotiation.`);
      }
      resolve();
    });
    nativePeer.setLocalDescription(desc).then(() => {
      log.info('Finished setting local description.');
      log.debug(`State is now ${proxyPeer.signalingState}.`);
      if (config.trickleIceMode === _constants.PEER.TRICKLE_ICE.FULL) {
        // Trickling ICE candidates means that we can begin negotiation immediately.
        log.debug('Ready for negotiation (full trickleICE).');
        emitter.emit('onnegotiationready');
      } else {
        // ICE candidates aren't always gathered (only initially and when something
        //    changes), but we rely on "gathering complete" to know when the Peer is
        //    ready for negotiation. Give the Peer some time to start gathering
        //    before deciding if we need to wait for gathering to complete or not.
        // The timeout is needed because of a bug in Chrome:
        //    https://bugs.chromium.org/p/webrtc/issues/detail?id=1873
        // Known issue: If candidate collection takes less time than this timeout,
        //    the logged message will be incorrect, but will functionally still work.
        setTimeout(() => {
          if (proxyPeer.iceGatheringState === 'complete') {
            // Gathering is "complete", so we are ready for negotiation.
            log.debug('Ready for negotiation; ICE candidate collection not needed.');
            emitter.emit('onnegotiationready');
          } else {
            log.debug(`Waiting for ICE collection process (${config.trickleIceMode}).`);
            // Register the ice collection check function callback to start the candidate collection
            //  looping process
            proxyPeer.isIceCollectionCheckOngoing = true;
            (0, _iceCollectionScheduledCheck.default)(this);
          }
        }, 25);
      }
    }).catch(err => {
      log.info('Failed to set local description.');
      log.debug(`Peer ${id}: ${err}`);
      // Parse native error. Make it more understand and/or
      //    provide a better log about what went wrong.
      reject(err);
    });
  });
}

/***/ }),

/***/ 59418:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = setRemoteDescription;
/**
 * Sets an SDP as the remote description of the connection.
 * @method setRemoteDescription
 * @param  {RTCSessionDescription} sessionDesc
 */
function setRemoteDescription(desc) {
  const {
    nativePeer,
    proxyPeer,
    id,
    log
  } = this;

  // TODO: SDP pipeline here.
  log.info(`Setting remote description ${desc.type} in ${proxyPeer.signalingState} state.`);
  log.debug(`Setting remote description ${desc.type}:`, desc.sdp);

  /**
   * Scenario: A remote answer SDP is being applied to the Peer, but it does
   *    not have a selected DTLS role yet. This should occur only when the
   *    initial negotiation is being completed.
   * Set the local Peer's DTLS role depending on what the remote Peer
   *    selected. This role will be kept throughout all renegotiations.
   */
  if (!this.dtlsRole && desc.type === 'answer') {
    const dtlsMatch = desc.sdp.match(/a=setup:(\w*?)[\r\n]/);
    if (dtlsMatch) {
      const localRole = dtlsMatch[1] === 'active' ? 'passive' : 'active';
      log.debug(`Selecting DTLS role ${localRole}. Remote Peer selected ${dtlsMatch[1]} DTLS role.`);
      this.dtlsRole = localRole;
    }
  }

  // TODO: Update `config.trickleIceMode` to either NONE or FULL (from HALF)
  //    depending on remote support, since HALF is only needed for initial.
  return new Promise((resolve, reject) => {
    nativePeer.setRemoteDescription(desc).then(() => {
      log.info('Finished setting remote description.');
      log.debug(`State is now ${proxyPeer.signalingState}.`);
      resolve();
    }).catch(err => {
      log.info('Failed to set remote description.');
      log.debug(`Peer ${id}: ${err}`);
      // Parse native error. Make it more understand and/or
      //    provide a better log about what went wrong.
      reject(err);
    });
  });
}

/***/ }),

/***/ 1936:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _localDescription = _interopRequireDefault(__webpack_require__(87158));
var _localTracks = _interopRequireDefault(__webpack_require__(89246));
var _remoteDescription = _interopRequireDefault(__webpack_require__(12159));
var _remoteTracksActive = _interopRequireDefault(__webpack_require__(19706));
var _remoteTracks = _interopRequireDefault(__webpack_require__(10583));
var _senderTracks = _interopRequireDefault(__webpack_require__(38689));
var _default = exports["default"] = {
  localDescription: _localDescription.default,
  localTracks: _localTracks.default,
  remoteDescription: _remoteDescription.default,
  remoteTracks: _remoteTracksActive.default,
  remoteTracksAll: _remoteTracks.default,
  senderTracks: _senderTracks.default
};

/***/ }),

/***/ 87158:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getLocalDescription;
/**
 * The SDP for the local end of the connection.
 * @method getLocalDescription
 */
function getLocalDescription() {
  const {
    nativePeer,
    log
  } = this;
  log.info('Getting local description.');
  const localDesc = nativePeer.localDescription;
  /*
   * Ensure it is a RTCSessionDescription object.
   * In some scenarios (based on browser?), it may return an empty object
   *    instead of undefined when there is no local description.
   * TODO: Determine if this is still needed, or if we can use the native
   *    property directly.
   */
  if (localDesc && localDesc.sdp && localDesc.type) {
    return localDesc;
  } else {
    return undefined;
  }
}

/***/ }),

/***/ 89246:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = localTracks;
/**
 * @method getLocalTracks
 * @return {Array} List of active Track objects added to the Peer locally.
 */
function localTracks() {
  const {
    proxyPeer,
    trackManager,
    log
  } = this;
  log.info('Getting local tracks.');

  // Return the list of Tracks from active senders.
  return proxyPeer.getSenders()
  /**
   * Remove any Senders that do not have an associated track.
   * We only want to retrieve Senders that do have tracks, because those are
   *    the local tracks that have been added to the Peer.
   * Senders without tracks are part of a Transceiver where the Receiver has
   *    a remote track, but no local track has been added to it. We don't
   *    care about this for the "get local tracks" operation.
   */.filter(sender => Boolean(sender.track)).map(sender => trackManager.get(sender.track.id)).filter(track => {
    // Make sure the trackManager has the track and that its active.
    // It's possible that Peer has the sender but not the actual track yet.
    return track && track.getState().state === 'live' && track.getStream().active;
  });
}

/***/ }),

/***/ 12159:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getRemoteDescription;
/**
 * The SDP for the remote end of the connection.
 * @method getRemoteDescription
 */
function getRemoteDescription() {
  const {
    nativePeer,
    log
  } = this;
  log.info('Getting remote description.');
  const remoteDesc = nativePeer.remoteDescription;
  /*
   * Ensure it is a RTCSessionDescription object.
   * In some scenarios (based on browser?), it may return an empty object
   *    instead of undefined when there is no local description.
   * TODO: Determine if this is still needed, or if we can use the native
   *    property directly.
   */
  if (remoteDesc && remoteDesc.sdp && remoteDesc.type) {
    return remoteDesc;
  } else {
    return undefined;
  }
}

/***/ }),

/***/ 10583:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getRemoteTracks;
/**
 * @method getRemoteTracks
 * @return {Array} List of active Track objects the Peer has received remotely.
 */
function getRemoteTracks() {
  const {
    proxyPeer,
    trackManager,
    log
  } = this;
  log.info('Getting remote tracks.');

  // Return the list of Tracks from active receivers.
  return proxyPeer.getReceivers()
  /**
   * Remove any Receivers that do not have an associated track.
   * We only want to retrieve Receivers that do have tracks, because those are
   *    the remote tracks that have been added to the Peer.
   * Receivers without tracks are part of a Transceiver where the Sender has
   *    a local track, but no remote track has been added to it. We don't
   *    care about this for the "get remote tracks" operation.
   */.filter(receiver => Boolean(receiver.track)).map(receiver => trackManager.get(receiver.track.id)).filter(track => {
    // Make sure the trackManager has the track
    return track && track.getState().state === 'live';
  });
}

/***/ }),

/***/ 19706:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = getRemoteTracks;
/**
 * @method getRemoteTracks
 * @return {Array} List of active Track objects the Peer has received remotely.
 */
function getRemoteTracks() {
  const {
    proxyPeer,
    trackManager,
    log
  } = this;
  log.info('Getting remote tracks.');

  // Return the list of Tracks from active receivers.
  return proxyPeer.getReceivers()
  /**
   * Remove any Receivers that do not have an associated track.
   * We only want to retrieve Receivers that do have tracks, because those are
   *    the remote tracks that have been added to the Peer.
   * Receivers without tracks are part of a Transceiver where the Sender has
   *    a local track, but no remote track has been added to it. We don't
   *    care about this for the "get remote tracks" operation.
   */.filter(receiver => Boolean(receiver.track)).map(receiver => trackManager.get(receiver.track.id)).filter(track => {
    // Make sure the trackManager has the track and that its active.
    // It's possible that Peer has the receiver but not the actual track yet.
    return track && track.getState().state === 'live' && track.getStream().active;
  });
}

/***/ }),

/***/ 38689:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = senderTracks;
/**
 * This method is similar to the `localTracks` method, however this method returns
 *  all of the sender's tracks (ended or not) rather than just the active/live ones.
 *
 * @method senderTracks
 * @return {Array} List of Track objects added to the Peer locally.
 */
function senderTracks() {
  const {
    proxyPeer,
    log
  } = this;
  log.info('Getting sender tracks.');

  // Return the list of Tracks from senders.
  return proxyPeer.getSenders()
  /**
   * Remove any Senders that do not have an associated track.
   * We only want to retrieve Senders that do have tracks, because those are
   *    the local tracks that have been added to the Peer.
   * Senders without tracks are part of a Transceiver where the Receiver has
   *    a remote track, but no local track has been added to it. We don't
   *    care about this for the "get local tracks" operation.
   */.filter(sender => Boolean(sender.track)).map(sender => sender.track);
}

/***/ }),

/***/ 85846:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = iceCollectionScheduledCheck;
/**
 *
 * Util for emitting an event with the necessary peer information for the ice
 * collection scheduled check.
 * @method iceCollectionScheduledCheck
 * @param {Object} proxyBase The "base" of the Proxy Peer object.
 */
function iceCollectionScheduledCheck(proxyBase) {
  const {
    proxyPeer,
    iceTimer,
    iceCandidates,
    emitter,
    config
  } = proxyBase;

  // The time, in milliseconds, that ICE collection has taken so far.
  const elapsedTime = iceTimer.timeFromStart();
  emitter.emit('scheduledCheck', {
    iceCollectionDuration: elapsedTime,
    iceCandidates,
    iceGatheringState: proxyPeer.iceGatheringState,
    rtcPeerConnectionConfig: config,
    rtcLocalSessionDescription: proxyPeer.localDescription
  });
}

/***/ }),

/***/ 66564:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTimer = createTimer;
/**
 * Prototype for a timer object that can keep time and be stopped and started.
 */
const timerPrototype = {
  /**
   * Start the timer
   * @returns {boolean} True if the timer was successfully started, false if it was already started.
   */
  start() {
    if (!this.isStarted()) {
      this._startTime = now();
      return true;
    }
    return false;
  },
  /**
   * Stops the timer
   * @returns {boolean} True if the timer was successfully stopped, false if it was already stopped.
   */
  stop() {
    if (this.isStarted()) {
      this._startTime = undefined;
      return true;
    }
    return false;
  },
  /**
   * @returns {boolean} True if the timer is started, false otherwise.
   */
  isStarted() {
    return Boolean(this._startTime);
  },
  /**
   * @returns {number} The time in milliseconds since the timer was started, or 0 if it wasn't started.
   */
  timeFromStart() {
    return this.isStarted() ? now() - this._startTime : 0;
  }
};

/**
 * @returns A timestamp in milliseconds since the unix-epoch
 */
function now() {
  return new Date().getTime();
}

/**
 * Create a new timer object. Timers are not started when created and need to be started manually.
 *
 * @returns {Object} The timer object that supports the timer interface.
 */
function createTimer() {
  return Object.create(timerPrototype);
}

/***/ }),

/***/ 35800:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PEER = exports.MEDIA_DIR = exports.ICE_COLLECTION_RESULT_TYPES = exports.ICE_COLLECTION_CHECK_REASONS = void 0;
/**
 * Constants relating to the Peer model.
 */
const PEER = exports.PEER = {
  TRICKLE_ICE: {
    FULL: 'FULL',
    HALF: 'HALF',
    NONE: 'NONE'
  },
  // Defined by the RTCPeerConnection.iceGatheringState spec.
  ICE_GATHERING_STATE: {
    NEW: 'new',
    GATHERING: 'gathering',
    COMPLETE: 'complete'
  },
  ENDPOINT: {
    LOCAL: 'local',
    REMOTE: 'remote'
  }
};

/**
 * SDP constants for media direction.
 * @type {Object}
 */
const MEDIA_DIR = exports.MEDIA_DIR = {
  INACTIVE: 'inactive',
  SEND_ONLY: 'sendonly',
  RECV_ONLY: 'recvonly',
  SEND_RECV: 'sendrecv'
};

/**
 * Reasons for calling the Ice Collection Check function.
 * @name ICE_COLLECTION_CHECK_REASONS
 */
const ICE_COLLECTION_CHECK_REASONS = exports.ICE_COLLECTION_CHECK_REASONS = {
  ICE_GATHERING_STATE_CHANGE: 'IceGatheringStateChanged',
  NEW_CANDIDATE: 'NewCandidate',
  SCHEDULED: 'Scheduled'
};

/**
 * Result types for the Ice Collection Check Function.
 * @name ICE_COLLECTION_RESULT_TYPES
 */
const ICE_COLLECTION_RESULT_TYPES = exports.ICE_COLLECTION_RESULT_TYPES = {
  START_CALL: 'StartCall',
  WAIT: 'Wait',
  ERROR: 'Error'
};

/***/ }),

/***/ 15203:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = initialize;
exports.getBrowserDetails = void 0;
exports.getWebRTCSupportCapabilities = getWebRTCSupportCapabilities;
var _track = _interopRequireDefault(__webpack_require__(77836));
var _media = _interopRequireDefault(__webpack_require__(10662));
var _Peer = _interopRequireDefault(__webpack_require__(89531));
var _mediaManager = _interopRequireDefault(__webpack_require__(34705));
var _peerManager = _interopRequireDefault(__webpack_require__(54848));
var _sessionManager = _interopRequireDefault(__webpack_require__(29058));
var _deviceManager = _interopRequireDefault(__webpack_require__(4024));
var _trackManager = _interopRequireDefault(__webpack_require__(40769));
var _webrtcManager = _interopRequireDefault(__webpack_require__(50535));
var _renderer = _interopRequireDefault(__webpack_require__(72558));
var _logs = __webpack_require__(88915);
var _pipeline = _interopRequireDefault(__webpack_require__(39031));
var sdpHandlers = _interopRequireWildcard(__webpack_require__(4952));
var _utils = __webpack_require__(30791);
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Models.

// Managers.

// SDP helpers.

// Utils

// Re-export this function so it can be used directly instead of through the
//    initialized WebrtcStack. It is renamed because of weird import/export behaviour.
const getBrowserDetails = exports.getBrowserDetails = _utils.getBrowserDetails;

/**
 * @returns An dictionary of features that are supported on this platform.
 */
function getWebRTCSupportCapabilities() {
  return {
    mediaDevices: Boolean(navigator.mediaDevices),
    peerConnection: Boolean(window.RTCPeerConnection)
  };
}
function initialize() {
  const log = _logs.logManager.getLogger('WebRTC');
  const browserDetails = getBrowserDetails();
  if (browserDetails.version) {
    log.debug(`Browser details: ${browserDetails.browser}, version ${browserDetails.version}.`);
  } else {
    log.debug('Browser details: Not supported by webRTC adapter.');
  }
  const renderer = new _renderer.default();
  const deviceManager = new _deviceManager.default();
  const trackManager = new _trackManager.default();
  const mediaManager = new _mediaManager.default({
    trackManager
  });
  const peerManager = new _peerManager.default({
    trackManager
  });
  const sessionManager = new _sessionManager.default({
    peerManager,
    mediaManager,
    trackManager,
    deviceManager
  });
  const webrtcManager = new _webrtcManager.default();
  return {
    models: {
      Track: _track.default,
      Media: _media.default,
      Peer: _Peer.default
    },
    // TODO: Make naming consistent.
    managers: {
      devices: deviceManager,
      media: mediaManager,
      peerManager: peerManager,
      sessionManager,
      track: trackManager,
      // Give access to the Log Manager.
      // TODO: Don't include it under managers. It's here now because of
      //    ProxyStack annoyingness.
      logs: _logs.logManager,
      webrtcManager,
      renderer
    },
    sdp: {
      pipeline: _pipeline.default,
      handlers: sdpHandlers
    },
    // Export this on the webRTC stack for backwards compatibility.
    getBrowserDetails
  };
}

/***/ }),

/***/ 88915:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.logManager = void 0;
var _kandyLogger = _interopRequireDefault(__webpack_require__(17070));
const manager = (0, _kandyLogger.default)({
  level: 'DEBUG'
});
const logManager = exports.logManager = manager;

/***/ }),

/***/ 4024:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.WEBRTC_DEVICE_KINDS = void 0;
exports["default"] = DeviceManager;
var _logs = __webpack_require__(88915);
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
// Libraries.

/*
 * A conversion from MediaDeviceInfo.kind values to their more common terms.
 * See: https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/kind
 * @enum {String}
 */
const WEBRTC_DEVICE_KINDS = exports.WEBRTC_DEVICE_KINDS = {
  audioinput: 'microphone',
  videoinput: 'camera',
  audiooutput: 'speaker'
};

/**
 * Manager for connected devices.
 * Keeps an up-to-date list of all devices.
 * @class DeviceManager
 */
function DeviceManager() {
  const log = _logs.logManager.getLogger('Manager', 'Device');

  // Internal variables.
  const emitter = new _eventemitter.default();
  // Store each device type separately, so that `deviceId` is unique
  //    per kind (there is a `default` deviceId per kind).
  let microphone = [];
  let camera = [];
  let speaker = [];

  // Check devices on initialization.
  checkDevices().then(() => {
    // Emit an initial event to notify that devices are available.
    emitter.emit('change');
  });

  // Check devices whenever they change.
  let isListening = true;
  let recentDeviceChange = false;
  navigator.mediaDevices.addEventListener('devicechange', () => {
    // A physical device change results in one event per
    //    device "kind". Group the events together.
    // Only emit an event if the Manager is supposed to
    //    be listening for changes.
    if (!recentDeviceChange && isListening) {
      log.info('Media device change detected.');
      recentDeviceChange = true;
      setTimeout(() => {
        recentDeviceChange = false;
        checkDevices().then(() => {
          // Emit an event to notify of the change.
          emitter.emit('change');
        });
      }, 50);
    } else {
      log.info(`Media device change detected, but ${!isListening ? 'ignoring' : 'throttling'}.`);
    }
  });

  /**
   * Sets the Manager to watch or ignore the "device change"
   *    events from the browser.
   * @method setListening
   * @param {Boolean} flag Whether to watch for events.
   * @return {undefined}
   */
  function setListening(flag) {
    log.debug(`Listening for device changes: ${flag}`);
    isListening = flag;
  }

  /**
   * Updates the stored device lists with the latest devices.
   * @method checkDevices
   * @return {Promise}
   */
  function checkDevices() {
    log.info('Checking media devices.');
    return new Promise((resolve, reject) => {
      navigator.mediaDevices.enumerateDevices().then(devices => {
        // Clear the stored devices, to prevent duplicates.
        microphone = [];
        camera = [];
        speaker = [];
        devices.forEach(device => {
          const kind = WEBRTC_DEVICE_KINDS[device.kind];
          switch (kind) {
            case 'microphone':
              microphone.push(device);
              break;
            case 'camera':
              camera.push(device);
              break;
            case 'speaker':
              speaker.push(device);
              break;
          }
        });
        resolve(get());
      }).catch(reject);
    });
  }

  /**
   * Ask for permission and gets the list of available device(s) available from the end-user's devices.
   * @method setupDeviceInitialization
   * @param browserConstraints
   * @return {Object}
   */
  function setupDeviceInitialization(browserConstraints) {
    return new Promise((resolve, reject) => {
      navigator.mediaDevices.getUserMedia(browserConstraints).then(mediaStream => {
        mediaStream.getTracks().forEach(track => {
          track.stop();
        });
        const devices = checkDevices();
        resolve(devices);
      }).catch(reject);
    });
  }

  /**
   * Retrieves the stored device lists.
   * @method get
   * @return {Object}
   */
  function get() {
    return {
      microphone,
      camera,
      speaker
    };
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }
  function emit() {
    return emitter.emit(...arguments);
  }

  /**
   * The exposed API.
   */
  return {
    setListening,
    checkDevices,
    setupDeviceInitialization,
    get,
    on,
    once,
    off,
    emit
  };
}

/***/ }),

/***/ 34705:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = MediaManager;
var _logs = __webpack_require__(88915);
var _media = _interopRequireDefault(__webpack_require__(10662));
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
// Models that this manager directly manages.

// Libraries.

/**
 * Manager for Media objects.
 * Allows the creation and retrieval of media objects.
 * @class MediaManager
 */
function MediaManager(managers) {
  const log = _logs.logManager.getLogger('Manager', 'Media');

  // Internal variables.
  const trackManager = managers.trackManager;
  const medias = new Map();
  const emitter = new _eventemitter.default();

  /**
   * Retrieve a snapshot of all Media objects' current state.
   * @method getState
   * @return {Array}
   */
  function getState() {
    return getAll().map(id => get(id).getState());
  }

  /**
   * Workaround to get Firefox to behave similarly to Chrome regarding device permission prompts.
   * @method browserConstraintsWorkaround
   * @param  {MediaStreamConstraints}  constraints
   * @return {Object}  media constraints
   */
  function browserConstraintsWorkaround(constraints) {
    /**
     * Firefox workaround.
     *
     * Issue Summary: Browser behaviour for prompting the user for device
     *    permissions is not consistent for consecutive gUM calls. The following
     *    workaround makes it consistent if the less-specific constraint is
     *    provided.
     *
     * Context: The `deviceId` constraint format can be either a string or an
     *    object. The object format allows precise control over how the browser
     *    should try to get the track. It can be specified to fail if it can't
     *    fulfill the constraint (exact), or whether the constraint is "best
     *    effort" (ideal). When the string format is given, it follows the
     *    "ideal" behaviour.
     * See: https://developer.mozilla.org/en-US/docs/Web/API/ConstrainDOMString
     *
     *  - When the "ideal" behaviour is followed and the user has not given
     *      permission (and not disallowed), the browser will prompt the user
     *      for permission.
     *  - [Issue] When the "ideal" behaviour is followed and the user has given
     *      permission previously, the browser will not prompt the user for
     *      permission.
     *
     * Problem: When gUM is called for a different device (ideal behaviour) than
     *    permission was granted for previously, the browser will not prompt the
     *    user to give permission for the (new) device. This results in gUM
     *    using the original device for the new track.
     *
     * This happens on Firefox because the prompt for media permissions is
     *    specific to a single device. For Chrome, the prompt is generic to any
     *    device.
     * If permissions are always allowed ("remember my decision" on Firefox or
     *    default on Chrome), this issue wouldn't be seen.
     *
     * Workaround: When the behaviour (idea / exact) isn't specified, default
     *    to exact (instead of letting the browser default to ideal; as per the
     *    specification).
     *
     * This ensures that the browser always prompts the user to give permissions
     *    for the device (if not already granted). It is also more in-line with
     *    what might be expected when you ask for a certain device (ie. don't
     *    return a different device unless it was specified that it's okay).
     */
    for (const kind in constraints) {
      if (constraints[kind] && typeof constraints[kind] === 'object' && typeof constraints[kind].deviceId === 'string') {
        // Don't allow a "bare" value be provided for deviceId. Change it to use
        //    "exact".
        const id = constraints[kind].deviceId;
        constraints[kind].deviceId = {
          exact: id
        };
      }
    }
    return constraints;
  }

  /**
   * Wraps native mediaStream, adds tracks to trackManager and Media, and sets up event handlers on a given media.
   * @method setupMedia
   * @param {MediaStream} mediaStream Creating a Media object with it.
   * @param {boolean} isDetached Specifies if the track is detached and can be used with or without a call.
   * @return {Media}
   */
  function setupMedia(mediaStream, isDetached) {
    const media = new _media.default(mediaStream, true);
    log.debug(`Creating Media with ID: ${media.id}.`);

    // Only add tracks to a Media objects using the `addTrack` method.
    // Specify that this is a local track we're adding
    mediaStream.getTracks().forEach(nativeTrack => {
      const wrappedTrack = trackManager.add(nativeTrack, mediaStream, true, isDetached);
      media.addTrack(wrappedTrack);
    });
    media.once('media:stopped', mediaId => {
      remove(mediaId);
    });
    media.on('track:ended', _ref => {
      let {
        mediaId,
        trackId
      } = _ref;
      if (media.getTracks().length === 0) {
        remove(mediaId);
      }
    });
    media.on('track:muted', _ref2 => {
      let {
        mediaId,
        trackId
      } = _ref2;
    } // TBD: Add any extra behaviour (if needed) here
    );
    return media;
  }

  /**
   * Create a new local Media object.
   * Use the provided constraints to get user media as the base MediaStream.
   * @method createLocal
   * @param  {MediaStreamConstraints}  constraints
   * @param  {boolean} isDetached Specifies if the track is detached and can be used with or without a call.
   * @return {Promise}
   */
  function createLocal(constraints, isDetached) {
    const constraintsWorkaround = browserConstraintsWorkaround(constraints);

    // Get user media, ...
    return new Promise((resolve, reject) => {
      // TODO: Proper error checking.
      // TODO: Use the WebAPI directly here? Probably not.
      navigator.mediaDevices.getUserMedia(constraintsWorkaround).then(mediaStream => {
        const media = setupMedia(mediaStream, isDetached);
        medias.set(media.id, media);
        // TODO: Better event. Include metadata?
        emitter.emit('media:new', media.id);
        resolve(media);
      }).catch(reject);
    });
  }

  /**
   * Creates a new local Screen Media object.
   * Use the provided constraints to get user media as the base MediaStream.
   * @method createLocalScreen
   * @param {MediaStreamConstraints} constraints
   * @param  {boolean} isDetached Specifies if the track is detached and can be used with or without a call.
   * @return {promise}
   */
  function createLocalScreen(constraints, isDetached) {
    const constraintsWorkaround = browserConstraintsWorkaround(constraints);
    return new Promise((resolve, reject) => {
      navigator.mediaDevices.getDisplayMedia(constraintsWorkaround).then(mediaStream => {
        const media = setupMedia(mediaStream, isDetached);
        medias.set(media.id, media);
        // TODO: Better event. Include metadata?
        emitter.emit('media:new', media.id);
        resolve(media);
      }).catch(reject);
    });
  }

  /**
   * Create a new remote Media object.
   * Use provided stream/tracks as the base media objects.
   * @method createRemote
   * @param  {MediaStream} mediaStream Native MediaStream object.
   * @param  {Tracks[]} tracks Array of Track objects.
   * @return {Media}
   */
  function createRemote(stream) {
    let tracks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const media = new _media.default(stream, false);
    tracks.forEach(track => {
      media.addTrack(track);
    });
    media.once('media:stopped', mediaId => {
      remove(mediaId);
    });
    media.on('track:ended', _ref3 => {
      let {
        mediaId,
        trackId
      } = _ref3;
      if (media.getTracks().length === 0) {
        remove(mediaId);
      }
    });
    medias.set(media.id, media);
    // TODO: Better event. Include metadata?
    emitter.emit('media:new', media.id);
    return media;
  }

  /**
   * Removes a Media object from the medias array.
   * @private
   * @method remove
   * @param {String} mediaId
   */
  function remove(mediaId) {
    const media = get(mediaId);
    if (media) {
      medias.delete(mediaId);
      emitter.emit('media:removed', mediaId);
    }
  }

  /**
   * Retrieve an existing Media object.
   * @method get
   * @param  {String} mediaId ID of the desired Media object.
   * @return {Media}
   */
  function get(mediaId) {
    const media = medias.get(mediaId);
    if (!media) {
      log.debug(`No media found with ID: ${mediaId}.`);
    }
    return media;
  }

  /**
   * Retrieve a list of all existing Media object's IDs.
   * @method getAll
   * @return {Array} List of Media IDs.
   */
  function getAll() {
    return Array.from(medias.keys());
  }

  /**
   * Finds the Media object that contains the specified Track.
   * @method findTrack
   * @param  {string}  trackId The ID of the Track to find.
   * @return {string} The ID of the Media object that contains the Track.
   */
  function findTrack(trackId) {
    // Search through all Media objects for the one that has the desired track.
    const allMedia = Array.from(medias.values());
    const media = allMedia.find(media => media.getTrack(trackId));
    if (media) {
      log.debug(`Found Media (${media.id}) with Track ${trackId}.`);
      return media.id;
    } else {
      log.debug(`Found no Media with Track ${trackId}.`);
    }
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }

  /**
   * The exposed API.
   */
  return {
    // Getter APIs.
    get,
    getAll,
    getState,
    findTrack,
    // Create APIs.
    createLocal,
    createLocalScreen,
    createRemote,
    // Event APIs.
    on,
    once,
    off
  };
}

/***/ }),

/***/ 54848:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = PeerManager;
var _logs = __webpack_require__(88915);
var _Peer = _interopRequireDefault(__webpack_require__(89531));
var _uuid = __webpack_require__(60130);
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
// Libraries.

/**
 * Manager for Peer objects.
 * Allows the creation and retrieval of peer objects.
 * @method PeerManager
 */
function PeerManager(managers) {
  const log = _logs.logManager.getLogger('Manager', 'Peer');

  // Internal variables.
  const trackManager = managers.trackManager;
  const peers = new Map();
  const emitter = new _eventemitter.default();

  /**
   * Retrieve a snapshot of all Peer objects' current state.
   * @method getState
   * @return {Array}
   */
  function getState() {
    return getAll().map(id => get(id).getState());
  }

  /**
   * Create a new Peer using the provided configs.
   * @method create
   * @param  {Object} [config={}]
   * @return {Peer}
   */
  function create() {
    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const peer = new _Peer.default((0, _uuid.v4)(), config, trackManager);
    peer.once('peer:closed', id => peers.delete(id));
    peers.set(peer.id, peer);
    emitter.emit('peer:new', peer.id);
    return peer;
  }

  /**
   * Retrieves an existing Peer object.
   * @method get
   * @param  {String} id ID of the desired Peer object.
   * @return {Peer}
   */
  function get(id) {
    const peer = peers.get(id);
    if (!peer) {
      log.debug(`No Peer found with ID: ${id}.`);
    }
    return peer;
  }

  /**
   * Retrieve a list of all existing Peer object's IDs.
   * @method getAll
   * @return {Array} List of Peer IDs.
   */
  function getAll() {
    return Array.from(peers.keys());
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }

  /**
   * The exposed API.
   */
  return {
    getState,
    get,
    getAll,
    create,
    // Event APIs.
    on,
    once,
    off
  };
}

/***/ }),

/***/ 72558:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Renderer;
var _logs = __webpack_require__(88915);
var _utils = __webpack_require__(30791);
/*
 * IMPORTANT NOTE: This file is largely duplicated in other packages (search filename in project).
 * Ideally, once we complete KJS-174, we can avoid this duplication, but for now ensure changes here
 * are reflected in the duplicates as necessary.
 */

/**
 * Renderer for managing where Tracks are rendered.
 */
function Renderer() {
  /*
   * Object holding reference to all tracks currently rendered and to where.
   *    Entry format: { containers, rendererId }
   *    `containers` is the array of HTMLElements where the track is rendered.
   *    `rendererId` is the ID used when creating DOM elements for this track.
   */
  const entries = {};

  /**
   * Renders this Track as a subelement of the specified element.
   * @method renderTrack
   * @param  {HTMLElement|String} container The DOM element to be rendered in,
   *    or a unique CSS selector for the DOM element.
   * @param  {String} [speakerId] The device ID to be used for audio output.
   * @return {boolean} true if rendering of track suceeded, false otherwise.
   */
  function renderTrack(track, container, speakerId) {
    const log = _logs.logManager.getLogger('Track', track.id);
    let element;
    // If a string was provided, use it as a CSS selector to find the element.
    if (typeof container === 'string') {
      log.info(`Rendering track in element using selector: ${container}`);
      element = document.querySelector(container);
      if (!element) {
        log.error(`Unable to get container with selector: ${container}.`);
        return false;
      }
    } else {
      log.info('Rendering track in provided HTMLElement.');
      element = container;
    }
    const type = track.getState().kind;
    // Create a unique rendering ID for this track.
    const rendererId = `${type}-${(0, _utils.makeSafeForCSS)(track.id)}`;

    // Get the existing entry for this track.
    let entry = entries[track.id];
    if (entry) {
      if (entry.containers.indexOf(element) > -1) {
        // Already rendered in element.
        log.warn('Failed to render track; already rendered in element.');
        return false;
      } else {
        // Rendering the track in a second element; no issue with that.
      }
    } else {
      // Create an empty entry; track is not rendered anywhere else.
      entry = {
        containers: [],
        rendererId
      };
    }

    // Element is a valid place to render track, so add it to the entry then render it.
    entry.containers.push(element);
    const renderer = document.createElement(type);
    renderer.id = rendererId;
    renderer.style.height = '100%';
    renderer.style.width = '100%';
    const stream = track.getStream();
    try {
      renderer.srcObject = stream;
    } catch (error) {
      log.debug('srcObject property not supported; reverting to createObjectURL.');
      // TODO: AdapterJS handles this, we should remove this.
      renderer.src = window.URL.createObjectURL(stream);
    }
    renderer.autoplay = 'true';
    if (type === 'video') {
      renderer.muted = 'true';
      // Needed for IOS autoplay.
      renderer.playsInline = 'true';
      // Needed for Android.
      renderer.play().catch(err => {
        log.debug(`Could not autoplay renderer #${renderer.id}: ${err.message}`);
      });
    }

    // Set speaker if it was provided and it's supported.
    if (speakerId && typeof renderer.setSinkId !== 'undefined') {
      // TODO: Better then/catch handling.
      renderer.setSinkId(speakerId).then(() => {
        log.debug(`Set to use speaker: ${speakerId}.`);
      }).catch(error => {
        log.debug(`Could not set speaker to use ${speakerId}: ${error.message}`);
      });
    } else if (speakerId && typeof renderer.setSinkId === 'undefined') {
      log.info('Failed to set speaker; setSinkId not supported in this browser.');
    }
    element.appendChild(renderer);

    // Save the new/updated entry to the Renderer scope.
    entries[track.id] = entry;
    return true;
  }

  /**
   * Stop rendering this Track from the specified element.
   * @method unrenderTrack
   * @param  {string}      trackId   ID of the track to be unrendered.
   * @param  {HTMLElement} container The DOM element to be removed from, or
   *     a unique CSS selector for the DOM element.
   * @return {boolean} true if unrendering of track suceeded, false otherwise.
   */
  function unrenderTrack(trackId, container) {
    const log = _logs.logManager.getLogger('Track', trackId);

    // Get the existing entry for this track.
    const entry = entries[trackId];
    if (!entry) {
      log.info('Failed to unrender track; not rendered anywhere.');
      return false;
    }
    let element;
    // If a string was provided, use it as a CSS selector to find the element.
    if (typeof container === 'string') {
      log.info(`Unrendering track from element using selector: ${container}`);
      element = document.querySelector(container);
      if (!element) {
        log.error(`Unable to get container with selector: ${container}.`);
        return false;
      }
    } else {
      log.info('Unrendering track from provided HTMLElement.');
      element = container;
    }
    const index = entry.containers.findIndex(item => item === element);
    if (index === -1) {
      // Not rendered in element.
      log.info('Failed to unrender track; not rendered in element.');
      return false;
    }
    const renderer = element.querySelector(`#${entry.rendererId}`);
    if (renderer.srcObject) {
      renderer.srcObject = null;
    } else if (renderer.src) {
      renderer.src = null;
    }
    element.removeChild(renderer);
    entry.containers.splice(index, 1);
    // If this track isn't rendered anywhere anymore, remove the reference to it.
    if (entry.containers.length === 0) {
      delete entries[trackId];
    }
    return true;
  }
  return {
    renderTrack,
    unrenderTrack
  };
}

/***/ }),

/***/ 29058:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = SessionManager;
var _logs = __webpack_require__(88915);
var _session = _interopRequireDefault(__webpack_require__(30503));
var _uuid = __webpack_require__(60130);
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
// Libraries.

/**
 * Manager for Session objects.
 * Allows for creation and retrieval of session objects.
 * @method SessionManager
 */
function SessionManager(managers) {
  const log = _logs.logManager.getLogger('Manager', 'Session');
  // Internal variables.
  const sessions = new Map();
  const emitter = new _eventemitter.default();

  /**
   * Create a new Session object.
   * @method create
   * @param {Object} [config]
   * @param {Object} [config.peer] Configs for the Session's Peer object.
   * @return {Session}
   */
  function create() {
    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const session = new _session.default((0, _uuid.v4)(), managers, config);
    session.once('session:ended', id => {
      sessions.delete(id);
      emitter.emit('session:removed', id);
    });
    sessions.set(session.id, session);
    emitter.emit('session:new', session.id);
    return session;
  }

  /**
   * Retrieve an existing Session object.
   * @method get
   * @param  {String} sessionId ID of the desired Session object.
   * @return {Session}
   */
  function get(sessionId) {
    const session = sessions.get(sessionId);
    if (!session) {
      log.debug(`No session found with ID: ${sessionId}.`);
    }
    return session;
  }

  /**
   * Retrieve a list of all existing Sessions.
   * @method getAll
   * @return {Array} List of Media IDs.
   */
  function getAll() {
    return Array.from(sessions.values());
  }

  /**
   * Get an existing Session object, and add media to it before returning.
   *    This method is an optimization. It combines `sessionManager.get` and
   *    `session.addWithMedia` into a single method instead of two.
   * @method getWithMedia
   * @return {Promise} Resolves with the Session and Media objects.
   */
  function getWithMedia(sessionId, mediaConstrants) {
    const session = sessions.get(sessionId);
    if (!session) {
      log.debug(`No session found with ID: ${sessionId}.`);
      return;
    }
    return new Promise((resolve, reject) => {
      session.addNewMedia(mediaConstrants).then(medias => {
        resolve({
          session,
          medias
        });
      }).catch(reject);
    });
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }

  /**
   * The exposed API.
   */
  return {
    create,
    get,
    getAll,
    getWithMedia,
    on,
    once,
    off
  };
}

/***/ }),

/***/ 40769:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = TrackManager;
var _track = _interopRequireDefault(__webpack_require__(77836));
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
// Libraries.

/**
 * Manager / store for Track objects.
 * @method TrackManager
 */
function TrackManager() {
  /**
   * The Track objects being managed.
   * @type {Map}
   */
  const tracks = new Map();
  const emitter = new _eventemitter.default();

  /**
   * Retrieve a Track object.
   * @method get
   * @param  {string} trackId
   * @return {Track}
   */
  function get(trackId) {
    return tracks.get(trackId);
  }

  /**
   * Retrieve a list of Track objects.
   * If no tracks are specified, will return all tracks.
   * @method getTracks
   * @param  {Array} [trackIds] List of tracks to retrieve.
   * @return {Array}
   */
  function getTracks(trackIds) {
    if (trackIds) {
      return trackIds.map(trackId => tracks.get(trackId));
    } else {
      return Array.from(tracks.values());
    }
  }

  /**
   * Wraps a MediaStreamTrack into a Track object and adds
   *    it to the manager.
   * @method add
   * @param  {MediaStreamTrack} track A native track object.
   * @param  {MediaStream} stream
   * @param  {boolean} isLocalTrack Specifies if the track parameter is a local one or a remote one.
   * @param  {boolean} isDetached Specifies if the track is detached and can be used with or without a call.
   * @return {Track} The added/wrapped Track object.
   */
  function add(track, stream, isLocalTrack, isDetached) {
    const targetTrack = tracks.get(track.id);

    // Chrome issue: track.stream is outdated and needs to be updated to newStream.
    // targetTrack.stream.active is false & targetTrack.stream.getTracks() gives us an empty array.
    // stream.active is true & stream.getTracks() gives us the correct array of tracks.
    // Set/update the new stream as the track's stream
    if (targetTrack && !targetTrack.getStream().active && stream.active) {
      // The track was previously registered and is being re-added with new stream
      targetTrack.setStream(stream);
      return targetTrack;
    } else if (targetTrack) {
      // This track is already registered.
      return targetTrack;
    } else {
      // Wrap the track as a Track object.
      const wrappedTrack = new _track.default(track, stream);

      // Mark it as local (or remote) before we save it in the state
      wrappedTrack.setIsLocal(isLocalTrack);

      // Mark as detached before we save it in the state
      wrappedTrack.setIsDetached(isDetached);
      tracks.set(track.id, wrappedTrack);

      // Remove the track from the manager when it ends.
      wrappedTrack.once('ended', event => {
        if (!event.isUnsolicited || event.isDetached) {
          remove({
            trackId: track.id
          });
        }
      });
      emitter.emit('add', wrappedTrack.id);
      return wrappedTrack;
    }
  }

  /**
   * Remove a Track from the manager.
   * @method remove
   * @param  {string} trackId
   * @return {Boolean} Whether the Track existed (and hence removed).
   */
  function remove(_ref) {
    let {
      trackId
    } = _ref;
    const track = get(trackId);
    if (track) {
      emitter.emit('remove', trackId);
      tracks.delete(trackId);
      // Clean up any listeners.
      track.off('ended', remove);
    }
    return Boolean(track);
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }

  /**
   * The exposed API.
   */
  return {
    get,
    getTracks,
    add,
    remove,
    on,
    once,
    off
  };
}

/***/ }),

/***/ 50535:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = WebRTCManager;
var _Peer = __webpack_require__(89531);
var _logs = __webpack_require__(88915);
/**
 * "Manager" for general WebRTC functions.
 * @class WebRTCManager
 */
function WebRTCManager(managers) {
  const log = _logs.logManager.getLogger('Manager', 'WebRTC');

  /**
   * Retrieve the list of available and supported codecs based on the browser's capabilities for sending media.
   * @method getAvailableCodecs
   * @param {string} kind The kind of media of which to get the supported codecs of.
   * @return {Array|undefined}
   */
  function getAvailableCodecs(kind) {
    const capabilities = RTCRtpSender.getCapabilities(kind);
    if (capabilities && capabilities.codecs) {
      return capabilities.codecs;
    }
  }

  /**
   * Set provided proxies using the "set proxies" functions per WebRTC functionality
   * @param {Object} proxies An object of proxied WebRTC functionality
   * @param {Object} proxies.peerProxies An object containing WebRTC Peer functionality proxies
   */
  function setProxies(proxies) {
    // Set the provided peer proxies
    if (proxies.peer) {
      (0, _Peer.setPeerProxies)(proxies.peer);
      if (Object.keys(proxies.peer).length) {
        log.debug('Peer functionality has been updated with proxies.');
      } else {
        log.debug('Peer functionality has been updated to remove proxies.');
      }
    }

    // TODO: Set any other proxies (media? track?) as necessary
  }
  /**
   * The exposed API.
   */
  return {
    getAvailableCodecs,
    setProxies
  };
}

/***/ }),

/***/ 10662:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Media;
var _logs = __webpack_require__(88915);
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
// Libraries.

/**
 * Object to represent a "media" object.
 * Wraps a MediaStream object.
 * @class Media
 * TODO: Rename to Stream? Would be more straight-forward since Tracks can be
 *    managed directly (with trackManager), instead of through a "Media" object.
 */
function Media(nativeStream, isLocal) {
  const log = _logs.logManager.getLogger('Media', nativeStream.id);
  log.info(`Creating new ${isLocal ? 'local' : 'remote'} Media.`);

  // Internal variables.
  const id = nativeStream.id;
  const stream = nativeStream;
  const emitter = new _eventemitter.default();

  /**
   * Mapping of the IDs of this Media object's tracks to the Track object.
   * @type {Map}
   */
  const tracks = new Map();

  /**
   * Retrieve a snapshot of the Media object's current state.
   * @method getState
   * @return {Object}
   */
  function getState() {
    return {
      id: id,
      tracks: Array.from(tracks.values()).map(track => track.getState()),
      isLocal: isLocal
    };
  }

  /**
   * Add a track to this Media object.
   * @method addTrack
   * @param {Track} track The Track object to add to the Media object.
   */
  function addTrack(track) {
    if (tracks.has(track.id)) {
      log.debug(`Track (${track.id}) is already in Media (${id}).`);
      return;
    }

    // Add the native MediaStreamTrack to the MediaStream, if not already a part of the stream.
    if (!stream.getTracks().find(streamTrack => streamTrack.id === track.id)) {
      stream.addTrack(track.track);
    }

    // Add the Track to the Media object.
    tracks.set(track.id, track);

    /**
     * When a track ends, remove it from the Media object then clean it up.
     */
    track.on('ended', () => {
      const removedTrack = removeTrack(track.id);
      // Might be from old already deleted media which has no tracks anymore.
      if (removedTrack) {
        emitter.emit('track:ended', {
          mediaId: id,
          trackId: removedTrack.id
        });
      }
    });
    // TODO: Emit event or return result?
    emitter.emit('track:new', {
      mediaId: id,
      trackId: track.id
    });

    /**
     * When a track is muted, we generate our own internal event
     */
    track.on('muted', event => {
      const wrappedTrack = getTrack(event.trackId);
      if (wrappedTrack && wrappedTrack.track && wrappedTrack.track.muted) {
        // Emit our internal event.
        // Note that wrappedTrack.id is same as wrappedTrack.track & event.trackId
        emitter.emit('track:muted', {
          mediaId: id,
          trackId: event.trackId
        });
      }
    });

    /**
     * When a track is unmuted, we generate our own internal event
     */
    track.on('unmuted', event => {
      const wrappedTrack = getTrack(event.trackId);
      if (wrappedTrack && wrappedTrack.track && wrappedTrack.track.muted === false) {
        // Emit our internal event.
        // Note that wrappedTrack.id is same as wrappedTrack.track & event.trackId
        emitter.emit('track:unmuted', {
          mediaId: id,
          trackId: event.trackId
        });
      }
    });
  }

  /**
   * Remove a track from the Media object.
   * @private
   * @method removeTrack
   * @param  {string} trackId The Track to remove.
   */
  function removeTrack(trackId) {
    const track = getTrack(trackId);
    if (track) {
      tracks.delete(trackId);
      return track;
    }
  }

  /**
   * Stop all Tracks within this Media object.
   * @method stop
   */
  function stop() {
    getTracks().forEach(track => {
      track.stop();
    });
    emitter.emit('media:stopped', this.id);
  }

  /**
   * Retrieve the list of Track object this this Media object manages.
   * @method getTracks
   * @return {Array} The list of Track objects.
   */
  function getTracks() {
    return Array.from(tracks.values());
  }

  /**
   * Retrieve a specific Track object from within the Media object.
   * @method getTrack
   * @param  {String} trackId ID of the Track to retrieve.
   * @return {Track}
   */
  function getTrack(trackId) {
    return tracks.get(trackId);
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }

  /**
   * The exposed API.
   */
  return {
    id,
    tracks,
    isLocal,
    // Getter APIs.
    getState,
    getTracks,
    getTrack,
    // Create APIs.
    addTrack,
    // Cleanup APIs.
    stop,
    // Event APIs.
    on,
    once,
    off
  };
}

/***/ }),

/***/ 30503:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Session;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(26290));
var _debounce2 = _interopRequireDefault(__webpack_require__(32915));
var _logs = __webpack_require__(88915);
var _transceiverUtils = __webpack_require__(30671);
var _constants = __webpack_require__(35800);
var _pipeline = _interopRequireDefault(__webpack_require__(39031));
var _extractors = __webpack_require__(65969);
var _utils = __webpack_require__(30791);
var _iceCollectionScheduledCheck = _interopRequireDefault(__webpack_require__(85846));
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Helpers.
// SDP Helpers.
// General Utils.
// Libraries.
const unfixedDebounce = _debounce2.default.convert({
  fixed: false
});

/**
 * Object to represent a webRTC Session for a single peer.
 * "Session" being an abstraction of a webRTC connection between another peer.
 * Performs logic for initializing and connecting a peer connection.
 * Manages media added to / received from the peer connection.
 * @method Session
 */
function Session(id, managers) {
  let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const log = _logs.logManager.getLogger('Session', id);
  log.info('Creating new Session.');

  // Internal variables.
  const sessionId = id;
  let peerId;
  const peerManager = managers.peerManager;
  const mediaManager = managers.mediaManager;
  const trackManager = managers.trackManager;
  const deviceManager = managers.deviceManager;
  const emitter = new _eventemitter.default();

  // Session settings
  const settings = {
    dscpControls: {}
  };

  // This structure is used to remember the dtls role of a peer relative to some remote sdp.
  // key: the remote sdp's session id (o= line).
  // value: the dtls role that the current peer's local sdp has.
  // This is needed because a remote SDP with the same sessionId as a previous one may reappear later on
  //  (music-unhold scenario) and the roles will be expected to be the same.
  const dtlsRoleRecord = new Map();

  // The latest remote description successfully set, even if the Peer has
  //    been recreated since it was set.
  let latestRemoteDescription;

  // Create and initialize the peer
  let peer = peerManager.create(config.peer);
  if (peer) {
    // The id of the created peer
    peerId = peer.id;
    setupPeerEventHandlers(peer);
  } else {
    throw new Error(`Peer creation error in Session ${sessionId}.`);
  }

  /**
   * Records the peer's dtlsRole if it hasn't been recorded yet and associates it with a remote sdp's sessionId.
   * @method recordNewDtlsRole
   */
  function recordNewDtlsRole() {
    const remoteSdpSessionId = (0, _extractors.getSdpSessionId)(peer.remoteDescription.sdp);
    if (!dtlsRoleRecord.get(remoteSdpSessionId)) {
      dtlsRoleRecord.set(remoteSdpSessionId, peer.dtlsRole);
    }
  }

  /**
   * @property {Array} getLocalTracks List of active Track objects the Session has added locally.
   */
  function getLocalTracks() {
    const peer = peerManager.get(peerId);
    if (peer) {
      return peer.localTracks;
    } else {
      return [];
    }
  }

  /**
   * @property {Array} getAllLocalTracks List of all Track objects the Session has added locally.
   */
  function getAllLocalTracks() {
    const peer = peerManager.get(peerId);
    if (peer) {
      // Get all local Track objects, not just the active ones.
      return peer.senderTracks.map(nativeTrack => trackManager.get(nativeTrack.id));
    } else {
      return [];
    }
  }

  /**
   * @property {Array} getRemoteTracks List of active Track objects the Session has received remotely.
   */
  function getRemoteTracks() {
    const peer = peerManager.get(peerId);
    if (peer) {
      return peer.remoteTracks;
    } else {
      return [];
    }
  }

  /**
   * Retrieve a snapshot of the Session object's current state.
   * @method getState
   * @return {Object}
   */
  function getState() {
    return {
      id: sessionId,
      localTracks: getLocalTracks(),
      remoteTracks: getRemoteTracks(),
      allLocalTracks: getAllLocalTracks()
    };
  }

  /**
   * Setup a warm PeerConnection.
   * @method warmup
   */
  function warmup() {}

  /**
   * Add Track objects to the Session.
   * @method addTracks
   * @param  {Array} tracks List of Track objects.
   * @param  {Object} dscpTrackMapping Track - DSCPSettings map
   */
  function addTracks(tracks, dscpTrackMapping) {
    const peer = peerManager.get(peerId);
    // TODO: Better error handling?
    if (peer) {
      const addTrackOrReuseTransceiverPromises = tracks.map(async track => {
        // We try to find a reusable transceiver that we can attach the track to achieve the following:
        // - Avoid transceiver pollution and needing to create a brand new transceiver to attach the track to.
        // - Allow re-adding of the same track type that has been previously removed.
        //   (This is so that we can still have re-adding of tracks when using the "basic" media API which imposes a 1-audio & 1-video limit)
        const reusableTransceiver = peer.findReusableTransceiver(track.track.kind);

        // If we can find a reusable transceiver, reuse it.
        if (reusableTransceiver) {
          // Replace the dummy track on the Sender with the actual track we want to send.
          try {
            await reusableTransceiver.sender.replaceTrack(track.track);
          } catch (err) {
            log.error(err);
            throw err;
          }
          /*
           * Set the correct direction on the Transceiver to include that we now want to send:
           *   - sendrecv --> sendrecv
           *   - sendonly --> sendonly
           *   - recvonly --> sendrecv
           *   - inactive --> sendonly
           */
          reusableTransceiver.direction = ['sendrecv', 'recvonly'].includes(reusableTransceiver.direction) ? 'sendrecv' : 'sendonly';
          log.info(`Track (${track.track.kind} : ${track.id}) reused transceiver (mid: ${reusableTransceiver.mid}).`);
        } else {
          // To get around the current limitation described above, we use peerConnection's `addTrack` when we can't find a reusable transceiver.
          // `addTrack` does one of the following when called:
          // - Create a new transceiver and attaches the track and stream to the sender
          // - Find and use an existing transceiver that has never been used to send data before and attach the track and stream to the sender.
          await peer.addTransceiver(track);
          log.info(`Added track (${track.track.kind} : ${track.id}).`);
        }

        // Indicate that the Session has a new Track.
        emitter.emit('new:track', {
          local: true,
          trackId: track.id
        });

        // Add the dscpControls to the session's settings map
        settings.dscpControls = (0, _utils.mergeValues)(settings.dscpControls, dscpTrackMapping);

        // Setup event handler for once the track ends
        track.once('ended', _ref => {
          let {
            isUnsolicited
          } = _ref;
          const peer = peerManager.get(peerId);
          if (peer) {
            // If the PeerConnection is closed, we don't need to worry about
            //    removing the track (and it would throw an error anyway).
            if (peer.signalingState !== 'closed') {
              // If this track ending was expected, remove it from the Peer
              //    immediately. Otherwise another operation will remove it.
              if (!isUnsolicited) {
                peer.removeTrack(track.id);

                // Bubble the event upwards to event listeners.
                emitter.emit('track:ended', {
                  local: true,
                  trackId: track.id,
                  isUnsolicited
                });
              } else {
                // In the event this track ending was due to a device change
                // we should update our device list before notifying the client that
                // the track ended so they don't try to use a removed device
                // `true` --> Tell the SDK to _not_ bubble this event to the
                //    application; only update state. The device disconnection
                //    will trigger it's own "device change" event.
                deviceManager.emit('change', true);

                // Wait 50ms before emitting `track:ended` to allow the SDK
                // a chance to update the device list in state
                setTimeout(() => {
                  emitter.emit('track:ended', {
                    local: true,
                    trackId: track.id,
                    isUnsolicited
                  });
                }, 50);
              }

              // Remove track from session dscp settings
              if (Object.hasOwn(settings.dscpControls, track.id)) {
                log.debug(`Removing track ${track.id} from session dscp settings`);
                delete settings.dscpControls[track.id];
              }
            } else {
              log.debug(`Received ended event for track ${track.id}, but its associated Peer ${peer.id} is closed. Ignoring this event...`);
            }
          }
        });
      });
      return Promise.all(addTrackOrReuseTransceiverPromises);
    }
  }

  /**
   * Creates a local SDP offer.
   * @method createOffer
   * @param  {Object} [options] Options for configuring the SDP.
   * @param  {Object} [options.mediaDirections] Directions to use for media.
   * @param  {Array}  [options.sdpHandlers] SDP handlers for modifying the local offer.
   * @return {Promise} Resolves with the offer.
   */
  function createOffer() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
      }

      // Remove options.mediaDirections.
      // This is because directions are now set in transceivers.
      if (options.mediaDirections) {
        setTransceiversDirection(options.mediaDirections);
        delete options.mediaDirections;
      }
      peer.createOffer(options).then(offer => {
        if (options.sdpHandlers || _pipeline.default.getHandlers().length) {
          log.debug('Modifying local offer with SDP pipeline.');
          offer.sdp = _pipeline.default.run(options.sdpHandlers, offer.sdp, {
            type: offer.type,
            endpoint: _constants.PEER.ENDPOINT.LOCAL
          });
        }
        resolve(offer);
      }).catch(reject);
    });
  }

  /**
   * Sets a local SDP.
   * @method setLocalDescription
   * @param  {Object} description The description containing the SDP to set as the local description.
   * @return {Promise} Resolves with the description.
   */
  function setLocalDescription(description) {
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
      }
      peer.setLocalDescription(description).then(() => {
        // Record the peer's dtls role if setting a local answer.
        if (description.type === 'answer') {
          recordNewDtlsRole();
        }

        // Set any parameters on the peer's senders if applicable
        setParameters();

        // Resolve with the _current_ local description, which may be
        //    different than the provided description due trickle ICE config.
        resolve(peer.localDescription);
      }).catch(reject);
    });
  }

  /**
   * Rollback the local description.
   * @method rollbackLocalDescription
   * @return {Promise} Resolves with the rollbacked description or error.
   */
  function rollbackLocalDescription() {
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
      }
      peer.setLocalDescription({
        type: 'rollback'
      }).then(() => {
        resolve(peer.localDescription);
      }).catch(reject);
    });
  }

  /**
   * Parse the result of a call to the ice collection check function and act accordingly:
   *  'StartCall' type - emit the negotiation ready event
   *  'Error' type - end the session
   *  'Wait' type - Schedule a callback to the ice collection check function
   * @method iceCollectionCheckResult
   * @param {Object} result The result of ice collection check function.
   * @param {string} result.type The action to take.
   * @param {number} result.wait How many ms to wait for the next scheduled check.
   */
  function iceCollectionCheckResult(result) {
    const peer = peerManager.get(peerId);
    if (!peer) {
      return new Error(`Peer not found in Session ${sessionId}.`);
    }
    if (result.type === _constants.ICE_COLLECTION_RESULT_TYPES.START_CALL) {
      log.info('Proceeding with the negotiation as instructed by the ice collection check.');
      peer.isIceCollectionCheckOngoing = false;
      peer.emitter.emit('onnegotiationready');
    } else if (result.type === _constants.ICE_COLLECTION_RESULT_TYPES.ERROR) {
      log.info('Cleaning up session as instructed by the ice collection check.');
      peer.isIceCollectionCheckOngoing = false;
      const localTracks = getLocalTracks();
      localTracks.forEach(track => track.stop());
      end();
    } else if (result.type === _constants.ICE_COLLECTION_RESULT_TYPES.WAIT) {
      // If `result.wait` is not set, then the ice collection check function is only waiting for either
      //  ice candidate events or ice gathering state change events
      if (result.wait) {
        log.debug(`Setting a scheduled check for the ice collection check after ${result.wait} ms`);
        peer.iceLoop = setTimeout(() => (0, _iceCollectionScheduledCheck.default)(peer), result.wait);
      }
    } else {
      log.info('Unexpected result type from ICE collection check function, ending call.');
      peer.isIceCollectionCheckOngoing = false;
      const localTracks = getLocalTracks();
      localTracks.forEach(track => track.stop());
      end();
    }
  }

  /**
   * Sets parameters on the RTCRtpSenders
   * @param {Object} mediaConstraints
   */
  function setParameters(mediaConstraints) {
    // RTCRtpSender.setParameters is currently unsupported on Firefox (or at least not supported as it should be)
    if ((0, _utils.getBrowserDetails)().browser === 'firefox') {
      log.debug('Setting sender parameters not supported on Firefox; skipping.');
      return;
    }
    const promises = [];

    // Set the DSCPControls (i.e., network priorities) if set in the session's settings
    for (const trackId in settings.dscpControls) {
      promises.push(new Promise((resolve, reject) => {
        log.debug(`Setting networkPriority ${settings.dscpControls[trackId]} for sender with track ${trackId}`);
        setNetworkPriority(trackId, settings.dscpControls[trackId]).then(resolve).catch(reject);
      }));
    }
    return Promise.all(promises);
  }

  /**
   * Sets the networkPriority in the peer connection's sender's encodings.
   * @method setNetworkPriority
   * @param {string} trackId The track ID
   * @param {string} networkPriority The network priority value to set
   * @return {Promise} Resolves with the setParameters()
   */
  function setNetworkPriority(trackId, networkPriority) {
    const peer = peerManager.get(peerId);
    const senders = peer.getSenders();

    // search for a sender associated with the provided track id
    const sender = senders.find(sender => sender.track.id === trackId);
    if (sender) {
      // Need to perform a getParameters() prior to a setParameters()
      const parameters = sender.getParameters();
      parameters.encodings.forEach(encoding => {
        encoding.networkPriority = networkPriority;
      });
      return sender.setParameters(parameters);
    } else {
      const errMsg = `Cannot find sender associated with trackId: ${trackId}`;
      log.info(errMsg);
      return Promise.reject(errMsg);
    }
  }

  /**
   * Generates (and sets) a local SDP offer.
   * @method generateOffer
   * @param  {Object} [options] Options for configuring the SDP.
   * @param  {Object} [options.mediaDirections] Directions to use for media.
   * @param  {Array}  [options.sdpHandlers] SDP handlers for modifying the local offer.
   * @return {Promise} Resolves with the offer.
   */
  function generateOffer() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // Backwards compatibility: Create the offer and set it as one operation.
    return new Promise((resolve, reject) => {
      createOffer(options).then(setLocalDescription).then(resolve).catch(reject);
    });
  }

  /**
   * Replaces a specified transceiver's sender.track.
   * @method replaceTrack
   * @param {Object} newTrack The MediaStreamTrack we want to place into the sender.
   * @param {Object} options Options for specifying which transceiver's sender should be replaced. They are ordered by priority.
   * @param {String} [options.trackId] The transceiver with the specific sender.track.id.
   * @param {String} [options.mid] The transceiver with the specific media id.
   * @return {Object} A Promise object which is fulfilled once the track has been replaced
   */
  function replaceTrack(newTrack, options) {
    const peer = peerManager.get(peerId);
    const track = trackManager.get(newTrack.id);
    return peer.replaceTrack(track.track, options).then(() => {
      track.once('ended', _ref2 => {
        let {
          isUnsolicited
        } = _ref2;
        const peer = peerManager.get(peerId);
        if (peer) {
          // If the PeerConnection is closed, we don't need to worry about
          //    removing the track (and it would throw an error anyway).
          if (peer.signalingState !== 'closed') {
            // If this track ending was expected, remove it from the Peer
            //    immediately. Otherwise another operation will remove it.
            if (!isUnsolicited) {
              peer.removeTrack(track.id);
            }
            emitter.emit('track:ended', {
              local: true,
              trackId: track.id,
              isUnsolicited
            });
            // Remove track from session dscp settings
            if (Object.hasOwn(settings.dscpControls, track.id)) {
              log.debug(`Removing track ${track.id} from session dscp settings`);
              delete settings.dscpControls[track.id];
            }
          } else {
            log.debug(`Received ended event for track ${track.id}, but its associated Peer ${peer.id} is closed. Ignoring this event...`);
          }
        }
      });
      emitter.emit('track:replaced', {
        oldTrackId: options.trackId,
        trackId: newTrack.id
      });
    }).catch(err => err);
  }

  /**
   * Sets the direction of transceivers.
   * @method setTransceiversDirection
   * @param {Object} mediaDirections Options for specifying the directions we want to set for certain medias (i.e., audio and video)
   * @param {Array} [mediaDirections.audio] The direction we want to set of the transceivers with audio tracks
   * @param {Array} [mediaDirections.video] The direction we want to set of the transceivers with video tracks
   * @return {undefined}
   */
  function setTransceiversDirection(mediaDirections) {
    const peer = peerManager.get(peerId);

    // Set EVERY Transceiver's direction. This includes those with active tracks
    //    and those without.
    peer.getTransceivers().forEach(transceiver => {
      const kind = transceiver.receiver.track.kind;
      (0, _transceiverUtils.setTransceiverDirection)(transceiver, mediaDirections[kind]);
    });
  }

  /**
   * Processes (and sets) a remote SDP offer.
   * @method processOffer
   * @param  {RTCSessionDescription} offer
   * @param  {Object} [options] Options for configuring the SDP.
   * @param  {Array}  [options.sdpHandlers] SDP handlers for modifying the remote offer.
   * @return {Promise}
   */
  function processOffer(offer) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
      }
      if (options.sdpHandlers || _pipeline.default.getHandlers().length) {
        log.debug('Modifying remote offer with SDP pipeline.');
        offer.sdp = _pipeline.default.run(options.sdpHandlers, offer.sdp, {
          type: offer.type,
          endpoint: _constants.PEER.ENDPOINT.REMOTE
        });
      }
      peer.setRemoteDescription(offer).then(() => {
        // Set the offer as the latest remote description.
        latestRemoteDescription = offer;
        resolve();
      }).catch(reject);
    });
  }

  /**
   * Creates a local SDP answer.
   * @method createAnswer
   * @param  {Object} [options] Options for configuring the SDP.
   * @param  {Object} [options.mediaDirections] Directions to use for media.
   * @param  {Array}  [options.sdpHandlers] SDP handlers for modifying the local answer.
   * @return {Promise} Resolves with the answer.
   */
  function createAnswer() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
      }

      // Remove options.mediaDirections.
      // This is because directions are now set in transceivers.
      if (options.mediaDirections) {
        setTransceiversDirection(options.mediaDirections);
        delete options.mediaDirections;
      }

      // Set the dtlsRole here if the following are true:
      // - It previously existed for this specific remote sdp.
      // - It hasn't been set on a recreated peer yet.
      const remoteSdpSessionId = (0, _extractors.getSdpSessionId)(peer.remoteDescription.sdp);
      const previousDtlsRole = dtlsRoleRecord.get(remoteSdpSessionId);
      if (!peer.dtlsRole && previousDtlsRole) {
        peer.dtlsRole = previousDtlsRole;
      }
      peer.createAnswer(options).then(answer => {
        if (options.sdpHandlers || _pipeline.default.getHandlers().length) {
          log.debug('Modifying local answer with SDP pipeline.');
          answer.sdp = _pipeline.default.run(options.sdpHandlers, answer.sdp, {
            type: answer.type,
            endpoint: _constants.PEER.ENDPOINT.LOCAL
          });
        }
        resolve(answer);
      }).catch(reject);
    });
  }

  /**
   * Generates (and sets) a local SDP answer.
   * @method generateAnswer
   * @param  {Object} [options] Options for configuring the SDP.
   * @param  {Object} [options.mediaDirections] Directions to use for media.
   * @param  {Array}  [options.sdpHandlers] SDP handlers for modifying the local answer.
   * @return {Promise} Resolves with the answer.
   */
  function generateAnswer() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // For backwards compatibility: Should use other APIs directly.
    return new Promise((resolve, reject) => {
      createAnswer(options).then(setLocalDescription).then(resolve).catch(reject);
    });
  }

  /**
   * Processes (and sets) a remote SDP answer.
   * @method processAnswer
   * @param  {RTCSessionDescription} answer
   * @param  {Object} [options] Options for configuring the SDP.
   * @param  {Array}  [options.sdpHandlers] SDP handlers for modifying the remote answer.
   * @return {Promise}
   */
  function processAnswer(answer) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (options.sdpHandlers || _pipeline.default.getHandlers().length) {
      log.debug('Modifying remote answer with SDP pipeline.');
      answer.sdp = _pipeline.default.run(options.sdpHandlers, answer.sdp, {
        type: answer.type,
        endpoint: _constants.PEER.ENDPOINT.REMOTE
      });
    }
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
      }
      peer.setRemoteDescription(answer).then(() => {
        // Record the peer's dtls role.
        recordNewDtlsRole();

        // Set the answer as the latest remote description.
        latestRemoteDescription = answer;
        resolve();
      }).catch(reject);
    });
  }

  /**
   * Add an ICE candidate from the remote endpoint.
   * @method addIceCandidate
   * @param  {RTCIceCandidate} candidate
   * @param  {Object} [options]
   * @param  {string} [options.label] The Peer to perform the operation on.
   * @return {Promise}
   */
  function addIceCandidate(candidate) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
      }
      peer.addIceCandidate(candidate).then(resolve).catch(reject);
    });
  }

  /**
   * End the Session.
   * @method end
   */
  function end() {
    log.info('Ending Session.');
    const peer = peerManager.get(peerId);
    if (peer) {
      peer.close();
    }
    emitter.emit('session:ended', sessionId);
  }

  /**
   * Removes specified Track objects from the Session.
   * @method removeTrack
   * @param  {Array} trackIds List of IDs of Track objects to remove.
   */
  function removeTracks(trackIds) {
    const peer = peerManager.get(peerId);
    if (peer) {
      // Get the list of all tracks on the Peer (event ended ones).
      const allLocalTracks = peer.senderTracks;
      trackIds.forEach(trackId => {
        if (allLocalTracks.findIndex(track => track.id === trackId) > -1) {
          peer.removeTrack(trackId);
          // Remove the track from the session dscp settings
          if (Object.hasOwn(settings.dscpControls, trackId)) {
            log.debug(`Removing track ${trackId} from session dscp settings`);
            delete settings.dscpControls[trackId];
          }
        }
      });
    }
  }

  /*
   * Restarts ICE connection
   * @method restartIce
   */
  function restartIce() {
    const peer = peerManager.get(peerId);
    if (peer) {
      peer.restartIce();
    }
  }

  /*
   * Get the DTLS role of the Peer
   * @method getDtlsRole
   * @return {string} The DTLS role of the Peer
   */
  function getDtlsRole() {
    const peer = peerManager.get(peerId);
    if (peer) {
      return peer.dtlsRole;
    }
  }

  /**
   * Send DTMF tones on specified Track object from the Session.
   * @method sendDTMF
   * @param {Object} options The DTMF options.
   * @param {string} options.tone DTMF tone to send. Valid values are [0,1,2,3,4,5,6,7,8,9,#].
   * @param {number} [options.duration=100] The amount of time, in milliseconds, that each DTMF tone should last.
   * @param {number} [options.intertoneGap=70] The length of time, in milliseconds, to wait between tones.
   * @param {Object} [sendOptions] The send options.
   * @param {func} [sendOptions.callback] Optional callback for tone event .
   * @param {string} [sendOptions.trackId] The trackId of the sender to use.
   * @return {boolean} The success or fail indicator
   */
  function sendDTMF(DTMFOptions) {
    let sendOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const peer = peerManager.get(peerId);
    if (peer) {
      return peer.sendDTMF(DTMFOptions, sendOptions);
    } else {
      return false;
    }
  }

  /**
   * Retrieve RTCStatsReport from a sender.
   * @method getStats
   * @param  {string} trackId The track id associated with a sender.
   * @return {Promise}
   */
  function getStats(trackId) {
    return new Promise((resolve, reject) => {
      const peer = peerManager.get(peerId);
      if (!peer) {
        reject(new Error(`Peer not found in Session ${sessionId}.`));
        return;
      }
      peer.getStats(trackId).then(resolve).catch(reject);
    });
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }

  /**
   * Sets up event handlers on a given peer.
   * @method setupPeerEventHandlers
   * @param {PeerConnection} targetPeer The peer to set event handlers on.
   */
  function setupPeerEventHandlers(targetPeer) {
    targetPeer.oniceconnectionstatechange = event => {
      emitter.emit('peer:iceConnectionStateChange', {
        iceConnectionState: targetPeer.iceConnectionState
      });
    };

    // TODO: Use `uniqueLabel` when setting event listeners (and bubbling events).
    // When the peer gets an ICE candidate, emit it as
    //  a message to be sent to the other end.
    targetPeer.onicecandidate = event => {
      emitter.emit('onicecandidate', {
        candidate: event.candidate
      });
    };

    /*
     * Ice Collection Check Events:
     *
     * Emit an event for the session channel everytime:
     *  - the ICE gathering state changes
     *  - an ICE candidate is collected
     *  - it is time for a scheduled call to the collection check function
     *
     */
    targetPeer.onicegatheringstatechange = event => {
      // Only emit the event if we are in an ongoing ice collection check loop
      if (targetPeer.isIceCollectionCheckOngoing) {
        // Clear any previous timeout/loop
        if (targetPeer.iceLoop) {
          clearTimeout(targetPeer.iceLoop);
          targetPeer.iceLoop = undefined;
        }
        emitter.emit('peer:iceGatheringStateChange', {
          reason: _constants.ICE_COLLECTION_CHECK_REASONS.ICE_GATHERING_STATE_CHANGE,
          iceCollectionDuration: targetPeer.iceTimer.timeFromStart(),
          iceCandidates: targetPeer.iceCandidates,
          iceGatheringState: targetPeer.iceGatheringState,
          rtcPeerConnectionConfig: targetPeer.config,
          rtcLocalSessionDescription: targetPeer.localDescription
        });
      }
    };

    // Debounce the listener for the ice candidate event since they can be emitted quite quickly
    //  one after another. Options: leading:true will ensure the first invocation always occur, and
    //  trailing:false (default) ensures the last invocation will occur after the delay as appropriate.
    targetPeer.on('iceCandidateCollected', unfixedDebounce(50)(iceCollectionInfo => {
      // Only emit the event if we are in an ongoing ice collection check process
      if (targetPeer.isIceCollectionCheckOngoing) {
        // Clear any previous timeout/loop
        if (targetPeer.iceLoop) {
          clearTimeout(targetPeer.iceLoop);
          targetPeer.iceLoop = undefined;
        }
        emitter.emit('peer:iceCandidateCollected', _objectSpread({
          reason: _constants.ICE_COLLECTION_CHECK_REASONS.NEW_CANDIDATE
        }, iceCollectionInfo));
      }
    }, {
      leading: true
    }));
    targetPeer.on('scheduledCheck', iceCollectionInfo => {
      // Only emit the event if we are in an ongoing ice collection check loop
      if (targetPeer.isIceCollectionCheckOngoing) {
        // Clear any previous timeout/loop
        if (targetPeer.iceLoop) {
          clearTimeout(targetPeer.iceLoop);
          targetPeer.iceLoop = undefined;
        }
        emitter.emit('peer:iceCollectionScheduledCheck', _objectSpread({
          reason: _constants.ICE_COLLECTION_CHECK_REASONS.SCHEDULED
        }, iceCollectionInfo));
      }
    });

    // Handle when the Peer receives a new remote track.
    targetPeer.ontrack = track => {
      let media = mediaManager.get(track.getStream().id);
      if (media) {
        // Add the new Track to its Media object.
        media.addTrack(track);
      } else {
        // Create a new Media object using the Track.
        media = mediaManager.createRemote(track.getStream(), [track]);
      }
      track.once('ended', () => {
        emitter.emit('track:ended', {
          local: false,
          trackId: track.id,
          // If a remote track is ended, then a remote action triggered it. Consider
          //    this solicited since we don't want to take an action here.
          isUnsolicited: false
        });
      });
      const {
        kind
      } = track.getState();
      log.info(`Received new track (${kind} : ${track.id})`);

      // Indicate that the Session has a new Track.
      emitter.emit('new:track', {
        local: false,
        trackId: track.id
      });
    };
  }

  /**
   * Creates a new peer and replaces the current peer being used by this session.
   *     This will close the previous Peer, stopping any media being sent/received on it.
   * @method recreatePeer
   */
  async function recreatePeer() {
    const oldPeer = peer;
    const newPeer = peerManager.create(config.peer);
    if (newPeer) {
      // The id of the created peer
      peerId = newPeer.id;
      log.debug(`Recreated Peer with ID: ${peerId}`);
      peer = newPeer;

      // Copy tracks
      await Promise.all(oldPeer.localTracks.map(async oldLocalTrack => {
        await newPeer.addTransceiver(oldLocalTrack);
      }));

      // Set event handlers
      setupPeerEventHandlers(newPeer);

      // Close the old peer
      oldPeer.close();
    } else {
      throw new Error(`Peer creation error in Session ${sessionId}.`);
    }
  }
  function getPeer() {
    return peer;
  }
  function getRemoteDescription() {
    return peer.remoteDescription;
  }
  function getLatestRemoteDesc() {
    return latestRemoteDescription;
  }

  /**
   * Given a list of media section IDs, return the list of remote track IDs from
   *     the Transceivers that the media sections represent.
   * @param {Array<string>} mids List of media section IDs.
   * @return {Array<string>} List of remote track IDs.
   */
  function getRemoteTrackIdsFromTransceivers(mids) {
    const transceivers = peer.getTransceivers();
    const remoteTrackIds = [];
    // Iterate over every transceiver
    transceivers.forEach(transceiver => {
      // If the transceiver's mid value is in our list of mids, add it to the
      //    remoteTrackIds array to be returned.
      // The `if` condition looks sketchy because we are comparing a string to
      //    a number.
      if (mids.some(mid => mid + '' === transceiver.mid)) {
        const id = transceiver.receiver.track.id;
        remoteTrackIds.push(id);
      }
    });
    return remoteTrackIds;
  }

  /**
   * Get all active, incoming remote tracks that are part of the Session.
   * @return {Array<string>} List of remote track IDs.
   */
  function getIncomingRemoteTrackIds() {
    const transceivers = peer.getTransceivers();
    const remoteTrackIds = [];
    transceivers.forEach(transceiver => {
      // Check the `direction` of the transceiver.
      // For incoming calls, the `currentDirection` property will not be set since that transceiver
      // is not yet fully negotiated.
      const isReceiving = transceiver.mid !== null && transceiver.direction.includes('recv') && transceiver.receiver.track.readyState === 'live';
      if (isReceiving) {
        remoteTrackIds.push(transceiver.receiver.track.id);
      }
    });
    return remoteTrackIds;
  }

  /**
   * Get all active, remote tracks that are part of the Session.
   * @return {Array<string>} List of remote track IDs.
   */
  function getActiveRemoteTrackIds() {
    const transceivers = peer.getTransceivers();
    const remoteTrackIds = [];
    transceivers.forEach(transceiver => {
      // transceiver.mid !== null --> The Transceiver is in the SDP.
      // currentDirection --> The Transceiver has been negotiated.
      // currentDirection.includes(recv) --> It has a remote track.
      // track.readyState === live ---> It is active (...not thorough).
      const isReceiving = transceiver.mid !== null && transceiver.currentDirection && transceiver.currentDirection.includes('recv') && transceiver.receiver.track.readyState === 'live';
      if (isReceiving) {
        remoteTrackIds.push(transceiver.receiver.track.id);
      }
    });
    return remoteTrackIds;
  }

  /**
   * Session method to load an audio file and insert it into the Session by
   *    replacing an existing audio track temporarily.
   *
   * Provides feedback at two points in time:
   *    1) When the audio file starts playing, or fails to start playing.
   *        Done by fulfilling the method's Promise.
   *    2) When the audio file ends playing, or encounters an error while playing.
   *        Done by emitting an event.
   *
   * If the original audio track is replaced, but cannot be put back on the Session afterwards,
   *    it is considered an error scenario. To "fix" this, the method will stop that track.
   *    this is meant to avoid it being a "ghost" track. It will:
   *        1) Clean-up resources and release the microphone,
   *        2) Allow an application to handle it the same as any other track ending unsolicated.
   *
   * @method insertAudio
   * @param {string} filePath
   * @return {Promise} Resolves when audio file starts playing. Rejects if fails to start.
   */
  function insertAudio(filePath) {
    return new Promise((resolve, reject) => {
      let isReady = false;
      /*
       * `playIfReady` needs to be called twice to start playing the audio file.
       *    Once to ensure it "can play through".
       *    Once to ensure the media will be streamed through the Peer.
       */
      function playIfReady() {
        if (isReady) {
          audio.play();
        } else {
          isReady = true;
        }
      }

      /*
       * End the original track from the Call, but pretend that it was "unsolicited". This
       *    makes it appear the same as if something other than the SDK stopped the track
       *    so that it falls into the same error-handling scenario as them.
       */
      function endOriginalTrack() {
        log.info(`Stopping track ${oldTrack.id} to release the microphone after error.`);
        oldTrack.track.stop();
        oldTrack.track.onended(new Event('track-error'));
      }

      // Get the audio track we will be replacing temporarily.
      const peer = peerManager.get(peerId);
      const oldTrack = peer.localTracks.find(track => {
        return track.track.kind === 'audio' && track.track.readyState === 'live';
      });
      if (!oldTrack) {
        reject(new Error('No valid local audio track found to insert audio file on.'));
      }
      // The ID of the track currently on the Call.
      let currentTrackId = oldTrack.id;
      const audio = new Audio(filePath);
      // Set the volume to 20%.
      audio.volume = 0.2;

      // Create a source node from that MediaElement.
      const context = new AudioContext();
      const source = context.createMediaElementSource(audio);

      // Connect the source node to the destination (which has a MediaStream).
      const dest = context.createMediaStreamDestination();
      source.connect(dest);
      const audioTrack = dest.stream.getAudioTracks()[0];

      /*
       * Replace the existing audio track on the Peer with the file's track.
       * When it has been replaced, that is 1 of 2 conditions to be met before playing it.
       */
      peer.replaceTrack(audioTrack, {
        trackId: oldTrack.id
      }).then(() => {
        // The original track has successfully been replaced; take note of that.
        currentTrackId = audioTrack.id;
        log.debug('Replaced audio from file media.');
        playIfReady();
      }).catch(err => {
        log.info(`Failed to replace audio with file media: ${err.message}.`);
        reject(new Error('Failed to replace audio track with file media.'));
      });

      /*
       * Audio event listeners:
       *    - canplaythrough: Enough of the file has been loaded that buffering isn't needed.
       *    - play: The file has started playing.
       *    - error: An error was encountered.
       *    - ended: The file has stopped playing.
       *
       * From our usage of `audio`:
       *    - canplaythrough: Happens once, before we start playing the file.
       *    - play: Indicates we have started playing the file.
       *    - error: Most likely that the file could not start playing because `new Audio(filePath)`
       *        failed. Could also happen mid-play, but unknown.
       *    - ended: Indicates the file reached the end (successfully).
       *
       * Ref: https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement
       */

      // When the track "can play through", that is 1 of 2 conditions to be met before playing it.
      audio.oncanplaythrough = () => {
        log.debug('File media ready to be played.');
        playIfReady();
      };

      // When the file start's playing, resolve the `insertAudio` promise to provide feedback.
      audio.onplay = () => {
        log.debug(`Audio file started playing. Duration of ${audio.duration} seconds.`);
        resolve(audio.duration);
      };

      // On an error, reject the `insertAudio` promise to provide feedback.
      audio.onerror = () => {
        log.info('Encountered error trying to play audio file.');

        // If the original track is not on the Peer when this error happened,
        //    try to put it back before rejecting the `insertAudio` method.
        if (currentTrackId !== oldTrack.id) {
          peer.replaceTrack(oldTrack.track, {
            trackId: audioTrack.id
          }).catch(() => {
            // If we can't "rollback" the operation, end the original track
            //    to prevent it from becoming a "ghost" track.
            endOriginalTrack();
          });
        }
        // Reject the promise if it hasn't been fulfilled.
        reject(new Error('Failed to play audio file.'));
        // Emit a failure event in case the promise has already been fulfilled.
        emitter.emit('audioFileEnded', false);
      };

      // When the file ends, replace the original audio track back on the Peer.
      audio.onended = event => {
        log.debug('Audio file ended playing.');
        peer.replaceTrack(oldTrack.track, {
          trackId: audioTrack.id
        }).then(() => {
          log.debug('Replaced original audio track.');
          emitter.emit('audioFileEnded', true);
        }).catch(err => {
          log.info('Failed to replace original audio track.', err);
          endOriginalTrack();
          // Failed to replace the original audio track.
          emitter.emit('audioFileEnded', false);
        });
      };
    });
  }

  /**
   * Special-case method that combines getUserMedia and adding the tracks to
   *    the Session.
   * The goal of combining these methods is for Proxy-mode, to reduce the number
   *    of times messages need to cross the channel. This function reduces the
   *    trips from 3 (createLocal, getTracks, addTracks) to 1 (addNewMedia).
   * @method addNewMedia
   * @param {Object} mediaConstraints
   * @return {Promise}
   */
  function addNewMedia(constraints) {
    /*
     * Helper method that wraps the getUserMedia functions on the MediaManager.
     *    The wrapper is to prevent them from rejecting, so even a failure will
     *    resolve the promise returned by this function. This allows the calling
     *    function to wait for all promises to settle, so that media can be
     *    cleaned-up if need be. (For some reason Promise.allSettled was causing
     *    errors...)
     * @method getMedia
     */
    function getMedia(constraints) {
      const {
        audio,
        video,
        screen
      } = constraints;
      return new Promise(resolve => {
        if (audio || video) {
          mediaManager.createLocal({
            audio,
            video
          }).then(media => {
            resolve({
              status: 'fulfilled',
              value: media
            });
          }).catch(err => {
            resolve({
              status: 'rejected',
              value: err
            });
          });
        } else if (screen) {
          mediaManager.createLocalScreen({
            screen
          }).then(media => {
            resolve({
              status: 'fulfilled',
              value: media
            });
          }).catch(err => {
            resolve({
              status: 'rejected',
              value: err
            });
          });
        }
      });
    }
    return new Promise((resolve, reject) => {
      const {
        audio,
        video,
        screen
      } = constraints;
      let mediaProm, screenProm;
      if (audio || video) {
        mediaProm = getMedia({
          audio,
          video
        });
      }
      if (screen) {
        screenProm = getMedia({
          screen
        });
      }
      Promise.all([mediaProm, screenProm]).then(results => {
        if (results.some(result => result && result.status === 'rejected')) {
          // At least one promise rejected. Clean-up any successful media, then
          //    reject the original promise.
          const medias = results.filter(result => result && result.status === 'fulfilled').map(result => result.value);
          Promise.all(medias.map(media => media.stop)).then(() => {
            const err = results.find(result => result.status === 'rejected').value;
            let errMessage;
            if (err.name === 'OverconstrainedError') {
              errMessage = `Failed to get media due to constraint: ${err.constraint}.`;
            } else {
              errMessage = `Failed to get media => Name: ${err.name}; Error Message :${err.message}.`;
            }
            log.info(errMessage);
            const newErr = new Error(errMessage);
            newErr.name = err.name;
            reject(newErr);
          });
        } else {
          // All media was gathered successfully.
          const tracks = results.reduce((acc, cur) => {
            // Add the tracks from the current media object to the accumulator.
            //    If cur is undefined, just return the accumulator.
            return cur ? acc.concat(cur.value.getTracks()) : acc;
          }, []);
          addTracks(tracks).then(() => {
            const medias = results.filter(result => result && result.value).map(result => result.value);
            resolve(medias);
          }).catch(reject);
        }
      });
    });
  }

  /**
   * The exposed API.
   */
  return {
    id: sessionId,
    config,
    // Getter APIs.
    get peer() {
      return getPeer();
    },
    getState,
    get localTracks() {
      return getLocalTracks();
    },
    get remoteTracks() {
      return getRemoteTracks();
    },
    get allLocalTracks() {
      return getAllLocalTracks();
    },
    warmup,
    addTracks,
    removeTracks,
    replaceTrack,
    setTransceiversDirection,
    // Negotiation APIs.
    createOffer,
    createAnswer,
    setLocalDescription,
    getRemoteDescription,
    getLatestRemoteDesc,
    generateOffer,
    processOffer,
    generateAnswer,
    processAnswer,
    iceCollectionCheckResult,
    // Other APIs.
    recreatePeer,
    rollbackLocalDescription,
    addIceCandidate,
    restartIce,
    getDtlsRole,
    end,
    sendDTMF,
    getStats,
    setParameters,
    getRemoteTrackIdsFromTransceivers,
    getIncomingRemoteTrackIds,
    getActiveRemoteTrackIds,
    insertAudio,
    addNewMedia,
    // Event APIs.
    on,
    once,
    off
  };
}

/***/ }),

/***/ 77836:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Track;
var _logs = __webpack_require__(88915);
var _eventemitter = _interopRequireDefault(__webpack_require__(10161));
// Libraries.

/**
 * Wrapper object for a native MediaStreamTrack object.
 * Ref: https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack
 * @method Track
 */
function Track(mediaTrack, mediaStream) {
  const log = _logs.logManager.getLogger('Track', mediaTrack.id);
  log.info(`Creating new ${mediaTrack.kind} Track.`);

  // Internal variables.
  const id = mediaTrack.id;
  const track = mediaTrack;
  let stream = mediaStream;
  let isLocalTrack;
  let isDetatchedTrack;
  let constraints = {};
  const emitter = new _eventemitter.default();

  /**
   * When a track ends, the Track itself doesn't do anything about it.
   * It "bubbles" the event up to be handled at a higher level.
   */
  track.onended = event => {
    // Check whether this function was called because a native event was emitted
    //    or if it was called manually by the SDK.
    const isNative = event instanceof Event;
    const endpoint = isLocalTrack ? 'local' : 'remote';
    const trigger = isNative ? 'unsolicited' : 'solicited';
    log.debug(`Track ended (${endpoint}, ${trigger}).`, event);
    emitter.emit('ended', {
      trackId: track.id,
      /*
       * If an event triggered this listener, then it was a remote notification
       *    (for remote track) or browser action (for local track) that caused it.
       *    If it was a local track, then the track ending was not part of a
       *    renegotiation and something will need to handle this situation.
       *
       * Otherwise, the SDK called `track.onended()` when we stopped the track as
       *    part of an operation. The operation should handle the track being
       *    ended since it was solicited.
       */
      isUnsolicited: isNative,
      isDetached: isDetached()
    });
  };

  /**
   * When a track is muted, we forward this to any listener.
   * This handler is typically invoked by actions triggered outside the
   * direct control of the webrtc SDK.
   */
  track.onmute = event => {
    log.debug('Event emitted: ', event);
    emitter.emit('muted', {
      trackId: track.id,
      mediaId: stream.id,
      isLocal: isLocalTrack
    });
  };

  /**
   * When a track is unmuted, we forward this to any listener.
   * This handler is typically invoked by actions triggered outside the
   * direct control of the webrtc SDK.
   */
  track.onunmute = event => {
    log.debug('Event emitted: ', event);
    emitter.emit('unmuted', {
      trackId: track.id,
      mediaId: stream.id,
      isLocal: isLocalTrack
    });
  };
  function setIsLocal(isLocal) {
    isLocalTrack = isLocal;
  }
  function isLocal() {
    return isLocalTrack;
  }
  function setIsDetached(detached) {
    isDetatchedTrack = detached;
  }
  function isDetached() {
    return isDetatchedTrack;
  }
  function setStream(newStream) {
    stream = newStream;
  }
  function getStream() {
    return stream;
  }

  /**
   * Retrieve a snapshot of the Track object's current state.
   * @method getState
   * @return {Object}
   */
  function getState() {
    return {
      id,
      streamId: stream.id,
      kind: track.kind,
      isLocal: isLocalTrack,
      label: track.label,
      muted: track.muted,
      enabled: track.enabled,
      state: track.readyState,
      detached: isDetatchedTrack
    };
  }

  /**
   * Set this Track to be disabled and disallow the Track to render the source stream.
   * @method mute
   */
  function mute() {
    track.enabled = false;
  }

  /**
   * Set this Track to be enabled and allow the Track to render the source stream.
   * @method unmute
   */
  function unmute() {
    track.enabled = true;
  }

  /**
   * Calls native stop() function to deassociate the source and the track.
   * @method stop
   */
  function stop() {
    if (track.readyState === 'ended') {
      log.debug('Track already ended.');
      return;
    }
    track.stop();
    /**
     * Treat stopping the track the same as it being ended.
     * Normally, onended is not triggered when `stop` is called, only when it is
     *    "remotely ended".
     */
    track.onended();
  }

  /**
   * Gets the currently set constraints for the track.
   * @method getConstraints
   * @return {Object}
   */
  function getConstraints() {
    return constraints;
  }

  /**
   * Set the values for constrainable properties of the track.
   * @method applyConstraints
   * @param  {Object} constraints The list of constrainable properties.
   */
  function setConstraints(constr) {
    constraints = constr;
  }
  function on() {
    return emitter.on(...arguments);
  }
  function once() {
    return emitter.once(...arguments);
  }
  function off() {
    return emitter.off(...arguments);
  }

  /**
   * The exposed API.
   */
  return {
    id,
    // Track APIs.
    getState,
    mute,
    unmute,
    stop,
    getConstraints,
    setConstraints,
    // Event APIs.
    on,
    off,
    once,
    // The native track and stream was accessible before, so it was
    //    used when it probably shouldn't have been.
    // TODO: Find a better solution.
    track,
    setStream,
    getStream,
    setIsLocal,
    isLocal,
    setIsDetached,
    isDetached
  };
}

/***/ }),

/***/ 65969:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getSdpSessionId = getSdpSessionId;
/**
 * Extracts the session ID from the SDP.
 * Session ID is located in the o= line.
 * Ref: https://tools.ietf.org/html/rfc4566#section-5.2
 * @method getSdpSessionId
 * @param  {string} sdp A valid SDP string.
 * @return {string} The SDP's session ID.
 */
function getSdpSessionId(sdp) {
  const oLine = sdp.match(/o=.*/gm);
  if (oLine && oLine[0]) {
    return oLine[0].split(' ')[1];
  }
}

/***/ }),

/***/ 4952:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.changeMediaDirection = changeMediaDirection;
exports.preventDtlsRoleChange = preventDtlsRoleChange;
exports.removeBundling = removeBundling;
exports.removeTrickleIce = removeTrickleIce;
var _logs = __webpack_require__(88915);
var _constants = __webpack_require__(35800);
// Constants.

const log = _logs.logManager.getLogger('SdpPipeline');

/**
 * SDP handler to remove the trickle ICE option from media groups.
 * Modifies the SDP so it claims to not support trickle ICE.
 * @method removeTrickleIce
 * @param  {Object} sdp
 * @param  {Object} info
 * @param  {String} info.type
 * @param  {String} info.endpoint
 * @param  {Object} originalSdp
 * @return {Object}
 */
function removeTrickleIce(sdp, info, originalSdp) {
  sdp.media.forEach(media => {
    if (media.iceOptions === 'trickle') {
      log.debug(`Removing trickle ICE option from ${media.type} media.`);
      delete media.iceOptions;
    }
  });
  return sdp;
}

/**
 * SDP handler to delete the bundle groupings line from the SDP.
 * PeerConnections do not have an option to completely disable bundling, so
 *    manually removing the line from the SDP is needed to prevent bundling.
 * @method removeBundling
 * @param  {Object}     sdp           The session description.
 * @param  {Object}     info          Information about the session description.
 * @param  {RTCSdpType} info.type     The session description's type.
 * @param  {String}     info.endpoint Which end of the connection created the SDP.
 * @param  {Object}     originalSdp   The original SDP before any modifications.
 * @return {Object}
 */
function removeBundling(sdp, info, originalSdp) {
  if (sdp.groups) {
    log.debug('Removing SDP bundling groups.');
    delete sdp.groups;
  }
  return sdp;
}

/**
 * Currying function to create an SDP handler.
 * The SDP handler modifies the SDP to change the direction of media.
 * @method changeMediaDirection
 * @param  {Object} mediaDirections
 * @param  {string} [audio] Direction to set for audio.
 * @param  {string} [video] Direction to set for video.
 * @return {Function} SDP handler.
 */
function changeMediaDirection(_ref) {
  let {
    audio,
    video
  } = _ref;
  function isValid(direction) {
    return Object.values(_constants.MEDIA_DIR).includes(direction);
  }

  /**
   * SDP handler to change the direction of media a-lines.
   */
  return (sdp, info, originalSdp) => {
    sdp.media.forEach(media => {
      if (media.type === 'audio' && isValid(audio)) {
        media.direction = audio;
      } else if (media.type === 'video' && isValid(video)) {
        media.direction = video;
      }
    });
    return sdp;
  };
}

/**
 * SDP handler to modify the DTLS role of a locally generated answer SDP.
 *
 * The point of this SDP handler is to avoid a DTLS role conflict during a
 *    renegotiation. A role conflict occurs when DTLS roles have been selected
 *    during initial negotiation, but during renegotiation, the answerer selects
 *    the opposite role than previously used.
 *
 * This handler only needs to be used when the Peer is generating an answer SDP.
 *    That is the only point when a conflicting role can be chosen.
 *
 * This handler prevents the role changing by comparing the SDP's role with the
 *    role that the Peer previously selected. If they conflict, the Peer's
 *    previous role is used.
 *
 * Related stories: KAA-1426, KAA-1562.
 * References: https://groups.google.com/forum/#!topic/discuss-webrtc/gsw3OEAwNKo
 * @method preventDtlsRoleChange
 * @param  {Object}     newSdp          The session description.
 * @param  {Object}     info            Information about the session description.
 * @param  {RTCSdpType} info.type       The session description's type.
 * @param  {string}     info.endpoint   Which end of the connection created the SDP.
 * @param  {string}     [info.dtlsRole] The previously select DTLS role of the Peer.
 * @param  {Object}     originalSdp     The sdp in its initial state.
 * @return {Object}                     The modified SDP.
 */
function preventDtlsRoleChange(newSdp, info, originalSdp) {
  /**
   * This SDP handler only affects local answer SDPs.
   *  - Only local because we are trying to prevent role conflict issues caused
   *        by the answerer choosing the "wrong" role during a renegotiation.
   *  - Only answer because offers are always actpass.
   */
  if (info.endpoint === 'local' && info.type === 'answer') {
    for (const mLine of newSdp.media) {
      /**
       * If the generated DTLS role is different than what the Peer expects,
       *    replace it. The Peer expects the DTLS role to stay the same
       *    throughout renegotiations.
       */
      if (mLine.setup && info.dtlsRole && mLine.setup !== info.dtlsRole) {
        log.debug(`Changing DTLS role from ${mLine.setup} to ${info.dtlsRole}.`);
        mLine.setup = info.dtlsRole;
      }
    }
  }
  return newSdp;
}

/***/ }),

/***/ 39031:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.runPipeline = runPipeline;
var _isFunction2 = _interopRequireDefault(__webpack_require__(62064));
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _cloneDeep2 = _interopRequireDefault(__webpack_require__(33904));
var _sdpTransform = _interopRequireDefault(__webpack_require__(23978));
var _logs = __webpack_require__(88915);
// Libraries.

const log = _logs.logManager.getLogger('SdpPipeline');

/**
 * Basic SDP pipeline runner.
 * Does not include any default handlers.
 * @method sdpPipeline
 * @param  {Array}      handlers       List of functions that transform the SDP.
 * @param  {String}     sdp            The session description.
 * @param  {RTCSdpType} info           Information about the session description.
 * @param  {RTCSdpType} info.type      The session description's type.
 * @param  {String}     info.endpoint  Which end of the connection created the SDP.
 * @param  {Boolean}    info.isInitiator Whether this session initiated the connection or not.
 * @return {String}     The modified session description.

 */
function runPipeline(handlers, sdp, info) {
  const objectSdp = _sdpTransform.default.parse(sdp);
  const originalSdp = Object.freeze(objectSdp);
  let newSdp = (0, _cloneDeep2.default)(originalSdp);
  if ((0, _isArray2.default)(handlers)) {
    handlers.forEach(handler => {
      if ((0, _isFunction2.default)(handler)) {
        newSdp = handler(newSdp, info, originalSdp);
      } else {
        log.error('SDP handler not a function; skipping.');
      }
    });
  }
  return _sdpTransform.default.write(newSdp);
}

/**
 * Create an instance of the SDP pipeline.
 * Allows for persistent SDP handlers to be set and implicitly used.
 * @method createPipeline
 * @return {Object} An SDP pipeline.
 */
function createPipeline() {
  /**
   * SDP handlers that should be included with every pipeline run.
   * @type {Array}
   */
  let defaultHandlers = [];

  /**
   * Use the pipeline to process an SDP.
   * @method run
   * @param  {Array}      handlers      List of functions that transform the SDP.
   * @param  {String}     sdp           The session description.
   * @param  {RTCSdpType} info          Information about the session description.
   * @param  {RTCSdpType} info.type     The session description's type.
   * @param  {String}     info.endpoint Which end of the connection created the SDP.
   * @return {String}     The modified session description.
   */
  function run() {
    let handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let sdp = arguments.length > 1 ? arguments[1] : undefined;
    let info = arguments.length > 2 ? arguments[2] : undefined;
    return runPipeline(handlers.concat(defaultHandlers), sdp, info);
  }

  /**
   * Set the SDP handlers that should be included with every pipeline run.
   * @method setHandlers
   * @param  {Array} handlers List of SDP handler functions.
   */
  function setHandlers(handlers) {
    if ((0, _isArray2.default)(handlers)) {
      defaultHandlers = defaultHandlers.concat(handlers);
    }
  }

  /**
   * Get the SDP handlers that are included with every pipeline run.
   * @method getHandlers
   * @return {Array} List of SDP handler functions.
   */
  function getHandlers() {
    return defaultHandlers;
  }
  return {
    run,
    setHandlers,
    getHandlers
  };
}

// Export an instance of the pipeline to be used by everything.
var _default = exports["default"] = createPipeline();

/***/ }),

/***/ 30671:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setTransceiverDirection = setTransceiverDirection;
var _includes2 = _interopRequireDefault(__webpack_require__(34803));
var _values2 = _interopRequireDefault(__webpack_require__(32818));
var _constants = __webpack_require__(35800);
var _logs = __webpack_require__(88915);
const log = _logs.logManager.getLogger('SdpPipeline');

/**
 * Sets a transceiver's direction.
 * Checks that the desired direction is a valid one.
 * @method setTransceiverDirection
 * @param {Object} transceiver The transceiver that we want to modify.
 * @param {String} targetDirection The desired direction we want to change to.
 * @return {Boolean} Indicator on whether the transceiver direction was successfully changed.
 */
function setTransceiverDirection(transceiver, targetDirection) {
  if (!(0, _includes2.default)(targetDirection, (0, _values2.default)(_constants.MEDIA_DIR))) {
    log.info(`Invalid direction "${targetDirection}"`);
    return false;
  }

  // Only in Safari:
  //  - has transceiver.setDirection
  //  - transceiver.direction is readOnly
  if (transceiver.setDirection) {
    transceiver.setDirection(targetDirection);
  } else {
    transceiver.direction = targetDirection;
  }
  return true;
}

/***/ }),

/***/ 30791:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(71600);
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getBrowserDetails = getBrowserDetails;
exports.makeSafeForCSS = makeSafeForCSS;
exports.mergeValues = mergeValues;
var _isArray2 = _interopRequireDefault(__webpack_require__(61786));
var _mergeAllWith2 = _interopRequireDefault(__webpack_require__(38041));
var _adapter = _interopRequireDefault(__webpack_require__(73409));
// TODO: This function was copied from Kandy, we should eventually create a common project that
// can contain all of these utils that are useful in multiple packages.

/**
 * Deeply merges the values of multiple objects. Objects on the left receive the values from objects on their right.
 * Unlike lodash's default merge behavior this doesn't merge arrays.
 *
 * @name mergeValues
 * @param {...Object} objects - Objects to merge
 * @return {Object} A new object containing the merged values.
 */
function mergeValues() {
  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }
  return (0, _mergeAllWith2.default)((leftValue, rightValue) => {
    // Overwrite the default behavior of lodash's merge for arrays and simply
    // clobber what's on the left so we don't end up with merged arrays.
    if ((0, _isArray2.default)(leftValue)) {
      return rightValue;
    }
  }, objects);
}
function makeSafeForCSS(name) {
  if (!name) {
    return name;
  } else {
    return name.replace(/[^a-z0-9]/g, '');
  }
}

/**
 * @returns The browser details as provided by webrtc-adapter
 */
function getBrowserDetails() {
  return _adapter.default.browserDetails;
}

/***/ }),

/***/ 21166:
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/base64 v1.0.0 by @mathias | MIT license */
;(function(root) {

	// Detect free variables `exports`.
	var freeExports =  true && exports;

	// Detect free variable `module`.
	var freeModule =  true && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code, and use
	// it as `root`.
	var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var InvalidCharacterError = function(message) {
		this.message = message;
	};
	InvalidCharacterError.prototype = new Error;
	InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	var error = function(message) {
		// Note: the error messages used throughout this file match those used by
		// the native `atob`/`btoa` implementation in Chromium.
		throw new InvalidCharacterError(message);
	};

	var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	// http://whatwg.org/html/common-microsyntaxes.html#space-character
	var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;

	// `decode` is designed to be fully compatible with `atob` as described in the
	// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
	// The optimized base64-decoding algorithm used is based on @atkâs excellent
	// implementation. https://gist.github.com/atk/1020396
	var decode = function(input) {
		input = String(input)
			.replace(REGEX_SPACE_CHARACTERS, '');
		var length = input.length;
		if (length % 4 == 0) {
			input = input.replace(/==?$/, '');
			length = input.length;
		}
		if (
			length % 4 == 1 ||
			// http://whatwg.org/C#alphanumeric-ascii-characters
			/[^+a-zA-Z0-9/]/.test(input)
		) {
			error(
				'Invalid character: the string to be decoded is not correctly encoded.'
			);
		}
		var bitCounter = 0;
		var bitStorage;
		var buffer;
		var output = '';
		var position = -1;
		while (++position < length) {
			buffer = TABLE.indexOf(input.charAt(position));
			bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
			// Unless this is the first of a group of 4 charactersâ¦
			if (bitCounter++ % 4) {
				// â¦convert the first 8 bits to a single ASCII character.
				output += String.fromCharCode(
					0xFF & bitStorage >> (-2 * bitCounter & 6)
				);
			}
		}
		return output;
	};

	// `encode` is designed to be fully compatible with `btoa` as described in the
	// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
	var encode = function(input) {
		input = String(input);
		if (/[^\0-\xFF]/.test(input)) {
			// Note: no need to special-case astral symbols here, as surrogates are
			// matched, and the input is supposed to only contain ASCII anyway.
			error(
				'The string to be encoded contains characters outside of the ' +
				'Latin1 range.'
			);
		}
		var padding = input.length % 3;
		var output = '';
		var position = -1;
		var a;
		var b;
		var c;
		var buffer;
		// Make sure any padding is handled outside of the loop.
		var length = input.length - padding;

		while (++position < length) {
			// Read three bytes, i.e. 24 bits.
			a = input.charCodeAt(position) << 16;
			b = input.charCodeAt(++position) << 8;
			c = input.charCodeAt(++position);
			buffer = a + b + c;
			// Turn the 24 bits into four chunks of 6 bits each, and append the
			// matching character for each of them to the output.
			output += (
				TABLE.charAt(buffer >> 18 & 0x3F) +
				TABLE.charAt(buffer >> 12 & 0x3F) +
				TABLE.charAt(buffer >> 6 & 0x3F) +
				TABLE.charAt(buffer & 0x3F)
			);
		}

		if (padding == 2) {
			a = input.charCodeAt(position) << 8;
			b = input.charCodeAt(++position);
			buffer = a + b;
			output += (
				TABLE.charAt(buffer >> 10) +
				TABLE.charAt((buffer >> 4) & 0x3F) +
				TABLE.charAt((buffer << 2) & 0x3F) +
				'='
			);
		} else if (padding == 1) {
			buffer = input.charCodeAt(position);
			output += (
				TABLE.charAt(buffer >> 2) +
				TABLE.charAt((buffer << 4) & 0x3F) +
				'=='
			);
		}

		return output;
	};

	var base64 = {
		'encode': encode,
		'decode': decode,
		'version': '1.0.0'
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return base64;
		}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}	else { var key; }

}(this));


/***/ }),

/***/ 39146:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * BottleJS v2.0.1 - 2022-06-28
 * A powerful dependency injection micro container
 *
 * Copyright (c) 2022 Stephen Young
 * Licensed MIT
 */
var Bottle;

/**
 * String constants
 */
var DELIMITER = '.';
var FUNCTION_TYPE = 'function';
var STRING_TYPE = 'string';
var GLOBAL_NAME = '__global__';
var PROVIDER_SUFFIX = 'Provider';

/**
 * Unique id counter;
 *
 * @type Number
 */
var id = 0;

/**
 * Local slice alias
 *
 * @type Functions
 */
var slice = Array.prototype.slice;

/**
 * Iterator used to walk down a nested object.
 *
 * If Bottle.config.strict is true, this method will throw an exception if it encounters an
 * undefined path
 *
 * @param Object obj
 * @param String prop
 * @return mixed
 * @throws Error if Bottle is unable to resolve the requested service.
 */
var getNested = function getNested(obj, prop) {
    var service = obj[prop];
    if (service === undefined && Bottle.config.strict) {
        throw new Error('Bottle was unable to resolve a service.  `' + prop + '` is undefined.');
    }
    return service;
};

/**
 * Get a nested bottle. Will set and return if not set.
 *
 * @param String name
 * @return Bottle
 */
var getNestedBottle = function getNestedBottle(name) {
    var bottle;
    if (!this.nested[name]) {
        bottle = Bottle.pop();
        this.nested[name] = bottle;
        this.factory(name, function SubProviderFactory() {
            return bottle.container;
        });
    }
    return this.nested[name];
};

/**
 * Get a service stored under a nested key
 *
 * @param String fullname
 * @return Service
 */
var getNestedService = function getNestedService(fullname) {
    return fullname.split(DELIMITER).reduce(getNested, this);
};

/**
 * Function used by provider to set up middleware for each request.
 *
 * @param Number id
 * @param String name
 * @param Object instance
 * @param Object container
 * @return void
 */
var applyMiddleware = function applyMiddleware(middleware, name, instance, container) {
    var descriptor = {
        configurable : true,
        enumerable : true
    };
    if (middleware.length) {
        descriptor.get = function getWithMiddlewear() {
            var index = 0;
            var next = function nextMiddleware(err) {
                if (err) {
                    throw err;
                }
                if (middleware[index]) {
                    middleware[index++](instance, next);
                }
            };
            next();
            return instance;
        };
    } else {
        descriptor.value = instance;
        descriptor.writable = true;
    }

    Object.defineProperty(container, name, descriptor);

    return container[name];
};

/**
 * Register middleware.
 *
 * @param String name
 * @param Function func
 * @return Bottle
 */
var middleware = function middleware(fullname, func) {
    var parts, name;
    if (typeof fullname === FUNCTION_TYPE) {
        func = fullname;
        fullname = GLOBAL_NAME;
    }

    parts = fullname.split(DELIMITER);
    name = parts.shift();
    if (parts.length) {
        getNestedBottle.call(this, name).middleware(parts.join(DELIMITER), func);
    } else {
        if (!this.middlewares[name]) {
            this.middlewares[name] = [];
        }
        this.middlewares[name].push(func);
    }
    return this;
};

/**
 * Used to process decorators in the provider
 *
 * @param Object instance
 * @param Function func
 * @return Mixed
 */
var reducer = function reducer(instance, func) {
    return func(instance);
};


/**
 * Get decorators and middleware including globals
 *
 * @return array
 */
var getWithGlobal = function getWithGlobal(collection, name) {
    return (collection[name] || []).concat(collection.__global__ || []);
};


/**
 * Create the provider properties on the container
 *
 * @param String name
 * @param Function Provider
 * @return Bottle
 */
var createProvider = function createProvider(name, Provider) {
    var providerName, properties, container, id, decorators, middlewares;

    id = this.id;
    container = this.container;
    decorators = this.decorators;
    middlewares = this.middlewares;
    providerName = name + PROVIDER_SUFFIX;

    properties = Object.create(null);
    properties[providerName] = {
        configurable : true,
        enumerable : true,
        get : function getProvider() {
            var instance = new Provider();
            delete container[providerName];
            container[providerName] = instance;
            return instance;
        }
    };

    properties[name] = {
        configurable : true,
        enumerable : true,
        get : function getService() {
            var provider = container[providerName];
            var instance;
            if (provider) {
                // filter through decorators
                instance = getWithGlobal(decorators, name).reduce(reducer, provider.$get(container));

                delete container[providerName];
                delete container[name];
            }
            return instance === undefined ? instance : applyMiddleware(getWithGlobal(middlewares, name),
                name, instance, container);
        }
    };

    Object.defineProperties(container, properties);
    return this;
};


/**
 * Register a provider.
 *
 * @param String fullname
 * @param Function Provider
 * @return Bottle
 */
var provider = function provider(fullname, Provider) {
    var parts, name;
    parts = fullname.split(DELIMITER);
    if (this.providerMap[fullname] && parts.length === 1 && !this.container[fullname + PROVIDER_SUFFIX]) {
        return console.error(fullname + ' provider already instantiated.');
    }
    this.originalProviders[fullname] = Provider;
    this.providerMap[fullname] = true;

    name = parts.shift();

    if (parts.length) {
        getNestedBottle.call(this, name).provider(parts.join(DELIMITER), Provider);
        return this;
    }
    return createProvider.call(this, name, Provider);
};

/**
 * Register a factory inside a generic provider.
 *
 * @param String name
 * @param Function Factory
 * @return Bottle
 */
var factory = function factory(name, Factory) {
    return provider.call(this, name, function GenericProvider() {
        this.$get = Factory;
    });
};

/**
 * Private helper for creating service and service factories.
 *
 * @param String name
 * @param Function Service
 * @return Bottle
 */
var createService = function createService(name, Service, isClass) {
    var deps = arguments.length > 3 ? slice.call(arguments, 3) : [];
    var bottle = this;
    return factory.call(this, name, function GenericFactory() {
        var serviceFactory = Service; // alias for jshint
        var args = deps.map(getNestedService, bottle.container);

        if (!isClass) {
            return serviceFactory.apply(null, args);
        }
        return new (Service.bind.apply(Service, [null].concat(args)))();
    });
};

/**
 * Register a class service
 *
 * @param String name
 * @param Function Service
 * @return Bottle
 */
var service = function service(name, Service) {
    return createService.apply(this, [name, Service, true].concat(slice.call(arguments, 2)));
};

/**
 * Register a function service
 */
var serviceFactory = function serviceFactory(name, factoryService) {
    return createService.apply(this, [name, factoryService, false].concat(slice.call(arguments, 2)));
};

/**
 * Define a mutable property on the container.
 *
 * @param String name
 * @param mixed val
 * @return void
 * @scope container
 */
var defineValue = function defineValue(name, val) {
    Object.defineProperty(this, name, {
        configurable : true,
        enumerable : true,
        value : val,
        writable : true
    });
};

/**
 * Iterator for setting a plain object literal via defineValue
 *
 * @param Object container
 * @param string name
 */
var setValueObject = function setValueObject(container, name) {
    var nestedContainer = container[name];
    if (!nestedContainer) {
        nestedContainer = {};
        defineValue.call(container, name, nestedContainer);
    }
    return nestedContainer;
};


/**
 * Register a value
 *
 * @param String name
 * @param mixed val
 * @return Bottle
 */
var value = function value(name, val) {
    var parts;
    parts = name.split(DELIMITER);
    name = parts.pop();
    defineValue.call(parts.reduce(setValueObject, this.container), name, val);
    return this;
};

/**
 * Define an enumerable, non-configurable, non-writable value.
 *
 * @param String name
 * @param mixed value
 * @return undefined
 */
var defineConstant = function defineConstant(name, value) {
    Object.defineProperty(this, name, {
        configurable : false,
        enumerable : true,
        value : value,
        writable : false
    });
};

/**
 * Register a constant
 *
 * @param String name
 * @param mixed value
 * @return Bottle
 */
var constant = function constant(name, value) {
    var parts = name.split(DELIMITER);
    name = parts.pop();
    defineConstant.call(parts.reduce(setValueObject, this.container), name, value);
    return this;
};

/**
 * Register decorator.
 *
 * @param String fullname
 * @param Function func
 * @return Bottle
 */
var decorator = function decorator(fullname, func) {
    var parts, name;
    if (typeof fullname === FUNCTION_TYPE) {
        func = fullname;
        fullname = GLOBAL_NAME;
    }

    parts = fullname.split(DELIMITER);
    name = parts.shift();
    if (parts.length) {
        getNestedBottle.call(this, name).decorator(parts.join(DELIMITER), func);
    } else {
        if (!this.decorators[name]) {
            this.decorators[name] = [];
        }
        this.decorators[name].push(func);
    }
    return this;
};

/**
 * Register a function that will be executed when Bottle#resolve is called.
 *
 * @param Function func
 * @return Bottle
 */
var defer = function defer(func) {
    this.deferred.push(func);
    return this;
};


/**
 * Immediately instantiates the provided list of services and returns them.
 *
 * @param Array services
 * @return Array Array of instances (in the order they were provided)
 */
var digest = function digest(services) {
    return (services || []).map(getNestedService, this.container);
};

/**
 * Register an instance factory inside a generic factory.
 *
 * @param {String} name - The name of the service
 * @param {Function} Factory - The factory function, matches the signature required for the
 * `factory` method
 * @return Bottle
 */
var instanceFactory = function instanceFactory(name, Factory) {
    return factory.call(this, name, function GenericInstanceFactory(container) {
        return {
            instance : Factory.bind(Factory, container)
        };
    });
};

/**
 * A filter function for removing bottle container methods and providers from a list of keys
 */
var byMethod = function byMethod(name) {
    return !/^\$(?:decorator|register|list)$|Provider$/.test(name);
};

/**
 * List the services registered on the container.
 *
 * @param Object container
 * @return Array
 */
var list = function list(container) {
    return Object.keys(container || this.container || {}).filter(byMethod);
};

/**
 * Named bottle instances
 *
 * @type Object
 */
var bottles = {};

/**
 * Get an instance of bottle.
 *
 * If a name is provided the instance will be stored in a local hash.  Calling Bottle.pop multiple
 * times with the same name will return the same instance.
 *
 * @param String name
 * @return Bottle
 */
var pop = function pop(name) {
    var instance;
    if (typeof name === STRING_TYPE) {
        instance = bottles[name];
        if (!instance) {
            bottles[name] = instance = new Bottle();
            instance.constant('BOTTLE_NAME', name);
        }
        return instance;
    }
    return new Bottle();
};

/**
 * Clear all named bottles.
 */
var clear = function clear(name) {
    if (typeof name === STRING_TYPE) {
        delete bottles[name];
    } else {
        bottles = {};
    }
};

/**
 * Register a service, factory, provider, or value based on properties on the object.
 *
 * properties:
 *  * Obj.$name   String required ex: `'Thing'`
 *  * Obj.$type   String optional 'service', 'factory', 'provider', 'value'.  Default: 'service'
 *  * Obj.$inject Mixed  optional only useful with $type 'service' name or array of names
 *  * Obj.$value  Mixed  optional Normally Obj is registered on the container.  However, if this
 *                       property is included, it's value will be registered on the container
 *                       instead of the object itsself.  Useful for registering objects on the
 *                       bottle container without modifying those objects with bottle specific keys.
 *
 * @param Function Obj
 * @return Bottle
 */
var register = function register(Obj) {
    var value = Obj.$value === undefined ? Obj : Obj.$value;
    return this[Obj.$type || 'service'].apply(this, [Obj.$name, value].concat(Obj.$inject || []));
};

/**
 * Deletes providers from the map and container.
 *
 * @param String name
 * @return void
 */
var removeProviderMap = function resetProvider(name) {
    delete this.providerMap[name];
    delete this.container[name];
    delete this.container[name + PROVIDER_SUFFIX];
};

/**
 * Resets providers on a bottle instance. If 'names' array is provided, only the named providers will be reset.
 *
 * @param Array names
 * @return void
 */
var resetProviders = function resetProviders(names) {
    var tempProviders = this.originalProviders;
    var shouldFilter = Array.isArray(names);

    Object.keys(this.originalProviders).forEach(function resetProvider(originalProviderName) {
        if (shouldFilter && names.indexOf(originalProviderName) === -1) {
            return;
        }
        var parts = originalProviderName.split(DELIMITER);
        if (parts.length > 1) {
            parts.forEach(removeProviderMap, getNestedBottle.call(this, parts[0]));
        }
        removeProviderMap.call(this, originalProviderName);
        this.provider(originalProviderName, tempProviders[originalProviderName]);
    }, this);
};


/**
 * Execute any deferred functions
 *
 * @param Mixed data
 * @return Bottle
 */
var resolve = function resolve(data) {
    this.deferred.forEach(function deferredIterator(func) {
        func(data);
    });

    return this;
};


/**
 * Bottle constructor
 *
 * @param String name Optional name for functional construction
 */
Bottle = function Bottle(name) {
    if (!(this instanceof Bottle)) {
        return Bottle.pop(name);
    }

    this.id = id++;

    this.decorators = {};
    this.middlewares = {};
    this.nested = {};
    this.providerMap = {};
    this.originalProviders = {};
    this.deferred = [];
    this.container = {
        $decorator : decorator.bind(this),
        $register : register.bind(this),
        $list : list.bind(this)
    };
};

/**
 * Bottle prototype
 */
Bottle.prototype = {
    constant : constant,
    decorator : decorator,
    defer : defer,
    digest : digest,
    factory : factory,
    instanceFactory: instanceFactory,
    list : list,
    middleware : middleware,
    provider : provider,
    resetProviders : resetProviders,
    register : register,
    resolve : resolve,
    service : service,
    serviceFactory : serviceFactory,
    value : value
};

/**
 * Bottle static
 */
Bottle.pop = pop;
Bottle.clear = clear;
Bottle.list = list;

/**
 * Global config
 */
Bottle.config = {
    strict : false
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Bottle);

/***/ }),

/***/ 12181:
/***/ ((module) => {

"use strict";

module.exports = {
	stdout: false,
	stderr: false
};


/***/ }),

/***/ 2645:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const ansiStyles = __webpack_require__(49640);
const {stdout: stdoutColor, stderr: stderrColor} = __webpack_require__(12181);
const {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
} = __webpack_require__(51957);

const {isArray} = Array;

// `supportsColor.level` â `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m'
];

const styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class ChalkClass {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = {};
	applyOptions(chalk, options);

	chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);

	Object.setPrototypeOf(chalk, Chalk.prototype);
	Object.setPrototypeOf(chalk.template, chalk);

	chalk.template.constructor = () => {
		throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
	};

	chalk.template.Instance = ChalkClass;

	return chalk.template;
};

function Chalk(options) {
	return chalkFactory(options);
}

for (const [styleName, style] of Object.entries(ansiStyles)) {
	styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		}
	};
}

styles.visible = {
	get() {
		const builder = createBuilder(this, this._styler, true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	}
};

const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

for (const model of usedModels) {
	styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

for (const model of usedModels) {
	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

const proto = Object.defineProperties(() => {}, {
	...styles,
	level: {
		enumerable: true,
		get() {
			return this._generator.level;
		},
		set(level) {
			this._generator.level = level;
		}
	}
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	const builder = (...arguments_) => {
		if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
			// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
			return applyStyle(builder, chalkTag(builder, ...arguments_));
		}

		// Single argument is hot path, implicit coercion is faster than anything
		// eslint-disable-next-line no-implicit-coercion
		return applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
	};

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder._generator = self;
	builder._styler = _styler;
	builder._isEmpty = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self._isEmpty ? '' : string;
	}

	let styler = self._styler;

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.indexOf('\u001B') !== -1) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

let template;
const chalkTag = (chalk, ...strings) => {
	const [firstString] = strings;

	if (!isArray(firstString) || !isArray(firstString.raw)) {
		// If chalk() was called by itself or with a string,
		// return the string itself as a string.
		return strings.join(' ');
	}

	const arguments_ = strings.slice(1);
	const parts = [firstString.raw[0]];

	for (let i = 1; i < firstString.length; i++) {
		parts.push(
			String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
			String(firstString.raw[i])
		);
	}

	if (template === undefined) {
		template = __webpack_require__(1070);
	}

	return template(chalk, parts.join(''));
};

Object.defineProperties(Chalk.prototype, styles);

const chalk = Chalk(); // eslint-disable-line new-cap
chalk.supportsColor = stdoutColor;
chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap
chalk.stderr.supportsColor = stderrColor;

module.exports = chalk;


/***/ }),

/***/ 1070:
/***/ ((module) => {

"use strict";

const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

const ESCAPES = new Map([
	['n', '\n'],
	['r', '\r'],
	['t', '\t'],
	['b', '\b'],
	['f', '\f'],
	['v', '\v'],
	['0', '\0'],
	['\\', '\\'],
	['e', '\u001B'],
	['a', '\u0007']
]);

function unescape(c) {
	const u = c[0] === 'u';
	const bracket = c[1] === '{';

	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
		return String.fromCharCode(parseInt(c.slice(1), 16));
	}

	if (u && bracket) {
		return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
	}

	return ESCAPES.get(c) || c;
}

function parseArguments(name, arguments_) {
	const results = [];
	const chunks = arguments_.trim().split(/\s*,\s*/g);
	let matches;

	for (const chunk of chunks) {
		const number = Number(chunk);
		if (!Number.isNaN(number)) {
			results.push(number);
		} else if ((matches = chunk.match(STRING_REGEX))) {
			results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
		} else {
			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
		}
	}

	return results;
}

function parseStyle(style) {
	STYLE_REGEX.lastIndex = 0;

	const results = [];
	let matches;

	while ((matches = STYLE_REGEX.exec(style)) !== null) {
		const name = matches[1];

		if (matches[2]) {
			const args = parseArguments(name, matches[2]);
			results.push([name].concat(args));
		} else {
			results.push([name]);
		}
	}

	return results;
}

function buildStyle(chalk, styles) {
	const enabled = {};

	for (const layer of styles) {
		for (const style of layer.styles) {
			enabled[style[0]] = layer.inverse ? null : style.slice(1);
		}
	}

	let current = chalk;
	for (const [styleName, styles] of Object.entries(enabled)) {
		if (!Array.isArray(styles)) {
			continue;
		}

		if (!(styleName in current)) {
			throw new Error(`Unknown Chalk style: ${styleName}`);
		}

		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
	}

	return current;
}

module.exports = (chalk, temporary) => {
	const styles = [];
	const chunks = [];
	let chunk = [];

	// eslint-disable-next-line max-params
	temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
		if (escapeCharacter) {
			chunk.push(unescape(escapeCharacter));
		} else if (style) {
			const string = chunk.join('');
			chunk = [];
			chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
			styles.push({inverse, styles: parseStyle(style)});
		} else if (close) {
			if (styles.length === 0) {
				throw new Error('Found extraneous } in Chalk template literal');
			}

			chunks.push(buildStyle(chalk, styles)(chunk.join('')));
			chunk = [];
			styles.pop();
		} else {
			chunk.push(character);
		}
	});

	chunks.push(chunk.join(''));

	if (styles.length > 0) {
		const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
		throw new Error(errMessage);
	}

	return chunks.join('');
};


/***/ }),

/***/ 51957:
/***/ ((module) => {

"use strict";


const stringReplaceAll = (string, substring, replacer) => {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

module.exports = {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
};


/***/ }),

/***/ 11103:
/***/ ((module) => {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ 15554:
/***/ ((module) => {

"use strict";

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return [decodeURIComponent(components.join(''))];
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher) || [];

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher) || [];
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

module.exports = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};


/***/ }),

/***/ 10161:
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ 40063:
/***/ ((module) => {

"use strict";

module.exports = function (obj, predicate) {
	var ret = {};
	var keys = Object.keys(obj);
	var isArr = Array.isArray(predicate);

	for (var i = 0; i < keys.length; i++) {
		var key = keys[i];
		var val = obj[key];

		if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
			ret[key] = val;
		}
	}

	return ret;
};


/***/ }),

/***/ 47677:
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (false) {}

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;


/***/ }),

/***/ 32877:
/***/ ((module) => {

module.exports = curry;

/*
  function add(a, b, c) {
    return a + b + c;
  }
  curry(add)(1)(2)(3); // 6
  curry(add)(1)(2)(2); // 5
  curry(add)(2)(4, 3); // 9

  function add(...args) {
    return args.reduce((sum, n) => sum + n, 0)
  }
  var curryAdd4 = curry(add, 4)
  curryAdd4(1)(2, 3)(4); // 10

  function converter(ratio, input) {
    return (input*ratio).toFixed(1);
  }
  const curriedConverter = curry(converter)
  const milesToKm = curriedConverter(1.62);
  milesToKm(35); // 56.7
  milesToKm(10); // 16.2
*/

function curry(fn, arity) {
  return function curried() {
    if (arity == null) {
      arity = fn.length;
    }
    var args = [].slice.call(arguments);
    if (args.length >= arity) {
      return fn.apply(this, args);
    } else {
      return function() {
        return curried.apply(this, args.concat([].slice.call(arguments)));
      };
    }
  };
}


/***/ }),

/***/ 39515:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(38761),
    root = __webpack_require__(37772);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ 89612:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__(52118),
    hashDelete = __webpack_require__(96909),
    hashGet = __webpack_require__(98138),
    hashHas = __webpack_require__(4174),
    hashSet = __webpack_require__(7942);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ 66504:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(39413),
    baseLodash = __webpack_require__(73620);

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */
function LazyWrapper(value) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__dir__ = 1;
  this.__filtered__ = false;
  this.__iteratees__ = [];
  this.__takeCount__ = MAX_ARRAY_LENGTH;
  this.__views__ = [];
}

// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;

module.exports = LazyWrapper;


/***/ }),

/***/ 80235:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(3945),
    listCacheDelete = __webpack_require__(21846),
    listCacheGet = __webpack_require__(88028),
    listCacheHas = __webpack_require__(72344),
    listCacheSet = __webpack_require__(94769);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ 45859:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(39413),
    baseLodash = __webpack_require__(73620);

/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */
function LodashWrapper(value, chainAll) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__chain__ = !!chainAll;
  this.__index__ = 0;
  this.__values__ = undefined;
}

LodashWrapper.prototype = baseCreate(baseLodash.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;

module.exports = LodashWrapper;


/***/ }),

/***/ 10326:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(38761),
    root = __webpack_require__(37772);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ 96738:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__(92411),
    mapCacheDelete = __webpack_require__(36417),
    mapCacheGet = __webpack_require__(86928),
    mapCacheHas = __webpack_require__(79493),
    mapCacheSet = __webpack_require__(24150);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ 52760:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(38761),
    root = __webpack_require__(37772);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ 2143:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(38761),
    root = __webpack_require__(37772);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ 45386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(96738),
    setCacheAdd = __webpack_require__(52842),
    setCacheHas = __webpack_require__(52482);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ 86571:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(80235),
    stackClear = __webpack_require__(15243),
    stackDelete = __webpack_require__(72858),
    stackGet = __webpack_require__(4417),
    stackHas = __webpack_require__(8605),
    stackSet = __webpack_require__(71418);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ 50857:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(37772);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ 79162:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(37772);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ 93215:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(38761),
    root = __webpack_require__(37772);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ 49432:
/***/ ((module) => {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),

/***/ 72517:
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ 67552:
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ 38333:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__(77832);

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;


/***/ }),

/***/ 34893:
/***/ ((module) => {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;


/***/ }),

/***/ 1634:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__(36473),
    isArguments = __webpack_require__(79631),
    isArray = __webpack_require__(86152),
    isBuffer = __webpack_require__(73226),
    isIndex = __webpack_require__(39045),
    isTypedArray = __webpack_require__(77598);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ 50343:
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ 65067:
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ 87064:
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ 50217:
/***/ ((module) => {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;


/***/ }),

/***/ 28582:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(13940),
    eq = __webpack_require__(41225);

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;


/***/ }),

/***/ 60091:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(13940),
    eq = __webpack_require__(41225);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ 22218:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(41225);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ 67993:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(752),
    keys = __webpack_require__(90249);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ 55906:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(752),
    keysIn = __webpack_require__(18582);

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ 13940:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__(83043);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ 18874:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(86571),
    arrayEach = __webpack_require__(72517),
    assignValue = __webpack_require__(60091),
    baseAssign = __webpack_require__(67993),
    baseAssignIn = __webpack_require__(55906),
    cloneBuffer = __webpack_require__(92175),
    copyArray = __webpack_require__(51522),
    copySymbols = __webpack_require__(7680),
    copySymbolsIn = __webpack_require__(19987),
    getAllKeys = __webpack_require__(13483),
    getAllKeysIn = __webpack_require__(76939),
    getTag = __webpack_require__(70940),
    initCloneArray = __webpack_require__(99917),
    initCloneByTag = __webpack_require__(8222),
    initCloneObject = __webpack_require__(78725),
    isArray = __webpack_require__(86152),
    isBuffer = __webpack_require__(73226),
    isMap = __webpack_require__(4714),
    isObject = __webpack_require__(29259),
    isSet = __webpack_require__(43679),
    keys = __webpack_require__(90249),
    keysIn = __webpack_require__(18582);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ 39413:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(29259);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ 85246:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(45386),
    arrayIncludes = __webpack_require__(38333),
    arrayIncludesWith = __webpack_require__(34893),
    arrayMap = __webpack_require__(50343),
    baseUnary = __webpack_require__(47826),
    cacheHas = __webpack_require__(59950);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;


/***/ }),

/***/ 24303:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseForOwn = __webpack_require__(26548),
    createBaseEach = __webpack_require__(92019);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),

/***/ 21359:
/***/ ((module) => {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;


/***/ }),

/***/ 62034:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(65067),
    isFlattenable = __webpack_require__(95882);

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;


/***/ }),

/***/ 15308:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__(55463);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ 26548:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__(15308),
    keys = __webpack_require__(90249);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),

/***/ 13324:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(17297),
    toKey = __webpack_require__(33812);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ 1897:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(65067),
    isArray = __webpack_require__(86152);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ 53366:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(50857),
    getRawTag = __webpack_require__(62107),
    objectToString = __webpack_require__(37157);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ 32726:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;


/***/ }),

/***/ 20187:
/***/ ((module) => {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),

/***/ 77832:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFindIndex = __webpack_require__(21359),
    baseIsNaN = __webpack_require__(22195),
    strictIndexOf = __webpack_require__(66024);

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;


/***/ }),

/***/ 15183:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ 88746:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__(51952),
    isObjectLike = __webpack_require__(15125);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ 51952:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(86571),
    equalArrays = __webpack_require__(74871),
    equalByTag = __webpack_require__(11491),
    equalObjects = __webpack_require__(17416),
    getTag = __webpack_require__(70940),
    isArray = __webpack_require__(86152),
    isBuffer = __webpack_require__(73226),
    isTypedArray = __webpack_require__(77598);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ 74511:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(70940),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ 37036:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(86571),
    baseIsEqual = __webpack_require__(88746);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),

/***/ 22195:
/***/ ((module) => {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;


/***/ }),

/***/ 6840:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(61049),
    isMasked = __webpack_require__(47394),
    isObject = __webpack_require__(29259),
    toSource = __webpack_require__(87035);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ 8109:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(70940),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ 35522:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    isLength = __webpack_require__(61158),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ 68286:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMatches = __webpack_require__(26423),
    baseMatchesProperty = __webpack_require__(74716),
    identity = __webpack_require__(23059),
    isArray = __webpack_require__(86152),
    property = __webpack_require__(65798);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),

/***/ 86411:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__(16001),
    nativeKeys = __webpack_require__(54248);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ 18390:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(29259),
    isPrototype = __webpack_require__(16001),
    nativeKeysIn = __webpack_require__(62966);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ 73620:
/***/ ((module) => {

/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */
function baseLodash() {
  // No operation performed.
}

module.exports = baseLodash;


/***/ }),

/***/ 93401:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseEach = __webpack_require__(24303),
    isArrayLike = __webpack_require__(67878);

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;


/***/ }),

/***/ 26423:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMatch = __webpack_require__(37036),
    getMatchData = __webpack_require__(49882),
    matchesStrictComparable = __webpack_require__(73477);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),

/***/ 74716:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__(88746),
    get = __webpack_require__(72579),
    hasIn = __webpack_require__(95041),
    isKey = __webpack_require__(21401),
    isStrictComparable = __webpack_require__(28792),
    matchesStrictComparable = __webpack_require__(73477),
    toKey = __webpack_require__(33812);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),

/***/ 84565:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(86571),
    assignMergeValue = __webpack_require__(28582),
    baseFor = __webpack_require__(15308),
    baseMergeDeep = __webpack_require__(25561),
    isObject = __webpack_require__(29259),
    keysIn = __webpack_require__(18582),
    safeGet = __webpack_require__(52434);

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;


/***/ }),

/***/ 25561:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignMergeValue = __webpack_require__(28582),
    cloneBuffer = __webpack_require__(92175),
    cloneTypedArray = __webpack_require__(6190),
    copyArray = __webpack_require__(51522),
    initCloneObject = __webpack_require__(78725),
    isArguments = __webpack_require__(79631),
    isArray = __webpack_require__(86152),
    isArrayLikeObject = __webpack_require__(93746),
    isBuffer = __webpack_require__(73226),
    isFunction = __webpack_require__(61049),
    isObject = __webpack_require__(29259),
    isPlainObject = __webpack_require__(97030),
    isTypedArray = __webpack_require__(77598),
    safeGet = __webpack_require__(52434),
    toPlainObject = __webpack_require__(63329);

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;


/***/ }),

/***/ 23813:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(50343),
    baseGet = __webpack_require__(13324),
    baseIteratee = __webpack_require__(68286),
    baseMap = __webpack_require__(93401),
    baseSortBy = __webpack_require__(27095),
    baseUnary = __webpack_require__(47826),
    compareMultiple = __webpack_require__(18477),
    identity = __webpack_require__(23059),
    isArray = __webpack_require__(86152);

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function(iteratee) {
      if (isArray(iteratee)) {
        return function(value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [identity];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

module.exports = baseOrderBy;


/***/ }),

/***/ 20256:
/***/ ((module) => {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),

/***/ 82952:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(13324);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),

/***/ 62676:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseUnset = __webpack_require__(29078),
    isIndex = __webpack_require__(39045);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */
function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0,
      lastIndex = length - 1;

  while (length--) {
    var index = indexes[length];
    if (length == lastIndex || index !== previous) {
      var previous = index;
      if (isIndex(index)) {
        splice.call(array, index, 1);
      } else {
        baseUnset(array, index);
      }
    }
  }
  return array;
}

module.exports = basePullAt;


/***/ }),

/***/ 36060:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(23059),
    overRest = __webpack_require__(43114),
    setToString = __webpack_require__(75251);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),

/***/ 82857:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(60091),
    castPath = __webpack_require__(17297),
    isIndex = __webpack_require__(39045),
    isObject = __webpack_require__(29259),
    toKey = __webpack_require__(33812);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),

/***/ 54817:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(23059),
    metaMap = __webpack_require__(70529);

/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var baseSetData = !metaMap ? identity : function(func, data) {
  metaMap.set(func, data);
  return func;
};

module.exports = baseSetData;


/***/ }),

/***/ 86532:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var constant = __webpack_require__(86874),
    defineProperty = __webpack_require__(83043),
    identity = __webpack_require__(23059);

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),

/***/ 39872:
/***/ ((module) => {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;


/***/ }),

/***/ 27095:
/***/ ((module) => {

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

module.exports = baseSortBy;


/***/ }),

/***/ 36473:
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ 36134:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(4795);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/**
 * The base implementation of `_.toNumber` which doesn't ensure correct
 * conversions of binary, hexadecimal, or octal string values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 */
function baseToNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  return +value;
}

module.exports = baseToNumber;


/***/ }),

/***/ 1054:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(50857),
    arrayMap = __webpack_require__(50343),
    isArray = __webpack_require__(86152),
    isSymbol = __webpack_require__(4795);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ 51704:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trimmedEndIndex = __webpack_require__(52153);

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ 47826:
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ 67326:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(45386),
    arrayIncludes = __webpack_require__(38333),
    arrayIncludesWith = __webpack_require__(34893),
    cacheHas = __webpack_require__(59950),
    createSet = __webpack_require__(78803),
    setToArray = __webpack_require__(16909);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;


/***/ }),

/***/ 29078:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(17297),
    last = __webpack_require__(56974),
    parent = __webpack_require__(62721),
    toKey = __webpack_require__(33812);

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;


/***/ }),

/***/ 75277:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(13324),
    baseSet = __webpack_require__(82857);

/**
 * The base implementation of `_.update`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to update.
 * @param {Function} updater The function to produce the updated value.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseUpdate(object, path, updater, customizer) {
  return baseSet(object, path, updater(baseGet(object, path)), customizer);
}

module.exports = baseUpdate;


/***/ }),

/***/ 50753:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(50343);

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;


/***/ }),

/***/ 59950:
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ 89419:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(23059);

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;


/***/ }),

/***/ 17297:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(86152),
    isKey = __webpack_require__(21401),
    stringToPath = __webpack_require__(54452),
    toString = __webpack_require__(66188);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ 23895:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSlice = __webpack_require__(39872);

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

module.exports = castSlice;


/***/ }),

/***/ 10768:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__(77832);

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */
function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

module.exports = charsEndIndex;


/***/ }),

/***/ 51821:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__(77832);

/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */
function charsStartIndex(strSymbols, chrSymbols) {
  var index = -1,
      length = strSymbols.length;

  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

module.exports = charsStartIndex;


/***/ }),

/***/ 79882:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Uint8Array = __webpack_require__(79162);

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ 92175:
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(37772);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;


/***/ }),

/***/ 34727:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(79882);

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ 96058:
/***/ ((module) => {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ 70169:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(50857);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ 6190:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(79882);

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ 27520:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(4795);

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

module.exports = compareAscending;


/***/ }),

/***/ 18477:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var compareAscending = __webpack_require__(27520);

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

module.exports = compareMultiple;


/***/ }),

/***/ 11495:
/***/ ((module) => {

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

module.exports = composeArgs;


/***/ }),

/***/ 152:
/***/ ((module) => {

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

module.exports = composeArgsRight;


/***/ }),

/***/ 51522:
/***/ ((module) => {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ 752:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(60091),
    baseAssignValue = __webpack_require__(13940);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ 7680:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(752),
    getSymbols = __webpack_require__(80633);

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ 19987:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(752),
    getSymbolsIn = __webpack_require__(12680);

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ 24019:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(37772);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ 61176:
/***/ ((module) => {

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      ++result;
    }
  }
  return result;
}

module.exports = countHolders;


/***/ }),

/***/ 97263:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__(36060),
    isIterateeCall = __webpack_require__(82406);

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),

/***/ 92019:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__(67878);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),

/***/ 55463:
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ 23485:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createCtor = __webpack_require__(52248),
    root = __webpack_require__(37772);

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1;

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

module.exports = createBind;


/***/ }),

/***/ 52248:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(39413),
    isObject = __webpack_require__(29259);

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

module.exports = createCtor;


/***/ }),

/***/ 98462:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__(49432),
    createCtor = __webpack_require__(52248),
    createHybrid = __webpack_require__(90764),
    createRecurry = __webpack_require__(57891),
    getHolder = __webpack_require__(13325),
    replaceHolders = __webpack_require__(90527),
    root = __webpack_require__(37772);

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

module.exports = createCurry;


/***/ }),

/***/ 98776:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIteratee = __webpack_require__(68286),
    isArrayLike = __webpack_require__(67878),
    keys = __webpack_require__(90249);

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;


/***/ }),

/***/ 37541:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var LodashWrapper = __webpack_require__(45859),
    flatRest = __webpack_require__(29097),
    getData = __webpack_require__(78203),
    getFuncName = __webpack_require__(59350),
    isArray = __webpack_require__(86152),
    isLaziable = __webpack_require__(93735);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/**
 * Creates a `_.flow` or `_.flowRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new flow function.
 */
function createFlow(fromRight) {
  return flatRest(function(funcs) {
    var length = funcs.length,
        index = length,
        prereq = LodashWrapper.prototype.thru;

    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      var func = funcs[index];
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
        var wrapper = new LodashWrapper([], true);
      }
    }
    index = wrapper ? index : length;
    while (++index < length) {
      func = funcs[index];

      var funcName = getFuncName(func),
          data = funcName == 'wrapper' ? getData(func) : undefined;

      if (data && isLaziable(data[0]) &&
            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
            !data[4].length && data[9] == 1
          ) {
        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
      } else {
        wrapper = (func.length == 1 && isLaziable(func))
          ? wrapper[funcName]()
          : wrapper.thru(func);
      }
    }
    return function() {
      var args = arguments,
          value = args[0];

      if (wrapper && args.length == 1 && isArray(value)) {
        return wrapper.plant(value).value();
      }
      var index = 0,
          result = length ? funcs[index].apply(this, args) : value;

      while (++index < length) {
        result = funcs[index].call(this, result);
      }
      return result;
    };
  });
}

module.exports = createFlow;


/***/ }),

/***/ 90764:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var composeArgs = __webpack_require__(11495),
    composeArgsRight = __webpack_require__(152),
    countHolders = __webpack_require__(61176),
    createCtor = __webpack_require__(52248),
    createRecurry = __webpack_require__(57891),
    getHolder = __webpack_require__(13325),
    reorder = __webpack_require__(33418),
    replaceHolders = __webpack_require__(90527),
    root = __webpack_require__(37772);

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_ARY_FLAG = 128,
    WRAP_FLIP_FLAG = 512;

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG,
      isBind = bitmask & WRAP_BIND_FLAG,
      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
      isFlip = bitmask & WRAP_FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
        args, newHolders, argPos, ary, arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

module.exports = createHybrid;


/***/ }),

/***/ 57447:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToNumber = __webpack_require__(36134),
    baseToString = __webpack_require__(1054);

/**
 * Creates a function that performs a mathematical operation on two values.
 *
 * @private
 * @param {Function} operator The function to perform the operation.
 * @param {number} [defaultValue] The value used for `undefined` arguments.
 * @returns {Function} Returns the new mathematical operation function.
 */
function createMathOperation(operator, defaultValue) {
  return function(value, other) {
    var result;
    if (value === undefined && other === undefined) {
      return defaultValue;
    }
    if (value !== undefined) {
      result = value;
    }
    if (other !== undefined) {
      if (result === undefined) {
        return other;
      }
      if (typeof value == 'string' || typeof other == 'string') {
        value = baseToString(value);
        other = baseToString(other);
      } else {
        value = baseToNumber(value);
        other = baseToNumber(other);
      }
      result = operator(value, other);
    }
    return result;
  };
}

module.exports = createMathOperation;


/***/ }),

/***/ 85468:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__(49432),
    createCtor = __webpack_require__(52248),
    root = __webpack_require__(37772);

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1;

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

module.exports = createPartial;


/***/ }),

/***/ 57891:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isLaziable = __webpack_require__(93735),
    setData = __webpack_require__(29890),
    setWrapToString = __webpack_require__(15877);

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
  }
  var newData = [
    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    newHoldersRight, argPos, ary, arity
  ];

  var result = wrapFunc.apply(undefined, newData);
  if (isLaziable(func)) {
    setData(result, newData);
  }
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

module.exports = createRecurry;


/***/ }),

/***/ 78803:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Set = __webpack_require__(2143),
    noop = __webpack_require__(34291),
    setToArray = __webpack_require__(16909);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

module.exports = createSet;


/***/ }),

/***/ 87902:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSetData = __webpack_require__(54817),
    createBind = __webpack_require__(23485),
    createCurry = __webpack_require__(98462),
    createHybrid = __webpack_require__(90764),
    createPartial = __webpack_require__(85468),
    getData = __webpack_require__(78203),
    mergeData = __webpack_require__(79000),
    setData = __webpack_require__(29890),
    setWrapToString = __webpack_require__(15877),
    toInteger = __webpack_require__(38101);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }
  var data = isBindKey ? undefined : getData(func);

  var newData = [
    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    argPos, ary, arity
  ];

  if (data) {
    mergeData(newData, data);
  }
  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] === undefined
    ? (isBindKey ? 0 : func.length)
    : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  var setter = data ? baseSetData : setData;
  return setWrapToString(setter(result, newData), func, bitmask);
}

module.exports = createWrap;


/***/ }),

/***/ 88302:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMerge = __webpack_require__(84565),
    isObject = __webpack_require__(29259);

/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */
function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
  if (isObject(objValue) && isObject(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
    stack['delete'](srcValue);
  }
  return objValue;
}

module.exports = customDefaultsMerge;


/***/ }),

/***/ 48642:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPlainObject = __webpack_require__(97030);

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

module.exports = customOmitClone;


/***/ }),

/***/ 83043:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(38761);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ 74871:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(45386),
    arraySome = __webpack_require__(87064),
    cacheHas = __webpack_require__(59950);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ 11491:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(50857),
    Uint8Array = __webpack_require__(79162),
    eq = __webpack_require__(41225),
    equalArrays = __webpack_require__(74871),
    mapToArray = __webpack_require__(75179),
    setToArray = __webpack_require__(16909);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ 17416:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__(13483);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ 29097:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var flatten = __webpack_require__(35676),
    overRest = __webpack_require__(43114),
    setToString = __webpack_require__(75251);

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;


/***/ }),

/***/ 51242:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ 13483:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(1897),
    getSymbols = __webpack_require__(80633),
    keys = __webpack_require__(90249);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ 76939:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(1897),
    getSymbolsIn = __webpack_require__(12680),
    keysIn = __webpack_require__(18582);

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ 78203:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var metaMap = __webpack_require__(70529),
    noop = __webpack_require__(34291);

/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */
var getData = !metaMap ? noop : function(func) {
  return metaMap.get(func);
};

module.exports = getData;


/***/ }),

/***/ 59350:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var realNames = __webpack_require__(29212);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */
function getFuncName(func) {
  var result = (func.name + ''),
      array = realNames[result],
      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

  while (length--) {
    var data = array[length],
        otherFunc = data.func;
    if (otherFunc == null || otherFunc == func) {
      return data.name;
    }
  }
  return result;
}

module.exports = getFuncName;


/***/ }),

/***/ 13325:
/***/ ((module) => {

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

module.exports = getHolder;


/***/ }),

/***/ 27937:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__(98304);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ 49882:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isStrictComparable = __webpack_require__(28792),
    keys = __webpack_require__(90249);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),

/***/ 38761:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__(6840),
    getValue = __webpack_require__(98109);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ 47353:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(60241);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ 62107:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(50857);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ 80633:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__(67552),
    stubArray = __webpack_require__(30981);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ 12680:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(65067),
    getPrototype = __webpack_require__(47353),
    getSymbols = __webpack_require__(80633),
    stubArray = __webpack_require__(30981);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ 70940:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__(39515),
    Map = __webpack_require__(10326),
    Promise = __webpack_require__(52760),
    Set = __webpack_require__(2143),
    WeakMap = __webpack_require__(93215),
    baseGetTag = __webpack_require__(53366),
    toSource = __webpack_require__(87035);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ 98109:
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ 74842:
/***/ ((module) => {

/** Used to match wrap detail comments. */
var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

module.exports = getWrapDetails;


/***/ }),

/***/ 1369:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(17297),
    isArguments = __webpack_require__(79631),
    isArray = __webpack_require__(86152),
    isIndex = __webpack_require__(39045),
    isLength = __webpack_require__(61158),
    toKey = __webpack_require__(33812);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),

/***/ 33880:
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;


/***/ }),

/***/ 52118:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(99191);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ 96909:
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ 98138:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(99191);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ 4174:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(99191);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ 7942:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(99191);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ 99917:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ 8222:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(79882),
    cloneDataView = __webpack_require__(34727),
    cloneRegExp = __webpack_require__(96058),
    cloneSymbol = __webpack_require__(70169),
    cloneTypedArray = __webpack_require__(6190);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ 78725:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(39413),
    getPrototype = __webpack_require__(47353),
    isPrototype = __webpack_require__(16001);

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ 68442:
/***/ ((module) => {

/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails(source, details) {
  var length = details.length;
  if (!length) {
    return source;
  }
  var lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

module.exports = insertWrapDetails;


/***/ }),

/***/ 95882:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(50857),
    isArguments = __webpack_require__(79631),
    isArray = __webpack_require__(86152);

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;


/***/ }),

/***/ 39045:
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ 82406:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(41225),
    isArrayLike = __webpack_require__(67878),
    isIndex = __webpack_require__(39045),
    isObject = __webpack_require__(29259);

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),

/***/ 21401:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(86152),
    isSymbol = __webpack_require__(4795);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ 98304:
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ 93735:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var LazyWrapper = __webpack_require__(66504),
    getData = __webpack_require__(78203),
    getFuncName = __webpack_require__(59350),
    lodash = __webpack_require__(68674);

/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */
function isLaziable(func) {
  var funcName = getFuncName(func),
      other = lodash[funcName];

  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    return false;
  }
  if (func === other) {
    return true;
  }
  var data = getData(other);
  return !!data && func === data[0];
}

module.exports = isLaziable;


/***/ }),

/***/ 47394:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__(24019);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ 16001:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ 28792:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(29259);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),

/***/ 3945:
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ 21846:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(22218);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ 88028:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(22218);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ 72344:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(22218);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ 94769:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(22218);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ 92411:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__(89612),
    ListCache = __webpack_require__(80235),
    Map = __webpack_require__(10326);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ 36417:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(27937);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ 86928:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(27937);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ 79493:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(27937);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ 24150:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(27937);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ 75179:
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ 73477:
/***/ ((module) => {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),

/***/ 77777:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__(30733);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ 79000:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var composeArgs = __webpack_require__(11495),
    composeArgsRight = __webpack_require__(152),
    replaceHolders = __webpack_require__(90527);

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */
function mergeData(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

  var isCombo =
    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

  // Exit early if metadata can't be merged.
  if (!(isCommon || isCombo)) {
    return data;
  }
  // Use source `thisArg` if available.
  if (srcBitmask & WRAP_BIND_FLAG) {
    data[2] = source[2];
    // Set when currying a bound function.
    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
  }
  // Compose partial arguments.
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  }
  // Compose partial right arguments.
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  }
  // Use source `argPos` if available.
  value = source[7];
  if (value) {
    data[7] = value;
  }
  // Use source `ary` if it's smaller.
  if (srcBitmask & WRAP_ARY_FLAG) {
    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
  }
  // Use source `arity` if one is not provided.
  if (data[9] == null) {
    data[9] = source[9];
  }
  // Use source `func` and merge bitmasks.
  data[0] = source[0];
  data[1] = newBitmask;

  return data;
}

module.exports = mergeData;


/***/ }),

/***/ 70529:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var WeakMap = __webpack_require__(93215);

/** Used to store function metadata. */
var metaMap = WeakMap && new WeakMap;

module.exports = metaMap;


/***/ }),

/***/ 99191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(38761);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ 54248:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(60241);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ 62966:
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ 4146:
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__(51242);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ 37157:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ 60241:
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ 43114:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__(49432);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),

/***/ 62721:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(13324),
    baseSlice = __webpack_require__(39872);

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;


/***/ }),

/***/ 29212:
/***/ ((module) => {

/** Used to lookup unminified function names. */
var realNames = {};

module.exports = realNames;


/***/ }),

/***/ 33418:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyArray = __webpack_require__(51522),
    isIndex = __webpack_require__(39045);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

module.exports = reorder;


/***/ }),

/***/ 90527:
/***/ ((module) => {

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }
  return result;
}

module.exports = replaceHolders;


/***/ }),

/***/ 37772:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(51242);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ 52434:
/***/ ((module) => {

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;


/***/ }),

/***/ 52842:
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ 52482:
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ 29890:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSetData = __webpack_require__(54817),
    shortOut = __webpack_require__(97787);

/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var setData = shortOut(baseSetData);

module.exports = setData;


/***/ }),

/***/ 16909:
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ 75251:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSetToString = __webpack_require__(86532),
    shortOut = __webpack_require__(97787);

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),

/***/ 15877:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getWrapDetails = __webpack_require__(74842),
    insertWrapDetails = __webpack_require__(68442),
    setToString = __webpack_require__(75251),
    updateWrapDetails = __webpack_require__(16985);

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
function setWrapToString(wrapper, reference, bitmask) {
  var source = (reference + '');
  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

module.exports = setWrapToString;


/***/ }),

/***/ 97787:
/***/ ((module) => {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),

/***/ 15243:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(80235);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ 72858:
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ 4417:
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ 8605:
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ 71418:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(80235),
    Map = __webpack_require__(10326),
    MapCache = __webpack_require__(96738);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ 66024:
/***/ ((module) => {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),

/***/ 8435:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiToArray = __webpack_require__(50217),
    hasUnicode = __webpack_require__(33880),
    unicodeToArray = __webpack_require__(63344);

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

module.exports = stringToArray;


/***/ }),

/***/ 54452:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__(77777);

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ 33812:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(4795);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ 87035:
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ 52153:
/***/ ((module) => {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ 63344:
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;


/***/ }),

/***/ 16985:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayEach = __webpack_require__(72517),
    arrayIncludes = __webpack_require__(38333);

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256,
    WRAP_FLIP_FLAG = 512;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [
  ['ary', WRAP_ARY_FLAG],
  ['bind', WRAP_BIND_FLAG],
  ['bindKey', WRAP_BIND_KEY_FLAG],
  ['curry', WRAP_CURRY_FLAG],
  ['curryRight', WRAP_CURRY_RIGHT_FLAG],
  ['flip', WRAP_FLIP_FLAG],
  ['partial', WRAP_PARTIAL_FLAG],
  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
  ['rearg', WRAP_REARG_FLAG]
];

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function(pair) {
    var value = '_.' + pair[0];
    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

module.exports = updateWrapDetails;


/***/ }),

/***/ 67366:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var LazyWrapper = __webpack_require__(66504),
    LodashWrapper = __webpack_require__(45859),
    copyArray = __webpack_require__(51522);

/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */
function wrapperClone(wrapper) {
  if (wrapper instanceof LazyWrapper) {
    return wrapper.clone();
  }
  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
  result.__actions__ = copyArray(wrapper.__actions__);
  result.__index__  = wrapper.__index__;
  result.__values__ = wrapper.__values__;
  return result;
}

module.exports = wrapperClone;


/***/ }),

/***/ 67341:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createMathOperation = __webpack_require__(57447);

/**
 * Adds two numbers.
 *
 * @static
 * @memberOf _
 * @since 3.4.0
 * @category Math
 * @param {number} augend The first number in an addition.
 * @param {number} addend The second number in an addition.
 * @returns {number} Returns the total.
 * @example
 *
 * _.add(6, 4);
 * // => 10
 */
var add = createMathOperation(function(augend, addend) {
  return augend + addend;
}, 0);

module.exports = add;


/***/ }),

/***/ 19534:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createWrap = __webpack_require__(87902);

/** Used to compose bitmasks for function metadata. */
var WRAP_ARY_FLAG = 128;

/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */
function ary(func, n, guard) {
  n = guard ? undefined : n;
  n = (func && n == null) ? func.length : n;
  return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}

module.exports = ary;


/***/ }),

/***/ 54004:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(18874);

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;


/***/ }),

/***/ 9850:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(18874);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),

/***/ 22487:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(65067),
    baseFlatten = __webpack_require__(62034),
    copyArray = __webpack_require__(51522),
    isArray = __webpack_require__(86152);

/**
 * Creates a new array concatenating `array` with any additional arrays
 * and/or values.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to concatenate.
 * @param {...*} [values] The values to concatenate.
 * @returns {Array} Returns the new concatenated array.
 * @example
 *
 * var array = [1];
 * var other = _.concat(array, 2, [3], [[4]]);
 *
 * console.log(other);
 * // => [1, 2, 3, [4]]
 *
 * console.log(array);
 * // => [1]
 */
function concat() {
  var length = arguments.length;
  if (!length) {
    return [];
  }
  var args = Array(length - 1),
      array = arguments[0],
      index = length;

  while (index--) {
    args[index - 1] = arguments[index];
  }
  return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
}

module.exports = concat;


/***/ }),

/***/ 86874:
/***/ ((module) => {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),

/***/ 12957:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createWrap = __webpack_require__(87902);

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8;

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */
function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
}

// Assign default placeholders.
curry.placeholder = {};

module.exports = curry;


/***/ }),

/***/ 54073:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(29259),
    now = __webpack_require__(61100),
    toNumber = __webpack_require__(7642);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ 84573:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__(36060),
    eq = __webpack_require__(41225),
    isIterateeCall = __webpack_require__(82406),
    keysIn = __webpack_require__(18582);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = baseRest(function(object, sources) {
  object = Object(object);

  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined ||
          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        object[key] = source[key];
      }
    }
  }

  return object;
});

module.exports = defaults;


/***/ }),

/***/ 19003:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__(49432),
    baseRest = __webpack_require__(36060),
    customDefaultsMerge = __webpack_require__(88302),
    mergeWith = __webpack_require__(12782);

/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */
var defaultsDeep = baseRest(function(args) {
  args.push(undefined, customDefaultsMerge);
  return apply(mergeWith, undefined, args);
});

module.exports = defaultsDeep;


/***/ }),

/***/ 17335:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseDifference = __webpack_require__(85246),
    baseFlatten = __webpack_require__(62034),
    baseRest = __webpack_require__(36060),
    isArrayLikeObject = __webpack_require__(93746);

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    : [];
});

module.exports = difference;


/***/ }),

/***/ 41225:
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ 55281:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createFind = __webpack_require__(98776),
    findIndex = __webpack_require__(12982);

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

module.exports = find;


/***/ }),

/***/ 12982:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFindIndex = __webpack_require__(21359),
    baseIteratee = __webpack_require__(68286),
    toInteger = __webpack_require__(38101);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;


/***/ }),

/***/ 35838:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(62034),
    map = __webpack_require__(16760);

/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMap(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), 1);
}

module.exports = flatMap;


/***/ }),

/***/ 35676:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(62034);

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;


/***/ }),

/***/ 58332:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createFlow = __webpack_require__(37541);

/**
 * This method is like `_.flow` except that it creates a function that
 * invokes the given functions from right to left.
 *
 * @static
 * @since 3.0.0
 * @memberOf _
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flow
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flowRight([square, _.add]);
 * addSquare(1, 2);
 * // => 9
 */
var flowRight = createFlow(true);

module.exports = flowRight;


/***/ }),

/***/ 99194:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(54652);


/***/ }),

/***/ 18620:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapping = __webpack_require__(80973),
    fallbackHolder = __webpack_require__(54652);

/** Built-in value reference. */
var push = Array.prototype.push;

/**
 * Creates a function, with an arity of `n`, that invokes `func` with the
 * arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} n The arity of the new function.
 * @returns {Function} Returns the new function.
 */
function baseArity(func, n) {
  return n == 2
    ? function(a, b) { return func.apply(undefined, arguments); }
    : function(a) { return func.apply(undefined, arguments); };
}

/**
 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
 * any additional arguments.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @param {number} n The arity cap.
 * @returns {Function} Returns the new function.
 */
function baseAry(func, n) {
  return n == 2
    ? function(a, b) { return func(a, b); }
    : function(a) { return func(a); };
}

/**
 * Creates a clone of `array`.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the cloned array.
 */
function cloneArray(array) {
  var length = array ? array.length : 0,
      result = Array(length);

  while (length--) {
    result[length] = array[length];
  }
  return result;
}

/**
 * Creates a function that clones a given object using the assignment `func`.
 *
 * @private
 * @param {Function} func The assignment function.
 * @returns {Function} Returns the new cloner function.
 */
function createCloner(func) {
  return function(object) {
    return func({}, object);
  };
}

/**
 * A specialized version of `_.spread` which flattens the spread array into
 * the arguments of the invoked `func`.
 *
 * @private
 * @param {Function} func The function to spread arguments over.
 * @param {number} start The start position of the spread.
 * @returns {Function} Returns the new function.
 */
function flatSpread(func, start) {
  return function() {
    var length = arguments.length,
        lastIndex = length - 1,
        args = Array(length);

    while (length--) {
      args[length] = arguments[length];
    }
    var array = args[start],
        otherArgs = args.slice(0, start);

    if (array) {
      push.apply(otherArgs, array);
    }
    if (start != lastIndex) {
      push.apply(otherArgs, args.slice(start + 1));
    }
    return func.apply(this, otherArgs);
  };
}

/**
 * Creates a function that wraps `func` and uses `cloner` to clone the first
 * argument it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} cloner The function to clone arguments.
 * @returns {Function} Returns the new immutable function.
 */
function wrapImmutable(func, cloner) {
  return function() {
    var length = arguments.length;
    if (!length) {
      return;
    }
    var args = Array(length);
    while (length--) {
      args[length] = arguments[length];
    }
    var result = args[0] = cloner.apply(undefined, args);
    func.apply(undefined, args);
    return result;
  };
}

/**
 * The base implementation of `convert` which accepts a `util` object of methods
 * required to perform conversions.
 *
 * @param {Object} util The util object.
 * @param {string} name The name of the function to convert.
 * @param {Function} func The function to convert.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
 * @param {boolean} [options.curry=true] Specify currying.
 * @param {boolean} [options.fixed=true] Specify fixed arity.
 * @param {boolean} [options.immutable=true] Specify immutable operations.
 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
 * @returns {Function|Object} Returns the converted function or object.
 */
function baseConvert(util, name, func, options) {
  var isLib = typeof name == 'function',
      isObj = name === Object(name);

  if (isObj) {
    options = func;
    func = name;
    name = undefined;
  }
  if (func == null) {
    throw new TypeError;
  }
  options || (options = {});

  var config = {
    'cap': 'cap' in options ? options.cap : true,
    'curry': 'curry' in options ? options.curry : true,
    'fixed': 'fixed' in options ? options.fixed : true,
    'immutable': 'immutable' in options ? options.immutable : true,
    'rearg': 'rearg' in options ? options.rearg : true
  };

  var defaultHolder = isLib ? func : fallbackHolder,
      forceCurry = ('curry' in options) && options.curry,
      forceFixed = ('fixed' in options) && options.fixed,
      forceRearg = ('rearg' in options) && options.rearg,
      pristine = isLib ? func.runInContext() : undefined;

  var helpers = isLib ? func : {
    'ary': util.ary,
    'assign': util.assign,
    'clone': util.clone,
    'curry': util.curry,
    'forEach': util.forEach,
    'isArray': util.isArray,
    'isError': util.isError,
    'isFunction': util.isFunction,
    'isWeakMap': util.isWeakMap,
    'iteratee': util.iteratee,
    'keys': util.keys,
    'rearg': util.rearg,
    'toInteger': util.toInteger,
    'toPath': util.toPath
  };

  var ary = helpers.ary,
      assign = helpers.assign,
      clone = helpers.clone,
      curry = helpers.curry,
      each = helpers.forEach,
      isArray = helpers.isArray,
      isError = helpers.isError,
      isFunction = helpers.isFunction,
      isWeakMap = helpers.isWeakMap,
      keys = helpers.keys,
      rearg = helpers.rearg,
      toInteger = helpers.toInteger,
      toPath = helpers.toPath;

  var aryMethodKeys = keys(mapping.aryMethod);

  var wrappers = {
    'castArray': function(castArray) {
      return function() {
        var value = arguments[0];
        return isArray(value)
          ? castArray(cloneArray(value))
          : castArray.apply(undefined, arguments);
      };
    },
    'iteratee': function(iteratee) {
      return function() {
        var func = arguments[0],
            arity = arguments[1],
            result = iteratee(func, arity),
            length = result.length;

        if (config.cap && typeof arity == 'number') {
          arity = arity > 2 ? (arity - 2) : 1;
          return (length && length <= arity) ? result : baseAry(result, arity);
        }
        return result;
      };
    },
    'mixin': function(mixin) {
      return function(source) {
        var func = this;
        if (!isFunction(func)) {
          return mixin(func, Object(source));
        }
        var pairs = [];
        each(keys(source), function(key) {
          if (isFunction(source[key])) {
            pairs.push([key, func.prototype[key]]);
          }
        });

        mixin(func, Object(source));

        each(pairs, function(pair) {
          var value = pair[1];
          if (isFunction(value)) {
            func.prototype[pair[0]] = value;
          } else {
            delete func.prototype[pair[0]];
          }
        });
        return func;
      };
    },
    'nthArg': function(nthArg) {
      return function(n) {
        var arity = n < 0 ? 1 : (toInteger(n) + 1);
        return curry(nthArg(n), arity);
      };
    },
    'rearg': function(rearg) {
      return function(func, indexes) {
        var arity = indexes ? indexes.length : 0;
        return curry(rearg(func, indexes), arity);
      };
    },
    'runInContext': function(runInContext) {
      return function(context) {
        return baseConvert(util, runInContext(context), options);
      };
    }
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Casts `func` to a function with an arity capped iteratee if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @returns {Function} Returns the cast function.
   */
  function castCap(name, func) {
    if (config.cap) {
      var indexes = mapping.iterateeRearg[name];
      if (indexes) {
        return iterateeRearg(func, indexes);
      }
      var n = !isLib && mapping.iterateeAry[name];
      if (n) {
        return iterateeAry(func, n);
      }
    }
    return func;
  }

  /**
   * Casts `func` to a curried function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */
  function castCurry(name, func, n) {
    return (forceCurry || (config.curry && n > 1))
      ? curry(func, n)
      : func;
  }

  /**
   * Casts `func` to a fixed arity function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the cast function.
   */
  function castFixed(name, func, n) {
    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
      var data = mapping.methodSpread[name],
          start = data && data.start;

      return start  === undefined ? ary(func, n) : flatSpread(func, start);
    }
    return func;
  }

  /**
   * Casts `func` to an rearged function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */
  function castRearg(name, func, n) {
    return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))
      ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])
      : func;
  }

  /**
   * Creates a clone of `object` by `path`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {Array|string} path The path to clone by.
   * @returns {Object} Returns the cloned object.
   */
  function cloneByPath(object, path) {
    path = toPath(path);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        result = clone(Object(object)),
        nested = result;

    while (nested != null && ++index < length) {
      var key = path[index],
          value = nested[key];

      if (value != null &&
          !(isFunction(value) || isError(value) || isWeakMap(value))) {
        nested[key] = clone(index == lastIndex ? value : Object(value));
      }
      nested = nested[key];
    }
    return result;
  }

  /**
   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
   * version with conversion `options` applied.
   *
   * @param {Object} [options] The options object. See `baseConvert` for more details.
   * @returns {Function} Returns the converted `lodash`.
   */
  function convertLib(options) {
    return _.runInContext.convert(options)(undefined);
  }

  /**
   * Create a converter function for `func` of `name`.
   *
   * @param {string} name The name of the function to convert.
   * @param {Function} func The function to convert.
   * @returns {Function} Returns the new converter function.
   */
  function createConverter(name, func) {
    var realName = mapping.aliasToReal[name] || name,
        methodName = mapping.remap[realName] || realName,
        oldOptions = options;

    return function(options) {
      var newUtil = isLib ? pristine : helpers,
          newFunc = isLib ? pristine[methodName] : func,
          newOptions = assign(assign({}, oldOptions), options);

      return baseConvert(newUtil, realName, newFunc, newOptions);
    };
  }

  /**
   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
   * arguments, ignoring any additional arguments.
   *
   * @private
   * @param {Function} func The function to cap iteratee arguments for.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the new function.
   */
  function iterateeAry(func, n) {
    return overArg(func, function(func) {
      return typeof func == 'function' ? baseAry(func, n) : func;
    });
  }

  /**
   * Creates a function that wraps `func` to invoke its iteratee with arguments
   * arranged according to the specified `indexes` where the argument value at
   * the first index is provided as the first argument, the argument value at
   * the second index is provided as the second argument, and so on.
   *
   * @private
   * @param {Function} func The function to rearrange iteratee arguments for.
   * @param {number[]} indexes The arranged argument indexes.
   * @returns {Function} Returns the new function.
   */
  function iterateeRearg(func, indexes) {
    return overArg(func, function(func) {
      var n = indexes.length;
      return baseArity(rearg(baseAry(func, n), indexes), n);
    });
  }

  /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function() {
      var length = arguments.length;
      if (!length) {
        return func();
      }
      var args = Array(length);
      while (length--) {
        args[length] = arguments[length];
      }
      var index = config.rearg ? 0 : (length - 1);
      args[index] = transform(args[index]);
      return func.apply(undefined, args);
    };
  }

  /**
   * Creates a function that wraps `func` and applys the conversions
   * rules by `name`.
   *
   * @private
   * @param {string} name The name of the function to wrap.
   * @param {Function} func The function to wrap.
   * @returns {Function} Returns the converted function.
   */
  function wrap(name, func, placeholder) {
    var result,
        realName = mapping.aliasToReal[name] || name,
        wrapped = func,
        wrapper = wrappers[realName];

    if (wrapper) {
      wrapped = wrapper(func);
    }
    else if (config.immutable) {
      if (mapping.mutate.array[realName]) {
        wrapped = wrapImmutable(func, cloneArray);
      }
      else if (mapping.mutate.object[realName]) {
        wrapped = wrapImmutable(func, createCloner(func));
      }
      else if (mapping.mutate.set[realName]) {
        wrapped = wrapImmutable(func, cloneByPath);
      }
    }
    each(aryMethodKeys, function(aryKey) {
      each(mapping.aryMethod[aryKey], function(otherName) {
        if (realName == otherName) {
          var data = mapping.methodSpread[realName],
              afterRearg = data && data.afterRearg;

          result = afterRearg
            ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)
            : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);

          result = castCap(realName, result);
          result = castCurry(realName, result, aryKey);
          return false;
        }
      });
      return !result;
    });

    result || (result = wrapped);
    if (result == func) {
      result = forceCurry ? curry(result, 1) : function() {
        return func.apply(this, arguments);
      };
    }
    result.convert = createConverter(realName, func);
    result.placeholder = func.placeholder = placeholder;

    return result;
  }

  /*--------------------------------------------------------------------------*/

  if (!isObj) {
    return wrap(name, func, defaultHolder);
  }
  var _ = func;

  // Convert methods by ary cap.
  var pairs = [];
  each(aryMethodKeys, function(aryKey) {
    each(mapping.aryMethod[aryKey], function(key) {
      var func = _[mapping.remap[key] || key];
      if (func) {
        pairs.push([key, wrap(key, func, _)]);
      }
    });
  });

  // Convert remaining methods.
  each(keys(_), function(key) {
    var func = _[key];
    if (typeof func == 'function') {
      var length = pairs.length;
      while (length--) {
        if (pairs[length][0] == key) {
          return;
        }
      }
      func.convert = createConverter(key, func);
      pairs.push([key, func]);
    }
  });

  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
  each(pairs, function(pair) {
    _[pair[0]] = pair[1];
  });

  _.convert = convertLib;
  _.placeholder = _;

  // Assign aliases.
  each(keys(_), function(key) {
    each(mapping.realToAlias[key] || [], function(alias) {
      _[alias] = _[key];
    });
  });

  return _;
}

module.exports = baseConvert;


/***/ }),

/***/ 69112:
/***/ ((module) => {

module.exports = {
  'cap': false,
  'curry': false,
  'fixed': false,
  'immutable': false,
  'rearg': false
};


/***/ }),

/***/ 80973:
/***/ ((__unused_webpack_module, exports) => {

/** Used to map aliases to their real names. */
exports.aliasToReal = {

  // Lodash aliases.
  'each': 'forEach',
  'eachRight': 'forEachRight',
  'entries': 'toPairs',
  'entriesIn': 'toPairsIn',
  'extend': 'assignIn',
  'extendAll': 'assignInAll',
  'extendAllWith': 'assignInAllWith',
  'extendWith': 'assignInWith',
  'first': 'head',

  // Methods that are curried variants of others.
  'conforms': 'conformsTo',
  'matches': 'isMatch',
  'property': 'get',

  // Ramda aliases.
  '__': 'placeholder',
  'F': 'stubFalse',
  'T': 'stubTrue',
  'all': 'every',
  'allPass': 'overEvery',
  'always': 'constant',
  'any': 'some',
  'anyPass': 'overSome',
  'apply': 'spread',
  'assoc': 'set',
  'assocPath': 'set',
  'complement': 'negate',
  'compose': 'flowRight',
  'contains': 'includes',
  'dissoc': 'unset',
  'dissocPath': 'unset',
  'dropLast': 'dropRight',
  'dropLastWhile': 'dropRightWhile',
  'equals': 'isEqual',
  'identical': 'eq',
  'indexBy': 'keyBy',
  'init': 'initial',
  'invertObj': 'invert',
  'juxt': 'over',
  'omitAll': 'omit',
  'nAry': 'ary',
  'path': 'get',
  'pathEq': 'matchesProperty',
  'pathOr': 'getOr',
  'paths': 'at',
  'pickAll': 'pick',
  'pipe': 'flow',
  'pluck': 'map',
  'prop': 'get',
  'propEq': 'matchesProperty',
  'propOr': 'getOr',
  'props': 'at',
  'symmetricDifference': 'xor',
  'symmetricDifferenceBy': 'xorBy',
  'symmetricDifferenceWith': 'xorWith',
  'takeLast': 'takeRight',
  'takeLastWhile': 'takeRightWhile',
  'unapply': 'rest',
  'unnest': 'flatten',
  'useWith': 'overArgs',
  'where': 'conformsTo',
  'whereEq': 'isMatch',
  'zipObj': 'zipObject'
};

/** Used to map ary to method names. */
exports.aryMethod = {
  '1': [
    'assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create',
    'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow',
    'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll',
    'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome','rest', 'reverse',
    'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart',
    'uniqueId', 'words', 'zipAll'
  ],
  '2': [
    'add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith',
    'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith',
    'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN',
    'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference',
    'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq',
    'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex',
    'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach',
    'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get',
    'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection',
    'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy',
    'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty',
    'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit',
    'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial',
    'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll',
    'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove',
    'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex',
    'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy',
    'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight',
    'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars',
    'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith',
    'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject',
    'zipObjectDeep'
  ],
  '3': [
    'assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith',
    'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr',
    'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith',
    'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth',
    'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd',
    'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight',
    'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy',
    'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy',
    'xorWith', 'zipWith'
  ],
  '4': [
    'fill', 'setWith', 'updateWith'
  ]
};

/** Used to map ary to rearg configs. */
exports.aryRearg = {
  '2': [1, 0],
  '3': [2, 0, 1],
  '4': [3, 2, 0, 1]
};

/** Used to map method names to their iteratee ary. */
exports.iterateeAry = {
  'dropRightWhile': 1,
  'dropWhile': 1,
  'every': 1,
  'filter': 1,
  'find': 1,
  'findFrom': 1,
  'findIndex': 1,
  'findIndexFrom': 1,
  'findKey': 1,
  'findLast': 1,
  'findLastFrom': 1,
  'findLastIndex': 1,
  'findLastIndexFrom': 1,
  'findLastKey': 1,
  'flatMap': 1,
  'flatMapDeep': 1,
  'flatMapDepth': 1,
  'forEach': 1,
  'forEachRight': 1,
  'forIn': 1,
  'forInRight': 1,
  'forOwn': 1,
  'forOwnRight': 1,
  'map': 1,
  'mapKeys': 1,
  'mapValues': 1,
  'partition': 1,
  'reduce': 2,
  'reduceRight': 2,
  'reject': 1,
  'remove': 1,
  'some': 1,
  'takeRightWhile': 1,
  'takeWhile': 1,
  'times': 1,
  'transform': 2
};

/** Used to map method names to iteratee rearg configs. */
exports.iterateeRearg = {
  'mapKeys': [1],
  'reduceRight': [1, 0]
};

/** Used to map method names to rearg configs. */
exports.methodRearg = {
  'assignInAllWith': [1, 0],
  'assignInWith': [1, 2, 0],
  'assignAllWith': [1, 0],
  'assignWith': [1, 2, 0],
  'differenceBy': [1, 2, 0],
  'differenceWith': [1, 2, 0],
  'getOr': [2, 1, 0],
  'intersectionBy': [1, 2, 0],
  'intersectionWith': [1, 2, 0],
  'isEqualWith': [1, 2, 0],
  'isMatchWith': [2, 1, 0],
  'mergeAllWith': [1, 0],
  'mergeWith': [1, 2, 0],
  'padChars': [2, 1, 0],
  'padCharsEnd': [2, 1, 0],
  'padCharsStart': [2, 1, 0],
  'pullAllBy': [2, 1, 0],
  'pullAllWith': [2, 1, 0],
  'rangeStep': [1, 2, 0],
  'rangeStepRight': [1, 2, 0],
  'setWith': [3, 1, 2, 0],
  'sortedIndexBy': [2, 1, 0],
  'sortedLastIndexBy': [2, 1, 0],
  'unionBy': [1, 2, 0],
  'unionWith': [1, 2, 0],
  'updateWith': [3, 1, 2, 0],
  'xorBy': [1, 2, 0],
  'xorWith': [1, 2, 0],
  'zipWith': [1, 2, 0]
};

/** Used to map method names to spread configs. */
exports.methodSpread = {
  'assignAll': { 'start': 0 },
  'assignAllWith': { 'start': 0 },
  'assignInAll': { 'start': 0 },
  'assignInAllWith': { 'start': 0 },
  'defaultsAll': { 'start': 0 },
  'defaultsDeepAll': { 'start': 0 },
  'invokeArgs': { 'start': 2 },
  'invokeArgsMap': { 'start': 2 },
  'mergeAll': { 'start': 0 },
  'mergeAllWith': { 'start': 0 },
  'partial': { 'start': 1 },
  'partialRight': { 'start': 1 },
  'without': { 'start': 1 },
  'zipAll': { 'start': 0 }
};

/** Used to identify methods which mutate arrays or objects. */
exports.mutate = {
  'array': {
    'fill': true,
    'pull': true,
    'pullAll': true,
    'pullAllBy': true,
    'pullAllWith': true,
    'pullAt': true,
    'remove': true,
    'reverse': true
  },
  'object': {
    'assign': true,
    'assignAll': true,
    'assignAllWith': true,
    'assignIn': true,
    'assignInAll': true,
    'assignInAllWith': true,
    'assignInWith': true,
    'assignWith': true,
    'defaults': true,
    'defaultsAll': true,
    'defaultsDeep': true,
    'defaultsDeepAll': true,
    'merge': true,
    'mergeAll': true,
    'mergeAllWith': true,
    'mergeWith': true,
  },
  'set': {
    'set': true,
    'setWith': true,
    'unset': true,
    'update': true,
    'updateWith': true
  }
};

/** Used to map real names to their aliases. */
exports.realToAlias = (function() {
  var hasOwnProperty = Object.prototype.hasOwnProperty,
      object = exports.aliasToReal,
      result = {};

  for (var key in object) {
    var value = object[key];
    if (hasOwnProperty.call(result, value)) {
      result[value].push(key);
    } else {
      result[value] = [key];
    }
  }
  return result;
}());

/** Used to map method names to other names. */
exports.remap = {
  'assignAll': 'assign',
  'assignAllWith': 'assignWith',
  'assignInAll': 'assignIn',
  'assignInAllWith': 'assignInWith',
  'curryN': 'curry',
  'curryRightN': 'curryRight',
  'defaultsAll': 'defaults',
  'defaultsDeepAll': 'defaultsDeep',
  'findFrom': 'find',
  'findIndexFrom': 'findIndex',
  'findLastFrom': 'findLast',
  'findLastIndexFrom': 'findLastIndex',
  'getOr': 'get',
  'includesFrom': 'includes',
  'indexOfFrom': 'indexOf',
  'invokeArgs': 'invoke',
  'invokeArgsMap': 'invokeMap',
  'lastIndexOfFrom': 'lastIndexOf',
  'mergeAll': 'merge',
  'mergeAllWith': 'mergeWith',
  'padChars': 'pad',
  'padCharsEnd': 'padEnd',
  'padCharsStart': 'padStart',
  'propertyOf': 'get',
  'rangeStep': 'range',
  'rangeStepRight': 'rangeRight',
  'restFrom': 'rest',
  'spreadFrom': 'spread',
  'trimChars': 'trim',
  'trimCharsEnd': 'trimEnd',
  'trimCharsStart': 'trimStart',
  'zipAll': 'zip'
};

/** Used to track methods that skip fixing their arity. */
exports.skipFixed = {
  'castArray': true,
  'flow': true,
  'flowRight': true,
  'iteratee': true,
  'mixin': true,
  'rearg': true,
  'runInContext': true
};

/** Used to track methods that skip rearranging arguments. */
exports.skipRearg = {
  'add': true,
  'assign': true,
  'assignIn': true,
  'bind': true,
  'bindKey': true,
  'concat': true,
  'difference': true,
  'divide': true,
  'eq': true,
  'gt': true,
  'gte': true,
  'isEqual': true,
  'lt': true,
  'lte': true,
  'matchesProperty': true,
  'merge': true,
  'multiply': true,
  'overArgs': true,
  'partial': true,
  'partialRight': true,
  'propertyOf': true,
  'random': true,
  'range': true,
  'rangeRight': true,
  'subtract': true,
  'zip': true,
  'zipObject': true,
  'zipObjectDeep': true
};


/***/ }),

/***/ 30481:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  'ary': __webpack_require__(19534),
  'assign': __webpack_require__(67993),
  'clone': __webpack_require__(54004),
  'curry': __webpack_require__(12957),
  'forEach': __webpack_require__(72517),
  'isArray': __webpack_require__(86152),
  'isError': __webpack_require__(85121),
  'isFunction': __webpack_require__(61049),
  'isWeakMap': __webpack_require__(8266),
  'iteratee': __webpack_require__(25923),
  'keys': __webpack_require__(86411),
  'rearg': __webpack_require__(30577),
  'toInteger': __webpack_require__(38101),
  'toPath': __webpack_require__(25497)
};


/***/ }),

/***/ 14727:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('add', __webpack_require__(67341));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 33904:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('cloneDeep', __webpack_require__(9850), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 52602:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(68927);


/***/ }),

/***/ 12462:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('concat', __webpack_require__(22487));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 54665:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(34803);


/***/ }),

/***/ 42003:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseConvert = __webpack_require__(18620),
    util = __webpack_require__(30481);

/**
 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
 * version with conversion `options` applied. If `name` is an object its methods
 * will be converted.
 *
 * @param {string} name The name of the function to wrap.
 * @param {Function} [func] The function to wrap.
 * @param {Object} [options] The options object. See `baseConvert` for more details.
 * @returns {Function|Object} Returns the converted function or object.
 */
function convert(name, func, options) {
  return baseConvert(util, name, func, options);
}

module.exports = convert;


/***/ }),

/***/ 32915:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('debounce', __webpack_require__(54073));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 469:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('defaults', __webpack_require__(84573));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 6766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('defaultsDeep', __webpack_require__(19003));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 94815:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('difference', __webpack_require__(17335));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 60758:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('find', __webpack_require__(55281));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 97665:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('flatMap', __webpack_require__(35838));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 68927:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('flowRight', __webpack_require__(58332));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 15107:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('has', __webpack_require__(93352));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 34803:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('includes', __webpack_require__(11886));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 61786:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isArray', __webpack_require__(86152), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 23004:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isElement', __webpack_require__(92301), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 8288:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isEmpty', __webpack_require__(45455), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 11520:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isEqual', __webpack_require__(18149));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 62064:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isFunction', __webpack_require__(61049), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 91543:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isNil', __webpack_require__(1842), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 78608:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isNull', __webpack_require__(25877), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 29180:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isNumber', __webpack_require__(80537), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 1449:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isPlainObject', __webpack_require__(97030), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 49775:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isString', __webpack_require__(85505), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 73346:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('isUndefined', __webpack_require__(84336), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 85569:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('join', __webpack_require__(79729));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 65159:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('map', __webpack_require__(16760));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 9612:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('merge', __webpack_require__(98537));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 38041:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('mergeAllWith', __webpack_require__(12782));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 81053:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('omit', __webpack_require__(17620));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 8959:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('partial', __webpack_require__(83465));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 54652:
/***/ ((module) => {

/**
 * The default argument placeholder value for methods.
 *
 * @type {Object}
 */
module.exports = {};


/***/ }),

/***/ 58009:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('remove', __webpack_require__(64116));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 52419:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('reverse', __webpack_require__(54014));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 62974:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('sortBy', __webpack_require__(829));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 78202:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('trimCharsStart', __webpack_require__(93433));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 91056:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('trimEnd', __webpack_require__(1573));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 38959:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('union', __webpack_require__(26139));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 84157:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('unionBy', __webpack_require__(15316));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 83227:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('unionWith', __webpack_require__(93382));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 61505:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('unset', __webpack_require__(17195));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 68496:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('update', __webpack_require__(91168));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 32818:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('values', __webpack_require__(98346), __webpack_require__(69112));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 43214:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var convert = __webpack_require__(42003),
    func = convert('without', __webpack_require__(67304));

func.placeholder = __webpack_require__(54652);
module.exports = func;


/***/ }),

/***/ 72579:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(13324);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ 93352:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHas = __webpack_require__(32726),
    hasPath = __webpack_require__(1369);

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;


/***/ }),

/***/ 95041:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHasIn = __webpack_require__(20187),
    hasPath = __webpack_require__(1369);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),

/***/ 23059:
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ 11886:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__(77832),
    isArrayLike = __webpack_require__(67878),
    isString = __webpack_require__(85505),
    toInteger = __webpack_require__(38101),
    values = __webpack_require__(98346);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;


/***/ }),

/***/ 79631:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__(15183),
    isObjectLike = __webpack_require__(15125);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ 86152:
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ 67878:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(61049),
    isLength = __webpack_require__(61158);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ 93746:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__(67878),
    isObjectLike = __webpack_require__(15125);

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;


/***/ }),

/***/ 73226:
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(37772),
    stubFalse = __webpack_require__(36330);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ 92301:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObjectLike = __webpack_require__(15125),
    isPlainObject = __webpack_require__(97030);

/**
 * Checks if `value` is likely a DOM element.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
 * @example
 *
 * _.isElement(document.body);
 * // => true
 *
 * _.isElement('<body>');
 * // => false
 */
function isElement(value) {
  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
}

module.exports = isElement;


/***/ }),

/***/ 45455:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseKeys = __webpack_require__(86411),
    getTag = __webpack_require__(70940),
    isArguments = __webpack_require__(79631),
    isArray = __webpack_require__(86152),
    isArrayLike = __webpack_require__(67878),
    isBuffer = __webpack_require__(73226),
    isPrototype = __webpack_require__(16001),
    isTypedArray = __webpack_require__(77598);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),

/***/ 18149:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__(88746);

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;


/***/ }),

/***/ 85121:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    isObjectLike = __webpack_require__(15125),
    isPlainObject = __webpack_require__(97030);

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';

/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */
function isError(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag ||
    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
}

module.exports = isError;


/***/ }),

/***/ 61049:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    isObject = __webpack_require__(29259);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ 61158:
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ 4714:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMap = __webpack_require__(74511),
    baseUnary = __webpack_require__(47826),
    nodeUtil = __webpack_require__(4146);

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ 1842:
/***/ ((module) => {

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;


/***/ }),

/***/ 25877:
/***/ ((module) => {

/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;


/***/ }),

/***/ 80537:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;


/***/ }),

/***/ 29259:
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ 15125:
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ 97030:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    getPrototype = __webpack_require__(47353),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),

/***/ 43679:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsSet = __webpack_require__(8109),
    baseUnary = __webpack_require__(47826),
    nodeUtil = __webpack_require__(4146);

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ 85505:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    isArray = __webpack_require__(86152),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),

/***/ 4795:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(53366),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ 77598:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__(35522),
    baseUnary = __webpack_require__(47826),
    nodeUtil = __webpack_require__(4146);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ 84336:
/***/ ((module) => {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),

/***/ 8266:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(70940),
    isObjectLike = __webpack_require__(15125);

/** `Object#toString` result references. */
var weakMapTag = '[object WeakMap]';

/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */
function isWeakMap(value) {
  return isObjectLike(value) && getTag(value) == weakMapTag;
}

module.exports = isWeakMap;


/***/ }),

/***/ 25923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(18874),
    baseIteratee = __webpack_require__(68286);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */
function iteratee(func) {
  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
}

module.exports = iteratee;


/***/ }),

/***/ 79729:
/***/ ((module) => {

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeJoin = arrayProto.join;

/**
 * Converts all elements in `array` into a string separated by `separator`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to convert.
 * @param {string} [separator=','] The element separator.
 * @returns {string} Returns the joined string.
 * @example
 *
 * _.join(['a', 'b', 'c'], '~');
 * // => 'a~b~c'
 */
function join(array, separator) {
  return array == null ? '' : nativeJoin.call(array, separator);
}

module.exports = join;


/***/ }),

/***/ 90249:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(1634),
    baseKeys = __webpack_require__(86411),
    isArrayLike = __webpack_require__(67878);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ 18582:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(1634),
    baseKeysIn = __webpack_require__(18390),
    isArrayLike = __webpack_require__(67878);

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ 56974:
/***/ ((module) => {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;


/***/ }),

/***/ 16760:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(50343),
    baseIteratee = __webpack_require__(68286),
    baseMap = __webpack_require__(93401),
    isArray = __webpack_require__(86152);

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;


/***/ }),

/***/ 30733:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(96738);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ 98537:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMerge = __webpack_require__(84565),
    createAssigner = __webpack_require__(97263);

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;


/***/ }),

/***/ 12782:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMerge = __webpack_require__(84565),
    createAssigner = __webpack_require__(97263);

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});

module.exports = mergeWith;


/***/ }),

/***/ 34291:
/***/ ((module) => {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;


/***/ }),

/***/ 61100:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(37772);

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ 17620:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(50343),
    baseClone = __webpack_require__(18874),
    baseUnset = __webpack_require__(29078),
    castPath = __webpack_require__(17297),
    copyObject = __webpack_require__(752),
    customOmitClone = __webpack_require__(48642),
    flatRest = __webpack_require__(29097),
    getAllKeysIn = __webpack_require__(76939);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

module.exports = omit;


/***/ }),

/***/ 83465:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__(36060),
    createWrap = __webpack_require__(87902),
    getHolder = __webpack_require__(13325),
    replaceHolders = __webpack_require__(90527);

/** Used to compose bitmasks for function metadata. */
var WRAP_PARTIAL_FLAG = 32;

/**
 * Creates a function that invokes `func` with `partials` prepended to the
 * arguments it receives. This method is like `_.bind` except it does **not**
 * alter the `this` binding.
 *
 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * **Note:** This method doesn't set the "length" property of partially
 * applied functions.
 *
 * @static
 * @memberOf _
 * @since 0.2.0
 * @category Function
 * @param {Function} func The function to partially apply arguments to.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new partially applied function.
 * @example
 *
 * function greet(greeting, name) {
 *   return greeting + ' ' + name;
 * }
 *
 * var sayHelloTo = _.partial(greet, 'hello');
 * sayHelloTo('fred');
 * // => 'hello fred'
 *
 * // Partially applied with placeholders.
 * var greetFred = _.partial(greet, _, 'fred');
 * greetFred('hi');
 * // => 'hi fred'
 */
var partial = baseRest(function(func, partials) {
  var holders = replaceHolders(partials, getHolder(partial));
  return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
});

// Assign default placeholders.
partial.placeholder = {};

module.exports = partial;


/***/ }),

/***/ 65798:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__(20256),
    basePropertyDeep = __webpack_require__(82952),
    isKey = __webpack_require__(21401),
    toKey = __webpack_require__(33812);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),

/***/ 30577:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createWrap = __webpack_require__(87902),
    flatRest = __webpack_require__(29097);

/** Used to compose bitmasks for function metadata. */
var WRAP_REARG_FLAG = 256;

/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */
var rearg = flatRest(function(func, indexes) {
  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});

module.exports = rearg;


/***/ }),

/***/ 64116:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIteratee = __webpack_require__(68286),
    basePullAt = __webpack_require__(62676);

/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */
function remove(array, predicate) {
  var result = [];
  if (!(array && array.length)) {
    return result;
  }
  var index = -1,
      indexes = [],
      length = array.length;

  predicate = baseIteratee(predicate, 3);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }
  basePullAt(array, indexes);
  return result;
}

module.exports = remove;


/***/ }),

/***/ 54014:
/***/ ((module) => {

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeReverse = arrayProto.reverse;

/**
 * Reverses `array` so that the first element becomes the last, the second
 * element becomes the second to last, and so on.
 *
 * **Note:** This method mutates `array` and is based on
 * [`Array#reverse`](https://mdn.io/Array/reverse).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _.reverse(array);
 * // => [3, 2, 1]
 *
 * console.log(array);
 * // => [3, 2, 1]
 */
function reverse(array) {
  return array == null ? array : nativeReverse.call(array);
}

module.exports = reverse;


/***/ }),

/***/ 829:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(62034),
    baseOrderBy = __webpack_require__(23813),
    baseRest = __webpack_require__(36060),
    isIterateeCall = __webpack_require__(82406);

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

module.exports = sortBy;


/***/ }),

/***/ 30981:
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ 36330:
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ 5707:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toNumber = __webpack_require__(7642);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),

/***/ 38101:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toFinite = __webpack_require__(5707);

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;


/***/ }),

/***/ 7642:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTrim = __webpack_require__(51704),
    isObject = __webpack_require__(29259),
    isSymbol = __webpack_require__(4795);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ 25497:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(50343),
    copyArray = __webpack_require__(51522),
    isArray = __webpack_require__(86152),
    isSymbol = __webpack_require__(4795),
    stringToPath = __webpack_require__(54452),
    toKey = __webpack_require__(33812),
    toString = __webpack_require__(66188);

/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */
function toPath(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey);
  }
  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
}

module.exports = toPath;


/***/ }),

/***/ 63329:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(752),
    keysIn = __webpack_require__(18582);

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;


/***/ }),

/***/ 66188:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(1054);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ 1573:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(1054),
    castSlice = __webpack_require__(23895),
    charsEndIndex = __webpack_require__(10768),
    stringToArray = __webpack_require__(8435),
    toString = __webpack_require__(66188),
    trimmedEndIndex = __webpack_require__(52153);

/**
 * Removes trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimEnd('  abc  ');
 * // => '  abc'
 *
 * _.trimEnd('-_-abc-_-', '_-');
 * // => '-_-abc'
 */
function trimEnd(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.slice(0, trimmedEndIndex(string) + 1);
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

  return castSlice(strSymbols, 0, end).join('');
}

module.exports = trimEnd;


/***/ }),

/***/ 93433:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(1054),
    castSlice = __webpack_require__(23895),
    charsStartIndex = __webpack_require__(51821),
    stringToArray = __webpack_require__(8435),
    toString = __webpack_require__(66188);

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * Removes leading whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimStart('  abc  ');
 * // => 'abc  '
 *
 * _.trimStart('-_-abc-_-', '_-');
 * // => 'abc-_-'
 */
function trimStart(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.replace(reTrimStart, '');
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      start = charsStartIndex(strSymbols, stringToArray(chars));

  return castSlice(strSymbols, start).join('');
}

module.exports = trimStart;


/***/ }),

/***/ 26139:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(62034),
    baseRest = __webpack_require__(36060),
    baseUniq = __webpack_require__(67326),
    isArrayLikeObject = __webpack_require__(93746);

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest(function(arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});

module.exports = union;


/***/ }),

/***/ 15316:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(62034),
    baseIteratee = __webpack_require__(68286),
    baseRest = __webpack_require__(36060),
    baseUniq = __webpack_require__(67326),
    isArrayLikeObject = __webpack_require__(93746),
    last = __webpack_require__(56974);

/**
 * This method is like `_.union` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which uniqueness is computed. Result values are chosen from the first
 * array in which the value occurs. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
var unionBy = baseRest(function(arrays) {
  var iteratee = last(arrays);
  if (isArrayLikeObject(iteratee)) {
    iteratee = undefined;
  }
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));
});

module.exports = unionBy;


/***/ }),

/***/ 93382:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__(62034),
    baseRest = __webpack_require__(36060),
    baseUniq = __webpack_require__(67326),
    isArrayLikeObject = __webpack_require__(93746),
    last = __webpack_require__(56974);

/**
 * This method is like `_.union` except that it accepts `comparator` which
 * is invoked to compare elements of `arrays`. Result values are chosen from
 * the first array in which the value occurs. The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.unionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
 */
var unionWith = baseRest(function(arrays) {
  var comparator = last(arrays);
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
});

module.exports = unionWith;


/***/ }),

/***/ 17195:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseUnset = __webpack_require__(29078);

/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

module.exports = unset;


/***/ }),

/***/ 91168:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseUpdate = __webpack_require__(75277),
    castFunction = __webpack_require__(89419);

/**
 * This method is like `_.set` except that accepts `updater` to produce the
 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
 * is invoked with one argument: (value).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {Function} updater The function to produce the updated value.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
 * console.log(object.a[0].b.c);
 * // => 9
 *
 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
 * console.log(object.x[0].y.z);
 * // => 0
 */
function update(object, path, updater) {
  return object == null ? object : baseUpdate(object, path, castFunction(updater));
}

module.exports = update;


/***/ }),

/***/ 98346:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseValues = __webpack_require__(50753),
    keys = __webpack_require__(90249);

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;


/***/ }),

/***/ 67304:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseDifference = __webpack_require__(85246),
    baseRest = __webpack_require__(36060),
    isArrayLikeObject = __webpack_require__(93746);

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, values)
    : [];
});

module.exports = without;


/***/ }),

/***/ 68674:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var LazyWrapper = __webpack_require__(66504),
    LodashWrapper = __webpack_require__(45859),
    baseLodash = __webpack_require__(73620),
    isArray = __webpack_require__(86152),
    isObjectLike = __webpack_require__(15125),
    wrapperClone = __webpack_require__(67366);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */
function lodash(value) {
  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    if (value instanceof LodashWrapper) {
      return value;
    }
    if (hasOwnProperty.call(value, '__wrapped__')) {
      return wrapperClone(value);
    }
  }
  return new LodashWrapper(value);
}

// Ensure wrappers are instances of `baseLodash`.
lodash.prototype = baseLodash.prototype;
lodash.prototype.constructor = lodash;

module.exports = lodash;


/***/ }),

/***/ 32845:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Top level file is just a mixin of submodules & constants


const { Deflate, deflate, deflateRaw, gzip } = __webpack_require__(79880);

const { Inflate, inflate, inflateRaw, ungzip } = __webpack_require__(21380);

const constants = __webpack_require__(91271);

module.exports.Deflate = Deflate;
module.exports.deflate = deflate;
module.exports.deflateRaw = deflateRaw;
module.exports.gzip = gzip;
module.exports.Inflate = Inflate;
module.exports.inflate = inflate;
module.exports.inflateRaw = inflateRaw;
module.exports.ungzip = ungzip;
module.exports.constants = constants;


/***/ }),

/***/ 79880:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



const zlib_deflate = __webpack_require__(75789);
const utils        = __webpack_require__(49761);
const strings      = __webpack_require__(47944);
const msg          = __webpack_require__(82950);
const ZStream      = __webpack_require__(20744);

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED
} = __webpack_require__(91271);

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  let status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = zlib_deflate.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = zlib_deflate.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    this.result = utils.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  const deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


module.exports.Deflate = Deflate;
module.exports.deflate = deflate;
module.exports.deflateRaw = deflateRaw;
module.exports.gzip = gzip;
module.exports.constants = __webpack_require__(91271);


/***/ }),

/***/ 21380:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



const zlib_inflate = __webpack_require__(35020);
const utils        = __webpack_require__(49761);
const strings      = __webpack_require__(47944);
const msg          = __webpack_require__(82950);
const ZStream      = __webpack_require__(20744);
const GZheader     = __webpack_require__(7357);

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
} = __webpack_require__(91271);

/* ===========================================================================*/


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  this.options = utils.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ''
  }, options || {});

  const opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  let status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;

  if (this.ended) return false;

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, _flush_mode);

    if (status === Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(strm, dictionary);

      if (status === Z_OK) {
        status = zlib_inflate.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        // Replace code with more verbose
        status = Z_NEED_DICT;
      }
    }

    // Skip snyc markers if more data follows and not raw mode
    while (strm.avail_in > 0 &&
           status === Z_STREAM_END &&
           strm.state.wrap > 0 &&
           data[strm.next_in] !== 0)
    {
      zlib_inflate.inflateReset(strm);
      status = zlib_inflate.inflate(strm, _flush_mode);
    }

    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }

    // Remember real `avail_out` value, because we may patch out buffer content
    // to align utf8 strings boundaries.
    last_avail_out = strm.avail_out;

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {

        if (this.options.to === 'string') {

          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail & realign counters
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

          this.onData(utf8str);

        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }

    // Must repeat iteration if out buffer is full
    if (status === Z_OK && last_avail_out === 0) continue;

    // Finalize if end of stream reached.
    if (status === Z_STREAM_END) {
      status = zlib_inflate.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  const inflator = new Inflate(options);

  inflator.push(input);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) throw inflator.msg || msg[inflator.err];

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


module.exports.Inflate = Inflate;
module.exports.inflate = inflate;
module.exports.inflateRaw = inflateRaw;
module.exports.ungzip = inflate;
module.exports.constants = __webpack_require__(91271);


/***/ }),

/***/ 49761:
/***/ ((module) => {

"use strict";



const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

module.exports.assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
module.exports.flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};


/***/ }),

/***/ 47944:
/***/ ((module) => {

"use strict";
// String encode/decode helpers



// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
module.exports.string2buf = (str) => {
  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }

  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
module.exports.buf2string = (buf, max) => {
  const len = max || buf.length;

  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }

  let i, out;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
module.exports.utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),

/***/ 95562:
/***/ ((module) => {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


module.exports = adler32;


/***/ }),

/***/ 91271:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_MEM_ERROR:       -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),

/***/ 24299:
/***/ ((module) => {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


module.exports = crc32;


/***/ }),

/***/ 75789:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = __webpack_require__(69564);
const adler32 = __webpack_require__(95562);
const crc32   = __webpack_require__(24299);
const msg     = __webpack_require__(82950);

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,
  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,
  Z_DEFAULT_COMPRESSION,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,
  Z_UNKNOWN,
  Z_DEFLATED
} = __webpack_require__(91271);

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS      = 256;
/* number of literal bytes 0..255 */
const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES       = 30;
/* number of distance codes */
const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
const MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

const PRESET_DICT = 0x20;

const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
//#ifdef GZIP
const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
//#endif
const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
const FINISH_STATE  = 666;    /* stream complete */

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = msg[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) * 2) - ((f) > 4 ? 9 : 0);
};

const zero = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};

/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */
const slide_hash = (s) => {
  let n, m;
  let p;
  let wsize = s.w_size;

  n = s.hash_size;
  p = n;
  do {
    m = s.head[--p];
    s.head[p] = (m >= wsize ? m - wsize : 0);
  } while (--n);
  n = wsize;
//#ifndef FASTEST
  p = n;
  do {
    m = s.prev[--p];
    s.prev[p] = (m >= wsize ? m - wsize : 0);
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */
  } while (--n);
//#endif
};

/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out  += len;
  s.pending_out  += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending      -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let n, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */
const deflate_stored = (s, flush) => {

  /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

  /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */
    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    if (s.strm.avail_out < have) {         /* need room for header */
      break;
    }
      /* maximum stored block length that will fit in avail_out: */
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;  /* bytes left in window */
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;   /* limit len to the input */
    }
    if (len > have) {
      len = have;             /* limit len to the output */
    }

    /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */
    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||
                        flush === Z_NO_FLUSH ||
                        len !== left + s.strm.avail_in)) {
      break;
    }

    /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */
    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);

    /* Replace the lengths in the dummy stored block with len. */
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;

    /* Write the stored block header bytes. */
    flush_pending(s.strm);

//#ifdef ZLIB_DEBUG
//    /* Update debugging counts for the data about to be copied. */
//    s->compressed_len += len << 3;
//    s->bits_sent += len << 3;
//#endif

    /* Copy uncompressed bytes from the window to next_out. */
    if (left) {
      if (left > len) {
        left = len;
      }
      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }

    /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);

  /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */
  used -= s.strm.avail_in;    /* number of input bytes directly copied */
  if (used) {
    /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */
    if (used >= s.w_size) {  /* supplant the previous history */
      s.matches = 2;     /* clear hash */
      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    }
    else {
      if (s.window_size - s.strstart <= used) {
        /* Slide the window down. */
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;   /* add a pending slide_hash() */
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* If the last block was written to next_out, then done. */
  if (last) {
    return BS_FINISH_DONE;
  }

  /* If flushing and all input has been consumed, then done. */
  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&
    s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }

  /* Fill the window with any remaining input. */
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    /* Slide the window down. */
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    //zmemcpy(s->window, s->window + s->w_size, s->strstart);
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;       /* add a pending slide_hash() */
    }
    have += s.w_size;      /* more space now */
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */
  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    /* maximum stored block length that will fit in pending: */
  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block ||
     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&
     s.strm.avail_in === 0 && left <= have)) {
    len = left > have ? have : left;
    last = flush === Z_FINISH && s.strm.avail_in === 0 &&
         len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }

  /* We've done all we can with the available input and output. */
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};


/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.sym_buf = 0;        /* buffer for distances and literals/lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.sym_next = 0;      /* running index in sym_buf */
  this.sym_end = 0;       /* symbol table full when sym_next reaches this */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */
const deflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
//#ifdef GZIP
                                s.status !== GZIP_STATE &&
//#endif
                                s.status !== EXTRA_STATE &&
                                s.status !== NAME_STATE &&
                                s.status !== COMMENT_STATE &&
                                s.status !== HCRC_STATE &&
                                s.status !== BUSY_STATE &&
                                s.status !== FINISH_STATE)) {
    return 1;
  }
  return 0;
};


const deflateResetKeep = (strm) => {

  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status =
//#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE :
//#endif
    s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR;
  }
  strm.state.gzhead = head;
  return Z_OK;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;     /* to pass state test in deflateReset() */

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->sym_buf = s->pending_buf + s->lit_bufsize;
  s.sym_buf = s.lit_bufsize;

  //s->sym_end = (s->lit_bufsize - 1) * 3;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
};


/* ========================================================================= */
const deflate = (strm, flush) => {

  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  const s = strm.state;

  if (!strm.output ||
      (strm.avail_in !== 0 && !strm.input) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Write the header */
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    /* zlib header */
    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
    let level_flags = -1;

    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= (level_flags << 6);
    if (s.strstart !== 0) { header |= PRESET_DICT; }
    header += 31 - (header % 31);

    putShortMSB(s, header);

    /* Save the adler32 of the preset dictionary: */
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }
    strm.adler = 1; // adler32(0L, Z_NULL, 0);
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  }
//#ifdef GZIP
  if (s.status === GZIP_STATE) {
    /* gzip header */
    strm.adler = 0;  //crc32(0L, Z_NULL, 0);
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) { // s->gzhead == Z_NULL
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK;
      }
    }
    else {
      put_byte(s, (s.gzhead.text ? 1 : 0) +
                  (s.gzhead.hcrc ? 2 : 0) +
                  (!s.gzhead.extra ? 0 : 4) +
                  (!s.gzhead.name ? 0 : 8) +
                  (!s.gzhead.comment ? 0 : 16)
      );
      put_byte(s, s.gzhead.time & 0xff);
      put_byte(s, (s.gzhead.time >> 8) & 0xff);
      put_byte(s, (s.gzhead.time >> 16) & 0xff);
      put_byte(s, (s.gzhead.time >> 24) & 0xff);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, s.gzhead.os & 0xff);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 0xff);
        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy = s.pending_buf_size - s.pending;
        // zmemcpy(s.pending_buf + s.pending,
        //    s.gzhead.extra + s.gzindex, copy);
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
        s.pending = s.pending_buf_size;
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex += copy;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
        beg = 0;
        left -= copy;
      }
      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      // zmemcpy(s->pending_buf + s->pending,
      //     s->gzhead->extra + s->gzindex, left);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
    }
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  }
//#endif

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) :
                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                 s.strategy === Z_RLE ? deflate_rle(s, flush) :
                 configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
};


const deflateEnd = (strm) => {

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  const status = strm.state.status;

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
};


module.exports.deflateInit = deflateInit;
module.exports.deflateInit2 = deflateInit2;
module.exports.deflateReset = deflateReset;
module.exports.deflateResetKeep = deflateResetKeep;
module.exports.deflateSetHeader = deflateSetHeader;
module.exports.deflate = deflate;
module.exports.deflateEnd = deflateEnd;
module.exports.deflateSetDictionary = deflateSetDictionary;
module.exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/


/***/ }),

/***/ 7357:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),

/***/ 24980:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
const BAD = 16209;       /* got a data error -- remain here until reset */
const TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  let _in;                    /* local strm.input */
  let last;                   /* have enough input while in < last */
  let _out;                   /* local strm.output */
  let beg;                    /* inflate()'s initial strm.output */
  let end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  let dmax;                   /* maximum distance from zlib header */
//#endif
  let wsize;                  /* window size or zero if not using window */
  let whave;                  /* valid bytes in the window */
  let wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  let s_window;               /* allocated sliding window, if wsize != 0 */
  let hold;                   /* local strm.hold */
  let bits;                   /* local strm.bits */
  let lcode;                  /* local strm.lencode */
  let dcode;                  /* local strm.distcode */
  let lmask;                  /* mask for first level of length codes */
  let dmask;                  /* mask for first level of distance codes */
  let here;                   /* retrieved table entry */
  let op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  let len;                    /* match length, unused bytes */
  let dist;                   /* match distance */
  let from;                   /* where to copy match from */
  let from_source;


  let input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  const state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),

/***/ 35020:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32       = __webpack_require__(95562);
const crc32         = __webpack_require__(24299);
const inflate_fast  = __webpack_require__(24980);
const inflate_table = __webpack_require__(50881);

const CODES = 0;
const LENS = 1;
const DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_FINISH, Z_BLOCK, Z_TREES,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,
  Z_DEFLATED
} = __webpack_require__(91271);


/* STATES ====================================================================*/
/* ===========================================================================*/


const    HEAD = 16180;       /* i: waiting for magic header */
const    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */
const    TIME = 16182;       /* i: waiting for modification time (gzip) */
const    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */
const    EXLEN = 16184;      /* i: waiting for extra length (gzip) */
const    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */
const    NAME = 16186;       /* i: waiting for end of file name (gzip) */
const    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */
const    HCRC = 16188;       /* i: waiting for header crc (gzip) */
const    DICTID = 16189;    /* i: waiting for dictionary check value */
const    DICT = 16190;      /* waiting for inflateSetDictionary() call */
const        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */
const        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */
const        STORED = 16193;    /* i: waiting for stored size (length and complement) */
const        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */
const        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */
const        TABLE = 16196;     /* i: waiting for dynamic block table lengths */
const        LENLENS = 16197;   /* i: waiting for code length code lengths */
const        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */
const            LEN_ = 16199;      /* i: same as LEN below, but only first time in */
const            LEN = 16200;       /* i: waiting for length/lit/eob code */
const            LENEXT = 16201;    /* i: waiting for length extra bits */
const            DIST = 16202;      /* i: waiting for distance code */
const            DISTEXT = 16203;   /* i: waiting for distance extra bits */
const            MATCH = 16204;     /* o: waiting for output space to copy string */
const            LIT = 16205;       /* o: waiting for output space to write literal */
const    CHECK = 16206;     /* i: waiting for 32-bit check value */
const    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */
const    DONE = 16208;      /* finished check, done -- remain here until reset */
const    BAD = 16209;       /* got a data error -- remain here until reset */
const    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */
const    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_WBITS = MAX_WBITS;


const zswap32 = (q) => {

  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
};


function InflateState() {
  this.strm = null;           /* pointer back to this zlib stream */
  this.mode = 0;              /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}


const inflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm ||
    state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};


const inflateResetKeep = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
};


const inflateReset = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

};


const inflateReset2 = (strm, windowBits) => {
  let wrap;

  /* get the state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};


const inflateInit2 = (strm, windowBits) => {

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  const state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.strm = strm;
  state.window = null/*Z_NULL*/;
  state.mode = HEAD;     /* to pass state test in inflateReset2() */
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
};


const inflateInit = (strm) => {

  return inflateInit2(strm, DEF_WBITS);
};


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
let virgin = true;

let lenfix, distfix; // We have no pointers in JS, so keep tables separate


const fixedtables = (state) => {

  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    let sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
const updatewindow = (strm, src, end, copy) => {

  let dist;
  const state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
};


const inflate = (strm, flush) => {

  let state;
  let input, output;          // input/output buffers
  let next;                   /* next input INDEX */
  let put;                    /* next output INDEX */
  let have, left;             /* available input and output */
  let hold;                   /* bit buffer */
  let bits;                   /* bits in bit buffer */
  let _in, _out;              /* save starting available input and output */
  let copy;                   /* number of stored or match bytes to copy */
  let from;                   /* where to copy match bytes from */
  let from_source;
  let here = 0;               /* current decoding table entry */
  let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //let last;                   /* parent table entry */
  let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  let len;                    /* length to copy for repeats, bits to drop */
  let ret;                    /* return code */
  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  let opts;

  let n; // temporary variable for NEED_BITS

  const order = /* permutation of code lengths */
    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


  if (inflateStateCheck(strm) || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          if (state.wbits === 0) {
            state.wbits = 15;
          }
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        if (len > 15 || len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }

        // !!! pako patch. Force use `options.windowBits` if passed.
        // Required to always use max window size by default.
        state.dmax = 1 << state.wbits;
        //state.dmax = 1 << len;

        state.flags = 0;               /* indicate zlib header */
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Uint8Array(state.head.extra_len);
              }
              state.head.extra.set(
                input.subarray(
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  next + copy
                ),
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          output.set(input.subarray(next, next + copy), put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if ((state.wrap & 4) && _out) {
            strm.adler = state.check =
                /*UPDATE_CHECK(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if ((state.wrap & 4) && _out) {
    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};


const inflateEnd = (strm) => {

  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
};


const inflateGetHeader = (strm, head) => {

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
};


const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;

  let state;
  let dictid;
  let ret;

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
};


module.exports.inflateReset = inflateReset;
module.exports.inflateReset2 = inflateReset2;
module.exports.inflateResetKeep = inflateResetKeep;
module.exports.inflateInit = inflateInit;
module.exports.inflateInit2 = inflateInit2;
module.exports.inflate = inflate;
module.exports.inflateEnd = inflateEnd;
module.exports.inflateGetHeader = inflateGetHeader;
module.exports.inflateSetDictionary = inflateSetDictionary;
module.exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/


/***/ }),

/***/ 50881:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const MAXBITS = 15;
const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

const CODES = 0;
const LENS = 1;
const DISTS = 2;

const lbase = new Uint16Array([ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
]);

const lext = new Uint8Array([ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
]);

const dbase = new Uint16Array([ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
]);

const dext = new Uint8Array([ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
]);

const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
{
  const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  let len = 0;               /* a code's length in bits */
  let sym = 0;               /* index of code symbols */
  let min = 0, max = 0;          /* minimum and maximum code lengths */
  let root = 0;              /* number of index bits for root table */
  let curr = 0;              /* number of index bits for current table */
  let drop = 0;              /* code bits to drop for sub-table */
  let left = 0;                   /* number of prefix codes available */
  let used = 0;              /* code entries in table used */
  let huff = 0;              /* Huffman code */
  let incr;              /* for incrementing code, index */
  let fill;              /* index for replicating entries */
  let low;               /* low bits for current root entry */
  let mask;              /* mask for low root bits */
  let next;             /* next available space in table */
  let base = null;     /* base value table to use */
//  let shoextra;    /* extra bits table to use */
  let match;                  /* use base and extra for symbol >= match */
  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  let extra = null;

  let here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    match = 20;

  } else if (type === LENS) {
    base = lbase;
    extra = lext;
    match = 257;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    match = 0;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base[work[sym] - match];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


module.exports = inflate_table;


/***/ }),

/***/ 82950:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),

/***/ 69564:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH    = 3;
const MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS      = 256;
/* number of literal bytes 0..255 */

const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES       = 30;
/* number of distance codes */

const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

const MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */

  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Tracev((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) => {
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */

  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    code = (code + bl_count[bits - 1]) << 1;
    next_code[bits] = code;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) => {
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */

  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) => {
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */

  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let sx = 0;         /* running index in sym_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and sym_buf is ok: */
      //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

    } while (sx < s.sym_next);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */

  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) => {
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */

  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let block_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("block-listed") bytes. */
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("allow-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  bi_windup(s);        /* align on byte boundary */
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */
const _tr_flush_block = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->sym_next / 3));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally = (s, dist, lc) => {
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

  return (s.sym_next === s.sym_end);
};

module.exports._tr_init  = _tr_init;
module.exports._tr_stored_block = _tr_stored_block;
module.exports._tr_flush_block  = _tr_flush_block;
module.exports._tr_tally = _tr_tally;
module.exports._tr_align = _tr_align;


/***/ }),

/***/ 20744:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),

/***/ 34126:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

const strictUriEncode = __webpack_require__(57785);
const decodeComponent = __webpack_require__(15554);
const splitOnFirst = __webpack_require__(15452);
const filterObject = __webpack_require__(40063);

const isNullOrUndefined = value => value === null || value === undefined;

const encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');

function encoderForArrayFormat(options) {
	switch (options.arrayFormat) {
		case 'index':
			return key => (result, value) => {
				const index = result.length;

				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[', index, ']'].join('')];
				}

				return [
					...result,
					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
				];
			};

		case 'bracket':
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[]'].join('')];
				}

				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
			};

		case 'colon-list-separator':
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), ':list='].join('')];
				}

				return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];
			};

		case 'comma':
		case 'separator':
		case 'bracket-separator': {
			const keyValueSep = options.arrayFormat === 'bracket-separator' ?
				'[]=' :
				'=';

			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				// Translate null to an empty string so that it doesn't serialize as 'null'
				value = value === null ? '' : value;

				if (result.length === 0) {
					return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
				}

				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
			};
		}

		default:
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, encode(key, options)];
				}

				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
			};
	}
}

function parserForArrayFormat(options) {
	let result;

	switch (options.arrayFormat) {
		case 'index':
			return (key, value, accumulator) => {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return (key, value, accumulator) => {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'colon-list-separator':
			return (key, value, accumulator) => {
				result = /(:list)$/.exec(key);
				key = key.replace(/:list$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'comma':
		case 'separator':
			return (key, value, accumulator) => {
				const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
				const isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));
				value = isEncodedArray ? decode(value, options) : value;
				const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
				accumulator[key] = newValue;
			};

		case 'bracket-separator':
			return (key, value, accumulator) => {
				const isArray = /(\[\])$/.test(key);
				key = key.replace(/\[\]$/, '');

				if (!isArray) {
					accumulator[key] = value ? decode(value, options) : value;
					return;
				}

				const arrayValue = value === null ?
					[] :
					value.split(options.arrayFormatSeparator).map(item => decode(item, options));

				if (accumulator[key] === undefined) {
					accumulator[key] = arrayValue;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], arrayValue);
			};

		default:
			return (key, value, accumulator) => {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function validateArrayFormatSeparator(value) {
	if (typeof value !== 'string' || value.length !== 1) {
		throw new TypeError('arrayFormatSeparator must be single character string');
	}
}

function encode(value, options) {
	if (options.encode) {
		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function decode(value, options) {
	if (options.decode) {
		return decodeComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	}

	if (typeof input === 'object') {
		return keysSorter(Object.keys(input))
			.sort((a, b) => Number(a) - Number(b))
			.map(key => input[key]);
	}

	return input;
}

function removeHash(input) {
	const hashStart = input.indexOf('#');
	if (hashStart !== -1) {
		input = input.slice(0, hashStart);
	}

	return input;
}

function getHash(url) {
	let hash = '';
	const hashStart = url.indexOf('#');
	if (hashStart !== -1) {
		hash = url.slice(hashStart);
	}

	return hash;
}

function extract(input) {
	input = removeHash(input);
	const queryStart = input.indexOf('?');
	if (queryStart === -1) {
		return '';
	}

	return input.slice(queryStart + 1);
}

function parseValue(value, options) {
	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
		value = Number(value);
	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
		value = value.toLowerCase() === 'true';
	}

	return value;
}

function parse(query, options) {
	options = Object.assign({
		decode: true,
		sort: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ',',
		parseNumbers: false,
		parseBooleans: false
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const formatter = parserForArrayFormat(options);

	// Create an object with no prototype
	const ret = Object.create(null);

	if (typeof query !== 'string') {
		return ret;
	}

	query = query.trim().replace(/^[?#&]/, '');

	if (!query) {
		return ret;
	}

	for (const param of query.split('&')) {
		if (param === '') {
			continue;
		}

		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

		// Missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
		formatter(decode(key, options), value, ret);
	}

	for (const key of Object.keys(ret)) {
		const value = ret[key];
		if (typeof value === 'object' && value !== null) {
			for (const k of Object.keys(value)) {
				value[k] = parseValue(value[k], options);
			}
		} else {
			ret[key] = parseValue(value, options);
		}
	}

	if (options.sort === false) {
		return ret;
	}

	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
		const value = ret[key];
		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
			// Sort object keys, not values
			result[key] = keysSorter(value);
		} else {
			result[key] = value;
		}

		return result;
	}, Object.create(null));
}

exports.extract = extract;
exports.parse = parse;

exports.stringify = (object, options) => {
	if (!object) {
		return '';
	}

	options = Object.assign({
		encode: true,
		strict: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ','
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const shouldFilter = key => (
		(options.skipNull && isNullOrUndefined(object[key])) ||
		(options.skipEmptyString && object[key] === '')
	);

	const formatter = encoderForArrayFormat(options);

	const objectCopy = {};

	for (const key of Object.keys(object)) {
		if (!shouldFilter(key)) {
			objectCopy[key] = object[key];
		}
	}

	const keys = Object.keys(objectCopy);

	if (options.sort !== false) {
		keys.sort(options.sort);
	}

	return keys.map(key => {
		const value = object[key];

		if (value === undefined) {
			return '';
		}

		if (value === null) {
			return encode(key, options);
		}

		if (Array.isArray(value)) {
			if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
				return encode(key, options) + '[]';
			}

			return value
				.reduce(formatter(key), [])
				.join('&');
		}

		return encode(key, options) + '=' + encode(value, options);
	}).filter(x => x.length > 0).join('&');
};

exports.parseUrl = (url, options) => {
	options = Object.assign({
		decode: true
	}, options);

	const [url_, hash] = splitOnFirst(url, '#');

	return Object.assign(
		{
			url: url_.split('?')[0] || '',
			query: parse(extract(url), options)
		},
		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
	);
};

exports.stringifyUrl = (object, options) => {
	options = Object.assign({
		encode: true,
		strict: true,
		[encodeFragmentIdentifier]: true
	}, options);

	const url = removeHash(object.url).split('?')[0] || '';
	const queryFromUrl = exports.extract(object.url);
	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

	const query = Object.assign(parsedQueryFromUrl, object.query);
	let queryString = exports.stringify(query, options);
	if (queryString) {
		queryString = `?${queryString}`;
	}

	let hash = getHash(object.url);
	if (object.fragmentIdentifier) {
		hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
	}

	return `${url}${queryString}${hash}`;
};

exports.pick = (input, filter, options) => {
	options = Object.assign({
		parseFragmentIdentifier: true,
		[encodeFragmentIdentifier]: false
	}, options);

	const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
	return exports.stringifyUrl({
		url,
		query: filterObject(query, filter),
		fragmentIdentifier
	}, options);
};

exports.exclude = (input, filter, options) => {
	const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);

	return exports.pick(input, exclusionFilter, options);
};


/***/ }),

/***/ 68305:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  combineActions: () => (/* reexport */ combineActions),
  createAction: () => (/* reexport */ createAction),
  createActions: () => (/* reexport */ createActions),
  createCurriedAction: () => (/* reexport */ createCurriedAction),
  handleAction: () => (/* reexport */ handleAction),
  handleActions: () => (/* reexport */ handleActions)
});

// EXTERNAL MODULE: ../../node_modules/invariant/browser.js
var browser = __webpack_require__(47677);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isFunction.js
/* harmony default export */ const isFunction = (function (value) {
  return typeof value === 'function';
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isSymbol.js
/* harmony default export */ const isSymbol = (function (value) {
  return typeof value === 'symbol' || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Symbol]';
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isEmpty.js
/* harmony default export */ const isEmpty = (function (value) {
  return value.length === 0;
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/toString.js
/* harmony default export */ const utils_toString = (function (value) {
  return value.toString();
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isString.js
/* harmony default export */ const isString = (function (value) {
  return typeof value === 'string';
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/constants.js
var DEFAULT_NAMESPACE = '/';
var ACTION_TYPE_DELIMITER = '||';
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/combineActions.js








function isValidActionType(type) {
  return isString(type) || isFunction(type) || isSymbol(type);
}

function isValidActionTypes(types) {
  if (isEmpty(types)) {
    return false;
  }

  return types.every(isValidActionType);
}

function combineActions() {
  for (var _len = arguments.length, actionsTypes = new Array(_len), _key = 0; _key < _len; _key++) {
    actionsTypes[_key] = arguments[_key];
  }

  browser_default()(isValidActionTypes(actionsTypes), 'Expected action types to be strings, symbols, or action creators');
  var combinedActionType = actionsTypes.map(utils_toString).join(ACTION_TYPE_DELIMITER);
  return {
    toString: function toString() {
      return combinedActionType;
    }
  };
}
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/identity.js
/* harmony default export */ const identity = (function (value) {
  return value;
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isNull.js
/* harmony default export */ const isNull = (function (value) {
  return value === null;
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/createAction.js




function createAction(type, payloadCreator, metaCreator) {
  if (payloadCreator === void 0) {
    payloadCreator = identity;
  }

  browser_default()(isFunction(payloadCreator) || isNull(payloadCreator), 'Expected payloadCreator to be a function, undefined or null');
  var finalPayloadCreator = isNull(payloadCreator) || payloadCreator === identity ? identity : function (head) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return head instanceof Error ? head : payloadCreator.apply(void 0, [head].concat(args));
  };
  var hasMeta = isFunction(metaCreator);
  var typeString = type.toString();

  var actionCreator = function actionCreator() {
    var payload = finalPayloadCreator.apply(void 0, arguments);
    var action = {
      type: type
    };

    if (payload instanceof Error) {
      action.error = true;
    }

    if (payload !== undefined) {
      action.payload = payload;
    }

    if (hasMeta) {
      action.meta = metaCreator.apply(void 0, arguments);
    }

    return action;
  };

  actionCreator.toString = function () {
    return typeString;
  };

  return actionCreator;
}
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isPlainObject.js
/* harmony default export */ const isPlainObject = (function (value) {
  if (typeof value !== 'object' || value === null) return false;
  var proto = value;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(value) === proto;
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isArray.js
/* harmony default export */ const isArray = (function (value) {
  return Array.isArray(value);
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isNil.js
/* harmony default export */ const isNil = (function (value) {
  return value === null || value === undefined;
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/getLastElement.js
/* harmony default export */ const getLastElement = (function (array) {
  return array[array.length - 1];
});
// EXTERNAL MODULE: ../../node_modules/to-camel-case/index.js
var to_camel_case = __webpack_require__(8942);
var to_camel_case_default = /*#__PURE__*/__webpack_require__.n(to_camel_case);
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/camelCase.js

var namespacer = '/';
/* harmony default export */ const camelCase = (function (type) {
  return type.indexOf(namespacer) === -1 ? to_camel_case_default()(type) : type.split(namespacer).map((to_camel_case_default())).join(namespacer);
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/arrayToObject.js
/* harmony default export */ const arrayToObject = (function (array, callback) {
  return array.reduce(function (partialObject, element) {
    return callback(partialObject, element);
  }, {});
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isMap.js
/* harmony default export */ const isMap = (function (value) {
  return typeof Map !== 'undefined' && value instanceof Map;
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/ownKeys.js

function ownKeys(object) {
  if (isMap(object)) {
    // We are using loose transforms in babel. Here we are trying to convert an
    // interable to an array. Loose mode expects everything to already be an
    // array. The problem is that our eslint rules encourage us to prefer
    // spread over Array.from.
    //
    // Instead of disabling loose mode we simply disable the warning.
    // eslint-disable-next-line unicorn/prefer-spread
    return Array.from(object.keys());
  }

  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {
    return Reflect.ownKeys(object);
  }

  var keys = Object.getOwnPropertyNames(object);

  if (typeof Object.getOwnPropertySymbols === 'function') {
    keys = keys.concat(Object.getOwnPropertySymbols(object));
  }

  return keys;
}
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/get.js

function get(key, x) {
  return isMap(x) ? x.get(key) : x[key];
}
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/flattenWhenNode.js



/* harmony default export */ const flattenWhenNode = (function (predicate) {
  return function flatten(map, _temp, partialFlatMap, partialFlatActionType) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$namespace = _ref.namespace,
        namespace = _ref$namespace === void 0 ? DEFAULT_NAMESPACE : _ref$namespace,
        prefix = _ref.prefix;

    if (partialFlatMap === void 0) {
      partialFlatMap = {};
    }

    if (partialFlatActionType === void 0) {
      partialFlatActionType = '';
    }

    function connectNamespace(type) {
      var _ref2;

      if (!partialFlatActionType) return type;
      var types = type.toString().split(ACTION_TYPE_DELIMITER);
      var partials = partialFlatActionType.split(ACTION_TYPE_DELIMITER);
      return (_ref2 = []).concat.apply(_ref2, partials.map(function (p) {
        return types.map(function (t) {
          return "" + p + namespace + t;
        });
      })).join(ACTION_TYPE_DELIMITER);
    }

    function connectPrefix(type) {
      if (partialFlatActionType || !prefix || prefix && new RegExp("^" + prefix + namespace).test(type)) {
        return type;
      }

      return "" + prefix + namespace + type;
    }

    ownKeys(map).forEach(function (type) {
      var nextNamespace = connectPrefix(connectNamespace(type));
      var mapValue = get(type, map);

      if (predicate(mapValue)) {
        flatten(mapValue, {
          namespace: namespace,
          prefix: prefix
        }, partialFlatMap, nextNamespace);
      } else {
        partialFlatMap[nextNamespace] = mapValue;
      }
    });
    return partialFlatMap;
  };
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/flattenActionMap.js


/* harmony default export */ const flattenActionMap = (flattenWhenNode(isPlainObject));
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/unflattenActionCreators.js



function unflattenActionCreators(flatActionCreators, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$namespace = _ref.namespace,
      namespace = _ref$namespace === void 0 ? DEFAULT_NAMESPACE : _ref$namespace,
      prefix = _ref.prefix;

  function unflatten(flatActionType, partialNestedActionCreators, partialFlatActionTypePath) {
    var nextNamespace = camelCase(partialFlatActionTypePath.shift());

    if (isEmpty(partialFlatActionTypePath)) {
      partialNestedActionCreators[nextNamespace] = flatActionCreators[flatActionType];
    } else {
      if (!partialNestedActionCreators[nextNamespace]) {
        partialNestedActionCreators[nextNamespace] = {};
      }

      unflatten(flatActionType, partialNestedActionCreators[nextNamespace], partialFlatActionTypePath);
    }
  }

  var nestedActionCreators = {};
  Object.getOwnPropertyNames(flatActionCreators).forEach(function (type) {
    var unprefixedType = prefix ? type.replace("" + prefix + namespace, '') : type;
    return unflatten(type, nestedActionCreators, unprefixedType.split(namespace));
  });
  return nestedActionCreators;
}
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/createActions.js
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }















function createActions(actionMap) {
  for (var _len = arguments.length, identityActions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    identityActions[_key - 1] = arguments[_key];
  }

  var options = isPlainObject(getLastElement(identityActions)) ? identityActions.pop() : {};
  browser_default()(identityActions.every(isString) && (isString(actionMap) || isPlainObject(actionMap)), 'Expected optional object followed by string action types');

  if (isString(actionMap)) {
    return actionCreatorsFromIdentityActions([actionMap].concat(identityActions), options);
  }

  return _objectSpread({}, actionCreatorsFromActionMap(actionMap, options), actionCreatorsFromIdentityActions(identityActions, options));
}

function actionCreatorsFromActionMap(actionMap, options) {
  var flatActionMap = flattenActionMap(actionMap, options);
  var flatActionCreators = actionMapToActionCreators(flatActionMap);
  return unflattenActionCreators(flatActionCreators, options);
}

function actionMapToActionCreators(actionMap, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      prefix = _ref.prefix,
      _ref$namespace = _ref.namespace,
      namespace = _ref$namespace === void 0 ? DEFAULT_NAMESPACE : _ref$namespace;

  function isValidActionMapValue(actionMapValue) {
    if (isFunction(actionMapValue) || isNil(actionMapValue)) {
      return true;
    }

    if (isArray(actionMapValue)) {
      var _actionMapValue$ = actionMapValue[0],
          payload = _actionMapValue$ === void 0 ? identity : _actionMapValue$,
          meta = actionMapValue[1];
      return isFunction(payload) && isFunction(meta);
    }

    return false;
  }

  return arrayToObject(Object.keys(actionMap), function (partialActionCreators, type) {
    var _objectSpread2;

    var actionMapValue = actionMap[type];
    browser_default()(isValidActionMapValue(actionMapValue), 'Expected function, undefined, null, or array with payload and meta ' + ("functions for " + type));
    var prefixedType = prefix ? "" + prefix + namespace + type : type;
    var actionCreator = isArray(actionMapValue) ? createAction.apply(void 0, [prefixedType].concat(actionMapValue)) : createAction(prefixedType, actionMapValue);
    return _objectSpread({}, partialActionCreators, (_objectSpread2 = {}, _objectSpread2[type] = actionCreator, _objectSpread2));
  });
}

function actionCreatorsFromIdentityActions(identityActions, options) {
  var actionMap = arrayToObject(identityActions, function (partialActionMap, type) {
    var _objectSpread3;

    return _objectSpread({}, partialActionMap, (_objectSpread3 = {}, _objectSpread3[type] = identity, _objectSpread3));
  });
  var actionCreators = actionMapToActionCreators(actionMap, options);
  return arrayToObject(Object.keys(actionCreators), function (partialActionCreators, type) {
    var _objectSpread4;

    return _objectSpread({}, partialActionCreators, (_objectSpread4 = {}, _objectSpread4[camelCase(type)] = actionCreators[type], _objectSpread4));
  });
}
// EXTERNAL MODULE: ../../node_modules/just-curry-it/index.js
var just_curry_it = __webpack_require__(32877);
var just_curry_it_default = /*#__PURE__*/__webpack_require__.n(just_curry_it);
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/createCurriedAction.js


/* harmony default export */ const createCurriedAction = (function (type, payloadCreator) {
  return just_curry_it_default()(createAction(type, payloadCreator), payloadCreator.length);
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/isUndefined.js
/* harmony default export */ const isUndefined = (function (value) {
  return value === undefined;
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/handleAction.js








function handleAction(type, reducer, defaultState) {
  if (reducer === void 0) {
    reducer = identity;
  }

  var types = utils_toString(type).split(ACTION_TYPE_DELIMITER);
  browser_default()(!isUndefined(defaultState), "defaultState for reducer handling " + types.join(', ') + " should be defined");
  browser_default()(isFunction(reducer) || isPlainObject(reducer), 'Expected reducer to be a function or object with next and throw reducers');

  var _ref = isFunction(reducer) ? [reducer, reducer] : [reducer.next, reducer.throw].map(function (aReducer) {
    return isNil(aReducer) ? identity : aReducer;
  }),
      nextReducer = _ref[0],
      throwReducer = _ref[1];

  return function (state, action) {
    if (state === void 0) {
      state = defaultState;
    }

    var actionType = action.type;

    if (!actionType || types.indexOf(utils_toString(actionType)) === -1) {
      return state;
    }

    return (action.error === true ? throwReducer : nextReducer)(state, action);
  };
}
;// CONCATENATED MODULE: ../../node_modules/reduce-reducers/es/index.js
/* harmony default export */ const es = (function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var initialState = typeof args[args.length - 1] !== 'function' && args.pop();
  var reducers = args;

  if (typeof initialState === 'undefined') {
    throw new TypeError('The initial state may not be undefined. If you do not want to set a value for this reducer, you can use null instead of undefined.');
  }

  return function (prevState, value) {
    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    var prevStateIsUndefined = typeof prevState === 'undefined';
    var valueIsUndefined = typeof value === 'undefined';

    if (prevStateIsUndefined && valueIsUndefined && initialState) {
      return initialState;
    }

    return reducers.reduce(function (newState, reducer) {
      return reducer.apply(undefined, [newState, value].concat(args));
    }, prevStateIsUndefined && !valueIsUndefined && initialState ? initialState : prevState);
  };
});
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/hasGeneratorInterface.js

function hasGeneratorInterface(handler) {
  var keys = ownKeys(handler);
  var hasOnlyInterfaceNames = keys.every(function (ownKey) {
    return ownKey === 'next' || ownKey === 'throw';
  });
  return keys.length && keys.length <= 2 && hasOnlyInterfaceNames;
}
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/utils/flattenReducerMap.js




/* harmony default export */ const flattenReducerMap = (flattenWhenNode(function (node) {
  return (isPlainObject(node) || isMap(node)) && !hasGeneratorInterface(node);
}));
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/handleActions.js








function handleActions(handlers, defaultState, options) {
  if (options === void 0) {
    options = {};
  }

  browser_default()(isPlainObject(handlers) || isMap(handlers), 'Expected handlers to be a plain object.');
  var flattenedReducerMap = flattenReducerMap(handlers, options);
  var reducers = ownKeys(flattenedReducerMap).map(function (type) {
    return handleAction(type, get(type, flattenedReducerMap), defaultState);
  });
  var reducer = es.apply(void 0, reducers.concat([defaultState]));
  return function (state, action) {
    if (state === void 0) {
      state = defaultState;
    }

    return reducer(state, action);
  };
}
;// CONCATENATED MODULE: ../../node_modules/redux-actions/es/index.js








/***/ }),

/***/ 58267:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var compose = (__webpack_require__(76070).compose);

exports.__esModule = true;
exports.composeWithDevTools =
  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
    : function () {
        if (arguments.length === 0) return undefined;
        if (typeof arguments[0] === 'object') return compose;
        return compose.apply(null, arguments);
      };

exports.devToolsEnhancer =
  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__
    ? window.__REDUX_DEVTOOLS_EXTENSION__
    : function () {
        return function (noop) {
          return noop;
        };
      };


/***/ }),

/***/ 17073:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

!function(e,t){ true?t(exports):0}(this,function(e){"use strict";function t(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function n(e,t,r){n.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:r,enumerable:!0})}function o(e,t){o.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function a(e,t,r){a.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:r,enumerable:!0})}function f(e,t,r){var n=e.slice((r||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,n),e}function u(e){var t="undefined"==typeof e?"undefined":N(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,r,c,s,d,p){s=s||[],p=p||[];var g=s.slice(0);if("undefined"!=typeof d){if(c){if("function"==typeof c&&c(g,d))return;if("object"===("undefined"==typeof c?"undefined":N(c))){if(c.prefilter&&c.prefilter(g,d))return;if(c.normalize){var h=c.normalize(g,d,e,t);h&&(e=h[0],t=h[1])}}}g.push(d)}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var y="undefined"==typeof e?"undefined":N(e),v="undefined"==typeof t?"undefined":N(t),b="undefined"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),m="undefined"!==v||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!b&&m)r(new o(g,t));else if(!m&&b)r(new i(g,e));else if(u(e)!==u(t))r(new n(g,e,t));else if("date"===u(e)&&e-t!==0)r(new n(g,e,t));else if("object"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&r(new n(g,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;e.length;for(w=0;w<e.length;w++)w>=t.length?r(new a(g,w,new i(void 0,e[w]))):l(e[w],t[w],r,c,g,w,p);for(;w<t.length;)r(new a(g,w,new o(void 0,t[w++])))}else{var x=Object.keys(e),S=Object.keys(t);x.forEach(function(n,o){var i=S.indexOf(n);i>=0?(l(e[n],t[n],r,c,g,n,p),S=f(S,i)):l(e[n],void 0,r,c,g,n,p)}),S.forEach(function(e){l(void 0,t[e],r,c,g,e,p)})}p.length=p.length-1}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||r(new n(g,e,t)))}function c(e,t,r,n){return n=n||[],l(e,t,function(e){e&&n.push(e)},r),n.length?n:void 0}function s(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":s(o[r.path[n]],r.index,r.item);break;case"D":delete o[r.path[n]];break;case"E":case"N":o[r.path[n]]=r.rhs}}else switch(r.kind){case"A":s(e[t],r.index,r.item);break;case"D":e=f(e,t);break;case"E":case"N":e[t]=r.rhs}return e}function d(e,t,r){if(e&&t&&r&&r.kind){for(var n=e,o=-1,i=r.path?r.path.length-1:0;++o<i;)"undefined"==typeof n[r.path[o]]&&(n[r.path[o]]="number"==typeof r.path[o]?[]:{}),n=n[r.path[o]];switch(r.kind){case"A":s(r.path?n[r.path[o]]:n,r.index,r.item);break;case"D":delete n[r.path[o]];break;case"E":case"N":n[r.path[o]]=r.rhs}}}function p(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":p(o[r.path[n]],r.index,r.item);break;case"D":o[r.path[n]]=r.lhs;break;case"E":o[r.path[n]]=r.lhs;break;case"N":delete o[r.path[n]]}}else switch(r.kind){case"A":p(e[t],r.index,r.item);break;case"D":e[t]=r.lhs;break;case"E":e[t]=r.lhs;break;case"N":e=f(e,t)}return e}function g(e,t,r){if(e&&t&&r&&r.kind){var n,o,i=e;for(o=r.path.length-1,n=0;n<o;n++)"undefined"==typeof i[r.path[n]]&&(i[r.path[n]]={}),i=i[r.path[n]];switch(r.kind){case"A":p(i[r.path[n]],r.index,r.item);break;case"D":i[r.path[n]]=r.lhs;break;case"E":i[r.path[n]]=r.lhs;break;case"N":delete i[r.path[n]]}}}function h(e,t,r){if(e&&t){var n=function(n){r&&!r(e,t,n)||d(e,t,n)};l(e,t,n)}}function y(e){return"color: "+F[e].color+"; font-weight: bold"}function v(e){var t=e.kind,r=e.path,n=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[r.join("."),n,"â",o];case"N":return[r.join("."),o];case"D":return[r.join(".")];case"A":return[r.join(".")+"["+i+"]",a];default:return[]}}function b(e,t,r,n){var o=c(e,t);try{n?r.groupCollapsed("diff"):r.group("diff")}catch(e){r.log("diff")}o?o.forEach(function(e){var t=e.kind,n=v(e);r.log.apply(r,["%c "+F[t].text,y(t)].concat(P(n)))}):r.log("ââ no diff ââ");try{r.groupEnd()}catch(e){r.log("ââ diff end ââ ")}}function m(e,t,r,n){switch("undefined"==typeof e?"undefined":N(e)){case"object":return"function"==typeof e[n]?e[n].apply(e,P(r)):e[n];case"function":return e(t);default:return e}}function w(e){var t=e.timestamp,r=e.duration;return function(e,n,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+n),r&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}function x(e,t){var r=t.logger,n=t.actionTransformer,o=t.titleFormatter,i=void 0===o?w(t):o,a=t.collapsed,f=t.colors,u=t.level,l=t.diff,c="undefined"==typeof t.titleFormatter;e.forEach(function(o,s){var d=o.started,p=o.startedTime,g=o.action,h=o.prevState,y=o.error,v=o.took,w=o.nextState,x=e[s+1];x&&(w=x.prevState,v=x.started-d);var S=n(g),k="function"==typeof a?a(function(){return w},g,o):a,j=D(p),E=f.title?"color: "+f.title(S)+";":"",A=["color: gray; font-weight: lighter;"];A.push(E),t.timestamp&&A.push("color: gray; font-weight: lighter;"),t.duration&&A.push("color: gray; font-weight: lighter;");var O=i(S,j,v);try{k?f.title&&c?r.groupCollapsed.apply(r,["%c "+O].concat(A)):r.groupCollapsed(O):f.title&&c?r.group.apply(r,["%c "+O].concat(A)):r.group(O)}catch(e){r.log(O)}var N=m(u,S,[h],"prevState"),P=m(u,S,[S],"action"),C=m(u,S,[y,h],"error"),F=m(u,S,[w],"nextState");if(N)if(f.prevState){var L="color: "+f.prevState(h)+"; font-weight: bold";r[N]("%c prev state",L,h)}else r[N]("prev state",h);if(P)if(f.action){var T="color: "+f.action(S)+"; font-weight: bold";r[P]("%c action    ",T,S)}else r[P]("action    ",S);if(y&&C)if(f.error){var M="color: "+f.error(y,h)+"; font-weight: bold;";r[C]("%c error     ",M,y)}else r[C]("error     ",y);if(F)if(f.nextState){var _="color: "+f.nextState(w)+"; font-weight: bold";r[F]("%c next state",_,w)}else r[F]("next state",w);l&&b(h,w,r,k);try{r.groupEnd()}catch(e){r.log("ââ log end ââ")}})}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},L,e),r=t.logger,n=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,f=t.diffPredicate;if("undefined"==typeof r)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var u=[];return function(e){var r=e.getState;return function(e){return function(l){if("function"==typeof i&&!i(r,l))return e(l);var c={};u.push(c),c.started=O.now(),c.startedTime=new Date,c.prevState=n(r()),c.action=l;var s=void 0;if(a)try{s=e(l)}catch(e){c.error=o(e)}else s=e(l);c.took=O.now()-c.started,c.nextState=n(r());var d=t.diff&&"function"==typeof f?f(r,l):t.diff;if(x(u,Object.assign({},t,{diff:d})),u.length=0,c.error)throw c.error;return s}}}}var k,j,E=function(e,t){return new Array(t+1).join(e)},A=function(e,t){return E("0",t-e.toString().length)+e},D=function(e){return A(e.getHours(),2)+":"+A(e.getMinutes(),2)+":"+A(e.getSeconds(),2)+"."+A(e.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},C=[];k="object"===("undefined"==typeof __webpack_require__.g?"undefined":N(__webpack_require__.g))&&__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof window?window:{},j=k.DeepDiff,j&&C.push(function(){"undefined"!=typeof j&&k.DeepDiff===c&&(k.DeepDiff=j,j=void 0)}),t(n,r),t(o,r),t(i,r),t(a,r),Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:h,enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:g,enumerable:!0},isConflict:{value:function(){return"undefined"!=typeof j},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e()}),C=null),c},enumerable:!0}});var F={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},L={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,r=e.getState;return"function"==typeof t||"function"==typeof r?S()({dispatch:t,getState:r}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=L,e.createLogger=S,e.logger=T,e.default=T,Object.defineProperty(e,"__esModule",{value:!0})});


/***/ }),

/***/ 7:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  CANCEL: () => (/* reexport */ redux_saga_symbols_esm/* CANCEL */.n1),
  END: () => (/* reexport */ END),
  SAGA_LOCATION: () => (/* reexport */ redux_saga_symbols_esm/* SAGA_LOCATION */.b_),
  buffers: () => (/* reexport */ io_c3792963.H),
  channel: () => (/* reexport */ channel),
  "default": () => (/* binding */ redux_saga_core_npm_proxy_esm),
  detach: () => (/* reexport */ io_c3792963.I),
  eventChannel: () => (/* reexport */ eventChannel),
  isEnd: () => (/* reexport */ isEnd),
  multicastChannel: () => (/* reexport */ multicastChannel),
  runSaga: () => (/* reexport */ runSaga),
  stdChannel: () => (/* reexport */ stdChannel)
});

// EXTERNAL MODULE: ../../node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js
var redux_saga_symbols_esm = __webpack_require__(23143);
// EXTERNAL MODULE: ../../node_modules/@redux-saga/core/node_modules/@babel/runtime/helpers/esm/extends.js
var esm_extends = __webpack_require__(84458);
;// CONCATENATED MODULE: ../../node_modules/@redux-saga/core/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
// EXTERNAL MODULE: ../../node_modules/@redux-saga/is/dist/redux-saga-is.esm.js
var redux_saga_is_esm = __webpack_require__(83594);
// EXTERNAL MODULE: ../../node_modules/@redux-saga/core/dist/io-c3792963.js + 1 modules
var io_c3792963 = __webpack_require__(33316);
// EXTERNAL MODULE: ../../node_modules/redux/es/redux.js + 5 modules
var redux = __webpack_require__(76070);
;// CONCATENATED MODULE: ../../node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js
function deferred() {
  var def = {};
  def.promise = new Promise(function (resolve, reject) {
    def.resolve = resolve;
    def.reject = reject;
  });
  return def;
}
function arrayOfDeferred(length) {
  var arr = [];

  for (var i = 0; i < length; i++) {
    arr.push(deferred());
  }

  return arr;
}

/* harmony default export */ const redux_saga_deferred_esm = (deferred);


;// CONCATENATED MODULE: ../../node_modules/@redux-saga/core/dist/redux-saga-core.esm.js











var queue = [];
/**
  Variable to hold a counting semaphore
  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not
    already suspended)
  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This
    triggers flushing the queued tasks.
**/

var semaphore = 0;
/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/

function exec(task) {
  try {
    suspend();
    task();
  } finally {
    release();
  }
}
/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/


function asap(task) {
  queue.push(task);

  if (!semaphore) {
    suspend();
    flush();
  }
}
/**
 * Puts the scheduler in a `suspended` state and executes a task immediately.
 */

function immediately(task) {
  try {
    suspend();
    return task();
  } finally {
    flush();
  }
}
/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/

function suspend() {
  semaphore++;
}
/**
  Puts the scheduler in a `released` state.
**/


function release() {
  semaphore--;
}
/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/


function flush() {
  release();
  var task;

  while (!semaphore && (task = queue.shift()) !== undefined) {
    exec(task);
  }
}

var array = function array(patterns) {
  return function (input) {
    return patterns.some(function (p) {
      return matcher(p)(input);
    });
  };
};
var predicate = function predicate(_predicate) {
  return function (input) {
    return _predicate(input);
  };
};
var string = function string(pattern) {
  return function (input) {
    return input.type === String(pattern);
  };
};
var symbol = function symbol(pattern) {
  return function (input) {
    return input.type === pattern;
  };
};
var wildcard = function wildcard() {
  return io_c3792963.k;
};
function matcher(pattern) {
  // prettier-ignore
  var matcherCreator = pattern === '*' ? wildcard : (0,redux_saga_is_esm/* string */.Z_)(pattern) ? string : (0,redux_saga_is_esm/* array */.IX)(pattern) ? array : (0,redux_saga_is_esm/* stringableFunc */.eR)(pattern) ? string : (0,redux_saga_is_esm/* func */.Yl)(pattern) ? predicate : (0,redux_saga_is_esm/* symbol */.NA)(pattern) ? symbol : null;

  if (matcherCreator === null) {
    throw new Error("invalid pattern: " + pattern);
  }

  return matcherCreator(pattern);
}

var END = {
  type: redux_saga_symbols_esm/* CHANNEL_END_TYPE */.sZ
};
var isEnd = function isEnd(a) {
  return a && a.type === redux_saga_symbols_esm/* CHANNEL_END_TYPE */.sZ;
};
var CLOSED_CHANNEL_WITH_TAKERS = 'Cannot have a closed channel with pending takers';
var INVALID_BUFFER = 'invalid buffer passed to channel factory function';
var UNDEFINED_INPUT_ERROR = "Saga or channel was provided with an undefined action\nHints:\n  - check that your Action Creator returns a non-undefined value\n  - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners";
function channel(buffer$1) {
  if (buffer$1 === void 0) {
    buffer$1 = (0,io_c3792963.e)();
  }

  var closed = false;
  var takers = [];

  if (false) {}

  function checkForbiddenStates() {
    if (closed && takers.length) {
      throw (0,io_c3792963.i)(CLOSED_CHANNEL_WITH_TAKERS);
    }

    if (takers.length && !buffer$1.isEmpty()) {
      throw (0,io_c3792963.i)('Cannot have pending takers with non empty buffer');
    }
  }

  function put(input) {
    if (false) {}

    if (closed) {
      return;
    }

    if (takers.length === 0) {
      return buffer$1.put(input);
    }

    var cb = takers.shift();
    cb(input);
  }

  function take(cb) {
    if (false) {}

    if (closed && buffer$1.isEmpty()) {
      cb(END);
    } else if (!buffer$1.isEmpty()) {
      cb(buffer$1.take());
    } else {
      takers.push(cb);

      cb.cancel = function () {
        (0,io_c3792963.r)(takers, cb);
      };
    }
  }

  function flush(cb) {
    if (false) {}

    if (closed && buffer$1.isEmpty()) {
      cb(END);
      return;
    }

    cb(buffer$1.flush());
  }

  function close() {
    if (false) {}

    if (closed) {
      return;
    }

    closed = true;
    var arr = takers;
    takers = [];

    for (var i = 0, len = arr.length; i < len; i++) {
      var taker = arr[i];
      taker(END);
    }
  }

  return {
    take: take,
    put: put,
    flush: flush,
    close: close
  };
}
function eventChannel(subscribe, buffer) {
  if (buffer === void 0) {
    buffer = (0,io_c3792963.n)();
  }

  var closed = false;
  var unsubscribe;
  var chan = channel(buffer);

  var close = function close() {
    if (closed) {
      return;
    }

    closed = true;

    if ((0,redux_saga_is_esm/* func */.Yl)(unsubscribe)) {
      unsubscribe();
    }

    chan.close();
  };

  unsubscribe = subscribe(function (input) {
    if (isEnd(input)) {
      close();
      return;
    }

    chan.put(input);
  });

  if (false) {}

  unsubscribe = (0,io_c3792963.o)(unsubscribe);

  if (closed) {
    unsubscribe();
  }

  return {
    take: chan.take,
    flush: chan.flush,
    close: close
  };
}
function multicastChannel() {
  var _ref;

  var closed = false;
  var currentTakers = [];
  var nextTakers = currentTakers;

  function checkForbiddenStates() {
    if (closed && nextTakers.length) {
      throw (0,io_c3792963.i)(CLOSED_CHANNEL_WITH_TAKERS);
    }
  }

  var ensureCanMutateNextTakers = function ensureCanMutateNextTakers() {
    if (nextTakers !== currentTakers) {
      return;
    }

    nextTakers = currentTakers.slice();
  };

  var close = function close() {
    if (false) {}

    closed = true;
    var takers = currentTakers = nextTakers;
    nextTakers = [];
    takers.forEach(function (taker) {
      taker(END);
    });
  };

  return _ref = {}, _ref[redux_saga_symbols_esm/* MULTICAST */.AS] = true, _ref.put = function put(input) {
    if (false) {}

    if (closed) {
      return;
    }

    if (isEnd(input)) {
      close();
      return;
    }

    var takers = currentTakers = nextTakers;

    for (var i = 0, len = takers.length; i < len; i++) {
      var taker = takers[i];

      if (taker[redux_saga_symbols_esm/* MATCH */.uq](input)) {
        taker.cancel();
        taker(input);
      }
    }
  }, _ref.take = function take(cb, matcher) {
    if (matcher === void 0) {
      matcher = wildcard;
    }

    if (false) {}

    if (closed) {
      cb(END);
      return;
    }

    cb[redux_saga_symbols_esm/* MATCH */.uq] = matcher;
    ensureCanMutateNextTakers();
    nextTakers.push(cb);
    cb.cancel = (0,io_c3792963.o)(function () {
      ensureCanMutateNextTakers();
      (0,io_c3792963.r)(nextTakers, cb);
    });
  }, _ref.close = close, _ref;
}
function stdChannel() {
  var chan = multicastChannel();
  var put = chan.put;

  chan.put = function (input) {
    if (input[redux_saga_symbols_esm/* SAGA_ACTION */.Nm]) {
      put(input);
      return;
    }

    asap(function () {
      put(input);
    });
  };

  return chan;
}

var RUNNING = 0;
var CANCELLED = 1;
var ABORTED = 2;
var DONE = 3;

function resolvePromise(promise, cb) {
  var cancelPromise = promise[redux_saga_symbols_esm/* CANCEL */.n1];

  if ((0,redux_saga_is_esm/* func */.Yl)(cancelPromise)) {
    cb.cancel = cancelPromise;
  }

  promise.then(cb, function (error) {
    cb(error, true);
  });
}

var current = 0;
var nextSagaId = (function () {
  return ++current;
});

var _effectRunnerMap;

function getIteratorMetaInfo(iterator, fn) {
  if (iterator.isSagaIterator) {
    return {
      name: iterator.meta.name
    };
  }

  return (0,io_c3792963.j)(fn);
}

function createTaskIterator(_ref) {
  var context = _ref.context,
      fn = _ref.fn,
      args = _ref.args;

  // catch synchronous failures; see #152 and #441
  try {
    var result = fn.apply(context, args); // i.e. a generator function returns an iterator

    if ((0,redux_saga_is_esm/* iterator */.hZ)(result)) {
      return result;
    }

    var resolved = false;

    var next = function next(arg) {
      if (!resolved) {
        resolved = true; // Only promises returned from fork will be interpreted. See #1573

        return {
          value: result,
          done: !(0,redux_saga_is_esm/* promise */.MC)(result)
        };
      } else {
        return {
          value: arg,
          done: true
        };
      }
    };

    return (0,io_c3792963.q)(next);
  } catch (err) {
    // do not bubble up synchronous failures for detached forks
    // instead create a failed task. See #152 and #441
    return (0,io_c3792963.q)(function () {
      throw err;
    });
  }
}

function runPutEffect(env, _ref2, cb) {
  var channel = _ref2.channel,
      action = _ref2.action,
      resolve = _ref2.resolve;

  /**
   Schedule the put in case another saga is holding a lock.
   The put will be executed atomically. ie nested puts will execute after
   this put has terminated.
   **/
  asap(function () {
    var result;

    try {
      result = (channel ? channel.put : env.dispatch)(action);
    } catch (error) {
      cb(error, true);
      return;
    }

    if (resolve && (0,redux_saga_is_esm/* promise */.MC)(result)) {
      resolvePromise(result, cb);
    } else {
      cb(result);
    }
  }); // Put effects are non cancellables
}

function runTakeEffect(env, _ref3, cb) {
  var _ref3$channel = _ref3.channel,
      channel = _ref3$channel === void 0 ? env.channel : _ref3$channel,
      pattern = _ref3.pattern,
      maybe = _ref3.maybe;

  var takeCb = function takeCb(input) {
    if (input instanceof Error) {
      cb(input, true);
      return;
    }

    if (isEnd(input) && !maybe) {
      cb(redux_saga_symbols_esm/* TERMINATE */.EO);
      return;
    }

    cb(input);
  };

  try {
    channel.take(takeCb, (0,redux_saga_is_esm/* notUndef */.d5)(pattern) ? matcher(pattern) : null);
  } catch (err) {
    cb(err, true);
    return;
  }

  cb.cancel = takeCb.cancel;
}

function runCallEffect(env, _ref4, cb, _ref5) {
  var context = _ref4.context,
      fn = _ref4.fn,
      args = _ref4.args;
  var task = _ref5.task;

  // catch synchronous failures; see #152
  try {
    var result = fn.apply(context, args);

    if ((0,redux_saga_is_esm/* promise */.MC)(result)) {
      resolvePromise(result, cb);
      return;
    }

    if ((0,redux_saga_is_esm/* iterator */.hZ)(result)) {
      // resolve iterator
      proc(env, result, task.context, current, (0,io_c3792963.j)(fn),
      /* isRoot */
      false, cb);
      return;
    }

    cb(result);
  } catch (error) {
    cb(error, true);
  }
}

function runCPSEffect(env, _ref6, cb) {
  var context = _ref6.context,
      fn = _ref6.fn,
      args = _ref6.args;

  // CPS (ie node style functions) can define their own cancellation logic
  // by setting cancel field on the cb
  // catch synchronous failures; see #152
  try {
    var cpsCb = function cpsCb(err, res) {
      if ((0,redux_saga_is_esm/* undef */.sR)(err)) {
        cb(res);
      } else {
        cb(err, true);
      }
    };

    fn.apply(context, args.concat(cpsCb));

    if (cpsCb.cancel) {
      cb.cancel = cpsCb.cancel;
    }
  } catch (error) {
    cb(error, true);
  }
}

function runForkEffect(env, _ref7, cb, _ref8) {
  var context = _ref7.context,
      fn = _ref7.fn,
      args = _ref7.args,
      detached = _ref7.detached;
  var parent = _ref8.task;
  var taskIterator = createTaskIterator({
    context: context,
    fn: fn,
    args: args
  });
  var meta = getIteratorMetaInfo(taskIterator, fn);
  immediately(function () {
    var child = proc(env, taskIterator, parent.context, current, meta, detached, undefined);

    if (detached) {
      cb(child);
    } else {
      if (child.isRunning()) {
        parent.queue.addTask(child);
        cb(child);
      } else if (child.isAborted()) {
        parent.queue.abort(child.error());
      } else {
        cb(child);
      }
    }
  }); // Fork effects are non cancellables
}

function runJoinEffect(env, taskOrTasks, cb, _ref9) {
  var task = _ref9.task;

  var joinSingleTask = function joinSingleTask(taskToJoin, cb) {
    if (taskToJoin.isRunning()) {
      var joiner = {
        task: task,
        cb: cb
      };

      cb.cancel = function () {
        if (taskToJoin.isRunning()) (0,io_c3792963.r)(taskToJoin.joiners, joiner);
      };

      taskToJoin.joiners.push(joiner);
    } else {
      if (taskToJoin.isAborted()) {
        cb(taskToJoin.error(), true);
      } else {
        cb(taskToJoin.result());
      }
    }
  };

  if ((0,redux_saga_is_esm/* array */.IX)(taskOrTasks)) {
    if (taskOrTasks.length === 0) {
      cb([]);
      return;
    }

    var childCallbacks = (0,io_c3792963.l)(taskOrTasks, cb);
    taskOrTasks.forEach(function (t, i) {
      joinSingleTask(t, childCallbacks[i]);
    });
  } else {
    joinSingleTask(taskOrTasks, cb);
  }
}

function cancelSingleTask(taskToCancel) {
  if (taskToCancel.isRunning()) {
    taskToCancel.cancel();
  }
}

function runCancelEffect(env, taskOrTasks, cb, _ref10) {
  var task = _ref10.task;

  if (taskOrTasks === redux_saga_symbols_esm/* SELF_CANCELLATION */.sC) {
    cancelSingleTask(task);
  } else if ((0,redux_saga_is_esm/* array */.IX)(taskOrTasks)) {
    taskOrTasks.forEach(cancelSingleTask);
  } else {
    cancelSingleTask(taskOrTasks);
  }

  cb(); // cancel effects are non cancellables
}

function runAllEffect(env, effects, cb, _ref11) {
  var digestEffect = _ref11.digestEffect;
  var effectId = current;
  var keys = Object.keys(effects);

  if (keys.length === 0) {
    cb((0,redux_saga_is_esm/* array */.IX)(effects) ? [] : {});
    return;
  }

  var childCallbacks = (0,io_c3792963.l)(effects, cb);
  keys.forEach(function (key) {
    digestEffect(effects[key], effectId, childCallbacks[key], key);
  });
}

function runRaceEffect(env, effects, cb, _ref12) {
  var digestEffect = _ref12.digestEffect;
  var effectId = current;
  var keys = Object.keys(effects);
  var response = (0,redux_saga_is_esm/* array */.IX)(effects) ? (0,io_c3792963.m)(keys.length) : {};
  var childCbs = {};
  var completed = false;
  keys.forEach(function (key) {
    var chCbAtKey = function chCbAtKey(res, isErr) {
      if (completed) {
        return;
      }

      if (isErr || (0,io_c3792963.s)(res)) {
        // Race Auto cancellation
        cb.cancel();
        cb(res, isErr);
      } else {
        cb.cancel();
        completed = true;
        response[key] = res;
        cb(response);
      }
    };

    chCbAtKey.cancel = io_c3792963.t;
    childCbs[key] = chCbAtKey;
  });

  cb.cancel = function () {
    // prevents unnecessary cancellation
    if (!completed) {
      completed = true;
      keys.forEach(function (key) {
        return childCbs[key].cancel();
      });
    }
  };

  keys.forEach(function (key) {
    if (completed) {
      return;
    }

    digestEffect(effects[key], effectId, childCbs[key], key);
  });
}

function runSelectEffect(env, _ref13, cb) {
  var selector = _ref13.selector,
      args = _ref13.args;

  try {
    var state = selector.apply(void 0, [env.getState()].concat(args));
    cb(state);
  } catch (error) {
    cb(error, true);
  }
}

function runChannelEffect(env, _ref14, cb) {
  var pattern = _ref14.pattern,
      buffer = _ref14.buffer;
  var chan = channel(buffer);
  var match = matcher(pattern);

  var taker = function taker(action) {
    if (!isEnd(action)) {
      env.channel.take(taker, match);
    }

    chan.put(action);
  };

  var close = chan.close;

  chan.close = function () {
    taker.cancel();
    close();
  };

  env.channel.take(taker, match);
  cb(chan);
}

function runCancelledEffect(env, data, cb, _ref15) {
  var task = _ref15.task;
  cb(task.isCancelled());
}

function runFlushEffect(env, channel, cb) {
  channel.flush(cb);
}

function runGetContextEffect(env, prop, cb, _ref16) {
  var task = _ref16.task;
  cb(task.context[prop]);
}

function runSetContextEffect(env, props, cb, _ref17) {
  var task = _ref17.task;
  (0,io_c3792963.p)(task.context, props);
  cb();
}

var effectRunnerMap = (_effectRunnerMap = {}, _effectRunnerMap[io_c3792963.T] = runTakeEffect, _effectRunnerMap[io_c3792963.P] = runPutEffect, _effectRunnerMap[io_c3792963.A] = runAllEffect, _effectRunnerMap[io_c3792963.R] = runRaceEffect, _effectRunnerMap[io_c3792963.C] = runCallEffect, _effectRunnerMap[io_c3792963.a] = runCPSEffect, _effectRunnerMap[io_c3792963.F] = runForkEffect, _effectRunnerMap[io_c3792963.J] = runJoinEffect, _effectRunnerMap[io_c3792963.b] = runCancelEffect, _effectRunnerMap[io_c3792963.S] = runSelectEffect, _effectRunnerMap[io_c3792963.d] = runChannelEffect, _effectRunnerMap[io_c3792963.f] = runCancelledEffect, _effectRunnerMap[io_c3792963.g] = runFlushEffect, _effectRunnerMap[io_c3792963.G] = runGetContextEffect, _effectRunnerMap[io_c3792963.h] = runSetContextEffect, _effectRunnerMap);

/**
 Used to track a parent task and its forks
 In the fork model, forked tasks are attached by default to their parent
 We model this using the concept of Parent task && main Task
 main task is the main flow of the current Generator, the parent tasks is the
 aggregation of the main tasks + all its forked tasks.
 Thus the whole model represents an execution tree with multiple branches (vs the
 linear execution tree in sequential (non parallel) programming)

 A parent tasks has the following semantics
 - It completes if all its forks either complete or all cancelled
 - If it's cancelled, all forks are cancelled as well
 - It aborts if any uncaught error bubbles up from forks
 - If it completes, the return value is the one returned by the main task
 **/

function forkQueue(mainTask, onAbort, cont) {
  var tasks = [];
  var result;
  var completed = false;
  addTask(mainTask);

  var getTasks = function getTasks() {
    return tasks;
  };

  function abort(err) {
    onAbort();
    cancelAll();
    cont(err, true);
  }

  function addTask(task) {
    tasks.push(task);

    task.cont = function (res, isErr) {
      if (completed) {
        return;
      }

      (0,io_c3792963.r)(tasks, task);
      task.cont = io_c3792963.t;

      if (isErr) {
        abort(res);
      } else {
        if (task === mainTask) {
          result = res;
        }

        if (!tasks.length) {
          completed = true;
          cont(result);
        }
      }
    };
  }

  function cancelAll() {
    if (completed) {
      return;
    }

    completed = true;
    tasks.forEach(function (t) {
      t.cont = io_c3792963.t;
      t.cancel();
    });
    tasks = [];
  }

  return {
    addTask: addTask,
    cancelAll: cancelAll,
    abort: abort,
    getTasks: getTasks
  };
}

// there can be only a single saga error created at any given moment

function formatLocation(fileName, lineNumber) {
  return fileName + "?" + lineNumber;
}

function effectLocationAsString(effect) {
  var location = (0,io_c3792963.v)(effect);

  if (location) {
    var code = location.code,
        fileName = location.fileName,
        lineNumber = location.lineNumber;
    var source = code + "  " + formatLocation(fileName, lineNumber);
    return source;
  }

  return '';
}

function sagaLocationAsString(sagaMeta) {
  var name = sagaMeta.name,
      location = sagaMeta.location;

  if (location) {
    return name + "  " + formatLocation(location.fileName, location.lineNumber);
  }

  return name;
}

function cancelledTasksAsString(sagaStack) {
  var cancelledTasks = (0,io_c3792963.u)(function (i) {
    return i.cancelledTasks;
  }, sagaStack);

  if (!cancelledTasks.length) {
    return '';
  }

  return ['Tasks cancelled due to error:'].concat(cancelledTasks).join('\n');
}

var crashedEffect = null;
var sagaStack = [];
var addSagaFrame = function addSagaFrame(frame) {
  frame.crashedEffect = crashedEffect;
  sagaStack.push(frame);
};
var clear = function clear() {
  crashedEffect = null;
  sagaStack.length = 0;
}; // this sets crashed effect for the soon-to-be-reported saga frame
// this slightly streatches the singleton nature of this module into wrong direction
// as it's even less obvious what's the data flow here, but it is what it is for now

var setCrashedEffect = function setCrashedEffect(effect) {
  crashedEffect = effect;
};
/**
  @returns {string}

  @example
  The above error occurred in task errorInPutSaga {pathToFile}
  when executing effect put({type: 'REDUCER_ACTION_ERROR_IN_PUT'}) {pathToFile}
      created by fetchSaga {pathToFile}
      created by rootSaga {pathToFile}
*/

var redux_saga_core_esm_toString = function toString() {
  var firstSaga = sagaStack[0],
      otherSagas = sagaStack.slice(1);
  var crashedEffectLocation = firstSaga.crashedEffect ? effectLocationAsString(firstSaga.crashedEffect) : null;
  var errorMessage = "The above error occurred in task " + sagaLocationAsString(firstSaga.meta) + (crashedEffectLocation ? " \n when executing effect " + crashedEffectLocation : '');
  return [errorMessage].concat(otherSagas.map(function (s) {
    return "    created by " + sagaLocationAsString(s.meta);
  }), [cancelledTasksAsString(sagaStack)]).join('\n');
};

function newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont) {
  var _task;

  if (cont === void 0) {
    cont = io_c3792963.t;
  }

  var status = RUNNING;
  var taskResult;
  var taskError;
  var deferredEnd = null;
  var cancelledDueToErrorTasks = [];
  var context = Object.create(parentContext);
  var queue = forkQueue(mainTask, function onAbort() {
    cancelledDueToErrorTasks.push.apply(cancelledDueToErrorTasks, queue.getTasks().map(function (t) {
      return t.meta.name;
    }));
  }, end);
  /**
   This may be called by a parent generator to trigger/propagate cancellation
   cancel all pending tasks (including the main task), then end the current task.
    Cancellation propagates down to the whole execution tree held by this Parent task
   It's also propagated to all joiners of this task and their execution tree/joiners
    Cancellation is noop for terminated/Cancelled tasks tasks
   **/

  function cancel() {
    if (status === RUNNING) {
      // Setting status to CANCELLED does not necessarily mean that the task/iterators are stopped
      // effects in the iterator's finally block will still be executed
      status = CANCELLED;
      queue.cancelAll(); // Ending with a TASK_CANCEL will propagate the Cancellation to all joiners

      end(redux_saga_symbols_esm/* TASK_CANCEL */.Wd, false);
    }
  }

  function end(result, isErr) {
    if (!isErr) {
      // The status here may be RUNNING or CANCELLED
      // If the status is CANCELLED, then we do not need to change it here
      if (result === redux_saga_symbols_esm/* TASK_CANCEL */.Wd) {
        status = CANCELLED;
      } else if (status !== CANCELLED) {
        status = DONE;
      }

      taskResult = result;
      deferredEnd && deferredEnd.resolve(result);
    } else {
      status = ABORTED;
      addSagaFrame({
        meta: meta,
        cancelledTasks: cancelledDueToErrorTasks
      });

      if (task.isRoot) {
        var sagaStack = redux_saga_core_esm_toString(); // we've dumped the saga stack to string and are passing it to user's code
        // we know that it won't be needed anymore and we need to clear it

        clear();
        env.onError(result, {
          sagaStack: sagaStack
        });
      }

      taskError = result;
      deferredEnd && deferredEnd.reject(result);
    }

    task.cont(result, isErr);
    task.joiners.forEach(function (joiner) {
      joiner.cb(result, isErr);
    });
    task.joiners = null;
  }

  function setContext(props) {
    if (false) {}

    (0,io_c3792963.p)(context, props);
  }

  function toPromise() {
    if (deferredEnd) {
      return deferredEnd.promise;
    }

    deferredEnd = redux_saga_deferred_esm();

    if (status === ABORTED) {
      deferredEnd.reject(taskError);
    } else if (status !== RUNNING) {
      deferredEnd.resolve(taskResult);
    }

    return deferredEnd.promise;
  }

  var task = (_task = {}, _task[redux_saga_symbols_esm/* TASK */.Cs] = true, _task.id = parentEffectId, _task.meta = meta, _task.isRoot = isRoot, _task.context = context, _task.joiners = [], _task.queue = queue, _task.cancel = cancel, _task.cont = cont, _task.end = end, _task.setContext = setContext, _task.toPromise = toPromise, _task.isRunning = function isRunning() {
    return status === RUNNING;
  }, _task.isCancelled = function isCancelled() {
    return status === CANCELLED || status === RUNNING && mainTask.status === CANCELLED;
  }, _task.isAborted = function isAborted() {
    return status === ABORTED;
  }, _task.result = function result() {
    return taskResult;
  }, _task.error = function error() {
    return taskError;
  }, _task);
  return task;
}

function proc(env, iterator$1, parentContext, parentEffectId, meta, isRoot, cont) {
  if (false) {}

  var finalRunEffect = env.finalizeRunEffect(runEffect);
  /**
    Tracks the current effect cancellation
    Each time the generator progresses. calling runEffect will set a new value
    on it. It allows propagating cancellation to child effects
  **/

  next.cancel = io_c3792963.t;
  /** Creates a main task to track the main flow */

  var mainTask = {
    meta: meta,
    cancel: cancelMain,
    status: RUNNING
  };
  /**
   Creates a new task descriptor for this generator.
   A task is the aggregation of it's mainTask and all it's forked tasks.
   **/

  var task = newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont);
  var executingContext = {
    task: task,
    digestEffect: digestEffect
  };
  /**
    cancellation of the main task. We'll simply resume the Generator with a TASK_CANCEL
  **/

  function cancelMain() {
    if (mainTask.status === RUNNING) {
      mainTask.status = CANCELLED;
      next(redux_saga_symbols_esm/* TASK_CANCEL */.Wd);
    }
  }
  /**
    attaches cancellation logic to this task's continuation
    this will permit cancellation to propagate down the call chain
  **/


  if (cont) {
    cont.cancel = task.cancel;
  } // kicks up the generator


  next(); // then return the task descriptor to the caller

  return task;
  /**
   * This is the generator driver
   * It's a recursive async/continuation function which calls itself
   * until the generator terminates or throws
   * @param {internal commands(TASK_CANCEL | TERMINATE) | any} arg - value, generator will be resumed with.
   * @param {boolean} isErr - the flag shows if effect finished with an error
   *
   * receives either (command | effect result, false) or (any thrown thing, true)
   */

  function next(arg, isErr) {
    try {
      var result;

      if (isErr) {
        result = iterator$1.throw(arg); // user handled the error, we can clear bookkept values

        clear();
      } else if ((0,io_c3792963.y)(arg)) {
        /**
          getting TASK_CANCEL automatically cancels the main task
          We can get this value here
           - By cancelling the parent task manually
          - By joining a Cancelled task
        **/
        mainTask.status = CANCELLED;
        /**
          Cancels the current effect; this will propagate the cancellation down to any called tasks
        **/

        next.cancel();
        /**
          If this Generator has a `return` method then invokes it
          This will jump to the finally block
        **/

        result = (0,redux_saga_is_esm/* func */.Yl)(iterator$1.return) ? iterator$1.return(redux_saga_symbols_esm/* TASK_CANCEL */.Wd) : {
          done: true,
          value: redux_saga_symbols_esm/* TASK_CANCEL */.Wd
        };
      } else if ((0,io_c3792963.z)(arg)) {
        // We get TERMINATE flag, i.e. by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)
        result = (0,redux_saga_is_esm/* func */.Yl)(iterator$1.return) ? iterator$1.return() : {
          done: true
        };
      } else {
        result = iterator$1.next(arg);
      }

      if (!result.done) {
        digestEffect(result.value, parentEffectId, next);
      } else {
        /**
          This Generator has ended, terminate the main task and notify the fork queue
        **/
        if (mainTask.status !== CANCELLED) {
          mainTask.status = DONE;
        }

        mainTask.cont(result.value);
      }
    } catch (error) {
      if (mainTask.status === CANCELLED) {
        throw error;
      }

      mainTask.status = ABORTED;
      mainTask.cont(error, true);
    }
  }

  function runEffect(effect, effectId, currCb) {
    /**
      each effect runner must attach its own logic of cancellation to the provided callback
      it allows this generator to propagate cancellation downward.
       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]
      And the setup must occur before calling the callback
       This is a sort of inversion of control: called async functions are responsible
      of completing the flow by calling the provided continuation; while caller functions
      are responsible for aborting the current flow by calling the attached cancel function
       Library users can attach their own cancellation logic to promises by defining a
      promise[CANCEL] method in their returned promises
      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect
    **/
    if ((0,redux_saga_is_esm/* promise */.MC)(effect)) {
      resolvePromise(effect, currCb);
    } else if ((0,redux_saga_is_esm/* iterator */.hZ)(effect)) {
      // resolve iterator
      proc(env, effect, task.context, effectId, meta,
      /* isRoot */
      false, currCb);
    } else if (effect && effect[redux_saga_symbols_esm.IO]) {
      var effectRunner = effectRunnerMap[effect.type];
      effectRunner(env, effect.payload, currCb, executingContext);
    } else {
      // anything else returned as is
      currCb(effect);
    }
  }

  function digestEffect(effect, parentEffectId, cb, label) {
    if (label === void 0) {
      label = '';
    }

    var effectId = nextSagaId();
    env.sagaMonitor && env.sagaMonitor.effectTriggered({
      effectId: effectId,
      parentEffectId: parentEffectId,
      label: label,
      effect: effect
    });
    /**
      completion callback and cancel callback are mutually exclusive
      We can't cancel an already completed effect
      And We can't complete an already cancelled effectId
    **/

    var effectSettled; // Completion callback passed to the appropriate effect runner

    function currCb(res, isErr) {
      if (effectSettled) {
        return;
      }

      effectSettled = true;
      cb.cancel = io_c3792963.t; // defensive measure

      if (env.sagaMonitor) {
        if (isErr) {
          env.sagaMonitor.effectRejected(effectId, res);
        } else {
          env.sagaMonitor.effectResolved(effectId, res);
        }
      }

      if (isErr) {
        setCrashedEffect(effect);
      }

      cb(res, isErr);
    } // tracks down the current cancel


    currCb.cancel = io_c3792963.t; // setup cancellation logic on the parent cb

    cb.cancel = function () {
      // prevents cancelling an already completed effect
      if (effectSettled) {
        return;
      }

      effectSettled = true;
      currCb.cancel(); // propagates cancel downward

      currCb.cancel = io_c3792963.t; // defensive measure

      env.sagaMonitor && env.sagaMonitor.effectCancelled(effectId);
    };

    finalRunEffect(effect, effectId, currCb);
  }
}

var RUN_SAGA_SIGNATURE = 'runSaga(options, saga, ...args)';
var NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ": saga argument must be a Generator function!";
function runSaga(_ref, saga) {
  var _ref$channel = _ref.channel,
      channel = _ref$channel === void 0 ? stdChannel() : _ref$channel,
      dispatch = _ref.dispatch,
      getState = _ref.getState,
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? {} : _ref$context,
      sagaMonitor = _ref.sagaMonitor,
      effectMiddlewares = _ref.effectMiddlewares,
      _ref$onError = _ref.onError,
      onError = _ref$onError === void 0 ? io_c3792963.B : _ref$onError;

  if (false) {}

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var iterator$1 = saga.apply(void 0, args);

  if (false) {}

  var effectId = nextSagaId();

  if (sagaMonitor) {
    // monitors are expected to have a certain interface, let's fill-in any missing ones
    sagaMonitor.rootSagaStarted = sagaMonitor.rootSagaStarted || io_c3792963.t;
    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || io_c3792963.t;
    sagaMonitor.effectResolved = sagaMonitor.effectResolved || io_c3792963.t;
    sagaMonitor.effectRejected = sagaMonitor.effectRejected || io_c3792963.t;
    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || io_c3792963.t;
    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || io_c3792963.t;
    sagaMonitor.rootSagaStarted({
      effectId: effectId,
      saga: saga,
      args: args
    });
  }

  if (false) { var MIDDLEWARE_TYPE_ERROR; }

  var finalizeRunEffect;

  if (effectMiddlewares) {
    var middleware = redux.compose.apply(void 0, effectMiddlewares);

    finalizeRunEffect = function finalizeRunEffect(runEffect) {
      return function (effect, effectId, currCb) {
        var plainRunEffect = function plainRunEffect(eff) {
          return runEffect(eff, effectId, currCb);
        };

        return middleware(plainRunEffect)(effect);
      };
    };
  } else {
    finalizeRunEffect = io_c3792963.E;
  }

  var env = {
    channel: channel,
    dispatch: (0,io_c3792963.D)(dispatch),
    getState: getState,
    sagaMonitor: sagaMonitor,
    onError: onError,
    finalizeRunEffect: finalizeRunEffect
  };
  return immediately(function () {
    var task = proc(env, iterator$1, context, effectId, (0,io_c3792963.j)(saga),
    /* isRoot */
    true, undefined);

    if (sagaMonitor) {
      sagaMonitor.effectResolved(effectId, task);
    }

    return task;
  });
}

function sagaMiddlewareFactory(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? {} : _ref$context,
      _ref$channel = _ref.channel,
      channel = _ref$channel === void 0 ? stdChannel() : _ref$channel,
      sagaMonitor = _ref.sagaMonitor,
      options = _objectWithoutPropertiesLoose(_ref, ["context", "channel", "sagaMonitor"]);

  var boundRunSaga;

  if (false) {}

  function sagaMiddleware(_ref2) {
    var getState = _ref2.getState,
        dispatch = _ref2.dispatch;
    boundRunSaga = runSaga.bind(null, (0,esm_extends/* default */.Z)({}, options, {
      context: context,
      channel: channel,
      dispatch: dispatch,
      getState: getState,
      sagaMonitor: sagaMonitor
    }));
    return function (next) {
      return function (action) {
        if (sagaMonitor && sagaMonitor.actionDispatched) {
          sagaMonitor.actionDispatched(action);
        }

        var result = next(action); // hit reducers

        channel.put(action);
        return result;
      };
    };
  }

  sagaMiddleware.run = function () {
    if (false) {}

    return boundRunSaga.apply(void 0, arguments);
  };

  sagaMiddleware.setContext = function (props) {
    if (false) {}

    (0,io_c3792963.p)(context, props);
  };

  return sagaMiddleware;
}

/* harmony default export */ const redux_saga_core_esm = (sagaMiddlewareFactory);


;// CONCATENATED MODULE: ../../node_modules/redux-saga/dist/redux-saga-core-npm-proxy.esm.js





/* harmony default export */ const redux_saga_core_npm_proxy_esm = (redux_saga_core_esm);


/***/ }),

/***/ 27422:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  actionChannel: () => (/* reexport */ io_c3792963.Q),
  all: () => (/* reexport */ io_c3792963._),
  apply: () => (/* reexport */ io_c3792963.$),
  call: () => (/* reexport */ io_c3792963.N),
  cancel: () => (/* reexport */ io_c3792963.M),
  cancelled: () => (/* reexport */ io_c3792963.a4),
  cps: () => (/* reexport */ io_c3792963.a0),
  debounce: () => (/* reexport */ debounce),
  delay: () => (/* reexport */ io_c3792963.O),
  effectTypes: () => (/* reexport */ io_c3792963.W),
  flush: () => (/* reexport */ io_c3792963.a5),
  fork: () => (/* reexport */ io_c3792963.L),
  getContext: () => (/* reexport */ io_c3792963.a6),
  join: () => (/* reexport */ io_c3792963.a2),
  put: () => (/* reexport */ io_c3792963.Y),
  putResolve: () => (/* reexport */ io_c3792963.Z),
  race: () => (/* reexport */ io_c3792963.V),
  retry: () => (/* reexport */ retry$1),
  select: () => (/* reexport */ io_c3792963.a3),
  setContext: () => (/* reexport */ io_c3792963.a7),
  spawn: () => (/* reexport */ io_c3792963.a1),
  take: () => (/* reexport */ io_c3792963.K),
  takeEvery: () => (/* reexport */ takeEvery$1),
  takeLatest: () => (/* reexport */ takeLatest$1),
  takeLeading: () => (/* reexport */ takeLeading$1),
  takeMaybe: () => (/* reexport */ io_c3792963.X),
  throttle: () => (/* reexport */ throttle$1)
});

// EXTERNAL MODULE: ../../node_modules/@redux-saga/is/dist/redux-saga-is.esm.js
var redux_saga_is_esm = __webpack_require__(83594);
// EXTERNAL MODULE: ../../node_modules/@redux-saga/core/dist/io-c3792963.js + 1 modules
var io_c3792963 = __webpack_require__(33316);
;// CONCATENATED MODULE: ../../node_modules/@redux-saga/core/dist/redux-saga-effects.esm.js







var done = function done(value) {
  return {
    done: true,
    value: value
  };
};

var qEnd = {};
function safeName(patternOrChannel) {
  if ((0,redux_saga_is_esm/* channel */.CE)(patternOrChannel)) {
    return 'channel';
  }

  if ((0,redux_saga_is_esm/* stringableFunc */.eR)(patternOrChannel)) {
    return String(patternOrChannel);
  }

  if ((0,redux_saga_is_esm/* func */.Yl)(patternOrChannel)) {
    return patternOrChannel.name;
  }

  return String(patternOrChannel);
}
function fsmIterator(fsm, startState, name) {
  var stateUpdater,
      errorState,
      effect,
      nextState = startState;

  function next(arg, error) {
    if (nextState === qEnd) {
      return done(arg);
    }

    if (error && !errorState) {
      nextState = qEnd;
      throw error;
    } else {
      stateUpdater && stateUpdater(arg);
      var currentState = error ? fsm[errorState](error) : fsm[nextState]();
      nextState = currentState.nextState;
      effect = currentState.effect;
      stateUpdater = currentState.stateUpdater;
      errorState = currentState.errorState;
      return nextState === qEnd ? done(arg) : effect;
    }
  }

  return (0,io_c3792963.q)(next, function (error) {
    return next(null, error);
  }, name);
}

function takeEvery(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = {
    done: false,
    value: (0,io_c3792963.K)(patternOrChannel)
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io_c3792963.L.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var action,
      setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: 'q1',
        effect: yFork(action)
      };
    }
  }, 'q1', "takeEvery(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

function takeLatest(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = {
    done: false,
    value: (0,io_c3792963.K)(patternOrChannel)
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io_c3792963.L.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var yCancel = function yCancel(task) {
    return {
      done: false,
      value: (0,io_c3792963.M)(task)
    };
  };

  var task, action;

  var setTask = function setTask(t) {
    return task = t;
  };

  var setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return task ? {
        nextState: 'q3',
        effect: yCancel(task)
      } : {
        nextState: 'q1',
        effect: yFork(action),
        stateUpdater: setTask
      };
    },
    q3: function q3() {
      return {
        nextState: 'q1',
        effect: yFork(action),
        stateUpdater: setTask
      };
    }
  }, 'q1', "takeLatest(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

function takeLeading(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = {
    done: false,
    value: (0,io_c3792963.K)(patternOrChannel)
  };

  var yCall = function yCall(ac) {
    return {
      done: false,
      value: io_c3792963.N.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var action;

  var setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: 'q1',
        effect: yCall(action)
      };
    }
  }, 'q1', "takeLeading(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

function throttle(delayLength, patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var action, channel$1;

  var yTake = function yTake() {
    return {
      done: false,
      value: (0,io_c3792963.K)(channel$1)
    };
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io_c3792963.L.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var yDelay = {
    done: false,
    value: (0,io_c3792963.O)(delayLength)
  };

  var setAction = function setAction(ac) {
    return action = ac;
  };

  var setChannel = function setChannel(ch) {
    return channel$1 = ch;
  };

  var needsChannel = !(0,redux_saga_is_esm/* channel */.CE)(patternOrChannel);

  if (!needsChannel) {
    setChannel(patternOrChannel);
  }

  return fsmIterator({
    q1: function q1() {
      var yActionChannel = {
        done: false,
        value: (0,io_c3792963.Q)(patternOrChannel, (0,io_c3792963.U)(1))
      };
      return {
        nextState: 'q2',
        effect: yActionChannel,
        stateUpdater: setChannel
      };
    },
    q2: function q2() {
      return {
        nextState: 'q3',
        effect: yTake(),
        stateUpdater: setAction
      };
    },
    q3: function q3() {
      return {
        nextState: 'q4',
        effect: yFork(action)
      };
    },
    q4: function q4() {
      return {
        nextState: 'q2',
        effect: yDelay
      };
    }
  }, needsChannel ? 'q1' : 'q2', "throttle(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

function retry(maxTries, delayLength, fn) {
  var counter = maxTries;

  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var yCall = {
    done: false,
    value: io_c3792963.N.apply(void 0, [fn].concat(args))
  };
  var yDelay = {
    done: false,
    value: (0,io_c3792963.O)(delayLength)
  };
  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yCall,
        errorState: 'q10'
      };
    },
    q2: function q2() {
      return {
        nextState: qEnd
      };
    },
    q10: function q10(error) {
      counter -= 1;

      if (counter <= 0) {
        throw error;
      }

      return {
        nextState: 'q1',
        effect: yDelay
      };
    }
  }, 'q1', "retry(" + fn.name + ")");
}

function debounceHelper(delayLength, patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var action, raceOutput;
  var yTake = {
    done: false,
    value: (0,io_c3792963.K)(patternOrChannel)
  };
  var yRace = {
    done: false,
    value: (0,io_c3792963.V)({
      action: (0,io_c3792963.K)(patternOrChannel),
      debounce: (0,io_c3792963.O)(delayLength)
    })
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io_c3792963.L.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var yNoop = function yNoop(value) {
    return {
      done: false,
      value: value
    };
  };

  var setAction = function setAction(ac) {
    return action = ac;
  };

  var setRaceOutput = function setRaceOutput(ro) {
    return raceOutput = ro;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: 'q3',
        effect: yRace,
        stateUpdater: setRaceOutput
      };
    },
    q3: function q3() {
      return raceOutput.debounce ? {
        nextState: 'q1',
        effect: yFork(action)
      } : {
        nextState: 'q2',
        effect: yNoop(raceOutput.action),
        stateUpdater: setAction
      };
    }
  }, 'q1', "debounce(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

var validateTakeEffect = function validateTakeEffect(fn, patternOrChannel, worker) {
  check(patternOrChannel, notUndef, fn.name + " requires a pattern or channel");
  check(worker, notUndef, fn.name + " requires a saga parameter");
};

function takeEvery$1(patternOrChannel, worker) {
  if (false) {}

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return io_c3792963.L.apply(void 0, [takeEvery, patternOrChannel, worker].concat(args));
}
function takeLatest$1(patternOrChannel, worker) {
  if (false) {}

  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  return io_c3792963.L.apply(void 0, [takeLatest, patternOrChannel, worker].concat(args));
}
function takeLeading$1(patternOrChannel, worker) {
  if (false) {}

  for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    args[_key3 - 2] = arguments[_key3];
  }

  return io_c3792963.L.apply(void 0, [takeLeading, patternOrChannel, worker].concat(args));
}
function throttle$1(ms, patternOrChannel, worker) {
  if (false) {}

  for (var _len4 = arguments.length, args = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
    args[_key4 - 3] = arguments[_key4];
  }

  return io_c3792963.L.apply(void 0, [throttle, ms, patternOrChannel, worker].concat(args));
}
function retry$1(maxTries, delayLength, worker) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {
    args[_key5 - 3] = arguments[_key5];
  }

  return io_c3792963.N.apply(void 0, [retry, maxTries, delayLength, worker].concat(args));
}
function debounce(delayLength, pattern, worker) {
  for (var _len6 = arguments.length, args = new Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
    args[_key6 - 3] = arguments[_key6];
  }

  return io_c3792963.L.apply(void 0, [debounceHelper, delayLength, pattern, worker].concat(args));
}



;// CONCATENATED MODULE: ../../node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.esm.js



/***/ }),

/***/ 76070:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  __DO_NOT_USE__ActionTypes: () => (/* binding */ ActionTypes),
  applyMiddleware: () => (/* binding */ applyMiddleware),
  bindActionCreators: () => (/* binding */ bindActionCreators),
  combineReducers: () => (/* binding */ combineReducers),
  compose: () => (/* binding */ compose),
  createStore: () => (/* binding */ createStore),
  legacy_createStore: () => (/* binding */ legacy_createStore)
});

;// CONCATENATED MODULE: ../../node_modules/redux/node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
;// CONCATENATED MODULE: ../../node_modules/redux/node_modules/@babel/runtime/helpers/esm/toPrimitive.js

function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
;// CONCATENATED MODULE: ../../node_modules/redux/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js


function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
;// CONCATENATED MODULE: ../../node_modules/redux/node_modules/@babel/runtime/helpers/esm/defineProperty.js

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
;// CONCATENATED MODULE: ../../node_modules/redux/node_modules/@babel/runtime/helpers/esm/objectSpread2.js

function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
;// CONCATENATED MODULE: ../../node_modules/redux/es/redux.js


/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */
function formatProdErrorMessage(code) {
  return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
}

// Inlined version of the `symbol-observable` polyfill
var $$observable = (function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
})();

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
function miniKindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';
  var type = typeof val;

  switch (type) {
    case 'boolean':
    case 'string':
    case 'number':
    case 'symbol':
    case 'function':
      {
        return type;
      }
  }

  if (Array.isArray(val)) return 'array';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  var constructorName = ctorName(val);

  switch (constructorName) {
    case 'Symbol':
    case 'Promise':
    case 'WeakMap':
    case 'WeakSet':
    case 'Map':
    case 'Set':
      return constructorName;
  } // other


  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
}

function ctorName(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null;
}

function isError(val) {
  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
}

function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
}

function kindOf(val) {
  var typeOfVal = typeof val;

  if (false) {}

  return typeOfVal;
}

/**
 * @deprecated
 *
 * **We recommend using the `configureStore` method
 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
 *
 * Redux Toolkit is our recommended approach for writing Redux logic today,
 * including store setup, reducers, data fetching, and more.
 *
 * **For more details, please read this Redux docs page:**
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
 * simplifies setup and helps avoid common bugs.
 *
 * You should not be using the `redux` core package by itself today, except for learning purposes.
 * The `createStore` method from the core `redux` package will not be removed, but we encourage
 * all users to migrate to using Redux Toolkit for all Redux code.
 *
 * If you want to use `createStore` without this visual deprecation warning, use
 * the `legacy_createStore` import instead:
 *
 * `import { legacy_createStore as createStore} from 'redux'`
 *
 */

function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
    throw new Error( true ? formatProdErrorMessage(0) : 0);
  }

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error( true ? formatProdErrorMessage(1) : 0);
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error( true ? formatProdErrorMessage(2) : 0);
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  /**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */


  function getState() {
    if (isDispatching) {
      throw new Error( true ? formatProdErrorMessage(3) : 0);
    }

    return currentState;
  }
  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */


  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error( true ? formatProdErrorMessage(4) : 0);
    }

    if (isDispatching) {
      throw new Error( true ? formatProdErrorMessage(5) : 0);
    }

    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error( true ? formatProdErrorMessage(6) : 0);
      }

      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing âwhat changedâ. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */


  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error( true ? formatProdErrorMessage(7) : 0);
    }

    if (typeof action.type === 'undefined') {
      throw new Error( true ? formatProdErrorMessage(8) : 0);
    }

    if (isDispatching) {
      throw new Error( true ? formatProdErrorMessage(9) : 0);
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }
  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */


  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error( true ? formatProdErrorMessage(10) : 0);
    }

    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
    // Any reducers that existed in both the new and old rootReducer
    // will receive the previous state. This effectively populates
    // the new state tree with any relevant data from the old one.

    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */


  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new Error( true ? formatProdErrorMessage(11) : 0);
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _ref[$$observable] = function () {
      return this;
    }, _ref;
  } // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.


  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
/**
 * Creates a Redux store that holds the state tree.
 *
 * **We recommend using `configureStore` from the
 * `@reduxjs/toolkit` package**, which replaces `createStore`:
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

var legacy_createStore = createStore;

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty

}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error( true ? formatProdErrorMessage(12) : 0);
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error( true ? formatProdErrorMessage(13) : 0);
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */


function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (false) {}

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
  // keys multiple times.

  var unexpectedKeyCache;

  if (false) {}

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (false) { var warningMessage; }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var actionType = action && action.type;
        throw new Error( true ? formatProdErrorMessage(14) : 0);
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */


function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error( true ? formatProdErrorMessage(16) : 0);
  }

  var boundActionCreators = {};

  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];

    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }

  return boundActionCreators;
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      var store = createStore.apply(void 0, arguments);

      var _dispatch = function dispatch() {
        throw new Error( true ? formatProdErrorMessage(15) : 0);
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread2(_objectSpread2({}, store), {}, {
        dispatch: _dispatch
      });
    };
  };
}




/***/ }),

/***/ 68060:
/***/ ((module) => {

var grammar = module.exports = {
  v: [{
    name: 'version',
    reg: /^(\d*)$/
  }],
  o: [{
    // o=- 20518 0 IN IP4 203.0.113.1
    // NB: sessionId will be a String in most cases because it is huge
    name: 'origin',
    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
    format: '%s %s %d %s IP%d %s'
  }],
  // default parsing of these only (though some of these feel outdated)
  s: [{ name: 'name' }],
  i: [{ name: 'description' }],
  u: [{ name: 'uri' }],
  e: [{ name: 'email' }],
  p: [{ name: 'phone' }],
  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...
  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly
  // k: [{}], // outdated thing ignored
  t: [{
    // t=0 0
    name: 'timing',
    reg: /^(\d*) (\d*)/,
    names: ['start', 'stop'],
    format: '%d %d'
  }],
  c: [{
    // c=IN IP4 10.47.197.26
    name: 'connection',
    reg: /^IN IP(\d) (\S*)/,
    names: ['version', 'ip'],
    format: 'IN IP%d %s'
  }],
  b: [{
    // b=AS:4000
    push: 'bandwidth',
    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
    names: ['type', 'limit'],
    format: '%s:%s'
  }],
  m: [{
    // m=video 51744 RTP/AVP 126 97 98 34 31
    // NB: special - pushes to session
    // TODO: rtp/fmtp should be filtered by the payloads found here?
    reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
    names: ['type', 'port', 'protocol', 'payloads'],
    format: '%s %d %s %s'
  }],
  a: [
    {
      // a=rtpmap:110 opus/48000/2
      push: 'rtp',
      reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
      names: ['payload', 'codec', 'rate', 'encoding'],
      format: function (o) {
        return (o.encoding)
          ? 'rtpmap:%d %s/%s/%s'
          : o.rate
            ? 'rtpmap:%d %s/%s'
            : 'rtpmap:%d %s';
      }
    },
    {
      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
      // a=fmtp:111 minptime=10; useinbandfec=1
      push: 'fmtp',
      reg: /^fmtp:(\d*) ([\S| ]*)/,
      names: ['payload', 'config'],
      format: 'fmtp:%d %s'
    },
    {
      // a=control:streamid=0
      name: 'control',
      reg: /^control:(.*)/,
      format: 'control:%s'
    },
    {
      // a=rtcp:65179 IN IP4 193.84.77.194
      name: 'rtcp',
      reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
      names: ['port', 'netType', 'ipVer', 'address'],
      format: function (o) {
        return (o.address != null)
          ? 'rtcp:%d %s IP%d %s'
          : 'rtcp:%d';
      }
    },
    {
      // a=rtcp-fb:98 trr-int 100
      push: 'rtcpFbTrrInt',
      reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
      names: ['payload', 'value'],
      format: 'rtcp-fb:%s trr-int %d'
    },
    {
      // a=rtcp-fb:98 nack rpsi
      push: 'rtcpFb',
      reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
      names: ['payload', 'type', 'subtype'],
      format: function (o) {
        return (o.subtype != null)
          ? 'rtcp-fb:%s %s %s'
          : 'rtcp-fb:%s %s';
      }
    },
    {
      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
      // a=extmap:1/recvonly URI-gps-string
      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
      push: 'ext',
      reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],
      format: function (o) {
        return (
          'extmap:%d' +
          (o.direction ? '/%s' : '%v') +
          (o['encrypt-uri'] ? ' %s' : '%v') +
          ' %s' +
          (o.config ? ' %s' : '')
        );
      }
    },
    {
      // a=extmap-allow-mixed
      name: 'extmapAllowMixed',
      reg: /^(extmap-allow-mixed)/
    },
    {
      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
      push: 'crypto',
      reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
      names: ['id', 'suite', 'config', 'sessionConfig'],
      format: function (o) {
        return (o.sessionConfig != null)
          ? 'crypto:%d %s %s %s'
          : 'crypto:%d %s %s';
      }
    },
    {
      // a=setup:actpass
      name: 'setup',
      reg: /^setup:(\w*)/,
      format: 'setup:%s'
    },
    {
      // a=connection:new
      name: 'connectionType',
      reg: /^connection:(new|existing)/,
      format: 'connection:%s'
    },
    {
      // a=mid:1
      name: 'mid',
      reg: /^mid:([^\s]*)/,
      format: 'mid:%s'
    },
    {
      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
      name: 'msid',
      reg: /^msid:(.*)/,
      format: 'msid:%s'
    },
    {
      // a=ptime:20
      name: 'ptime',
      reg: /^ptime:(\d*(?:\.\d*)*)/,
      format: 'ptime:%d'
    },
    {
      // a=maxptime:60
      name: 'maxptime',
      reg: /^maxptime:(\d*(?:\.\d*)*)/,
      format: 'maxptime:%d'
    },
    {
      // a=sendrecv
      name: 'direction',
      reg: /^(sendrecv|recvonly|sendonly|inactive)/
    },
    {
      // a=ice-lite
      name: 'icelite',
      reg: /^(ice-lite)/
    },
    {
      // a=ice-ufrag:F7gI
      name: 'iceUfrag',
      reg: /^ice-ufrag:(\S*)/,
      format: 'ice-ufrag:%s'
    },
    {
      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
      name: 'icePwd',
      reg: /^ice-pwd:(\S*)/,
      format: 'ice-pwd:%s'
    },
    {
      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
      name: 'fingerprint',
      reg: /^fingerprint:(\S*) (\S*)/,
      names: ['type', 'hash'],
      format: 'fingerprint:%s %s'
    },
    {
      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
      push:'candidates',
      reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
      format: function (o) {
        var str = 'candidate:%s %d %s %d %s %d typ %s';

        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';

        // NB: candidate has three optional chunks, so %void middles one if it's missing
        str += (o.tcptype != null) ? ' tcptype %s' : '%v';

        if (o.generation != null) {
          str += ' generation %d';
        }

        str += (o['network-id'] != null) ? ' network-id %d' : '%v';
        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';
        return str;
      }
    },
    {
      // a=end-of-candidates (keep after the candidates line for readability)
      name: 'endOfCandidates',
      reg: /^(end-of-candidates)/
    },
    {
      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
      name: 'remoteCandidates',
      reg: /^remote-candidates:(.*)/,
      format: 'remote-candidates:%s'
    },
    {
      // a=ice-options:google-ice
      name: 'iceOptions',
      reg: /^ice-options:(\S*)/,
      format: 'ice-options:%s'
    },
    {
      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
      push: 'ssrcs',
      reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
      names: ['id', 'attribute', 'value'],
      format: function (o) {
        var str = 'ssrc:%d';
        if (o.attribute != null) {
          str += ' %s';
          if (o.value != null) {
            str += ':%s';
          }
        }
        return str;
      }
    },
    {
      // a=ssrc-group:FEC 1 2
      // a=ssrc-group:FEC-FR 3004364195 1080772241
      push: 'ssrcGroups',
      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
      reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
      names: ['semantics', 'ssrcs'],
      format: 'ssrc-group:%s %s'
    },
    {
      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
      name: 'msidSemantic',
      reg: /^msid-semantic:\s?(\w*) (\S*)/,
      names: ['semantic', 'token'],
      format: 'msid-semantic: %s %s' // space after ':' is not accidental
    },
    {
      // a=group:BUNDLE audio video
      push: 'groups',
      reg: /^group:(\w*) (.*)/,
      names: ['type', 'mids'],
      format: 'group:%s %s'
    },
    {
      // a=rtcp-mux
      name: 'rtcpMux',
      reg: /^(rtcp-mux)/
    },
    {
      // a=rtcp-rsize
      name: 'rtcpRsize',
      reg: /^(rtcp-rsize)/
    },
    {
      // a=sctpmap:5000 webrtc-datachannel 1024
      name: 'sctpmap',
      reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
      names: ['sctpmapNumber', 'app', 'maxMessageSize'],
      format: function (o) {
        return (o.maxMessageSize != null)
          ? 'sctpmap:%s %s %s'
          : 'sctpmap:%s %s';
      }
    },
    {
      // a=x-google-flag:conference
      name: 'xGoogleFlag',
      reg: /^x-google-flag:([^\s]*)/,
      format: 'x-google-flag:%s'
    },
    {
      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
      push: 'rids',
      reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
      names: ['id', 'direction', 'params'],
      format: function (o) {
        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';
      }
    },
    {
      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
      // a=imageattr:* send [x=800,y=640] recv *
      // a=imageattr:100 recv [x=320,y=240]
      push: 'imageattrs',
      reg: new RegExp(
        // a=imageattr:97
        '^imageattr:(\\d+|\\*)' +
        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
        '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
        // recv [x=330,y=250]
        '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'
      ),
      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
      format: function (o) {
        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
      }
    },
    {
      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
      // a=simulcast:recv 1;4,5 send 6;7
      name: 'simulcast',
      reg: new RegExp(
        // a=simulcast:
        '^simulcast:' +
        // send 1,2,3;~4,~5
        '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
        // space + recv 6;~7,~8
        '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
        // end
        '$'
      ),
      names: ['dir1', 'list1', 'dir2', 'list2'],
      format: function (o) {
        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
      }
    },
    {
      // old simulcast draft 03 (implemented by Firefox)
      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
      // a=simulcast: recv pt=97;98 send pt=97
      // a=simulcast: send rid=5;6;7 paused=6,7
      name: 'simulcast_03',
      reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
      names: ['value'],
      format: 'simulcast: %s'
    },
    {
      // a=framerate:25
      // a=framerate:29.97
      name: 'framerate',
      reg: /^framerate:(\d+(?:$|\.\d+))/,
      format: 'framerate:%s'
    },
    {
      // RFC4570
      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
      name: 'sourceFilter',
      reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
      format: 'source-filter: %s %s %s %s %s'
    },
    {
      // a=bundle-only
      name: 'bundleOnly',
      reg: /^(bundle-only)/
    },
    {
      // a=label:1
      name: 'label',
      reg: /^label:(.+)/,
      format: 'label:%s'
    },
    {
      // RFC version 26 for SCTP over DTLS
      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
      name: 'sctpPort',
      reg: /^sctp-port:(\d+)$/,
      format: 'sctp-port:%s'
    },
    {
      // RFC version 26 for SCTP over DTLS
      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
      name: 'maxMessageSize',
      reg: /^max-message-size:(\d+)$/,
      format: 'max-message-size:%s'
    },
    {
      // RFC7273
      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
      push:'tsRefClocks',
      reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
      names: ['clksrc', 'clksrcExt'],
      format: function (o) {
        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');
      }
    },
    {
      // RFC7273
      // a=mediaclk:direct=963214424
      name:'mediaClk',
      reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],
      format: function (o) {
        var str = 'mediaclk:';
        str += (o.id != null ? 'id=%s %s' : '%v%s');
        str += (o.mediaClockValue != null ? '=%s' : '');
        str += (o.rateNumerator != null ? ' rate=%s' : '');
        str += (o.rateDenominator != null ? '/%s' : '');
        return str;
      }
    },
    {
      // a=keywds:keywords
      name: 'keywords',
      reg: /^keywds:(.+)$/,
      format: 'keywds:%s'
    },
    {
      // a=content:main
      name: 'content',
      reg: /^content:(.+)/,
      format: 'content:%s'
    },
    // BFCP https://tools.ietf.org/html/rfc4583
    {
      // a=floorctrl:c-s
      name: 'bfcpFloorCtrl',
      reg: /^floorctrl:(c-only|s-only|c-s)/,
      format: 'floorctrl:%s'
    },
    {
      // a=confid:1
      name: 'bfcpConfId',
      reg: /^confid:(\d+)/,
      format: 'confid:%s'
    },
    {
      // a=userid:1
      name: 'bfcpUserId',
      reg: /^userid:(\d+)/,
      format: 'userid:%s'
    },
    {
      // a=floorid:1
      name: 'bfcpFloorId',
      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
      names: ['id', 'mStream'],
      format: 'floorid:%s mstrm:%s'
    },
    {
      // any a= that we don't understand is kept verbatim on media.invalid
      push: 'invalid',
      names: ['value']
    }
  ]
};

// set sensible defaults to avoid polluting the grammar with boring details
Object.keys(grammar).forEach(function (key) {
  var objs = grammar[key];
  objs.forEach(function (obj) {
    if (!obj.reg) {
      obj.reg = /(.*)/;
    }
    if (!obj.format) {
      obj.format = '%s';
    }
  });
});


/***/ }),

/***/ 23978:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var parser = __webpack_require__(93830);
var writer = __webpack_require__(30574);

exports.write = writer;
exports.parse = parser.parse;
exports.parseParams = parser.parseParams;
exports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().
exports.parsePayloads = parser.parsePayloads;
exports.parseRemoteCandidates = parser.parseRemoteCandidates;
exports.parseImageAttributes = parser.parseImageAttributes;
exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;


/***/ }),

/***/ 93830:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var toIntIfInt = function (v) {
  return String(Number(v)) === v ? Number(v) : v;
};

var attachProperties = function (match, location, names, rawName) {
  if (rawName && !names) {
    location[rawName] = toIntIfInt(match[1]);
  }
  else {
    for (var i = 0; i < names.length; i += 1) {
      if (match[i+1] != null) {
        location[names[i]] = toIntIfInt(match[i+1]);
      }
    }
  }
};

var parseReg = function (obj, location, content) {
  var needsBlank = obj.name && obj.names;
  if (obj.push && !location[obj.push]) {
    location[obj.push] = [];
  }
  else if (needsBlank && !location[obj.name]) {
    location[obj.name] = {};
  }
  var keyLocation = obj.push ?
    {} :  // blank object that will be pushed
    needsBlank ? location[obj.name] : location; // otherwise, named location or root

  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

  if (obj.push) {
    location[obj.push].push(keyLocation);
  }
};

var grammar = __webpack_require__(68060);
var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

exports.parse = function (sdp) {
  var session = {}
    , media = []
    , location = session; // points at where properties go under (one of the above)

  // parse lines we understand
  sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
    var type = l[0];
    var content = l.slice(2);
    if (type === 'm') {
      media.push({rtp: [], fmtp: []});
      location = media[media.length-1]; // point at latest media line
    }

    for (var j = 0; j < (grammar[type] || []).length; j += 1) {
      var obj = grammar[type][j];
      if (obj.reg.test(content)) {
        return parseReg(obj, location, content);
      }
    }
  });

  session.media = media; // link it up
  return session;
};

var paramReducer = function (acc, expr) {
  var s = expr.split(/=(.+)/, 2);
  if (s.length === 2) {
    acc[s[0]] = toIntIfInt(s[1]);
  } else if (s.length === 1 && expr.length > 1) {
    acc[s[0]] = undefined;
  }
  return acc;
};

exports.parseParams = function (str) {
  return str.split(/;\s?/).reduce(paramReducer, {});
};

// For backward compatibility - alias will be removed in 3.0.0
exports.parseFmtpConfig = exports.parseParams;

exports.parsePayloads = function (str) {
  return str.toString().split(' ').map(Number);
};

exports.parseRemoteCandidates = function (str) {
  var candidates = [];
  var parts = str.split(' ').map(toIntIfInt);
  for (var i = 0; i < parts.length; i += 3) {
    candidates.push({
      component: parts[i],
      ip: parts[i + 1],
      port: parts[i + 2]
    });
  }
  return candidates;
};

exports.parseImageAttributes = function (str) {
  return str.split(' ').map(function (item) {
    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});
  });
};

exports.parseSimulcastStreamList = function (str) {
  return str.split(';').map(function (stream) {
    return stream.split(',').map(function (format) {
      var scid, paused = false;

      if (format[0] !== '~') {
        scid = toIntIfInt(format);
      } else {
        scid = toIntIfInt(format.substring(1, format.length));
        paused = true;
      }

      return {
        scid: scid,
        paused: paused
      };
    });
  });
};


/***/ }),

/***/ 30574:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var grammar = __webpack_require__(68060);

// customized util.format - discards excess arguments and can void middle ones
var formatRegExp = /%[sdv%]/g;
var format = function (formatStr) {
  var i = 1;
  var args = arguments;
  var len = args.length;
  return formatStr.replace(formatRegExp, function (x) {
    if (i >= len) {
      return x; // missing argument
    }
    var arg = args[i];
    i += 1;
    switch (x) {
    case '%%':
      return '%';
    case '%s':
      return String(arg);
    case '%d':
      return Number(arg);
    case '%v':
      return '';
    }
  });
  // NB: we discard excess arguments - they are typically undefined from makeLine
};

var makeLine = function (type, obj, location) {
  var str = obj.format instanceof Function ?
    (obj.format(obj.push ? location : location[obj.name])) :
    obj.format;

  var args = [type + '=' + str];
  if (obj.names) {
    for (var i = 0; i < obj.names.length; i += 1) {
      var n = obj.names[i];
      if (obj.name) {
        args.push(location[obj.name][n]);
      }
      else { // for mLine and push attributes
        args.push(location[obj.names[i]]);
      }
    }
  }
  else {
    args.push(location[obj.name]);
  }
  return format.apply(null, args);
};

// RFC specified order
// TODO: extend this with all the rest
var defaultOuterOrder = [
  'v', 'o', 's', 'i',
  'u', 'e', 'p', 'c',
  'b', 't', 'r', 'z', 'a'
];
var defaultInnerOrder = ['i', 'c', 'b', 'a'];


module.exports = function (session, opts) {
  opts = opts || {};
  // ensure certain properties exist
  if (session.version == null) {
    session.version = 0; // 'v=0' must be there (only defined version atm)
  }
  if (session.name == null) {
    session.name = ' '; // 's= ' must be there if no meaningful name set
  }
  session.media.forEach(function (mLine) {
    if (mLine.payloads == null) {
      mLine.payloads = '';
    }
  });

  var outerOrder = opts.outerOrder || defaultOuterOrder;
  var innerOrder = opts.innerOrder || defaultInnerOrder;
  var sdp = [];

  // loop through outerOrder for matching properties on session
  outerOrder.forEach(function (type) {
    grammar[type].forEach(function (obj) {
      if (obj.name in session && session[obj.name] != null) {
        sdp.push(makeLine(type, obj, session));
      }
      else if (obj.push in session && session[obj.push] != null) {
        session[obj.push].forEach(function (el) {
          sdp.push(makeLine(type, obj, el));
        });
      }
    });
  });

  // then for each media line, follow the innerOrder
  session.media.forEach(function (mLine) {
    sdp.push(makeLine('m', grammar.m[0], mLine));

    innerOrder.forEach(function (type) {
      grammar[type].forEach(function (obj) {
        if (obj.name in mLine && mLine[obj.name] != null) {
          sdp.push(makeLine(type, obj, mLine));
        }
        else if (obj.push in mLine && mLine[obj.push] != null) {
          mLine[obj.push].forEach(function (el) {
            sdp.push(makeLine(type, obj, el));
          });
        }
      });
    });
  });

  return sdp.join('\r\n') + '\r\n';
};


/***/ }),

/***/ 15452:
/***/ ((module) => {

"use strict";


module.exports = (string, separator) => {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	const separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [
		string.slice(0, separatorIndex),
		string.slice(separatorIndex + separator.length)
	];
};


/***/ }),

/***/ 57785:
/***/ ((module) => {

"use strict";

module.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);


/***/ }),

/***/ 97643:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(77888));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 8942:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var space = __webpack_require__(34204)

/**
 * Export.
 */

module.exports = toCamelCase

/**
 * Convert a `string` to camel case.
 *
 * @param {String} string
 * @return {String}
 */

function toCamelCase(string) {
  return space(string).replace(/\s(\w)/g, function (matches, letter) {
    return letter.toUpperCase()
  })
}


/***/ }),

/***/ 18573:
/***/ ((module) => {


/**
 * Export.
 */

module.exports = toNoCase

/**
 * Test whether a string is camel-case.
 */

var hasSpace = /\s/
var hasSeparator = /(_|-|\.|:)/
var hasCamel = /([a-z][A-Z]|[A-Z][a-z])/

/**
 * Remove any starting case from a `string`, like camel or snake, but keep
 * spaces and punctuation that may be important otherwise.
 *
 * @param {String} string
 * @return {String}
 */

function toNoCase(string) {
  if (hasSpace.test(string)) return string.toLowerCase()
  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()
  if (hasCamel.test(string)) return uncamelize(string).toLowerCase()
  return string.toLowerCase()
}

/**
 * Separator splitter.
 */

var separatorSplitter = /[\W_]+(.|$)/g

/**
 * Un-separate a `string`.
 *
 * @param {String} string
 * @return {String}
 */

function unseparate(string) {
  return string.replace(separatorSplitter, function (m, next) {
    return next ? ' ' + next : ''
  })
}

/**
 * Camelcase splitter.
 */

var camelSplitter = /(.)([A-Z]+)/g

/**
 * Un-camelcase a `string`.
 *
 * @param {String} string
 * @return {String}
 */

function uncamelize(string) {
  return string.replace(camelSplitter, function (m, previous, uppers) {
    return previous + ' ' + uppers.toLowerCase().split('').join(' ')
  })
}


/***/ }),

/***/ 34204:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var clean = __webpack_require__(18573)

/**
 * Export.
 */

module.exports = toSpaceCase

/**
 * Convert a `string` to space case.
 *
 * @param {String} string
 * @return {String}
 */

function toSpaceCase(string) {
  return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
    return match ? ' ' + match : ''
  }).trim()
}


/***/ }),

/***/ 35050:
/***/ ((__unused_webpack_module, exports) => {

/*! https://mths.be/utf8js v3.0.0 by @mathias */
;(function(root) {

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			checkScalarValue(codePoint);
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, itâs not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				checkScalarValue(codePoint);
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	root.version = '3.0.0';
	root.encode = utf8encode;
	root.decode = utf8decode;

}( false ? 0 : exports));


/***/ }),

/***/ 60130:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function get() {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function get() {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function get() {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function get() {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function get() {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function get() {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function get() {
    return _version.default;
  }
}));

var _v = _interopRequireDefault(__webpack_require__(27343));

var _v2 = _interopRequireDefault(__webpack_require__(46076));

var _v3 = _interopRequireDefault(__webpack_require__(85854));

var _v4 = _interopRequireDefault(__webpack_require__(95899));

var _nil = _interopRequireDefault(__webpack_require__(15384));

var _version = _interopRequireDefault(__webpack_require__(97643));

var _validate = _interopRequireDefault(__webpack_require__(77888));

var _stringify = _interopRequireDefault(__webpack_require__(49926));

var _parse = _interopRequireDefault(__webpack_require__(9964));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 2763:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 74267:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports["default"] = _default;

/***/ }),

/***/ 15384:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 9964:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(77888));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 76678:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 41874:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ 13254:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 49926:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(__webpack_require__(77888));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 27343:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__webpack_require__(41874));

var _stringify = __webpack_require__(49926);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 46076:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(18679));

var _md = _interopRequireDefault(__webpack_require__(2763));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 18679:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.URL = exports.DNS = void 0;
exports["default"] = v35;

var _stringify = __webpack_require__(49926);

var _parse = _interopRequireDefault(__webpack_require__(9964));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 85854:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _native = _interopRequireDefault(__webpack_require__(74267));

var _rng = _interopRequireDefault(__webpack_require__(41874));

var _stringify = __webpack_require__(49926);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 95899:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(18679));

var _sha = _interopRequireDefault(__webpack_require__(13254));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 77888:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__webpack_require__(76678));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 66162:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Rule = function Rule(name, fn, args, modifiers) {
  this.name = name;
  this.fn = fn;
  this.args = args;
  this.modifiers = modifiers;
};

Rule.prototype._test = function _test (value) {
  var fn = this.fn;

  try {
    testAux(this.modifiers.slice(), fn, this)(value);
  } catch (ex) {
    fn = function () { return false; };
  }

  try {
    return testAux(this.modifiers.slice(), fn, this)(value);
  } catch (ex$1) {
    return false;
  }
};

Rule.prototype._check = function _check (value) {
  try {
    testAux(this.modifiers.slice(), this.fn, this)(value);
  } catch (ex) {
    if (testAux(this.modifiers.slice(), function (it) { return it; }, this)(false)) {
      return;
    }
  }

  if (!testAux(this.modifiers.slice(), this.fn, this)(value)) {
    throw null;
  }
};

Rule.prototype._testAsync = function _testAsync (value) {
    var this$1 = this;

  return new Promise(function (resolve, reject) {
    testAsyncAux(
      this$1.modifiers.slice(),
      this$1.fn,
      this$1
    )(value)
      .then(function (valid) {
        if (valid) {
          resolve(value);
        } else {
          reject(null);
        }
      })
      .catch(function (ex) { return reject(ex); });
  });
};

function pickFn(fn, variant) {
  if ( variant === void 0 ) variant = 'simple';

  return typeof fn === 'object' ? fn[variant] : fn;
}

function testAux(modifiers, fn, rule) {
  if (modifiers.length) {
    var modifier = modifiers.shift();
    var nextFn = testAux(modifiers, fn, rule);
    return modifier.perform(nextFn, rule);
  } else {
    return pickFn(fn);
  }
}

function testAsyncAux(modifiers, fn, rule) {
  if (modifiers.length) {
    var modifier = modifiers.shift();
    var nextFn = testAsyncAux(modifiers, fn, rule);
    return modifier.performAsync(nextFn, rule);
  } else {
    return function (value) { return Promise.resolve(pickFn(fn, 'async')(value)); };
  }
}

var Modifier = function Modifier(name, perform, performAsync) {
  this.name = name;
  this.perform = perform;
  this.performAsync = performAsync;
};

var ValidationError = /*@__PURE__*/(function (Error) {
  function ValidationError(rule, value, cause, target) {
    var remaining = [], len = arguments.length - 4;
    while ( len-- > 0 ) remaining[ len ] = arguments[ len + 4 ];

    Error.call(this, remaining);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, ValidationError);
    }
    this.rule = rule;
    this.value = value;
    this.cause = cause;
    this.target = target;
  }

  if ( Error ) ValidationError.__proto__ = Error;
  ValidationError.prototype = Object.create( Error && Error.prototype );
  ValidationError.prototype.constructor = ValidationError;

  return ValidationError;
}(Error));

var Context = function Context(chain, nextRuleModifiers) {
  if ( chain === void 0 ) chain = [];
  if ( nextRuleModifiers === void 0 ) nextRuleModifiers = [];

  this.chain = chain;
  this.nextRuleModifiers = nextRuleModifiers;
};

Context.prototype._applyRule = function _applyRule (ruleFn, name) {
    var this$1 = this;

  return function () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    this$1.chain.push(
      new Rule(name, ruleFn.apply(this$1, args), args, this$1.nextRuleModifiers)
    );
    this$1.nextRuleModifiers = [];
    return this$1;
  };
};

Context.prototype._applyModifier = function _applyModifier (modifier, name) {
  this.nextRuleModifiers.push(
    new Modifier(name, modifier.simple, modifier.async)
  );
  return this;
};

Context.prototype._clone = function _clone () {
  return new Context(this.chain.slice(), this.nextRuleModifiers.slice());
};

Context.prototype.test = function test (value) {
  return this.chain.every(function (rule) { return rule._test(value); });
};

Context.prototype.testAll = function testAll (value) {
  var err = [];
  this.chain.forEach(function (rule) {
    try {
      rule._check(value);
    } catch (ex) {
      err.push(new ValidationError(rule, value, ex));
    }
  });
  return err;
};

Context.prototype.check = function check (value) {
  this.chain.forEach(function (rule) {
    try {
      rule._check(value);
    } catch (ex) {
      throw new ValidationError(rule, value, ex);
    }
  });
};

Context.prototype.testAsync = function testAsync (value) {
    var this$1 = this;

  return new Promise(function (resolve, reject) {
    executeAsyncRules(value, this$1.chain.slice(), resolve, reject);
  });
};

function executeAsyncRules(value, rules, resolve, reject) {
  if (rules.length) {
    var rule = rules.shift();
    rule._testAsync(value).then(
      function () {
        executeAsyncRules(value, rules, resolve, reject);
      },
      function (cause) {
        reject(new ValidationError(rule, value, cause));
      }
    );
  } else {
    resolve(value);
  }
}

var consideredEmpty = function (value, considerTrimmedEmptyString) {
  if (
    considerTrimmedEmptyString &&
    typeof value === 'string' &&
    value.trim().length === 0
  ) {
    return true;
  }

  return value === undefined || value === null;
};

function optional (validation, considerTrimmedEmptyString) {
  if ( considerTrimmedEmptyString === void 0 ) considerTrimmedEmptyString = false;

  return ({
  simple: function (value) { return consideredEmpty(value, considerTrimmedEmptyString) ||
    validation.check(value) === undefined; },
  async: function (value) { return consideredEmpty(value, considerTrimmedEmptyString) ||
    validation.testAsync(value); },
});
}

function v8n() {
  return typeof Proxy !== 'undefined'
    ? proxyContext(new Context())
    : proxylessContext(new Context());
}

// Custom rules
var customRules = {};

v8n.extend = function(newRules) {
  Object.assign(customRules, newRules);
};

v8n.clearCustomRules = function() {
  customRules = {};
};

function proxyContext(context) {
  return new Proxy(context, {
    get: function get(obj, prop) {
      if (prop in obj) {
        return obj[prop];
      }

      var newContext = proxyContext(context._clone());

      if (prop in availableModifiers) {
        return newContext._applyModifier(availableModifiers[prop], prop);
      }
      if (prop in customRules) {
        return newContext._applyRule(customRules[prop], prop);
      }
      if (prop in availableRules) {
        return newContext._applyRule(availableRules[prop], prop);
      }
    },
  });
}

function proxylessContext(context) {
  var addRuleSet = function (ruleSet, targetContext) {
    Object.keys(ruleSet).forEach(function (prop) {
      targetContext[prop] = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var newContext = proxylessContext(targetContext._clone());
        var contextWithRuleApplied = newContext._applyRule(
          ruleSet[prop],
          prop
        ).apply(void 0, args);
        return contextWithRuleApplied;
      };
    });
    return targetContext;
  };

  var contextWithAvailableRules = addRuleSet(availableRules, context);
  var contextWithAllRules = addRuleSet(
    customRules,
    contextWithAvailableRules
  );

  Object.keys(availableModifiers).forEach(function (prop) {
    Object.defineProperty(contextWithAllRules, prop, {
      get: function () {
        var newContext = proxylessContext(contextWithAllRules._clone());
        return newContext._applyModifier(availableModifiers[prop], prop);
      },
    });
  });

  return contextWithAllRules;
}

var availableModifiers = {
  not: {
    simple: function (fn) { return function (value) { return !fn(value); }; },
    async: function (fn) { return function (value) { return Promise.resolve(fn(value))
        .then(function (result) { return !result; })
        .catch(function () { return true; }); }; },
  },

  some: {
    simple: function (fn) { return function (value) {
      return split(value).some(function (item) {
        try {
          return fn(item);
        } catch (ex) {
          return false;
        }
      });
    }; },
    async: function (fn) { return function (value) {
      return Promise.all(
        split(value).map(function (item) {
          try {
            return fn(item).catch(function () { return false; });
          } catch (ex) {
            return false;
          }
        })
      ).then(function (result) { return result.some(Boolean); });
    }; },
  },

  every: {
    simple: function (fn) { return function (value) { return value !== false && split(value).every(fn); }; },
    async: function (fn) { return function (value) { return Promise.all(split(value).map(fn)).then(function (result) { return result.every(Boolean); }); }; },
  },

  strict: {
    simple: function (fn, rule) { return function (value) {
      if (isSchemaRule(rule) && value && typeof value === 'object') {
        return (
          Object.keys(rule.args[0]).length === Object.keys(value).length &&
          fn(value)
        );
      }
      return fn(value);
    }; },
    async: function (fn, rule) { return function (value) { return Promise.resolve(fn(value))
        .then(function (result) {
          if (isSchemaRule(rule) && value && typeof value === 'object') {
            return (
              Object.keys(rule.args[0]).length === Object.keys(value).length &&
              result
            );
          }
          return result;
        })
        .catch(function () { return false; }); }; },
  },
};

function isSchemaRule(rule) {
  return (
    rule &&
    rule.name === 'schema' &&
    rule.args.length > 0 &&
    typeof rule.args[0] === 'object'
  );
}

function split(value) {
  if (typeof value === 'string') {
    return value.split('');
  }
  return value;
}

var availableRules = {
  // Value

  equal: function (expected) { return function (value) { return value == expected; }; },

  exact: function (expected) { return function (value) { return value === expected; }; },

  // Types

  number: function (allowInfinite) {
    if ( allowInfinite === void 0 ) allowInfinite = true;

    return function (value) { return typeof value === 'number' && (allowInfinite || isFinite(value)); };
},

  integer: function () { return function (value) {
    var isInteger = Number.isInteger || isIntegerPolyfill;
    return isInteger(value);
  }; },

  numeric: function () { return function (value) { return !isNaN(parseFloat(value)) && isFinite(value); }; },

  string: function () { return testType('string'); },

  boolean: function () { return testType('boolean'); },

  undefined: function () { return testType('undefined'); },

  null: function () { return testType('null'); },

  array: function () { return testType('array'); },

  object: function () { return testType('object'); },

  instanceOf: function (instance) { return function (value) { return value instanceof instance; }; },

  // Pattern

  pattern: function (expected) { return function (value) { return expected.test(value); }; },

  lowercase: function () { return function (value) {
    return (
      typeof value === 'boolean' ||
      (value === value.toLowerCase() && value.trim() !== '')
    );
  }; },

  uppercase: function () { return function (value) { return value === value.toUpperCase() && value.trim() !== ''; }; },

  vowel: function () { return function (value) { return /^[aeiou]+$/i.test(value); }; },

  consonant: function () { return function (value) { return /^(?=[^aeiou])([a-z]+)$/i.test(value); }; },

  // Value at

  first: function (expected) { return function (value) { return value[0] == expected; }; },

  last: function (expected) { return function (value) { return value[value.length - 1] == expected; }; },

  // Length

  empty: function () { return function (value) { return value.length === 0; }; },

  length: function (min, max) { return function (value) { return value.length >= min && value.length <= (max || min); }; },

  minLength: function (min) { return function (value) { return value.length >= min; }; },

  maxLength: function (max) { return function (value) { return value.length <= max; }; },

  // Range

  negative: function () { return function (value) { return value < 0; }; },

  positive: function () { return function (value) { return value >= 0; }; },

  between: function (a, b) { return function (value) { return value >= a && value <= b; }; },

  range: function (a, b) { return function (value) { return value >= a && value <= b; }; },

  lessThan: function (n) { return function (value) { return value < n; }; },

  lessThanOrEqual: function (n) { return function (value) { return value <= n; }; },

  greaterThan: function (n) { return function (value) { return value > n; }; },

  greaterThanOrEqual: function (n) { return function (value) { return value >= n; }; },

  // Divisible

  even: function () { return function (value) { return value % 2 === 0; }; },

  odd: function () { return function (value) { return value % 2 !== 0; }; },

  includes: function (expected) { return function (value) { return ~value.indexOf(expected); }; },

  schema: function (schema) { return testSchema(schema); },

  // branching

  passesAnyOf: function () {
    var validations = [], len = arguments.length;
    while ( len-- ) validations[ len ] = arguments[ len ];

    return function (value) { return validations.some(function (validation) { return validation.test(value); }); };
},

  optional: optional,
};

function testType(expected) {
  return function (value) {
    return (
      (Array.isArray(value) && expected === 'array') ||
      (value === null && expected === 'null') ||
      typeof value === expected
    );
  };
}

function isIntegerPolyfill(value) {
  return (
    typeof value === 'number' && isFinite(value) && Math.floor(value) === value
  );
}

function testSchema(schema) {
  return {
    simple: function (value) {
      var causes = [];
      Object.keys(schema).forEach(function (key) {
        var nestedValidation = schema[key];
        try {
          nestedValidation.check((value || {})[key]);
        } catch (ex) {
          ex.target = key;
          causes.push(ex);
        }
      });
      if (causes.length > 0) {
        throw causes;
      }
      return true;
    },
    async: function (value) {
      var causes = [];
      var nested = Object.keys(schema).map(function (key) {
        var nestedValidation = schema[key];
        return nestedValidation.testAsync((value || {})[key]).catch(function (ex) {
          ex.target = key;
          causes.push(ex);
        });
      });
      return Promise.all(nested).then(function () {
        if (causes.length > 0) {
          throw causes;
        }

        return true;
      });
    },
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v8n);


/***/ }),

/***/ 10765:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var chalk = __webpack_require__(2645);

var typeColors = {
  modified: 'yellow',
  added: 'green',
  removed: 'red'
};

var defaultOptions = {
  indent: '  ',
  newLine: '\n',
  wrap: function wrap(type, text) {
    return chalk[typeColors[type]](text);
  },
  color: true
};

function isObject(obj) {
  return typeof obj === 'object' && obj && !Array.isArray(obj);
}

function printVar(variable) {
  if (typeof variable === 'function') {
    return variable.toString().replace(/\{.+\}/,'{}');
  } else if((typeof variable === 'object' || typeof variable === 'string') && !(variable instanceof RegExp)) {
    return JSON.stringify(variable);
  }

  return '' + variable;
}

function indentSubItem(text, options) {
  return text.split(options.newLine).map(function onMap(line, index) {
    if (index === 0) {
      return line;
    }
    return options.indent + line;
  }).join(options.newLine);
}

function keyChanged(key, text, options) {
  return options.indent + key + ': ' + indentSubItem(text, options) + options.newLine
}

function keyRemoved(key, variable, options) {
  return options.wrap('removed', '- ' + key + ': ' + printVar(variable)) + options.newLine;
}

function keyAdded(key, variable, options) {
  return options.wrap('added', '+ ' + key + ': ' + printVar(variable)) + options.newLine;
}

function diffInternal(left, right, options) {
  var text = '';
  var changed = false;
  var itemDiff;
  var keys;
  var subOutput = '';

  if (Array.isArray(left) && Array.isArray(right)) {
    for (var i = 0; i < left.length; i++) {
      if (i < right.length) {
        itemDiff = diffInternal(left[i], right[i], options);
        if (itemDiff.changed) {
          subOutput += keyChanged(i, itemDiff.text, options);
          changed = true;
        }
      } else {
        subOutput += keyRemoved(i, left[i], options);
        changed = true;
      }
    }
    if (right.length > left.length) {
      for (; i < right.length; i++) {
        subOutput +=  keyAdded(i, right[i], options);
      }
      changed = true;
    }
    if (changed) {
      text = '[' + options.newLine + subOutput + ']';
    }
  } else if (isObject(left) && isObject(right)) {
    keys = Object.keys(left);
    var rightObj = Object.assign({}, right);
    var key;
    keys.sort();
    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      if (right.hasOwnProperty(key)) {
        itemDiff = diffInternal(left[key], right[key], options);
        if (itemDiff.changed) {
          subOutput += keyChanged(key, itemDiff.text, options);
          changed = true;
        }
        delete rightObj[key];
      } else {
        subOutput += keyRemoved(key, left[key], options);
        changed = true;
      }
    }

    var addedKeys = Object.keys(rightObj);
    for (var i = 0; i < addedKeys.length; i++) {
      subOutput += keyAdded(addedKeys[i], right[addedKeys[i]], options);
      changed = true;
    }

    if (changed) {
      text = '{' + options.newLine + subOutput + '}';
    }

  } else if (left !== right) {
    text = options.wrap('modified', printVar(left) + ' => ' + printVar(right));
    changed = true;
  }

  return {
    changed: changed,
    text: text
  };
}

function diff(left, right, options) {
  options = options || {};
  if (!options.color && options.wrap) {
    throw new Error('Can\'t specify wrap and color options together.')
  }

  var combinedOptions = Object.assign({}, defaultOptions, options);
  if (!combinedOptions.color) {
    combinedOptions.wrap = function(type, text) { return text }
  }

  return diffInternal(left, right, combinedOptions)
}


module.exports = diff;

/***/ }),

/***/ 73409:
/***/ ((module) => {

(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=undefined;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=undefined,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

'use strict';

var _adapter_factory = require("./adapter_factory.js");
var adapter = (0, _adapter_factory.adapterFactory)({
  window: typeof window === 'undefined' ? undefined : window
});
module.exports = adapter; // this is the difference from adapter_core.

},{"./adapter_factory.js":2}],2:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adapterFactory = adapterFactory;
var utils = _interopRequireWildcard(require("./utils"));
var chromeShim = _interopRequireWildcard(require("./chrome/chrome_shim"));
var firefoxShim = _interopRequireWildcard(require("./firefox/firefox_shim"));
var safariShim = _interopRequireWildcard(require("./safari/safari_shim"));
var commonShim = _interopRequireWildcard(require("./common_shim"));
var sdp = _interopRequireWildcard(require("sdp"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

// Browser shims.

// Shimming starts here.
function adapterFactory() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    window = _ref.window;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    shimChrome: true,
    shimFirefox: true,
    shimSafari: true
  };
  // Utils.
  var logging = utils.log;
  var browserDetails = utils.detectBrowser(window);
  var adapter = {
    browserDetails: browserDetails,
    commonShim: commonShim,
    extractVersion: utils.extractVersion,
    disableLog: utils.disableLog,
    disableWarnings: utils.disableWarnings,
    // Expose sdp as a convenience. For production apps include directly.
    sdp: sdp
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection || !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;

      // Must be called before shimPeerConnection.
      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);
      chromeShim.shimGetUserMedia(window, browserDetails);
      chromeShim.shimMediaStream(window, browserDetails);
      chromeShim.shimPeerConnection(window, browserDetails);
      chromeShim.shimOnTrack(window, browserDetails);
      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);
      chromeShim.shimGetSendersWithDtmf(window, browserDetails);
      chromeShim.shimGetStats(window, browserDetails);
      chromeShim.shimSenderReceiverGetStats(window, browserDetails);
      chromeShim.fixNegotiationNeeded(window, browserDetails);
      commonShim.shimRTCIceCandidate(window, browserDetails);
      commonShim.shimRTCIceCandidateRelayProtocol(window, browserDetails);
      commonShim.shimConnectionState(window, browserDetails);
      commonShim.shimMaxMessageSize(window, browserDetails);
      commonShim.shimSendThrowTypeError(window, browserDetails);
      commonShim.removeExtmapAllowMixed(window, browserDetails);
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection || !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;

      // Must be called before shimPeerConnection.
      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);
      firefoxShim.shimGetUserMedia(window, browserDetails);
      firefoxShim.shimPeerConnection(window, browserDetails);
      firefoxShim.shimOnTrack(window, browserDetails);
      firefoxShim.shimRemoveStream(window, browserDetails);
      firefoxShim.shimSenderGetStats(window, browserDetails);
      firefoxShim.shimReceiverGetStats(window, browserDetails);
      firefoxShim.shimRTCDataChannel(window, browserDetails);
      firefoxShim.shimAddTransceiver(window, browserDetails);
      firefoxShim.shimGetParameters(window, browserDetails);
      firefoxShim.shimCreateOffer(window, browserDetails);
      firefoxShim.shimCreateAnswer(window, browserDetails);
      commonShim.shimRTCIceCandidate(window, browserDetails);
      commonShim.shimConnectionState(window, browserDetails);
      commonShim.shimMaxMessageSize(window, browserDetails);
      commonShim.shimSendThrowTypeError(window, browserDetails);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;

      // Must be called before shimCallbackAPI.
      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);
      safariShim.shimRTCIceServerUrls(window, browserDetails);
      safariShim.shimCreateOfferLegacy(window, browserDetails);
      safariShim.shimCallbacksAPI(window, browserDetails);
      safariShim.shimLocalStreamsAPI(window, browserDetails);
      safariShim.shimRemoteStreamsAPI(window, browserDetails);
      safariShim.shimTrackEventTransceiver(window, browserDetails);
      safariShim.shimGetUserMedia(window, browserDetails);
      safariShim.shimAudioContext(window, browserDetails);
      commonShim.shimRTCIceCandidate(window, browserDetails);
      commonShim.shimRTCIceCandidateRelayProtocol(window, browserDetails);
      commonShim.shimMaxMessageSize(window, browserDetails);
      commonShim.shimSendThrowTypeError(window, browserDetails);
      commonShim.removeExtmapAllowMixed(window, browserDetails);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }
  return adapter;
}

},{"./chrome/chrome_shim":3,"./common_shim":6,"./firefox/firefox_shim":7,"./safari/safari_shim":10,"./utils":11,"sdp":12}],3:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixNegotiationNeeded = fixNegotiationNeeded;
exports.shimAddTrackRemoveTrack = shimAddTrackRemoveTrack;
exports.shimAddTrackRemoveTrackWithNative = shimAddTrackRemoveTrackWithNative;
Object.defineProperty(exports, "shimGetDisplayMedia", {
  enumerable: true,
  get: function get() {
    return _getdisplaymedia.shimGetDisplayMedia;
  }
});
exports.shimGetSendersWithDtmf = shimGetSendersWithDtmf;
exports.shimGetStats = shimGetStats;
Object.defineProperty(exports, "shimGetUserMedia", {
  enumerable: true,
  get: function get() {
    return _getusermedia.shimGetUserMedia;
  }
});
exports.shimMediaStream = shimMediaStream;
exports.shimOnTrack = shimOnTrack;
exports.shimPeerConnection = shimPeerConnection;
exports.shimSenderReceiverGetStats = shimSenderReceiverGetStats;
var utils = _interopRequireWildcard(require("../utils.js"));
var _getusermedia = require("./getusermedia");
var _getdisplaymedia = require("./getdisplaymedia");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}
function shimOnTrack(window) {
  if (_typeof(window) === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get: function get() {
        return this._ontrack;
      },
      set: function set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      var _this = this;
      if (!this._ontrackpoly) {
        this._ontrackpoly = function (e) {
          // onaddstream does not fire when a track is added to an existing
          // stream. But stream.onaddtrack is implemented so we use that.
          e.stream.addEventListener('addtrack', function (te) {
            var receiver;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = _this.getReceivers().find(function (r) {
                return r.track && r.track.id === te.track.id;
              });
            } else {
              receiver = {
                track: te.track
              };
            }
            var event = new Event('track');
            event.track = te.track;
            event.receiver = receiver;
            event.transceiver = {
              receiver: receiver
            };
            event.streams = [e.stream];
            _this.dispatchEvent(event);
          });
          e.stream.getTracks().forEach(function (track) {
            var receiver;
            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = _this.getReceivers().find(function (r) {
                return r.track && r.track.id === track.id;
              });
            } else {
              receiver = {
                track: track
              };
            }
            var event = new Event('track');
            event.track = track;
            event.receiver = receiver;
            event.transceiver = {
              receiver: receiver
            };
            event.streams = [e.stream];
            _this.dispatchEvent(event);
          });
        };
        this.addEventListener('addstream', this._ontrackpoly);
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    utils.wrapPeerConnectionEvent(window, 'track', function (e) {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver', {
          value: {
            receiver: e.receiver
          }
        });
      }
      return e;
    });
  }
}
function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (_typeof(window) === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {
    var shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {
      return {
        track: track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };

      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        var sender = origAddTrack.apply(this, arguments);
        if (!sender) {
          sender = shimSenderWithDtmf(this, track);
          this._senders.push(sender);
        }
        return sender;
      };
      var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        origRemoveTrack.apply(this, arguments);
        var idx = this._senders.indexOf(sender);
        if (idx !== -1) {
          this._senders.splice(idx, 1);
        }
      };
    }
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      var _this2 = this;
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(function (track) {
        _this2._senders.push(shimSenderWithDtmf(_this2, track));
      });
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      var _this3 = this;
      this._senders = this._senders || [];
      origRemoveStream.apply(this, [stream]);
      stream.getTracks().forEach(function (track) {
        var sender = _this3._senders.find(function (s) {
          return s.track === track;
        });
        if (sender) {
          // remove sender
          _this3._senders.splice(_this3._senders.indexOf(sender), 1);
        }
      });
    };
  } else if (_typeof(window) === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var _this4 = this;
      var senders = origGetSenders.apply(this, []);
      senders.forEach(function (sender) {
        return sender._pc = _this4;
      });
      return senders;
    };
    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get: function get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}
function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var _this5 = this;
    var _arguments = Array.prototype.slice.call(arguments),
      selector = _arguments[0],
      onSucc = _arguments[1],
      onErr = _arguments[2];

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }
    var fixChromeStats_ = function fixChromeStats_(response) {
      var standardReport = {};
      var reports = response.result();
      reports.forEach(function (report) {
        var standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(function (name) {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });
      return standardReport;
    };

    // shim getStats with maplike support
    var makeMapStats = function makeMapStats(stats) {
      return new Map(Object.keys(stats).map(function (key) {
        return [key, stats[key]];
      }));
    };
    if (arguments.length >= 2) {
      var successCallbackWrapper_ = function successCallbackWrapper_(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };
      return origGetStats.apply(this, [successCallbackWrapper_, selector]);
    }

    // promise-support
    return new Promise(function (resolve, reject) {
      origGetStats.apply(_this5, [function (response) {
        resolve(makeMapStats(fixChromeStats_(response)));
      }, reject]);
    }).then(onSucc, onErr);
  };
}
function shimSenderReceiverGetStats(window) {
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var _this6 = this;
        var senders = origGetSenders.apply(this, []);
        senders.forEach(function (sender) {
          return sender._pc = _this6;
        });
        return senders;
      };
    }
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      var sender = this;
      return this._pc.getStats().then(function (result) {
        return (
          /* Note: this will include stats of all senders that
           *   send a track with the same id as sender.track as
           *   it is not possible to identify the RTCRtpSender.
           */
          utils.filterStats(result, sender.track, true)
        );
      });
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        var _this7 = this;
        var receivers = origGetReceivers.apply(this, []);
        receivers.forEach(function (receiver) {
          return receiver._pc = _this7;
        });
        return receivers;
      };
    }
    utils.wrapPeerConnectionEvent(window, 'track', function (e) {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      var receiver = this;
      return this._pc.getStats().then(function (result) {
        return utils.filterStats(result, receiver.track, false);
      });
    };
  }
  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  var origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
      var track = arguments[0];
      var sender;
      var receiver;
      var err;
      this.getSenders().forEach(function (s) {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(function (r) {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || sender && receiver) {
        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    var _this8 = this;
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    return Object.keys(this._shimmedLocalStreams).map(function (streamId) {
      return _this8._shimmedLocalStreams[streamId][0];
    });
  };
  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (!stream) {
      return origAddTrack.apply(this, arguments);
    }
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    var sender = origAddTrack.apply(this, arguments);
    if (!this._shimmedLocalStreams[stream.id]) {
      this._shimmedLocalStreams[stream.id] = [stream, sender];
    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
      this._shimmedLocalStreams[stream.id].push(sender);
    }
    return sender;
  };
  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    var _this9 = this;
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    stream.getTracks().forEach(function (track) {
      var alreadyExists = _this9.getSenders().find(function (s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    var existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    var newSenders = this.getSenders().filter(function (newSender) {
      return existingSenders.indexOf(newSender) === -1;
    });
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };
  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    delete this._shimmedLocalStreams[stream.id];
    return origRemoveStream.apply(this, arguments);
  };
  var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    var _this10 = this;
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    if (sender) {
      Object.keys(this._shimmedLocalStreams).forEach(function (streamId) {
        var idx = _this10._shimmedLocalStreams[streamId].indexOf(sender);
        if (idx !== -1) {
          _this10._shimmedLocalStreams[streamId].splice(idx, 1);
        }
        if (_this10._shimmedLocalStreams[streamId].length === 1) {
          delete _this10._shimmedLocalStreams[streamId];
        }
      });
    }
    return origRemoveTrack.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrack(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    var _this11 = this;
    var nativeStreams = origGetLocalStreams.apply(this);
    this._reverseStreams = this._reverseStreams || {};
    return nativeStreams.map(function (stream) {
      return _this11._reverseStreams[stream.id];
    });
  };
  var origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    var _this12 = this;
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    stream.getTracks().forEach(function (track) {
      var alreadyExists = _this12.getSenders().find(function (s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      var newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };
  var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
    delete this._streams[stream.id];
  };
  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    var _this13 = this;
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    var streams = [].slice.call(arguments, 1);
    if (streams.length !== 1 || !streams[0].getTracks().find(function (t) {
      return t === track;
    })) {
      // this is not fully correct but all we can manage without
      // [[associated MediaStreams]] internal slot.
      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');
    }
    var alreadyExists = this.getSenders().find(function (s) {
      return s.track === track;
    });
    if (alreadyExists) {
      throw new DOMException('Track already exists.', 'InvalidAccessError');
    }
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    var oldStream = this._streams[stream.id];
    if (oldStream) {
      // this is using odd Chrome behaviour, use with caution:
      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
      // Note: we rely on the high-level addTrack/dtmf shim to
      // create the sender with a dtmf sender.
      oldStream.addTrack(track);

      // Trigger ONN async.
      Promise.resolve().then(function () {
        _this13.dispatchEvent(new Event('negotiationneeded'));
      });
    } else {
      var newStream = new window.MediaStream([track]);
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      this.addStream(newStream);
    }
    return this.getSenders().find(function (s) {
      return s.track === track;
    });
  };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    var sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(function (internalId) {
      var externalStream = pc._reverseStreams[internalId];
      var internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function (method) {
    var nativeMethod = window.RTCPeerConnection.prototype[method];
    var methodObj = _defineProperty({}, method, function () {
      var _this14 = this;
      var args = arguments;
      var isLegacyCall = arguments.length && typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [function (description) {
          var desc = replaceInternalStreamId(_this14, description);
          args[0].apply(null, [desc]);
        }, function (err) {
          if (args[1]) {
            args[1].apply(null, err);
          }
        }, arguments[2]]);
      }
      return nativeMethod.apply(this, arguments).then(function (description) {
        return replaceInternalStreamId(_this14, description);
      });
    });
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });
  var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    if (!arguments.length || !arguments[0].type) {
      return origSetLocalDescription.apply(this, arguments);
    }
    arguments[0] = replaceExternalStreamId(this, arguments[0]);
    return origSetLocalDescription.apply(this, arguments);
  };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
    get: function get() {
      var description = origLocalDescription.get.apply(this);
      if (description.type === '') {
        return description;
      }
      return replaceInternalStreamId(this, description);
    }
  });
  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    var _this15 = this;
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }
    // We can not yet check for sender instanceof RTCRtpSender
    // since we shim RTPSender. So we check if sender._pc is set.
    if (!sender._pc) {
      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');
    }
    var isLocal = sender._pc === this;
    if (!isLocal) {
      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');
    }

    // Search for the native stream the senders track belongs to.
    this._streams = this._streams || {};
    var stream;
    Object.keys(this._streams).forEach(function (streamid) {
      var hasTrack = _this15._streams[streamid].getTracks().find(function (track) {
        return sender.track === track;
      });
      if (hasTrack) {
        stream = _this15._streams[streamid];
      }
    });
    if (stream) {
      if (stream.getTracks().length === 1) {
        // if this is the last track of the stream, remove the stream. This
        // takes care of any shimmed _senders.
        this.removeStream(this._reverseStreams[stream.id]);
      } else {
        // relying on the same odd chrome behaviour as above.
        stream.removeTrack(sender.track);
      }
      this.dispatchEvent(new Event('negotiationneeded'));
    }
  };
}
function shimPeerConnection(window, browserDetails) {
  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = _defineProperty({}, method, function () {
        arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      });
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window, browserDetails) {
  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', function (e) {
    var pc = e.target;
    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}

},{"../utils.js":11,"./getdisplaymedia":4,"./getusermedia":5}],4:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = shimGetDisplayMedia;
function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    return getSourceId(constraints).then(function (sourceId) {
      var widthSpecified = constraints.video && constraints.video.width;
      var heightSpecified = constraints.video && constraints.video.height;
      var frameRateSpecified = constraints.video && constraints.video.frameRate;
      constraints.video = {
        mandatory: {
          chromeMediaSource: 'desktop',
          chromeMediaSourceId: sourceId,
          maxFrameRate: frameRateSpecified || 3
        }
      };
      if (widthSpecified) {
        constraints.video.mandatory.maxWidth = widthSpecified;
      }
      if (heightSpecified) {
        constraints.video.mandatory.maxHeight = heightSpecified;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    });
  };
}

},{}],5:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetUserMedia = shimGetUserMedia;
var utils = _interopRequireWildcard(require("../utils.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var logging = utils.log;
function shimGetUserMedia(window, browserDetails) {
  var navigator = window && window.navigator;
  if (!navigator.mediaDevices) {
    return;
  }
  var constraintsToChrome_ = function constraintsToChrome_(c) {
    if (_typeof(c) !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function (key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = _typeof(c[key]) === 'object' ? c[key] : {
        ideal: c[key]
      };
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function oldname_(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return name === 'deviceId' ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function (mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };
  var shimConstraints_ = function shimConstraints_(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && _typeof(constraints.audio) === 'object') {
      var remap = function remap(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && _typeof(constraints.video) === 'object') {
      // Shim facingMode for mobile & surface pro.
      var face = constraints.video.facingMode;
      face = face && (_typeof(face) === 'object' ? face : {
        ideal: face
      });
      var getSupportedFacingModeLies = browserDetails.version < 66;
      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        var matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices().then(function (devices) {
            devices = devices.filter(function (d) {
              return d.kind === 'videoinput';
            });
            var dev = devices.find(function (d) {
              return matches.some(function (match) {
                return d.label.toLowerCase().includes(match);
              });
            });
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }

            if (dev) {
              constraints.video.deviceId = face.exact ? {
                exact: dev.deviceId
              } : {
                ideal: dev.deviceId
              };
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };
  var shimError_ = function shimError_(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString: function toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };
  var getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {
    shimConstraints_(constraints, function (c) {
      navigator.webkitGetUserMedia(c, onSuccess, function (e) {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (cs) {
      return shimConstraints_(cs, function (c) {
        return origGetUserMedia(c).then(function (stream) {
          if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(function (track) {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, function (e) {
          return Promise.reject(shimError_(e));
        });
      });
    };
  }
}

},{"../utils.js":11}],6:[function(require,module,exports){
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeExtmapAllowMixed = removeExtmapAllowMixed;
exports.shimAddIceCandidateNullOrEmpty = shimAddIceCandidateNullOrEmpty;
exports.shimConnectionState = shimConnectionState;
exports.shimMaxMessageSize = shimMaxMessageSize;
exports.shimParameterlessSetLocalDescription = shimParameterlessSetLocalDescription;
exports.shimRTCIceCandidate = shimRTCIceCandidate;
exports.shimRTCIceCandidateRelayProtocol = shimRTCIceCandidateRelayProtocol;
exports.shimSendThrowTypeError = shimSendThrowTypeError;
var _sdp = _interopRequireDefault(require("sdp"));
var utils = _interopRequireWildcard(require("./utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {
    return;
  }
  var NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (_typeof(args) === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substring(2);
    }
    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      var nativeCandidate = new NativeRTCIceCandidate(args);
      var parsedCandidate = _sdp["default"].parseCandidate(args.candidate);
      for (var key in parsedCandidate) {
        if (!(key in nativeCandidate)) {
          Object.defineProperty(nativeCandidate, key, {
            value: parsedCandidate[key]
          });
        }
      }

      // Override serializer to not serialize the extra attributes.
      nativeCandidate.toJSON = function toJSON() {
        return {
          candidate: nativeCandidate.candidate,
          sdpMid: nativeCandidate.sdpMid,
          sdpMLineIndex: nativeCandidate.sdpMLineIndex,
          usernameFragment: nativeCandidate.usernameFragment
        };
      };
      return nativeCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}
function shimRTCIceCandidateRelayProtocol(window) {
  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'relayProtocol' in window.RTCIceCandidate.prototype) {
    return;
  }

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {
    if (e.candidate) {
      var parsedCandidate = _sdp["default"].parseCandidate(e.candidate.candidate);
      if (parsedCandidate.type === 'relay') {
        // This is a libwebrtc-specific mapping of local type preference
        // to relayProtocol.
        e.candidate.relayProtocol = {
          0: 'tls',
          1: 'tcp',
          2: 'udp'
        }[parsedCandidate.priority >> 24];
      }
    }
    return e;
  });
}
function shimMaxMessageSize(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get: function get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }
  var sctpInDescription = function sctpInDescription(description) {
    if (!description || !description.sdp) {
      return false;
    }
    var sections = _sdp["default"].splitSections(description.sdp);
    sections.shift();
    return sections.some(function (mediaSection) {
      var mLine = _sdp["default"].parseMLine(mediaSection);
      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };
  var getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {
    // TODO: Is there a better solution for detecting Firefox?
    var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    var version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };
  var getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    var canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };
  var getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    var maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }
    var match = _sdp["default"].matchPrefix(description.sdp, 'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substring(19), 10);
    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };
  var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
    this._sctp = null;
    // Chrome decided to not expose .sctp in plan-b mode.
    // As usual, adapter.js has to do an 'ugly worakaround'
    // to cover up the mess.
    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
      var _this$getConfiguratio = this.getConfiguration(),
        sdpSemantics = _this$getConfiguratio.sdpSemantics;
      if (sdpSemantics === 'plan-b') {
        Object.defineProperty(this, 'sctp', {
          get: function get() {
            return typeof this._sctp === 'undefined' ? null : this._sctp;
          },
          enumerable: true,
          configurable: true
        });
      }
    }
    if (sctpInDescription(arguments[0])) {
      // Check if the remote is FF.
      var isFirefox = getRemoteFirefoxVersion(arguments[0]);

      // Get the maximum message size the local peer is capable of sending
      var canSendMMS = getCanSendMaxMessageSize(isFirefox);

      // Get the maximum message size of the remote peer.
      var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

      // Determine final maximum message size
      var maxMessageSize;
      if (canSendMMS === 0 && remoteMMS === 0) {
        maxMessageSize = Number.POSITIVE_INFINITY;
      } else if (canSendMMS === 0 || remoteMMS === 0) {
        maxMessageSize = Math.max(canSendMMS, remoteMMS);
      } else {
        maxMessageSize = Math.min(canSendMMS, remoteMMS);
      }

      // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
      // attribute.
      var sctp = {};
      Object.defineProperty(sctp, 'maxMessageSize', {
        get: function get() {
          return maxMessageSize;
        }
      });
      this._sctp = sctp;
    }
    return origSetRemoteDescription.apply(this, arguments);
  };
}
function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    var origDataChannelSend = dc.send;
    dc.send = function send() {
      var data = arguments[0];
      var length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
    var dataChannel = origCreateDataChannel.apply(this, arguments);
    wrapDcSend(dataChannel, this);
    return dataChannel;
  };
  utils.wrapPeerConnectionEvent(window, 'datachannel', function (e) {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}

/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get: function get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get: function get() {
      return this._onconnectionstatechange || null;
    },
    set: function set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
  ['setLocalDescription', 'setRemoteDescription'].forEach(function (method) {
    var origMethod = proto[method];
    proto[method] = function () {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = function (e) {
          var pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            var newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}
function removeExtmapAllowMixed(window, browserDetails) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      var sdp = desc.sdp.split('\n').filter(function (line) {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
      // Safari enforces read-only-ness of RTCSessionDescription fields.
      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {
        arguments[0] = new window.RTCSessionDescription({
          type: desc.type,
          sdp: sdp
        });
      } else {
        desc.sdp = sdp;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}
function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
  // Support for addIceCandidate(null or undefined)
  // as well as addIceCandidate({candidate: "", ...})
  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
  // Note: must be called before other polyfills which change the signature.
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
    if (!arguments[0]) {
      if (arguments[1]) {
        arguments[1].apply(null);
      }
      return Promise.resolve();
    }
    // Firefox 68+ emits and processes {candidate: "", ...}, ignore
    // in older versions.
    // Native support for ignoring exists for Chrome M77+.
    // Safari ignores as well, exact version unknown but works in the same
    // version that also ignores addIceCandidate(null).
    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {
      return Promise.resolve();
    }
    return nativeAddIceCandidate.apply(this, arguments);
  };
}

// Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length
function shimParameterlessSetLocalDescription(window, browserDetails) {
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  var nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    var _this = this;
    var desc = arguments[0] || {};
    if (_typeof(desc) !== 'object' || desc.type && desc.sdp) {
      return nativeSetLocalDescription.apply(this, arguments);
    }
    // The remaining steps should technically happen when SLD comes off the
    // RTCPeerConnection's operations chain (not ahead of going on it), but
    // this is too difficult to shim. Instead, this shim only covers the
    // common case where the operations chain is empty. This is imperfect, but
    // should cover many cases. Rationale: Even if we can't reduce the glare
    // window to zero on imperfect implementations, there's value in tapping
    // into the perfect negotiation pattern that several browsers support.
    desc = {
      type: desc.type,
      sdp: desc.sdp
    };
    if (!desc.type) {
      switch (this.signalingState) {
        case 'stable':
        case 'have-local-offer':
        case 'have-remote-pranswer':
          desc.type = 'offer';
          break;
        default:
          desc.type = 'answer';
          break;
      }
    }
    if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {
      return nativeSetLocalDescription.apply(this, [desc]);
    }
    var func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
    return func.apply(this).then(function (d) {
      return nativeSetLocalDescription.apply(_this, [d]);
    });
  };
}

},{"./utils":11,"sdp":12}],7:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimAddTransceiver = shimAddTransceiver;
exports.shimCreateAnswer = shimCreateAnswer;
exports.shimCreateOffer = shimCreateOffer;
Object.defineProperty(exports, "shimGetDisplayMedia", {
  enumerable: true,
  get: function get() {
    return _getdisplaymedia.shimGetDisplayMedia;
  }
});
exports.shimGetParameters = shimGetParameters;
Object.defineProperty(exports, "shimGetUserMedia", {
  enumerable: true,
  get: function get() {
    return _getusermedia.shimGetUserMedia;
  }
});
exports.shimOnTrack = shimOnTrack;
exports.shimPeerConnection = shimPeerConnection;
exports.shimRTCDataChannel = shimRTCDataChannel;
exports.shimReceiverGetStats = shimReceiverGetStats;
exports.shimRemoveStream = shimRemoveStream;
exports.shimSenderGetStats = shimSenderGetStats;
var utils = _interopRequireWildcard(require("../utils"));
var _getusermedia = require("./getusermedia");
var _getdisplaymedia = require("./getdisplaymedia");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimOnTrack(window) {
  if (_typeof(window) === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get: function get() {
        return {
          receiver: this.receiver
        };
      }
    });
  }
}
function shimPeerConnection(window, browserDetails) {
  if (_typeof(window) !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }

  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }
  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = _defineProperty({}, method, function () {
        arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      });
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
  var modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };
  var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    var _arguments = Array.prototype.slice.call(arguments),
      selector = _arguments[0],
      onSucc = _arguments[1],
      onErr = _arguments[2];
    return nativeGetStats.apply(this, [selector || null]).then(function (stats) {
      if (browserDetails.version < 53 && !onSucc) {
        // Shim only promise getStats with spec-hyphens in type names
        // Leave callback version alone; misc old uses of forEach before Map
        try {
          stats.forEach(function (stat) {
            stat.type = modernStatsTypes[stat.type] || stat.type;
          });
        } catch (e) {
          if (e.name !== 'TypeError') {
            throw e;
          }
          // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
          stats.forEach(function (stat, i) {
            stats.set(i, Object.assign({}, stat, {
              type: modernStatsTypes[stat.type] || stat.type
            }));
          });
        }
      }
      return stats;
    }).then(onSucc, onErr);
  };
}
function shimSenderGetStats(window) {
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      var _this = this;
      var senders = origGetSenders.apply(this, []);
      senders.forEach(function (sender) {
        return sender._pc = _this;
      });
      return senders;
    };
  }
  var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      var sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
  };
}
function shimReceiverGetStats(window) {
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      var _this2 = this;
      var receivers = origGetReceivers.apply(this, []);
      receivers.forEach(function (receiver) {
        return receiver._pc = _this2;
      });
      return receivers;
    };
  }
  utils.wrapPeerConnectionEvent(window, 'track', function (e) {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}
function shimRemoveStream(window) {
  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    var _this3 = this;
    utils.deprecated('removeStream', 'removeTrack');
    this.getSenders().forEach(function (sender) {
      if (sender.track && stream.getTracks().includes(sender.track)) {
        _this3.removeTrack(sender);
      }
    });
  };
}
function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}
function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
      this.setParametersPromises = [];
      // WebIDL input coercion and validation
      var sendEncodings = arguments[1] && arguments[1].sendEncodings;
      if (sendEncodings === undefined) {
        sendEncodings = [];
      }
      sendEncodings = _toConsumableArray(sendEncodings);
      var shouldPerformCheck = sendEncodings.length > 0;
      if (shouldPerformCheck) {
        // If sendEncodings params are provided, validate grammar
        sendEncodings.forEach(function (encodingParam) {
          if ('rid' in encodingParam) {
            var ridRegex = /^[a-z0-9]{0,16}$/i;
            if (!ridRegex.test(encodingParam.rid)) {
              throw new TypeError('Invalid RID value provided.');
            }
          }
          if ('scaleResolutionDownBy' in encodingParam) {
            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
              throw new RangeError('scale_resolution_down_by must be >= 1.0');
            }
          }
          if ('maxFramerate' in encodingParam) {
            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
              throw new RangeError('max_framerate must be >= 0.0');
            }
          }
        });
      }
      var transceiver = origAddTransceiver.apply(this, arguments);
      if (shouldPerformCheck) {
        // Check if the init options were applied. If not we do this in an
        // asynchronous way and save the promise reference in a global object.
        // This is an ugly hack, but at the same time is way more robust than
        // checking the sender parameters before and after the createOffer
        // Also note that after the createoffer we are not 100% sure that
        // the params were asynchronously applied so we might miss the
        // opportunity to recreate offer.
        var sender = transceiver.sender;
        var params = sender.getParameters();
        if (!('encodings' in params) ||
        // Avoid being fooled by patched getParameters() below.
        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
          params.encodings = sendEncodings;
          sender.sendEncodings = sendEncodings;
          this.setParametersPromises.push(sender.setParameters(params).then(function () {
            delete sender.sendEncodings;
          })["catch"](function () {
            delete sender.sendEncodings;
          }));
        }
      }
      return transceiver;
    };
  }
}
function shimGetParameters(window) {
  if (!(_typeof(window) === 'object' && window.RTCRtpSender)) {
    return;
  }
  var origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters = function getParameters() {
      var params = origGetParameters.apply(this, arguments);
      if (!('encodings' in params)) {
        params.encodings = [].concat(this.sendEncodings || [{}]);
      }
      return params;
    };
  }
}
function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    var _arguments2 = arguments,
      _this4 = this;
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(function () {
        return origCreateOffer.apply(_this4, _arguments2);
      })["finally"](function () {
        _this4.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(_typeof(window) === 'object' && window.RTCPeerConnection)) {
    return;
  }
  var origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    var _arguments3 = arguments,
      _this5 = this;
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(function () {
        return origCreateAnswer.apply(_this5, _arguments3);
      })["finally"](function () {
        _this5.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}

},{"../utils":11,"./getdisplaymedia":8,"./getusermedia":9}],8:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetDisplayMedia = shimGetDisplayMedia;
function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!window.navigator.mediaDevices) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    if (!(constraints && constraints.video)) {
      var err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');
      err.name = 'NotFoundError';
      // from https://heycam.github.io/webidl/#idl-DOMException-error-names
      err.code = 8;
      return Promise.reject(err);
    }
    if (constraints.video === true) {
      constraints.video = {
        mediaSource: preferredMediaSource
      };
    } else {
      constraints.video.mediaSource = preferredMediaSource;
    }
    return window.navigator.mediaDevices.getUserMedia(constraints);
  };
}

},{}],9:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimGetUserMedia = shimGetUserMedia;
var utils = _interopRequireWildcard(require("../utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimGetUserMedia(window, browserDetails) {
  var navigator = window && window.navigator;
  var MediaStreamTrack = window && window.MediaStreamTrack;
  navigator.getUserMedia = function (constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    utils.deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    var remap = function remap(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };
    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function (c) {
      if (_typeof(c) === 'object' && _typeof(c.audio) === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };
    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function () {
        var obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }
    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function (c) {
        if (this.kind === 'audio' && _typeof(c) === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}

},{"../utils":11}],10:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shimAudioContext = shimAudioContext;
exports.shimCallbacksAPI = shimCallbacksAPI;
exports.shimConstraints = shimConstraints;
exports.shimCreateOfferLegacy = shimCreateOfferLegacy;
exports.shimGetUserMedia = shimGetUserMedia;
exports.shimLocalStreamsAPI = shimLocalStreamsAPI;
exports.shimRTCIceServerUrls = shimRTCIceServerUrls;
exports.shimRemoteStreamsAPI = shimRemoteStreamsAPI;
exports.shimTrackEventTransceiver = shimTrackEventTransceiver;
var utils = _interopRequireWildcard(require("../utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function shimLocalStreamsAPI(window) {
  if (_typeof(window) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      return this._localStreams;
    };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    var _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      var _this = this;
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(function (track) {
        return _addTrack.call(_this, track, stream);
      });
      stream.getVideoTracks().forEach(function (track) {
        return _addTrack.call(_this, track, stream);
      });
    };
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
      var _this2 = this;
      for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        streams[_key - 1] = arguments[_key];
      }
      if (streams) {
        streams.forEach(function (stream) {
          if (!_this2._localStreams) {
            _this2._localStreams = [stream];
          } else if (!_this2._localStreams.includes(stream)) {
            _this2._localStreams.push(stream);
          }
        });
      }
      return _addTrack.apply(this, arguments);
    };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      var _this3 = this;
      if (!this._localStreams) {
        this._localStreams = [];
      }
      var index = this._localStreams.indexOf(stream);
      if (index === -1) {
        return;
      }
      this._localStreams.splice(index, 1);
      var tracks = stream.getTracks();
      this.getSenders().forEach(function (sender) {
        if (tracks.includes(sender.track)) {
          _this3.removeTrack(sender);
        }
      });
    };
  }
}
function shimRemoteStreamsAPI(window) {
  if (_typeof(window) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
      return this._remoteStreams ? this._remoteStreams : [];
    };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get: function get() {
        return this._onaddstream;
      },
      set: function set(f) {
        var _this4 = this;
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(function (stream) {
            if (!_this4._remoteStreams) {
              _this4._remoteStreams = [];
            }
            if (_this4._remoteStreams.includes(stream)) {
              return;
            }
            _this4._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            _this4.dispatchEvent(event);
          });
        });
      }
    });
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      var pc = this;
      if (!this._onaddstreampoly) {
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(function (stream) {
            if (!pc._remoteStreams) {
              pc._remoteStreams = [];
            }
            if (pc._remoteStreams.indexOf(stream) >= 0) {
              return;
            }
            pc._remoteStreams.push(stream);
            var event = new Event('addstream');
            event.stream = stream;
            pc.dispatchEvent(event);
          });
        });
      }
      return origSetRemoteDescription.apply(pc, arguments);
    };
  }
}
function shimCallbacksAPI(window) {
  if (_typeof(window) !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  var prototype = window.RTCPeerConnection.prototype;
  var origCreateOffer = prototype.createOffer;
  var origCreateAnswer = prototype.createAnswer;
  var setLocalDescription = prototype.setLocalDescription;
  var setRemoteDescription = prototype.setRemoteDescription;
  var addIceCandidate = prototype.addIceCandidate;
  prototype.createOffer = function createOffer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateOffer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
    var options = arguments.length >= 2 ? arguments[2] : arguments[0];
    var promise = origCreateAnswer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  var withCallback = function withCallback(description, successCallback, failureCallback) {
    var promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;
  withCallback = function withCallback(description, successCallback, failureCallback) {
    var promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;
  withCallback = function withCallback(candidate, successCallback, failureCallback) {
    var promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}
function shimGetUserMedia(window) {
  var navigator = window && window.navigator;
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    var mediaDevices = navigator.mediaDevices;
    var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = function (constraints) {
      return _getUserMedia(shimConstraints(constraints));
    };
  }
  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
    }.bind(navigator);
  }
}
function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({}, constraints, {
      video: utils.compactObject(constraints.video)
    });
  }
  return constraints;
}
function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  var OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
    if (pcConfig && pcConfig.iceServers) {
      var newIceServers = [];
      for (var i = 0; i < pcConfig.iceServers.length; i++) {
        var server = pcConfig.iceServers[i];
        if (server.urls === undefined && server.url) {
          utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
          server = JSON.parse(JSON.stringify(server));
          server.urls = server.url;
          delete server.url;
          newIceServers.push(server);
        } else {
          newIceServers.push(pcConfig.iceServers[i]);
        }
      }
      pcConfig.iceServers = newIceServers;
    }
    return new OrigPeerConnection(pcConfig, pcConstraints);
  };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get: function get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}
function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (_typeof(window) === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get: function get() {
        return {
          receiver: this.receiver
        };
      }
    });
  }
}
function shimCreateOfferLegacy(window) {
  var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
    if (offerOptions) {
      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
      }
      var audioTransceiver = this.getTransceivers().find(function (transceiver) {
        return transceiver.receiver.track.kind === 'audio';
      });
      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
        if (audioTransceiver.direction === 'sendrecv') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('sendonly');
          } else {
            audioTransceiver.direction = 'sendonly';
          }
        } else if (audioTransceiver.direction === 'recvonly') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('inactive');
          } else {
            audioTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
        this.addTransceiver('audio', {
          direction: 'recvonly'
        });
      }
      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
      }
      var videoTransceiver = this.getTransceivers().find(function (transceiver) {
        return transceiver.receiver.track.kind === 'video';
      });
      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
        if (videoTransceiver.direction === 'sendrecv') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('sendonly');
          } else {
            videoTransceiver.direction = 'sendonly';
          }
        } else if (videoTransceiver.direction === 'recvonly') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('inactive');
          } else {
            videoTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
        this.addTransceiver('video', {
          direction: 'recvonly'
        });
      }
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimAudioContext(window) {
  if (_typeof(window) !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}

},{"../utils":11}],11:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactObject = compactObject;
exports.deprecated = deprecated;
exports.detectBrowser = detectBrowser;
exports.disableLog = disableLog;
exports.disableWarnings = disableWarnings;
exports.extractVersion = extractVersion;
exports.filterStats = filterStats;
exports.log = log;
exports.walkStats = walkStats;
exports.wrapPeerConnectionEvent = wrapPeerConnectionEvent;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var logDisabled_ = true;
var deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  var nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    var wrappedCallback = function wrappedCallback(e) {
      var modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
  };
  var nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    var unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap]["delete"](cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
  };
  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get: function get() {
      return this['_on' + eventNameToWrap];
    },
    set: function set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}
function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + _typeof(bool) + '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + _typeof(bool) + '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}
function log() {
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  var result = {
    browser: null,
    version: null
  };

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator || !window.navigator.userAgent) {
    result.browser = 'Not a browser.';
    return result;
  }
  var navigator = window.navigator;
  if (navigator.mozGetUserMedia) {
    // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else {
    // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }
  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }
  return Object.keys(data).reduce(function (accumulator, key) {
    var isObj = isObject(data[key]);
    var value = isObj ? compactObject(data[key]) : data[key];
    var isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, _defineProperty({}, key, value));
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(function (name) {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(function (id) {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  var filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  var trackStats = [];
  result.forEach(function (value) {
    if (value.type === 'track' && value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(function (trackStat) {
    result.forEach(function (stats) {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

},{}],12:[function(require,module,exports){
/* eslint-env node */
'use strict';

// SDP helpers.

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function () {
  return Math.random().toString(36).substring(2, 12);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function (blob) {
  return blob.trim().split('\n').map(function (line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function (blob) {
  var parts = blob.split('\nm=');
  return parts.map(function (part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// Returns the session description.
SDPUtils.getDescription = function (blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function (blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function (blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function (line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function (line) {
  var parts = void 0;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: { 1: 'rtp', 2: 'rtcp' }[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default:
        // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function (candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);

  var component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function (line) {
  return line.substring(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function (line) {
  var parts = line.substring(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function (codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function (line) {
  var parts = line.substring(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
    attributes: parts.slice(2).join(' ')
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function (headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + (headerExtension.attributes ? ' ' + headerExtension.attributes : '') + '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function (line) {
  var parsed = {};
  var kv = void 0;
  var parts = line.substring(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function (codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function (param) {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function (line) {
  var parts = line.substring(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function (codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function (fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function (line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substring(7, sp), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substring(sp + 1, colon);
    parts.value = line.substring(colon + 1);
  } else {
    parts.attribute = line.substring(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function (line) {
  var parts = line.substring(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function (ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function (mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substring(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function (line) {
  var parts = line.substring(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function (params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function (fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function (line) {
  var parts = line.substring(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3)
  };
};

SDPUtils.writeCryptoLine = function (parameters) {
  return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (_typeof(parameters.keyParams) === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function (keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  var parts = keyParams.substring(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined
  };
};

SDPUtils.writeCryptoKeyParams = function (keyParams) {
  return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function (mediaSection, sessionpart) {
  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];
  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substring(12),
    password: pwd.substring(10)
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function (params) {
  var sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' + 'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function (mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  description.profile = mline[2];
  for (var i = 3; i < mline.length; i++) {
    // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default:
          // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function (line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  var wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ').map(SDPUtils.parseRtcpFb);
  description.codecs.forEach(function (codec) {
    wildcardRtcpFb.forEach(function (fb) {
      var duplicate = codec.rtcpFeedback.find(function (existingFeedback) {
        return existingFeedback.type === fb.type && existingFeedback.parameter === fb.parameter;
      });
      if (!duplicate) {
        codec.rtcpFeedback.push(fb);
      }
    });
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function (kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';
  sdp += caps.codecs.map(function (codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function (codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function (codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function (extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function (mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {
    return SDPUtils.parseSsrcMedia(line);
  }).filter(function (parts) {
    return parts.attribute === 'cname';
  });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc = void 0;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(function (line) {
    var parts = line.substring(17).split(' ');
    return parts.map(function (part) {
      return parseInt(part, 10);
    });
  });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function (codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = { ssrc: secondarySsrc };
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substring(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95 - 50 * 40 * 8;
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function (params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function (mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {
    return SDPUtils.parseSsrcMedia(line);
  }).filter(function (obj) {
    return obj.attribute === 'cname';
  })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrÑbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function (rtcpParameters) {
  var sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function (mediaSection) {
  var parts = void 0;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substring(7).split(' ');
    return { stream: parts[0], track: parts[1] };
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {
    return SDPUtils.parseSsrcMedia(line);
  }).filter(function (msidParts) {
    return msidParts.attribute === 'msid';
  });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return { stream: parts[0], track: parts[1] };
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function (mediaSection) {
  var mline = SDPUtils.parseMLine(mediaSection);
  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  var maxMessageSize = void 0;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substring(12), 10),
      protocol: mline.fmt,
      maxMessageSize: maxMessageSize
    };
  }
  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    var parts = sctpMapLines[0].substring(10).split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize: maxMessageSize
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function (media, sctp) {
  var output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctp-port:' + sctp.port + '\r\n'];
  } else {
    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function () {
  return Math.random().toString().substr(2, 22);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {
  var sessionId = void 0;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  var user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\r\n' + 's=-\r\n' + 't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function (mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substring(2);
      default:
      // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function (mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substring(2);
};

SDPUtils.isRejected = function (mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function (mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substring(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function (mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substring(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function (blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
  module.exports = SDPUtils;
}
},{}]},{},[1])(1)
});


/***/ }),

/***/ 26290:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPropertyKey = __webpack_require__(47739);
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 71600:
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 24923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var objectWithoutPropertiesLoose = __webpack_require__(15538);
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 15538:
/***/ ((module) => {

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 68064:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(67425)["default"]);
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 47739:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(67425)["default"]);
var toPrimitive = __webpack_require__(68064);
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : String(i);
}
module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 67425:
/***/ ((module) => {

function _typeof(o) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 84458:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ _extends)
/* harmony export */ });
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(74117);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=webrtc.js.map